{"version":3,"sources":["app.js"],"names":[],"mappingsfile":"bundle.js","sourcesContent":["(function () {\r\n    'use strict';\r\n\r\n    // Enable pusher logging - don't include this in production\r\n    Pusher.logToConsole = true;\r\n\r\n    var resizeAndScrollMessages = function () {\r\n        var $messages = $('.messages');\r\n\r\n        $messages\r\n            .getNiceScroll(0)\r\n            .resize();\r\n        $messages.getNiceScroll(0)\r\n            .doScrollTop(999999, 999);\r\n    };\r\n\r\n    var loadjQueryHandlers = function () {\r\n        $(\".ui .new-message-area\").keypress(function (e) {\r\n            if (e.keyCode === 13 && !e.shiftKey) {\r\n                $('#new-message-form').submit();\r\n                e.preventDefault();\r\n            }\r\n        });\r\n\r\n        $(\".ui .list-friends\").niceScroll({\r\n            autohidemode: false,\r\n            smoothscroll: false,\r\n            cursorcolor: \"#696c75\",\r\n            cursorwidth: \"8px\",\r\n            cursorborder: \"none\"\r\n        });\r\n        $(\".ui .messages\").niceScroll({\r\n            autohidemode: false,\r\n            smoothscroll: false,\r\n            cursorcolor: \"#cdd2d6\",\r\n            cursorwidth: \"8px\",\r\n            cursorborder: \"none\"\r\n        });\r\n    };\r\n\r\n    let appInstance;\r\n    class App {\r\n        constructor() {\r\n            this.user = null;\r\n            this.pusher = null;\r\n        }\r\n\r\n        getUser() {\r\n            return this.user;\r\n        }\r\n\r\n        getPusher() {\r\n            return this.pusher;\r\n        }\r\n\r\n        getApi() {\r\n            return this.user.getApi();\r\n        }\r\n\r\n        init(currentUserData) {\r\n            this.user = new User(currentUserData);\r\n            this.pusher = new Pusher('944b0bdac25cd6df507f', {\r\n                authEndpoint: '/api/v1/pusher/auth',\r\n                auth: {\r\n                    headers: {\r\n                        'Authorization': 'API-TOKEN ' + this.user.api_token\r\n                    }\r\n                },\r\n                encrypted: true\r\n            });\r\n\r\n            Channel.getAll(this.user.getApi()).then((channels) => {\r\n                let channel = channels[0];\r\n\r\n                ko.applyBindings(new ChannelListViewModel(channels), $('#channels')[0]);\r\n\r\n                channel.join();\r\n            });\r\n        }\r\n\r\n        initAuth() {\r\n            var authModal = new AuthModal();\r\n            authModal.show();\r\n\r\n            ko.applyBindings(new LoginViewModel((userData) => {\r\n                authModal.hide();\r\n                this.init(userData);\r\n\r\n            }), $('#login')[0]);\r\n        }\r\n\r\n        static getInstance() {\r\n            if (!appInstance) {\r\n                appInstance = new App();\r\n            }\r\n            return appInstance;\r\n        }\r\n    }\r\n\r\n    var APIv1 = function (currentUser) {\r\n        this.request = function (method, endpoint, data) {\r\n            var url = '/api/v1/' + endpoint;\r\n\r\n            return new Promise(function (resolve, reject) {\r\n                $.ajax({\r\n                        type: method,\r\n                        url: url,\r\n                        headers: {\r\n                            'Authorization': 'API-TOKEN ' + currentUser.api_token\r\n                        },\r\n                        data: data,\r\n                        dataType: 'json'\r\n                    })\r\n                    .done(function(response) {\r\n                        resolve(response);\r\n                    })\r\n                    .fail(function(response) {\r\n                        reject(response);\r\n                    })\r\n                    .always(function (response) {\r\n                        console.log('API Response', url, data, response);\r\n                    });\r\n            });\r\n        };\r\n    };\r\n\r\n    class User {\r\n        constructor(parameters) {\r\n            this.id = parameters.id;\r\n            this.name = parameters.name;\r\n            this.created_at = parameters.created_at;\r\n            this.api_token = parameters.api_token;\r\n        }\r\n\r\n        getApi() {\r\n            return new APIv1(this);\r\n        }\r\n\r\n        publicify() {\r\n            return {\r\n                id: this.id,\r\n                name: this.name,\r\n                created_at: this.created_at\r\n            };\r\n        }\r\n    }\r\n\r\n    class Message {\r\n        constructor(parameters) {\r\n            this.id = parameters.id;\r\n            this.user_id = parameters.user_id;\r\n            this.text = parameters.text;\r\n            this.created_at = parameters.created_at;\r\n\r\n            this.user = new User(parameters.user);\r\n        }\r\n\r\n        isConfirmed() {\r\n            return this.id > -1;\r\n        }\r\n    }\r\n\r\n    class Channel {\r\n        constructor(parameters) {\r\n            this.id = parameters.id;\r\n            this.name = parameters.name;\r\n            this.display_name = parameters.display_name;\r\n            this.created_at = parameters.created_at;\r\n\r\n            // bad... but makes thing cleaner\r\n            let app = App.getInstance();\r\n            this.api = app.getApi();\r\n            this.pusher = app.getPusher();\r\n            this.user = app.getUser();\r\n        }\r\n\r\n        join() {\r\n            this.pusher.unsubscribe(this.name);\r\n            this.pChannel = this.pusher.subscribe(this.name);\r\n\r\n            ko.cleanNode($('#chat')[0]);\r\n            ko.cleanNode($('#users')[0]);\r\n\r\n            loadjQueryHandlers();\r\n\r\n            ko.applyBindings(new ChatViewModel(this, this.user), $('#chat')[0]);\r\n            ko.applyBindings(new UserListViewModel(this), $('#users')[0]);\r\n        }\r\n\r\n        getUrl() {\r\n            return 'channel/' + this.id;\r\n        }\r\n\r\n        getHistory() {\r\n            return new Promise((resolve, reject) => {\r\n                this.api.request('GET', this.getUrl() + '/history').then(\r\n                    (response) => {\r\n                        console.log('Messages', response.data.messages);\r\n\r\n                        let messages = response.data.messages.map((data) => {\r\n                            return new Message(data);\r\n                        });\r\n\r\n                        resolve(messages);\r\n                    },\r\n                    (response) => {\r\n                        reject(response);\r\n                    });\r\n            });\r\n        }\r\n\r\n        sendMessage(text) {\r\n            return new Promise((resolve, reject) => {\r\n                this.api.request('POST', this.getUrl() + '/send-message', {\r\n                    text: text\r\n                }).then(\r\n                    (response) => {\r\n                        resolve(response);\r\n                    },\r\n                    (response) => {\r\n                        reject(response);\r\n                    });\r\n            });\r\n        }\r\n\r\n        bind(event, callback) {\r\n            this.pChannel.bind.call(this.pChannel, event, callback);\r\n        }\r\n\r\n        trigger(event, data) {\r\n            this.pChannel.trigger.call(this.pChannel, event, data);\r\n        }\r\n\r\n        members() {\r\n            return this.pChannel.members;\r\n        }\r\n\r\n        onNewMessage(callback) {\r\n            this.pChannel.bind('new-message', function (data) {\r\n                var user = new User(data.message.user);\r\n                var message = new Message(data.message);\r\n\r\n                callback(user, message);\r\n            });\r\n        }\r\n\r\n        static getAll(api) {\r\n            return new Promise((resolve, reject) => {\r\n                api.request('GET', 'channels').then(\r\n                    (response) => {\r\n                        var channels = response.data.channels.map((data) => {\r\n                            return new Channel(data, api);\r\n                        });\r\n\r\n                        resolve(channels);\r\n                    },\r\n                    (response) => {\r\n                        resolve(response);\r\n                    }\r\n                );\r\n            });\r\n        }\r\n    }\r\n\r\n    var AuthModal = function () {\r\n        var $login = $('#login');\r\n        var $modal = $('#login-modal');\r\n\r\n        this.show = () => {\r\n            $modal.modal({\r\n                backdrop: 'static',\r\n                keyboard: false\r\n            });\r\n        };\r\n\r\n        this.hide = () => {\r\n            $modal.modal('hide');\r\n            $modal.on('hidden.bs.modal', function () {\r\n                $login.remove();\r\n            });\r\n        };\r\n    };\r\n\r\n    var IsUserTypingHandler = function (observableInput, observableUsersTypingCollection, channel, user) {\r\n        var t;\r\n        observableInput.subscribe(function (value) {\r\n            clearTimeout(t);\r\n            t = setTimeout(function () {\r\n                if (value.length > 0) {\r\n                    channel.trigger('client-started-typing', user.publicify());\r\n                } else {\r\n                    channel.trigger('client-stopped-typing', user.publicify());\r\n                }\r\n            }, 500);\r\n        });\r\n\r\n        channel.bind('client-started-typing', function (data) {\r\n            console.log('Started Typing', data);\r\n\r\n            var found = false;\r\n            observableUsersTypingCollection().forEach(function (item) {\r\n                if (!found)\r\n                    found = item.id === data.id;\r\n            });\r\n\r\n            if (!found) {\r\n                observableUsersTypingCollection.push(data);\r\n            }\r\n        });\r\n        channel.bind('client-stopped-typing', function (data) {\r\n            console.log('Stopped Typing', data);\r\n            observableUsersTypingCollection.remove(function (item) {\r\n                return item.id === data.id;\r\n            });\r\n        });\r\n\r\n        // remove user from our list of users typing when they leave the chat\r\n        channel.bind('pusher:member_removed', function (data) {\r\n            self.typing.remove(function (item) {\r\n                return item.id === data.info.id;\r\n            });\r\n        });\r\n    };\r\n\r\n    var UserListViewModel = function (channel) {\r\n        var self = this;\r\n\r\n        this.searchQuery = ko.observable(\"\");\r\n        this.users = ko.observableArray();\r\n\r\n        this.filteredUsers = ko.computed(function () {\r\n            return ko.utils.arrayFilter(self.users(), function (user) {\r\n                return user.name.toLowerCase().indexOf(self.searchQuery()) > -1;\r\n            });\r\n        });\r\n\r\n        this.addUser = function (user) {\r\n            console.log('User Added', user);\r\n            if (self.users().indexOf(user) < 0) {\r\n                self.users.push(user);\r\n            }\r\n        };\r\n\r\n        this.removeUser = function (user) {\r\n            console.log('User Removed', user);\r\n            self.users.remove(user);\r\n        };\r\n\r\n        channel.bind('pusher:subscription_succeeded', function (status) {\r\n            channel.members().each(function (data) {\r\n                self.addUser(data.info);\r\n            });\r\n        });\r\n        channel.bind('pusher:member_added', function (data) {\r\n            self.addUser(data.info);\r\n        });\r\n        channel.bind('pusher:member_removed', function (data) {\r\n            self.removeUser(data.info);\r\n        });\r\n    };\r\n\r\n    var ChannelListViewModel = function (channels) {\r\n        this.channels = ko.observableArray(channels);\r\n    };\r\n\r\n    var ChatViewModel = function (channel, currentUser) {\r\n        var self = this;\r\n\r\n        this.channel = channel;\r\n        this.user = ko.observable(currentUser);\r\n        this.newMessage = ko.observable(\"\");\r\n        this.messages = ko.observableArray([\r\n            //new MessageViewModel(currentUser, currentUser, new Message({\r\n            //    id: -1,\r\n            //    user_id: currentUser.id,\r\n            //    text: 'Test Message (ignore)',\r\n            //    created_at: Date.now(),\r\n            //    user: currentUser\r\n            //}))\r\n        ]);\r\n        this.typing = ko.observableArray();\r\n\r\n        this.isUserTypingHandler = new IsUserTypingHandler(this.newMessage, this.typing, channel, currentUser);\r\n\r\n        this.confirmMessage = function (confirmedMessage) {\r\n            var returnMessageVM;\r\n\r\n            this.messages().some(function (messageVM) {\r\n                returnMessageVM = messageVM;\r\n\r\n                return messageVM.confirmMessage(confirmedMessage);\r\n            });\r\n\r\n            return returnMessageVM;\r\n        };\r\n\r\n        this.receive = function (user, message) {\r\n            // FIXME: compare id instead?\r\n            if (currentUser.name === user.name) {\r\n                return this.confirmMessage(message);\r\n            } else {\r\n                return this.pushMessage(user, message);\r\n            }\r\n        };\r\n\r\n        this.pushMessage = function (user, message) {\r\n            var messageVM = self.messages().length > 0 ? self.messages()[self.messages().length - 1] : null;\r\n\r\n            if (messageVM !== null && messageVM.name() === user.name) {\r\n                messageVM.attachMessage(message);\r\n            } else {\r\n                messageVM = new MessageViewModel(currentUser, user, message);\r\n                this.messages.push(messageVM);\r\n            }\r\n\r\n            resizeAndScrollMessages();\r\n\r\n            return messageVM;\r\n        };\r\n\r\n        this.send = () => {\r\n            if (self.newMessage().length < 1) {\r\n                return;\r\n            }\r\n\r\n            this.channel.sendMessage(self.newMessage());\r\n\r\n            //self.pushMessage(currentUser.name, self.newMessage(), Date.now(), false);\r\n            self.pushMessage(currentUser, new Message({\r\n                id: -1,\r\n                user_id: currentUser.id,\r\n                text: self.newMessage(),\r\n                created_at: Date.now(),\r\n                user: currentUser\r\n            }));\r\n            self.newMessage(\"\");\r\n        };\r\n\r\n        this.channel.getHistory().then(function (messages) {\r\n            messages.forEach(function (message) {\r\n                self.pushMessage(message.user, message);\r\n            });\r\n        });\r\n\r\n        this.channel.onNewMessage((user, message) => {\r\n            this.receive(user, message);\r\n        });\r\n    };\r\n\r\n    var MessageBlock = function (message) {\r\n        var self = this;\r\n\r\n        console.log(message);\r\n\r\n        this.message = ko.observable(message);\r\n\r\n        this.text = ko.computed(function () {\r\n            return self.message().text;\r\n        });\r\n\r\n        this.confirmed = ko.computed(function () {\r\n            return self.message().isConfirmed();\r\n        });\r\n    };\r\n\r\n    var MessageViewModel = function (currentUser, user, message) {\r\n        var self = this;\r\n\r\n        this.timestamp = ko.observable(message.created_at);\r\n        this.name = ko.observable(user.name);\r\n        this.messageBlocks = ko.observableArray([\r\n            new MessageBlock(message)\r\n        ]);\r\n\r\n        this.confirmMessage = function (confirmedMessage) {\r\n            this.messageBlocks().some(function (block) {\r\n                if (!block.confirmed() && block.text() === confirmedMessage.text) {\r\n                    block.message(confirmedMessage);\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n            });\r\n        };\r\n\r\n        this.attachMessage = function (message) {\r\n            this.messageBlocks.push(new MessageBlock(message));\r\n        };\r\n\r\n        this.isMessageLocal = ko.computed(function () {\r\n            return user.name === currentUser.name;\r\n        });\r\n    };\r\n\r\n    var LoginViewModel = function (onAuthSuccess) {\r\n        var self = this;\r\n\r\n        this.name = ko.observable(\"\");\r\n        this.password = ko.observable(\"\");\r\n        this.error = ko.observable(\"\");\r\n        this.authenticating = ko.observable(\"0\");\r\n\r\n        this.login = function () {\r\n            self.setAuthenticating(true);\r\n\r\n            $.ajax({\r\n                    type: \"POST\",\r\n                    url: '/api/v1/user/auth',\r\n                    data: {\r\n                        name: this.name(),\r\n                        password: this.password()\r\n                    },\r\n                    dataType: 'json'\r\n                })\r\n                .done(function(currentUser) {\r\n                    console.log('Login Success', currentUser);\r\n\r\n                    onAuthSuccess(currentUser);\r\n                })\r\n                .fail(function(data) {\r\n                    var error = data.responseJSON.error;\r\n\r\n                    console.log('error', error);\r\n\r\n                    self.error(error.message);\r\n                })\r\n                .always(function (data) {\r\n                    self.setAuthenticating(false);\r\n                });\r\n        };\r\n\r\n        this.setAuthenticating = function (bool) {\r\n            console.log('Authenticating', bool);\r\n            self.authenticating(bool ? \"1\" : \"0\");\r\n        };\r\n\r\n        this.isAuthenticating = ko.computed(function () {\r\n            return self.authenticating() === \"1\";\r\n        });\r\n    };\r\n\r\n    $(function () {\r\n        var uri = URI();\r\n        var app = App.getInstance();\r\n\r\n        if (!uri.hasQuery('skipAuth')) {\r\n            app.initAuth();\r\n        } else {\r\n            app.init({\r\n                id: 3,\r\n                name: 'Chad',\r\n                api_token: 'yXwSG6DbNCzPhQ=='\r\n            });\r\n        }\r\n    });\r\n\r\n}).call(this);"],"sourceRoot":"/source/"}