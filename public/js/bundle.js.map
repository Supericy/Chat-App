{"version":3,"sources":["app.js"],"names":[],"mappingsfile":"bundle.js","sourcesContent":["(function () {\r\n\r\n    // Enable pusher logging - don't include this in production\r\n    Pusher.logToConsole = true;\r\n\r\n    var publicifyUser = function (user) {\r\n        return {\r\n            id: user.id,\r\n            name: user.name\r\n        };\r\n    };\r\n\r\n    var resizeAndScrollMessages = function () {\r\n        var $messages = $('.messages');\r\n\r\n        $messages\r\n            .getNiceScroll(0)\r\n            .resize();\r\n        $messages.getNiceScroll(0)\r\n            .doScrollTop(999999, 999);\r\n    };\r\n\r\n    var User = function (parameters) {\r\n        this.id = parameters.id;\r\n        this.name = parameters.name;\r\n        this.created_at = parameters.created_at;\r\n        this.api_token = parameters.api_token;\r\n    };\r\n\r\n    var Message = function (parameters, confirmed) {\r\n        this.id = parameters.id;\r\n        this.user_id = parameters.user_id;\r\n        this.text = parameters.text;\r\n        this.created_at = parameters.created_at;\r\n        this.confirmed = confirmed || false;\r\n    };\r\n\r\n    var App = function () {\r\n        var self = this;\r\n\r\n        this.init = function (currentUser) {\r\n            self.user = currentUser;\r\n            self.pusher = new Pusher('944b0bdac25cd6df507f', {\r\n                authEndpoint: '/api/v1/pusher/auth',\r\n                auth: {\r\n                    headers: {\r\n                        'Authorization': 'API-TOKEN ' + currentUser.api_token\r\n                    }\r\n                },\r\n                encrypted: true\r\n            });\r\n\r\n            var channel = self.pusher.subscribe('presence-general');\r\n\r\n            //ko.applyBindings(function () {}, $('#ko-container')[0]);\r\n            ko.applyBindings(new ChannelListViewModel(channel), $('#channels')[0]);\r\n            ko.applyBindings(new ChatViewModel(channel, currentUser), $('#chat')[0]);\r\n            ko.applyBindings(new UserListViewModel(channel), $('#users')[0]);\r\n        };\r\n\r\n        this.initAuth = function () {\r\n            var authModal = new AuthModal();\r\n            authModal.show();\r\n\r\n            ko.applyBindings(new LoginViewModel(function (user) {\r\n                authModal.hide();\r\n                self.init(user);\r\n\r\n            }), $('#login')[0]);\r\n        };\r\n    };\r\n\r\n    var AuthModal = function () {\r\n        var $login = $('#login');\r\n        var $modal = $('#login-modal');\r\n\r\n        this.show = function () {\r\n            $modal.modal({\r\n                backdrop: 'static',\r\n                keyboard: false\r\n            });\r\n        };\r\n\r\n        this.hide = function () {\r\n            $modal.modal('hide');\r\n            $modal.on('hidden.bs.modal', function () {\r\n                $login.remove();\r\n            });\r\n        };\r\n    };\r\n\r\n    var UserListViewModel = function (channel) {\r\n        var self = this;\r\n\r\n        this.searchQuery = ko.observable(\"\");\r\n        this.users = ko.observableArray();\r\n\r\n        this.filteredUsers = ko.computed(function () {\r\n            return ko.utils.arrayFilter(self.users(), function (user) {\r\n                return user.name.toLowerCase().indexOf(self.searchQuery()) > -1;\r\n            });\r\n        });\r\n\r\n        this.addUser = function (user) {\r\n            console.log('User Added', user);\r\n            if (self.users().indexOf(user) < 0) {\r\n                self.users.push(user);\r\n            }\r\n        };\r\n\r\n        this.removeUser = function (user) {\r\n            console.log('User Removed', user);\r\n            self.users.remove(user);\r\n        };\r\n\r\n        channel.bind('pusher:subscription_succeeded', function (status) {\r\n            channel.members.each(function (data) {\r\n                self.addUser(data.info);\r\n            });\r\n        });\r\n        channel.bind('pusher:member_added', function (data) {\r\n            self.addUser(data.info);\r\n        });\r\n        channel.bind('pusher:member_removed', function (data) {\r\n            self.removeUser(data.info);\r\n        });\r\n    };\r\n\r\n    var ChannelListViewModel = function (channel) {\r\n        var self = this;\r\n\r\n        this.channels = ko.observableArray([\r\n            {name: 'General'},\r\n            {name: 'Test Channel'}\r\n        ]);\r\n    };\r\n\r\n    var ChatViewModel = function (channel, currentUser) {\r\n        var self = this;\r\n\r\n        this.user = ko.observable(currentUser);\r\n        this.newMessage = ko.observable(\"\");\r\n        this.messages = ko.observableArray([\r\n            new MessageViewModel(currentUser, currentUser, new Message({\r\n                id: -1,\r\n                user_id: currentUser.id,\r\n                text: 'Test Message (ignore)',\r\n                created_at: Date.now()\r\n            }), true)\r\n        ]);\r\n        this.typing = ko.observableArray();\r\n\r\n        this.confirmMessage = function (confirmedMessage) {\r\n            var returnMessageVM;\r\n\r\n            this.messages().some(function (messageVM) {\r\n                returnMessageVM = messageVM;\r\n\r\n                return messageVM.confirmMessage(confirmedMessage);\r\n            });\r\n\r\n            return returnMessageVM;\r\n        };\r\n\r\n        this.receive = function (user, message) {\r\n            // FIXME: compare id instead?\r\n            if (currentUser.name === user.name) {\r\n                return this.confirmMessage(message);\r\n            } else {\r\n                return this.pushMessage(user, message, true);\r\n            }\r\n        };\r\n\r\n        this.pushMessage = function (user, message, confirmed) {\r\n            var messageVM = self.messages()[self.messages().length - 1];\r\n\r\n            if (messageVM.name() === user.name) {\r\n                messageVM.attachMessage(message, confirmed);\r\n            } else {\r\n                messageVM = new MessageViewModel(currentUser, user, message, confirmed);\r\n                this.messages.push(messageVM);\r\n            }\r\n\r\n            resizeAndScrollMessages();\r\n\r\n            return messageVM;\r\n        };\r\n\r\n        this.send = function () {\r\n            if (self.newMessage().length < 1) {\r\n                return;\r\n            }\r\n\r\n            $.ajax({\r\n                    type: \"POST\",\r\n                    url: '/api/v1/chat/send',\r\n                    headers: {\r\n                        'Authorization': 'API-TOKEN ' + currentUser.api_token\r\n                    },\r\n                    data: {\r\n                        text: self.newMessage()\r\n                    },\r\n                    dataType: 'json'\r\n                })\r\n                .done(function(data) {\r\n                    //console.log('Send Response', data);\r\n                })\r\n                .fail(function(data) {\r\n                    console.log('Send Failed', data);\r\n                    var error = data.responseJSON.error;\r\n\r\n                    console.log('error', error);\r\n                    //self.error(error.message);\r\n                    alert(error.message);\r\n\r\n                    // TODO: remove message that was appended locally\r\n                })\r\n                .always(function () {\r\n\r\n                });\r\n\r\n            //self.pushMessage(currentUser.name, self.newMessage(), Date.now(), false);\r\n            self.pushMessage(currentUser, new Message({\r\n                id: -1,\r\n                user_id: currentUser.id,\r\n                text: self.newMessage(),\r\n                created_at: Date.now()\r\n            }), false);\r\n            self.newMessage(\"\");\r\n        };\r\n\r\n        $.ajax({\r\n                type: \"GET\",\r\n                url: '/api/v1/chat/history',\r\n                headers: {\r\n                    'Authorization': 'API-TOKEN ' + currentUser.api_token\r\n                },\r\n                data: {\r\n                    channel: channel.name\r\n                },\r\n                dataType: 'json'\r\n            })\r\n            .done(function(response) {\r\n                console.log('Channel History', response);\r\n\r\n                response.data.messages.forEach(function (v) {\r\n                    var user = new User(v.user);\r\n                    var message = new Message(v, true);\r\n\r\n                    self.pushMessage(user, message, true);\r\n                });\r\n            })\r\n            .fail(function(data) {\r\n                console.log('Send Failed', data);\r\n                var error = data.responseJSON.error;\r\n\r\n                console.log('error', error);\r\n                //self.error(error.message);\r\n                alert(error.message);\r\n\r\n                // TODO: remove message that was appended locally\r\n            })\r\n            .always(function () {\r\n\r\n            });\r\n\r\n        var t;\r\n        this.newMessage.subscribe(function (value) {\r\n            clearTimeout(t);\r\n            t = setTimeout(function () {\r\n                if (value.length > 0) {\r\n                    channel.trigger('client-started-typing', publicifyUser(currentUser));\r\n                } else {\r\n                    channel.trigger('client-stopped-typing', publicifyUser(currentUser));\r\n                }\r\n            }, 500);\r\n        });\r\n\r\n        channel.bind('message-new', function (data) {\r\n            console.log('New Message Received', data);\r\n            var user = new User(data.message.user);\r\n            var message = new Message(data.message, true);\r\n\r\n            //self.receive(data.name, data.message, data.timestamp * 1000);\r\n            self.receive(user, message);\r\n        });\r\n        channel.bind('client-started-typing', function (data) {\r\n            console.log('Started Typing', data);\r\n\r\n            var found = false;\r\n            self.typing().forEach(function (item) {\r\n                if (!found)\r\n                    found = item.id === data.id;\r\n            });\r\n\r\n            if (!found) {\r\n                self.typing.push(data);\r\n            }\r\n        });\r\n        channel.bind('client-stopped-typing', function (data) {\r\n            console.log('Stopped Typing', data);\r\n            self.typing.remove(function (item) {\r\n                return item.id === data.id;\r\n            });\r\n        });\r\n        channel.bind('pusher:member_removed', function (data) {\r\n            self.typing.remove(function (item) {\r\n                return item.id === data.info.id;\r\n            });\r\n        });\r\n    };\r\n\r\n    var MessageBlock = function (text, confirmed) {\r\n        var self = this;\r\n\r\n        this.text = ko.observable(text);\r\n        this.confirmed = ko.observable(confirmed ? \"1\" : \"0\");\r\n\r\n        this.setMessageConfirmed = function (bool) {\r\n            self.confirmed(bool ? \"1\" : \"0\");\r\n        };\r\n\r\n        this.isMessageConfirmed = ko.computed(function () {\r\n            return self.confirmed() === \"1\";\r\n        });\r\n    };\r\n\r\n    var MessageViewModel = function (currentUser, user, message, confirmed) {\r\n        var self = this;\r\n\r\n        //console.log('New MessageViewModel', user, message);\r\n\r\n        this.timestamp = ko.observable(message.created_at);\r\n        this.name = ko.observable(user.name);\r\n        this.messageBlocks = ko.observableArray([\r\n            new MessageBlock(message.text, confirmed)\r\n        ]);\r\n\r\n        this.confirmMessage = function (confirmedMessage) {\r\n            this.messageBlocks().some(function (block) {\r\n                if (!block.isMessageConfirmed() && block.text() === confirmedMessage.text) {\r\n                    block.setMessageConfirmed(true);\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n            });\r\n        };\r\n\r\n        this.attachMessage = function (message, confirmed) {\r\n            this.messageBlocks.push(new MessageBlock(message.text, confirmed));\r\n        };\r\n\r\n        this.isMessageLocal = ko.computed(function () {\r\n            return user.name === currentUser.name;\r\n        });\r\n    };\r\n\r\n    var LoginViewModel = function (onAuthSuccess) {\r\n        var self = this;\r\n\r\n        this.name = ko.observable(\"\");\r\n        this.password = ko.observable(\"\");\r\n        this.error = ko.observable(\"\");\r\n        this.authenticating = ko.observable(\"0\");\r\n\r\n        this.login = function () {\r\n            self.setAuthenticating(true);\r\n\r\n            $.ajax({\r\n                    type: \"POST\",\r\n                    url: '/api/v1/user/auth',\r\n                    data: {\r\n                        name: this.name(),\r\n                        password: this.password()\r\n                    },\r\n                    dataType: 'json'\r\n                })\r\n                .done(function(currentUser) {\r\n                    console.log('Login Success', currentUser);\r\n\r\n                    onAuthSuccess(currentUser);\r\n                })\r\n                .fail(function(data) {\r\n                    var error = data.responseJSON.error;\r\n\r\n                    console.log('error', error);\r\n\r\n                    self.error(error.message);\r\n                })\r\n                .always(function (data) {\r\n                    self.setAuthenticating(false);\r\n                });\r\n        };\r\n\r\n        this.setAuthenticating = function (bool) {\r\n            console.log('Authenticating', bool);\r\n            self.authenticating(bool ? \"1\" : \"0\");\r\n        };\r\n\r\n        this.isAuthenticating = ko.computed(function () {\r\n            return self.authenticating() === \"1\";\r\n        });\r\n    };\r\n\r\n    $(function () {\r\n        $(\".ui .list-friends\").niceScroll({\r\n            autohidemode: false,\r\n            smoothscroll: false,\r\n            cursorcolor: \"#696c75\",\r\n            cursorwidth: \"8px\",\r\n            cursorborder: \"none\"\r\n        });\r\n        $(\".ui .messages\").niceScroll({\r\n            autohidemode: false,\r\n            smoothscroll: false,\r\n            cursorcolor: \"#cdd2d6\",\r\n            cursorwidth: \"8px\",\r\n            cursorborder: \"none\"\r\n        });\r\n\r\n        $(\".ui .new-message-area\").keypress(function (e) {\r\n            if (e.keyCode === 13 && !e.shiftKey) {\r\n                $('#new-message-form').submit();\r\n                e.preventDefault();\r\n            }\r\n        });\r\n\r\n\r\n        var uri = URI();\r\n        var app = new App();\r\n\r\n        if (!uri.hasQuery('skipAuth')) {\r\n            app.initAuth();\r\n        } else {\r\n            app.init({\r\n                id: 3,\r\n                name: 'Chad',\r\n                api_token: 'yXwSG6DbNCzPhQ=='\r\n            });\r\n        }\r\n    });\r\n\r\n}).call(this);"],"sourceRoot":"/source/"}