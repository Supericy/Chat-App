{"modules":{"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\node_modules\\jquery\\dist\\jquery.js":{"file":"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\node_modules\\jquery\\dist\\jquery.js","source":"\"use strict\";\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\n/*eslint-disable no-unused-vars*/\n/*!\n * jQuery JavaScript Library v3.1.0\n * https://jquery.com/\n *\n * Includes Sizzle.js\n * https://sizzlejs.com/\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license\n * https://jquery.org/license\n *\n * Date: 2016-07-07T21:44Z\n */\n(function (global, factory) {\n\n\t\"use strict\";\n\n\tif ((typeof module === \"undefined\" ? \"undefined\" : _typeof(module)) === \"object\" && _typeof(module.exports) === \"object\") {\n\n\t\t// For CommonJS and CommonJS-like environments where a proper `window`\n\t\t// is present, execute the factory and get jQuery.\n\t\t// For environments that do not have a `window` with a `document`\n\t\t// (such as Node.js), expose a factory as module.exports.\n\t\t// This accentuates the need for the creation of a real `window`.\n\t\t// e.g. var jQuery = require(\"jquery\")(window);\n\t\t// See ticket #14549 for more info.\n\t\tmodule.exports = global.document ? factory(global, true) : function (w) {\n\t\t\tif (!w.document) {\n\t\t\t\tthrow new Error(\"jQuery requires a window with a document\");\n\t\t\t}\n\t\t\treturn factory(w);\n\t\t};\n\t} else {\n\t\tfactory(global);\n\t}\n\n\t// Pass this if window is not defined yet\n})(typeof window !== \"undefined\" ? window : undefined, function (window, noGlobal) {\n\n\t// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1\n\t// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode\n\t// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common\n\t// enough that all such attempts are guarded in a try block.\n\t\"use strict\";\n\n\tvar arr = [];\n\n\tvar document = window.document;\n\n\tvar getProto = Object.getPrototypeOf;\n\n\tvar _slice = arr.slice;\n\n\tvar concat = arr.concat;\n\n\tvar push = arr.push;\n\n\tvar indexOf = arr.indexOf;\n\n\tvar class2type = {};\n\n\tvar toString = class2type.toString;\n\n\tvar hasOwn = class2type.hasOwnProperty;\n\n\tvar fnToString = hasOwn.toString;\n\n\tvar ObjectFunctionString = fnToString.call(Object);\n\n\tvar support = {};\n\n\tfunction DOMEval(code, doc) {\n\t\tdoc = doc || document;\n\n\t\tvar script = doc.createElement(\"script\");\n\n\t\tscript.text = code;\n\t\tdoc.head.appendChild(script).parentNode.removeChild(script);\n\t}\n\t/* global Symbol */\n\t// Defining this global in .eslintrc would create a danger of using the global\n\t// unguarded in another place, it seems safer to define global only for this module\n\n\n\tvar version = \"3.1.0\",\n\n\n\t// Define a local copy of jQuery\n\tjQuery = function jQuery(selector, context) {\n\n\t\t// The jQuery object is actually just the init constructor 'enhanced'\n\t\t// Need init if jQuery is called (just allow error to be thrown if not included)\n\t\treturn new jQuery.fn.init(selector, context);\n\t},\n\n\n\t// Support: Android <=4.0 only\n\t// Make sure we trim BOM and NBSP\n\trtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,\n\n\n\t// Matches dashed string for camelizing\n\trmsPrefix = /^-ms-/,\n\t    rdashAlpha = /-([a-z])/g,\n\n\n\t// Used by jQuery.camelCase as callback to replace()\n\tfcamelCase = function fcamelCase(all, letter) {\n\t\treturn letter.toUpperCase();\n\t};\n\n\tjQuery.fn = jQuery.prototype = {\n\n\t\t// The current version of jQuery being used\n\t\tjquery: version,\n\n\t\tconstructor: jQuery,\n\n\t\t// The default length of a jQuery object is 0\n\t\tlength: 0,\n\n\t\ttoArray: function toArray() {\n\t\t\treturn _slice.call(this);\n\t\t},\n\n\t\t// Get the Nth element in the matched element set OR\n\t\t// Get the whole matched element set as a clean array\n\t\tget: function get(num) {\n\t\t\treturn num != null ?\n\n\t\t\t// Return just the one element from the set\n\t\t\tnum < 0 ? this[num + this.length] : this[num] :\n\n\t\t\t// Return all the elements in a clean array\n\t\t\t_slice.call(this);\n\t\t},\n\n\t\t// Take an array of elements and push it onto the stack\n\t\t// (returning the new matched element set)\n\t\tpushStack: function pushStack(elems) {\n\n\t\t\t// Build a new jQuery matched element set\n\t\t\tvar ret = jQuery.merge(this.constructor(), elems);\n\n\t\t\t// Add the old object onto the stack (as a reference)\n\t\t\tret.prevObject = this;\n\n\t\t\t// Return the newly-formed element set\n\t\t\treturn ret;\n\t\t},\n\n\t\t// Execute a callback for every element in the matched set.\n\t\teach: function each(callback) {\n\t\t\treturn jQuery.each(this, callback);\n\t\t},\n\n\t\tmap: function map(callback) {\n\t\t\treturn this.pushStack(jQuery.map(this, function (elem, i) {\n\t\t\t\treturn callback.call(elem, i, elem);\n\t\t\t}));\n\t\t},\n\n\t\tslice: function slice() {\n\t\t\treturn this.pushStack(_slice.apply(this, arguments));\n\t\t},\n\n\t\tfirst: function first() {\n\t\t\treturn this.eq(0);\n\t\t},\n\n\t\tlast: function last() {\n\t\t\treturn this.eq(-1);\n\t\t},\n\n\t\teq: function eq(i) {\n\t\t\tvar len = this.length,\n\t\t\t    j = +i + (i < 0 ? len : 0);\n\t\t\treturn this.pushStack(j >= 0 && j < len ? [this[j]] : []);\n\t\t},\n\n\t\tend: function end() {\n\t\t\treturn this.prevObject || this.constructor();\n\t\t},\n\n\t\t// For internal use only.\n\t\t// Behaves like an Array's method, not like a jQuery method.\n\t\tpush: push,\n\t\tsort: arr.sort,\n\t\tsplice: arr.splice\n\t};\n\n\tjQuery.extend = jQuery.fn.extend = function () {\n\t\tvar options,\n\t\t    name,\n\t\t    src,\n\t\t    copy,\n\t\t    copyIsArray,\n\t\t    clone,\n\t\t    target = arguments[0] || {},\n\t\t    i = 1,\n\t\t    length = arguments.length,\n\t\t    deep = false;\n\n\t\t// Handle a deep copy situation\n\t\tif (typeof target === \"boolean\") {\n\t\t\tdeep = target;\n\n\t\t\t// Skip the boolean and the target\n\t\t\ttarget = arguments[i] || {};\n\t\t\ti++;\n\t\t}\n\n\t\t// Handle case when target is a string or something (possible in deep copy)\n\t\tif ((typeof target === \"undefined\" ? \"undefined\" : _typeof(target)) !== \"object\" && !jQuery.isFunction(target)) {\n\t\t\ttarget = {};\n\t\t}\n\n\t\t// Extend jQuery itself if only one argument is passed\n\t\tif (i === length) {\n\t\t\ttarget = this;\n\t\t\ti--;\n\t\t}\n\n\t\tfor (; i < length; i++) {\n\n\t\t\t// Only deal with non-null/undefined values\n\t\t\tif ((options = arguments[i]) != null) {\n\n\t\t\t\t// Extend the base object\n\t\t\t\tfor (name in options) {\n\t\t\t\t\tsrc = target[name];\n\t\t\t\t\tcopy = options[name];\n\n\t\t\t\t\t// Prevent never-ending loop\n\t\t\t\t\tif (target === copy) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {\n\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && jQuery.isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && jQuery.isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\ttarget[name] = jQuery.extend(deep, clone, copy);\n\n\t\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (copy !== undefined) {\n\t\t\t\t\t\ttarget[name] = copy;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Return the modified object\n\t\treturn target;\n\t};\n\n\tjQuery.extend({\n\n\t\t// Unique for each copy of jQuery on the page\n\t\texpando: \"jQuery\" + (version + Math.random()).replace(/\\D/g, \"\"),\n\n\t\t// Assume jQuery is ready without the ready module\n\t\tisReady: true,\n\n\t\terror: function error(msg) {\n\t\t\tthrow new Error(msg);\n\t\t},\n\n\t\tnoop: function noop() {},\n\n\t\tisFunction: function isFunction(obj) {\n\t\t\treturn jQuery.type(obj) === \"function\";\n\t\t},\n\n\t\tisArray: Array.isArray,\n\n\t\tisWindow: function isWindow(obj) {\n\t\t\treturn obj != null && obj === obj.window;\n\t\t},\n\n\t\tisNumeric: function isNumeric(obj) {\n\n\t\t\t// As of jQuery 3.0, isNumeric is limited to\n\t\t\t// strings and numbers (primitives or objects)\n\t\t\t// that can be coerced to finite numbers (gh-2662)\n\t\t\tvar type = jQuery.type(obj);\n\t\t\treturn (type === \"number\" || type === \"string\") &&\n\n\t\t\t// parseFloat NaNs numeric-cast false positives (\"\")\n\t\t\t// ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n\t\t\t// subtraction forces infinities to NaN\n\t\t\t!isNaN(obj - parseFloat(obj));\n\t\t},\n\n\t\tisPlainObject: function isPlainObject(obj) {\n\t\t\tvar proto, Ctor;\n\n\t\t\t// Detect obvious negatives\n\t\t\t// Use toString instead of jQuery.type to catch host objects\n\t\t\tif (!obj || toString.call(obj) !== \"[object Object]\") {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tproto = getProto(obj);\n\n\t\t\t// Objects with no prototype (e.g., `Object.create( null )`) are plain\n\t\t\tif (!proto) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// Objects with prototype are plain iff they were constructed by a global Object function\n\t\t\tCtor = hasOwn.call(proto, \"constructor\") && proto.constructor;\n\t\t\treturn typeof Ctor === \"function\" && fnToString.call(Ctor) === ObjectFunctionString;\n\t\t},\n\n\t\tisEmptyObject: function isEmptyObject(obj) {\n\n\t\t\t/* eslint-disable no-unused-vars */\n\t\t\t// See https://github.com/eslint/eslint/issues/6125\n\t\t\tvar name;\n\n\t\t\tfor (name in obj) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\n\t\ttype: function type(obj) {\n\t\t\tif (obj == null) {\n\t\t\t\treturn obj + \"\";\n\t\t\t}\n\n\t\t\t// Support: Android <=2.3 only (functionish RegExp)\n\t\t\treturn (typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj)) === \"object\" || typeof obj === \"function\" ? class2type[toString.call(obj)] || \"object\" : typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj);\n\t\t},\n\n\t\t// Evaluates a script in a global context\n\t\tglobalEval: function globalEval(code) {\n\t\t\tDOMEval(code);\n\t\t},\n\n\t\t// Convert dashed to camelCase; used by the css and data modules\n\t\t// Support: IE <=9 - 11, Edge 12 - 13\n\t\t// Microsoft forgot to hump their vendor prefix (#9572)\n\t\tcamelCase: function camelCase(string) {\n\t\t\treturn string.replace(rmsPrefix, \"ms-\").replace(rdashAlpha, fcamelCase);\n\t\t},\n\n\t\tnodeName: function nodeName(elem, name) {\n\t\t\treturn elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n\t\t},\n\n\t\teach: function each(obj, callback) {\n\t\t\tvar length,\n\t\t\t    i = 0;\n\n\t\t\tif (isArrayLike(obj)) {\n\t\t\t\tlength = obj.length;\n\t\t\t\tfor (; i < length; i++) {\n\t\t\t\t\tif (callback.call(obj[i], i, obj[i]) === false) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor (i in obj) {\n\t\t\t\t\tif (callback.call(obj[i], i, obj[i]) === false) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn obj;\n\t\t},\n\n\t\t// Support: Android <=4.0 only\n\t\ttrim: function trim(text) {\n\t\t\treturn text == null ? \"\" : (text + \"\").replace(rtrim, \"\");\n\t\t},\n\n\t\t// results is for internal usage only\n\t\tmakeArray: function makeArray(arr, results) {\n\t\t\tvar ret = results || [];\n\n\t\t\tif (arr != null) {\n\t\t\t\tif (isArrayLike(Object(arr))) {\n\t\t\t\t\tjQuery.merge(ret, typeof arr === \"string\" ? [arr] : arr);\n\t\t\t\t} else {\n\t\t\t\t\tpush.call(ret, arr);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn ret;\n\t\t},\n\n\t\tinArray: function inArray(elem, arr, i) {\n\t\t\treturn arr == null ? -1 : indexOf.call(arr, elem, i);\n\t\t},\n\n\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\tmerge: function merge(first, second) {\n\t\t\tvar len = +second.length,\n\t\t\t    j = 0,\n\t\t\t    i = first.length;\n\n\t\t\tfor (; j < len; j++) {\n\t\t\t\tfirst[i++] = second[j];\n\t\t\t}\n\n\t\t\tfirst.length = i;\n\n\t\t\treturn first;\n\t\t},\n\n\t\tgrep: function grep(elems, callback, invert) {\n\t\t\tvar callbackInverse,\n\t\t\t    matches = [],\n\t\t\t    i = 0,\n\t\t\t    length = elems.length,\n\t\t\t    callbackExpect = !invert;\n\n\t\t\t// Go through the array, only saving the items\n\t\t\t// that pass the validator function\n\t\t\tfor (; i < length; i++) {\n\t\t\t\tcallbackInverse = !callback(elems[i], i);\n\t\t\t\tif (callbackInverse !== callbackExpect) {\n\t\t\t\t\tmatches.push(elems[i]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn matches;\n\t\t},\n\n\t\t// arg is for internal usage only\n\t\tmap: function map(elems, callback, arg) {\n\t\t\tvar length,\n\t\t\t    value,\n\t\t\t    i = 0,\n\t\t\t    ret = [];\n\n\t\t\t// Go through the array, translating each of the items to their new values\n\t\t\tif (isArrayLike(elems)) {\n\t\t\t\tlength = elems.length;\n\t\t\t\tfor (; i < length; i++) {\n\t\t\t\t\tvalue = callback(elems[i], i, arg);\n\n\t\t\t\t\tif (value != null) {\n\t\t\t\t\t\tret.push(value);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Go through every key on the object,\n\t\t\t} else {\n\t\t\t\tfor (i in elems) {\n\t\t\t\t\tvalue = callback(elems[i], i, arg);\n\n\t\t\t\t\tif (value != null) {\n\t\t\t\t\t\tret.push(value);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Flatten any nested arrays\n\t\t\treturn concat.apply([], ret);\n\t\t},\n\n\t\t// A global GUID counter for objects\n\t\tguid: 1,\n\n\t\t// Bind a function to a context, optionally partially applying any\n\t\t// arguments.\n\t\tproxy: function proxy(fn, context) {\n\t\t\tvar tmp, args, proxy;\n\n\t\t\tif (typeof context === \"string\") {\n\t\t\t\ttmp = fn[context];\n\t\t\t\tcontext = fn;\n\t\t\t\tfn = tmp;\n\t\t\t}\n\n\t\t\t// Quick check to determine if target is callable, in the spec\n\t\t\t// this throws a TypeError, but we will just return undefined.\n\t\t\tif (!jQuery.isFunction(fn)) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\t// Simulated bind\n\t\t\targs = _slice.call(arguments, 2);\n\t\t\tproxy = function proxy() {\n\t\t\t\treturn fn.apply(context || this, args.concat(_slice.call(arguments)));\n\t\t\t};\n\n\t\t\t// Set the guid of unique handler to the same of original handler, so it can be removed\n\t\t\tproxy.guid = fn.guid = fn.guid || jQuery.guid++;\n\n\t\t\treturn proxy;\n\t\t},\n\n\t\tnow: Date.now,\n\n\t\t// jQuery.support is not used in Core but other projects attach their\n\t\t// properties to it so it needs to exist.\n\t\tsupport: support\n\t});\n\n\tif (typeof Symbol === \"function\") {\n\t\tjQuery.fn[Symbol.iterator] = arr[Symbol.iterator];\n\t}\n\n\t// Populate the class2type map\n\tjQuery.each(\"Boolean Number String Function Array Date RegExp Object Error Symbol\".split(\" \"), function (i, name) {\n\t\tclass2type[\"[object \" + name + \"]\"] = name.toLowerCase();\n\t});\n\n\tfunction isArrayLike(obj) {\n\n\t\t// Support: real iOS 8.2 only (not reproducible in simulator)\n\t\t// `in` check used to prevent JIT error (gh-2145)\n\t\t// hasOwn isn't used here due to false negatives\n\t\t// regarding Nodelist length in IE\n\t\tvar length = !!obj && \"length\" in obj && obj.length,\n\t\t    type = jQuery.type(obj);\n\n\t\tif (type === \"function\" || jQuery.isWindow(obj)) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn type === \"array\" || length === 0 || typeof length === \"number\" && length > 0 && length - 1 in obj;\n\t}\n\tvar Sizzle =\n\t/*!\n  * Sizzle CSS Selector Engine v2.3.0\n  * https://sizzlejs.com/\n  *\n  * Copyright jQuery Foundation and other contributors\n  * Released under the MIT license\n  * http://jquery.org/license\n  *\n  * Date: 2016-01-04\n  */\n\tfunction (window) {\n\n\t\tvar i,\n\t\t    support,\n\t\t    Expr,\n\t\t    getText,\n\t\t    isXML,\n\t\t    tokenize,\n\t\t    compile,\n\t\t    select,\n\t\t    outermostContext,\n\t\t    sortInput,\n\t\t    hasDuplicate,\n\n\n\t\t// Local document vars\n\t\tsetDocument,\n\t\t    document,\n\t\t    docElem,\n\t\t    documentIsHTML,\n\t\t    rbuggyQSA,\n\t\t    rbuggyMatches,\n\t\t    matches,\n\t\t    contains,\n\n\n\t\t// Instance-specific data\n\t\texpando = \"sizzle\" + 1 * new Date(),\n\t\t    preferredDoc = window.document,\n\t\t    dirruns = 0,\n\t\t    done = 0,\n\t\t    classCache = createCache(),\n\t\t    tokenCache = createCache(),\n\t\t    compilerCache = createCache(),\n\t\t    sortOrder = function sortOrder(a, b) {\n\t\t\tif (a === b) {\n\t\t\t\thasDuplicate = true;\n\t\t\t}\n\t\t\treturn 0;\n\t\t},\n\n\n\t\t// Instance methods\n\t\thasOwn = {}.hasOwnProperty,\n\t\t    arr = [],\n\t\t    pop = arr.pop,\n\t\t    push_native = arr.push,\n\t\t    push = arr.push,\n\t\t    slice = arr.slice,\n\n\t\t// Use a stripped-down indexOf as it's faster than native\n\t\t// https://jsperf.com/thor-indexof-vs-for/5\n\t\tindexOf = function indexOf(list, elem) {\n\t\t\tvar i = 0,\n\t\t\t    len = list.length;\n\t\t\tfor (; i < len; i++) {\n\t\t\t\tif (list[i] === elem) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn -1;\n\t\t},\n\t\t    booleans = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\",\n\n\n\t\t// Regular expressions\n\n\t\t// http://www.w3.org/TR/css3-selectors/#whitespace\n\t\twhitespace = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",\n\n\n\t\t// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier\n\t\tidentifier = \"(?:\\\\\\\\.|[\\\\w-]|[^\\0-\\\\xa0])+\",\n\n\n\t\t// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors\n\t\tattributes = \"\\\\[\" + whitespace + \"*(\" + identifier + \")(?:\" + whitespace +\n\t\t// Operator (capture 2)\n\t\t\"*([*^$|!~]?=)\" + whitespace +\n\t\t// \"Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]\"\n\t\t\"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + identifier + \"))|)\" + whitespace + \"*\\\\]\",\n\t\t    pseudos = \":(\" + identifier + \")(?:\\\\((\" +\n\t\t// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\n\t\t// 1. quoted (capture 3; capture 4 or capture 5)\n\t\t\"('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|\" +\n\t\t// 2. simple (capture 6)\n\t\t\"((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + attributes + \")*)|\" +\n\t\t// 3. anything else (capture 2)\n\t\t\".*\" + \")\\\\)|)\",\n\n\n\t\t// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\n\t\trwhitespace = new RegExp(whitespace + \"+\", \"g\"),\n\t\t    rtrim = new RegExp(\"^\" + whitespace + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + whitespace + \"+$\", \"g\"),\n\t\t    rcomma = new RegExp(\"^\" + whitespace + \"*,\" + whitespace + \"*\"),\n\t\t    rcombinators = new RegExp(\"^\" + whitespace + \"*([>+~]|\" + whitespace + \")\" + whitespace + \"*\"),\n\t\t    rattributeQuotes = new RegExp(\"=\" + whitespace + \"*([^\\\\]'\\\"]*?)\" + whitespace + \"*\\\\]\", \"g\"),\n\t\t    rpseudo = new RegExp(pseudos),\n\t\t    ridentifier = new RegExp(\"^\" + identifier + \"$\"),\n\t\t    matchExpr = {\n\t\t\t\"ID\": new RegExp(\"^#(\" + identifier + \")\"),\n\t\t\t\"CLASS\": new RegExp(\"^\\\\.(\" + identifier + \")\"),\n\t\t\t\"TAG\": new RegExp(\"^(\" + identifier + \"|[*])\"),\n\t\t\t\"ATTR\": new RegExp(\"^\" + attributes),\n\t\t\t\"PSEUDO\": new RegExp(\"^\" + pseudos),\n\t\t\t\"CHILD\": new RegExp(\"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" + whitespace + \"*(even|odd|(([+-]|)(\\\\d*)n|)\" + whitespace + \"*(?:([+-]|)\" + whitespace + \"*(\\\\d+)|))\" + whitespace + \"*\\\\)|)\", \"i\"),\n\t\t\t\"bool\": new RegExp(\"^(?:\" + booleans + \")$\", \"i\"),\n\t\t\t// For use in libraries implementing .is()\n\t\t\t// We use this for POS matching in `select`\n\t\t\t\"needsContext\": new RegExp(\"^\" + whitespace + \"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" + whitespace + \"*((?:-\\\\d)?\\\\d*)\" + whitespace + \"*\\\\)|)(?=[^-]|$)\", \"i\")\n\t\t},\n\t\t    rinputs = /^(?:input|select|textarea|button)$/i,\n\t\t    rheader = /^h\\d$/i,\n\t\t    rnative = /^[^{]+\\{\\s*\\[native \\w/,\n\n\n\t\t// Easily-parseable/retrievable ID or TAG or CLASS selectors\n\t\trquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n\t\t    rsibling = /[+~]/,\n\n\n\t\t// CSS escapes\n\t\t// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters\n\t\trunescape = new RegExp(\"\\\\\\\\([\\\\da-f]{1,6}\" + whitespace + \"?|(\" + whitespace + \")|.)\", \"ig\"),\n\t\t    funescape = function funescape(_, escaped, escapedWhitespace) {\n\t\t\tvar high = \"0x\" + escaped - 0x10000;\n\t\t\t// NaN means non-codepoint\n\t\t\t// Support: Firefox<24\n\t\t\t// Workaround erroneous numeric interpretation of +\"0x\"\n\t\t\treturn high !== high || escapedWhitespace ? escaped : high < 0 ?\n\t\t\t// BMP codepoint\n\t\t\tString.fromCharCode(high + 0x10000) :\n\t\t\t// Supplemental Plane codepoint (surrogate pair)\n\t\t\tString.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);\n\t\t},\n\n\n\t\t// CSS string/identifier serialization\n\t\t// https://drafts.csswg.org/cssom/#common-serializing-idioms\n\t\trcssescape = /([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\x80-\\uFFFF\\w-]/g,\n\t\t    fcssescape = function fcssescape(ch, asCodePoint) {\n\t\t\tif (asCodePoint) {\n\n\t\t\t\t// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER\n\t\t\t\tif (ch === \"\\0\") {\n\t\t\t\t\treturn \"�\";\n\t\t\t\t}\n\n\t\t\t\t// Control characters and (dependent upon position) numbers get escaped as code points\n\t\t\t\treturn ch.slice(0, -1) + \"\\\\\" + ch.charCodeAt(ch.length - 1).toString(16) + \" \";\n\t\t\t}\n\n\t\t\t// Other potentially-special ASCII characters get backslash-escaped\n\t\t\treturn \"\\\\\" + ch;\n\t\t},\n\n\n\t\t// Used for iframes\n\t\t// See setDocument()\n\t\t// Removing the function wrapper causes a \"Permission Denied\"\n\t\t// error in IE\n\t\tunloadHandler = function unloadHandler() {\n\t\t\tsetDocument();\n\t\t},\n\t\t    disabledAncestor = addCombinator(function (elem) {\n\t\t\treturn elem.disabled === true;\n\t\t}, { dir: \"parentNode\", next: \"legend\" });\n\n\t\t// Optimize for push.apply( _, NodeList )\n\t\ttry {\n\t\t\tpush.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes);\n\t\t\t// Support: Android<4.0\n\t\t\t// Detect silently failing push.apply\n\t\t\tarr[preferredDoc.childNodes.length].nodeType;\n\t\t} catch (e) {\n\t\t\tpush = { apply: arr.length ?\n\n\t\t\t\t// Leverage slice if possible\n\t\t\t\tfunction (target, els) {\n\t\t\t\t\tpush_native.apply(target, slice.call(els));\n\t\t\t\t} :\n\n\t\t\t\t// Support: IE<9\n\t\t\t\t// Otherwise append directly\n\t\t\t\tfunction (target, els) {\n\t\t\t\t\tvar j = target.length,\n\t\t\t\t\t    i = 0;\n\t\t\t\t\t// Can't trust NodeList.length\n\t\t\t\t\twhile (target[j++] = els[i++]) {}\n\t\t\t\t\ttarget.length = j - 1;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tfunction Sizzle(selector, context, results, seed) {\n\t\t\tvar m,\n\t\t\t    i,\n\t\t\t    elem,\n\t\t\t    nid,\n\t\t\t    match,\n\t\t\t    groups,\n\t\t\t    newSelector,\n\t\t\t    newContext = context && context.ownerDocument,\n\n\n\t\t\t// nodeType defaults to 9, since context defaults to document\n\t\t\tnodeType = context ? context.nodeType : 9;\n\n\t\t\tresults = results || [];\n\n\t\t\t// Return early from calls with invalid selector or context\n\t\t\tif (typeof selector !== \"string\" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {\n\n\t\t\t\treturn results;\n\t\t\t}\n\n\t\t\t// Try to shortcut find operations (as opposed to filters) in HTML documents\n\t\t\tif (!seed) {\n\n\t\t\t\tif ((context ? context.ownerDocument || context : preferredDoc) !== document) {\n\t\t\t\t\tsetDocument(context);\n\t\t\t\t}\n\t\t\t\tcontext = context || document;\n\n\t\t\t\tif (documentIsHTML) {\n\n\t\t\t\t\t// If the selector is sufficiently simple, try using a \"get*By*\" DOM method\n\t\t\t\t\t// (excepting DocumentFragment context, where the methods don't exist)\n\t\t\t\t\tif (nodeType !== 11 && (match = rquickExpr.exec(selector))) {\n\n\t\t\t\t\t\t// ID selector\n\t\t\t\t\t\tif (m = match[1]) {\n\n\t\t\t\t\t\t\t// Document context\n\t\t\t\t\t\t\tif (nodeType === 9) {\n\t\t\t\t\t\t\t\tif (elem = context.getElementById(m)) {\n\n\t\t\t\t\t\t\t\t\t// Support: IE, Opera, Webkit\n\t\t\t\t\t\t\t\t\t// TODO: identify versions\n\t\t\t\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\t\t\t\tif (elem.id === m) {\n\t\t\t\t\t\t\t\t\t\tresults.push(elem);\n\t\t\t\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// Element context\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// Support: IE, Opera, Webkit\n\t\t\t\t\t\t\t\t// TODO: identify versions\n\t\t\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\t\t\tif (newContext && (elem = newContext.getElementById(m)) && contains(context, elem) && elem.id === m) {\n\n\t\t\t\t\t\t\t\t\tresults.push(elem);\n\t\t\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Type selector\n\t\t\t\t\t\t} else if (match[2]) {\n\t\t\t\t\t\t\tpush.apply(results, context.getElementsByTagName(selector));\n\t\t\t\t\t\t\treturn results;\n\n\t\t\t\t\t\t\t// Class selector\n\t\t\t\t\t\t} else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {\n\n\t\t\t\t\t\t\tpush.apply(results, context.getElementsByClassName(m));\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Take advantage of querySelectorAll\n\t\t\t\t\tif (support.qsa && !compilerCache[selector + \" \"] && (!rbuggyQSA || !rbuggyQSA.test(selector))) {\n\n\t\t\t\t\t\tif (nodeType !== 1) {\n\t\t\t\t\t\t\tnewContext = context;\n\t\t\t\t\t\t\tnewSelector = selector;\n\n\t\t\t\t\t\t\t// qSA looks outside Element context, which is not what we want\n\t\t\t\t\t\t\t// Thanks to Andrew Dupont for this workaround technique\n\t\t\t\t\t\t\t// Support: IE <=8\n\t\t\t\t\t\t\t// Exclude object elements\n\t\t\t\t\t\t} else if (context.nodeName.toLowerCase() !== \"object\") {\n\n\t\t\t\t\t\t\t// Capture the context ID, setting it first if necessary\n\t\t\t\t\t\t\tif (nid = context.getAttribute(\"id\")) {\n\t\t\t\t\t\t\t\tnid = nid.replace(rcssescape, fcssescape);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcontext.setAttribute(\"id\", nid = expando);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Prefix every selector in the list\n\t\t\t\t\t\t\tgroups = tokenize(selector);\n\t\t\t\t\t\t\ti = groups.length;\n\t\t\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\t\t\tgroups[i] = \"#\" + nid + \" \" + toSelector(groups[i]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tnewSelector = groups.join(\",\");\n\n\t\t\t\t\t\t\t// Expand context for sibling selectors\n\t\t\t\t\t\t\tnewContext = rsibling.test(selector) && testContext(context.parentNode) || context;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (newSelector) {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tpush.apply(results, newContext.querySelectorAll(newSelector));\n\t\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t\t} catch (qsaError) {} finally {\n\t\t\t\t\t\t\t\tif (nid === expando) {\n\t\t\t\t\t\t\t\t\tcontext.removeAttribute(\"id\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// All others\n\t\t\treturn select(selector.replace(rtrim, \"$1\"), context, results, seed);\n\t\t}\n\n\t\t/**\n   * Create key-value caches of limited size\n   * @returns {function(string, object)} Returns the Object data after storing it on itself with\n   *\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n   *\tdeleting the oldest entry\n   */\n\t\tfunction createCache() {\n\t\t\tvar keys = [];\n\n\t\t\tfunction cache(key, value) {\n\t\t\t\t// Use (key + \" \") to avoid collision with native prototype properties (see Issue #157)\n\t\t\t\tif (keys.push(key + \" \") > Expr.cacheLength) {\n\t\t\t\t\t// Only keep the most recent entries\n\t\t\t\t\tdelete cache[keys.shift()];\n\t\t\t\t}\n\t\t\t\treturn cache[key + \" \"] = value;\n\t\t\t}\n\t\t\treturn cache;\n\t\t}\n\n\t\t/**\n   * Mark a function for special use by Sizzle\n   * @param {Function} fn The function to mark\n   */\n\t\tfunction markFunction(fn) {\n\t\t\tfn[expando] = true;\n\t\t\treturn fn;\n\t\t}\n\n\t\t/**\n   * Support testing using an element\n   * @param {Function} fn Passed the created element and returns a boolean result\n   */\n\t\tfunction assert(fn) {\n\t\t\tvar el = document.createElement(\"fieldset\");\n\n\t\t\ttry {\n\t\t\t\treturn !!fn(el);\n\t\t\t} catch (e) {\n\t\t\t\treturn false;\n\t\t\t} finally {\n\t\t\t\t// Remove from its parent by default\n\t\t\t\tif (el.parentNode) {\n\t\t\t\t\tel.parentNode.removeChild(el);\n\t\t\t\t}\n\t\t\t\t// release memory in IE\n\t\t\t\tel = null;\n\t\t\t}\n\t\t}\n\n\t\t/**\n   * Adds the same handler for all of the specified attrs\n   * @param {String} attrs Pipe-separated list of attributes\n   * @param {Function} handler The method that will be applied\n   */\n\t\tfunction addHandle(attrs, handler) {\n\t\t\tvar arr = attrs.split(\"|\"),\n\t\t\t    i = arr.length;\n\n\t\t\twhile (i--) {\n\t\t\t\tExpr.attrHandle[arr[i]] = handler;\n\t\t\t}\n\t\t}\n\n\t\t/**\n   * Checks document order of two siblings\n   * @param {Element} a\n   * @param {Element} b\n   * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b\n   */\n\t\tfunction siblingCheck(a, b) {\n\t\t\tvar cur = b && a,\n\t\t\t    diff = cur && a.nodeType === 1 && b.nodeType === 1 && a.sourceIndex - b.sourceIndex;\n\n\t\t\t// Use IE sourceIndex if available on both nodes\n\t\t\tif (diff) {\n\t\t\t\treturn diff;\n\t\t\t}\n\n\t\t\t// Check if b follows a\n\t\t\tif (cur) {\n\t\t\t\twhile (cur = cur.nextSibling) {\n\t\t\t\t\tif (cur === b) {\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn a ? 1 : -1;\n\t\t}\n\n\t\t/**\n   * Returns a function to use in pseudos for input types\n   * @param {String} type\n   */\n\t\tfunction createInputPseudo(type) {\n\t\t\treturn function (elem) {\n\t\t\t\tvar name = elem.nodeName.toLowerCase();\n\t\t\t\treturn name === \"input\" && elem.type === type;\n\t\t\t};\n\t\t}\n\n\t\t/**\n   * Returns a function to use in pseudos for buttons\n   * @param {String} type\n   */\n\t\tfunction createButtonPseudo(type) {\n\t\t\treturn function (elem) {\n\t\t\t\tvar name = elem.nodeName.toLowerCase();\n\t\t\t\treturn (name === \"input\" || name === \"button\") && elem.type === type;\n\t\t\t};\n\t\t}\n\n\t\t/**\n   * Returns a function to use in pseudos for :enabled/:disabled\n   * @param {Boolean} disabled true for :disabled; false for :enabled\n   */\n\t\tfunction createDisabledPseudo(disabled) {\n\t\t\t// Known :disabled false positives:\n\t\t\t// IE: *[disabled]:not(button, input, select, textarea, optgroup, option, menuitem, fieldset)\n\t\t\t// not IE: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable\n\t\t\treturn function (elem) {\n\n\t\t\t\t// Check form elements and option elements for explicit disabling\n\t\t\t\treturn \"label\" in elem && elem.disabled === disabled || \"form\" in elem && elem.disabled === disabled ||\n\n\t\t\t\t// Check non-disabled form elements for fieldset[disabled] ancestors\n\t\t\t\t\"form\" in elem && elem.disabled === false && (\n\t\t\t\t// Support: IE6-11+\n\t\t\t\t// Ancestry is covered for us\n\t\t\t\telem.isDisabled === disabled ||\n\n\t\t\t\t// Otherwise, assume any non-<option> under fieldset[disabled] is disabled\n\t\t\t\t/* jshint -W018 */\n\t\t\t\telem.isDisabled !== !disabled && (\"label\" in elem || !disabledAncestor(elem)) !== disabled);\n\t\t\t};\n\t\t}\n\n\t\t/**\n   * Returns a function to use in pseudos for positionals\n   * @param {Function} fn\n   */\n\t\tfunction createPositionalPseudo(fn) {\n\t\t\treturn markFunction(function (argument) {\n\t\t\t\targument = +argument;\n\t\t\t\treturn markFunction(function (seed, matches) {\n\t\t\t\t\tvar j,\n\t\t\t\t\t    matchIndexes = fn([], seed.length, argument),\n\t\t\t\t\t    i = matchIndexes.length;\n\n\t\t\t\t\t// Match elements found at the specified indexes\n\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\tif (seed[j = matchIndexes[i]]) {\n\t\t\t\t\t\t\tseed[j] = !(matches[j] = seed[j]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\t/**\n   * Checks a node for validity as a Sizzle context\n   * @param {Element|Object=} context\n   * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\n   */\n\t\tfunction testContext(context) {\n\t\t\treturn context && typeof context.getElementsByTagName !== \"undefined\" && context;\n\t\t}\n\n\t\t// Expose support vars for convenience\n\t\tsupport = Sizzle.support = {};\n\n\t\t/**\n   * Detects XML nodes\n   * @param {Element|Object} elem An element or a document\n   * @returns {Boolean} True iff elem is a non-HTML XML node\n   */\n\t\tisXML = Sizzle.isXML = function (elem) {\n\t\t\t// documentElement is verified for cases where it doesn't yet exist\n\t\t\t// (such as loading iframes in IE - #4833)\n\t\t\tvar documentElement = elem && (elem.ownerDocument || elem).documentElement;\n\t\t\treturn documentElement ? documentElement.nodeName !== \"HTML\" : false;\n\t\t};\n\n\t\t/**\n   * Sets document-related variables once based on the current document\n   * @param {Element|Object} [doc] An element or document object to use to set the document\n   * @returns {Object} Returns the current document\n   */\n\t\tsetDocument = Sizzle.setDocument = function (node) {\n\t\t\tvar hasCompare,\n\t\t\t    subWindow,\n\t\t\t    doc = node ? node.ownerDocument || node : preferredDoc;\n\n\t\t\t// Return early if doc is invalid or already selected\n\t\t\tif (doc === document || doc.nodeType !== 9 || !doc.documentElement) {\n\t\t\t\treturn document;\n\t\t\t}\n\n\t\t\t// Update global variables\n\t\t\tdocument = doc;\n\t\t\tdocElem = document.documentElement;\n\t\t\tdocumentIsHTML = !isXML(document);\n\n\t\t\t// Support: IE 9-11, Edge\n\t\t\t// Accessing iframe documents after unload throws \"permission denied\" errors (jQuery #13936)\n\t\t\tif (preferredDoc !== document && (subWindow = document.defaultView) && subWindow.top !== subWindow) {\n\n\t\t\t\t// Support: IE 11, Edge\n\t\t\t\tif (subWindow.addEventListener) {\n\t\t\t\t\tsubWindow.addEventListener(\"unload\", unloadHandler, false);\n\n\t\t\t\t\t// Support: IE 9 - 10 only\n\t\t\t\t} else if (subWindow.attachEvent) {\n\t\t\t\t\tsubWindow.attachEvent(\"onunload\", unloadHandler);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/* Attributes\n   ---------------------------------------------------------------------- */\n\n\t\t\t// Support: IE<8\n\t\t\t// Verify that getAttribute really returns attributes and not properties\n\t\t\t// (excepting IE8 booleans)\n\t\t\tsupport.attributes = assert(function (el) {\n\t\t\t\tel.className = \"i\";\n\t\t\t\treturn !el.getAttribute(\"className\");\n\t\t\t});\n\n\t\t\t/* getElement(s)By*\n   ---------------------------------------------------------------------- */\n\n\t\t\t// Check if getElementsByTagName(\"*\") returns only elements\n\t\t\tsupport.getElementsByTagName = assert(function (el) {\n\t\t\t\tel.appendChild(document.createComment(\"\"));\n\t\t\t\treturn !el.getElementsByTagName(\"*\").length;\n\t\t\t});\n\n\t\t\t// Support: IE<9\n\t\t\tsupport.getElementsByClassName = rnative.test(document.getElementsByClassName);\n\n\t\t\t// Support: IE<10\n\t\t\t// Check if getElementById returns elements by name\n\t\t\t// The broken getElementById methods don't pick up programmatically-set names,\n\t\t\t// so use a roundabout getElementsByName test\n\t\t\tsupport.getById = assert(function (el) {\n\t\t\t\tdocElem.appendChild(el).id = expando;\n\t\t\t\treturn !document.getElementsByName || !document.getElementsByName(expando).length;\n\t\t\t});\n\n\t\t\t// ID find and filter\n\t\t\tif (support.getById) {\n\t\t\t\tExpr.find[\"ID\"] = function (id, context) {\n\t\t\t\t\tif (typeof context.getElementById !== \"undefined\" && documentIsHTML) {\n\t\t\t\t\t\tvar m = context.getElementById(id);\n\t\t\t\t\t\treturn m ? [m] : [];\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tExpr.filter[\"ID\"] = function (id) {\n\t\t\t\t\tvar attrId = id.replace(runescape, funescape);\n\t\t\t\t\treturn function (elem) {\n\t\t\t\t\t\treturn elem.getAttribute(\"id\") === attrId;\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\t// Support: IE6/7\n\t\t\t\t// getElementById is not reliable as a find shortcut\n\t\t\t\tdelete Expr.find[\"ID\"];\n\n\t\t\t\tExpr.filter[\"ID\"] = function (id) {\n\t\t\t\t\tvar attrId = id.replace(runescape, funescape);\n\t\t\t\t\treturn function (elem) {\n\t\t\t\t\t\tvar node = typeof elem.getAttributeNode !== \"undefined\" && elem.getAttributeNode(\"id\");\n\t\t\t\t\t\treturn node && node.value === attrId;\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// Tag\n\t\t\tExpr.find[\"TAG\"] = support.getElementsByTagName ? function (tag, context) {\n\t\t\t\tif (typeof context.getElementsByTagName !== \"undefined\") {\n\t\t\t\t\treturn context.getElementsByTagName(tag);\n\n\t\t\t\t\t// DocumentFragment nodes don't have gEBTN\n\t\t\t\t} else if (support.qsa) {\n\t\t\t\t\treturn context.querySelectorAll(tag);\n\t\t\t\t}\n\t\t\t} : function (tag, context) {\n\t\t\t\tvar elem,\n\t\t\t\t    tmp = [],\n\t\t\t\t    i = 0,\n\n\t\t\t\t// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too\n\t\t\t\tresults = context.getElementsByTagName(tag);\n\n\t\t\t\t// Filter out possible comments\n\t\t\t\tif (tag === \"*\") {\n\t\t\t\t\twhile (elem = results[i++]) {\n\t\t\t\t\t\tif (elem.nodeType === 1) {\n\t\t\t\t\t\t\ttmp.push(elem);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn tmp;\n\t\t\t\t}\n\t\t\t\treturn results;\n\t\t\t};\n\n\t\t\t// Class\n\t\t\tExpr.find[\"CLASS\"] = support.getElementsByClassName && function (className, context) {\n\t\t\t\tif (typeof context.getElementsByClassName !== \"undefined\" && documentIsHTML) {\n\t\t\t\t\treturn context.getElementsByClassName(className);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t/* QSA/matchesSelector\n   ---------------------------------------------------------------------- */\n\n\t\t\t// QSA and matchesSelector support\n\n\t\t\t// matchesSelector(:active) reports false when true (IE9/Opera 11.5)\n\t\t\trbuggyMatches = [];\n\n\t\t\t// qSa(:focus) reports false when true (Chrome 21)\n\t\t\t// We allow this because of a bug in IE8/9 that throws an error\n\t\t\t// whenever `document.activeElement` is accessed on an iframe\n\t\t\t// So, we allow :focus to pass through QSA all the time to avoid the IE error\n\t\t\t// See https://bugs.jquery.com/ticket/13378\n\t\t\trbuggyQSA = [];\n\n\t\t\tif (support.qsa = rnative.test(document.querySelectorAll)) {\n\t\t\t\t// Build QSA regex\n\t\t\t\t// Regex strategy adopted from Diego Perini\n\t\t\t\tassert(function (el) {\n\t\t\t\t\t// Select is set to empty string on purpose\n\t\t\t\t\t// This is to test IE's treatment of not explicitly\n\t\t\t\t\t// setting a boolean content attribute,\n\t\t\t\t\t// since its presence should be enough\n\t\t\t\t\t// https://bugs.jquery.com/ticket/12359\n\t\t\t\t\tdocElem.appendChild(el).innerHTML = \"<a id='\" + expando + \"'></a>\" + \"<select id='\" + expando + \"-\\r\\\\' msallowcapture=''>\" + \"<option selected=''></option></select>\";\n\n\t\t\t\t\t// Support: IE8, Opera 11-12.16\n\t\t\t\t\t// Nothing should be selected when empty strings follow ^= or $= or *=\n\t\t\t\t\t// The test attribute must be unknown in Opera but \"safe\" for WinRT\n\t\t\t\t\t// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section\n\t\t\t\t\tif (el.querySelectorAll(\"[msallowcapture^='']\").length) {\n\t\t\t\t\t\trbuggyQSA.push(\"[*^$]=\" + whitespace + \"*(?:''|\\\"\\\")\");\n\t\t\t\t\t}\n\n\t\t\t\t\t// Support: IE8\n\t\t\t\t\t// Boolean attributes and \"value\" are not treated correctly\n\t\t\t\t\tif (!el.querySelectorAll(\"[selected]\").length) {\n\t\t\t\t\t\trbuggyQSA.push(\"\\\\[\" + whitespace + \"*(?:value|\" + booleans + \")\");\n\t\t\t\t\t}\n\n\t\t\t\t\t// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+\n\t\t\t\t\tif (!el.querySelectorAll(\"[id~=\" + expando + \"-]\").length) {\n\t\t\t\t\t\trbuggyQSA.push(\"~=\");\n\t\t\t\t\t}\n\n\t\t\t\t\t// Webkit/Opera - :checked should return selected option elements\n\t\t\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\t\t\t// IE8 throws error here and will not see later tests\n\t\t\t\t\tif (!el.querySelectorAll(\":checked\").length) {\n\t\t\t\t\t\trbuggyQSA.push(\":checked\");\n\t\t\t\t\t}\n\n\t\t\t\t\t// Support: Safari 8+, iOS 8+\n\t\t\t\t\t// https://bugs.webkit.org/show_bug.cgi?id=136851\n\t\t\t\t\t// In-page `selector#id sibling-combinator selector` fails\n\t\t\t\t\tif (!el.querySelectorAll(\"a#\" + expando + \"+*\").length) {\n\t\t\t\t\t\trbuggyQSA.push(\".#.+[+~]\");\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tassert(function (el) {\n\t\t\t\t\tel.innerHTML = \"<a href='' disabled='disabled'></a>\" + \"<select disabled='disabled'><option/></select>\";\n\n\t\t\t\t\t// Support: Windows 8 Native Apps\n\t\t\t\t\t// The type and name attributes are restricted during .innerHTML assignment\n\t\t\t\t\tvar input = document.createElement(\"input\");\n\t\t\t\t\tinput.setAttribute(\"type\", \"hidden\");\n\t\t\t\t\tel.appendChild(input).setAttribute(\"name\", \"D\");\n\n\t\t\t\t\t// Support: IE8\n\t\t\t\t\t// Enforce case-sensitivity of name attribute\n\t\t\t\t\tif (el.querySelectorAll(\"[name=d]\").length) {\n\t\t\t\t\t\trbuggyQSA.push(\"name\" + whitespace + \"*[*^$|!~]?=\");\n\t\t\t\t\t}\n\n\t\t\t\t\t// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)\n\t\t\t\t\t// IE8 throws error here and will not see later tests\n\t\t\t\t\tif (el.querySelectorAll(\":enabled\").length !== 2) {\n\t\t\t\t\t\trbuggyQSA.push(\":enabled\", \":disabled\");\n\t\t\t\t\t}\n\n\t\t\t\t\t// Support: IE9-11+\n\t\t\t\t\t// IE's :disabled selector does not pick up the children of disabled fieldsets\n\t\t\t\t\tdocElem.appendChild(el).disabled = true;\n\t\t\t\t\tif (el.querySelectorAll(\":disabled\").length !== 2) {\n\t\t\t\t\t\trbuggyQSA.push(\":enabled\", \":disabled\");\n\t\t\t\t\t}\n\n\t\t\t\t\t// Opera 10-11 does not throw on post-comma invalid pseudos\n\t\t\t\t\tel.querySelectorAll(\"*,:x\");\n\t\t\t\t\trbuggyQSA.push(\",.*:\");\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {\n\n\t\t\t\tassert(function (el) {\n\t\t\t\t\t// Check to see if it's possible to do matchesSelector\n\t\t\t\t\t// on a disconnected node (IE 9)\n\t\t\t\t\tsupport.disconnectedMatch = matches.call(el, \"*\");\n\n\t\t\t\t\t// This should fail with an exception\n\t\t\t\t\t// Gecko does not error, returns false instead\n\t\t\t\t\tmatches.call(el, \"[s!='']:x\");\n\t\t\t\t\trbuggyMatches.push(\"!=\", pseudos);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\trbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join(\"|\"));\n\t\t\trbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join(\"|\"));\n\n\t\t\t/* Contains\n   ---------------------------------------------------------------------- */\n\t\t\thasCompare = rnative.test(docElem.compareDocumentPosition);\n\n\t\t\t// Element contains another\n\t\t\t// Purposefully self-exclusive\n\t\t\t// As in, an element does not contain itself\n\t\t\tcontains = hasCompare || rnative.test(docElem.contains) ? function (a, b) {\n\t\t\t\tvar adown = a.nodeType === 9 ? a.documentElement : a,\n\t\t\t\t    bup = b && b.parentNode;\n\t\t\t\treturn a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));\n\t\t\t} : function (a, b) {\n\t\t\t\tif (b) {\n\t\t\t\t\twhile (b = b.parentNode) {\n\t\t\t\t\t\tif (b === a) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t};\n\n\t\t\t/* Sorting\n   ---------------------------------------------------------------------- */\n\n\t\t\t// Document order sorting\n\t\t\tsortOrder = hasCompare ? function (a, b) {\n\n\t\t\t\t// Flag for duplicate removal\n\t\t\t\tif (a === b) {\n\t\t\t\t\thasDuplicate = true;\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\t// Sort on method existence if only one input has compareDocumentPosition\n\t\t\t\tvar compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\n\t\t\t\tif (compare) {\n\t\t\t\t\treturn compare;\n\t\t\t\t}\n\n\t\t\t\t// Calculate position if both inputs belong to the same document\n\t\t\t\tcompare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) :\n\n\t\t\t\t// Otherwise we know they are disconnected\n\t\t\t\t1;\n\n\t\t\t\t// Disconnected nodes\n\t\t\t\tif (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {\n\n\t\t\t\t\t// Choose the first element that is related to our preferred document\n\t\t\t\t\tif (a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t\tif (b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Maintain original order\n\t\t\t\t\treturn sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;\n\t\t\t\t}\n\n\t\t\t\treturn compare & 4 ? -1 : 1;\n\t\t\t} : function (a, b) {\n\t\t\t\t// Exit early if the nodes are identical\n\t\t\t\tif (a === b) {\n\t\t\t\t\thasDuplicate = true;\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\tvar cur,\n\t\t\t\t    i = 0,\n\t\t\t\t    aup = a.parentNode,\n\t\t\t\t    bup = b.parentNode,\n\t\t\t\t    ap = [a],\n\t\t\t\t    bp = [b];\n\n\t\t\t\t// Parentless nodes are either documents or disconnected\n\t\t\t\tif (!aup || !bup) {\n\t\t\t\t\treturn a === document ? -1 : b === document ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;\n\n\t\t\t\t\t// If the nodes are siblings, we can do a quick check\n\t\t\t\t} else if (aup === bup) {\n\t\t\t\t\treturn siblingCheck(a, b);\n\t\t\t\t}\n\n\t\t\t\t// Otherwise we need full lists of their ancestors for comparison\n\t\t\t\tcur = a;\n\t\t\t\twhile (cur = cur.parentNode) {\n\t\t\t\t\tap.unshift(cur);\n\t\t\t\t}\n\t\t\t\tcur = b;\n\t\t\t\twhile (cur = cur.parentNode) {\n\t\t\t\t\tbp.unshift(cur);\n\t\t\t\t}\n\n\t\t\t\t// Walk down the tree looking for a discrepancy\n\t\t\t\twhile (ap[i] === bp[i]) {\n\t\t\t\t\ti++;\n\t\t\t\t}\n\n\t\t\t\treturn i ?\n\t\t\t\t// Do a sibling check if the nodes have a common ancestor\n\t\t\t\tsiblingCheck(ap[i], bp[i]) :\n\n\t\t\t\t// Otherwise nodes in our document sort first\n\t\t\t\tap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;\n\t\t\t};\n\n\t\t\treturn document;\n\t\t};\n\n\t\tSizzle.matches = function (expr, elements) {\n\t\t\treturn Sizzle(expr, null, null, elements);\n\t\t};\n\n\t\tSizzle.matchesSelector = function (elem, expr) {\n\t\t\t// Set document vars if needed\n\t\t\tif ((elem.ownerDocument || elem) !== document) {\n\t\t\t\tsetDocument(elem);\n\t\t\t}\n\n\t\t\t// Make sure that attribute selectors are quoted\n\t\t\texpr = expr.replace(rattributeQuotes, \"='$1']\");\n\n\t\t\tif (support.matchesSelector && documentIsHTML && !compilerCache[expr + \" \"] && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {\n\n\t\t\t\ttry {\n\t\t\t\t\tvar ret = matches.call(elem, expr);\n\n\t\t\t\t\t// IE 9's matchesSelector returns false on disconnected nodes\n\t\t\t\t\tif (ret || support.disconnectedMatch ||\n\t\t\t\t\t// As well, disconnected nodes are said to be in a document\n\t\t\t\t\t// fragment in IE 9\n\t\t\t\t\telem.document && elem.document.nodeType !== 11) {\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {}\n\t\t\t}\n\n\t\t\treturn Sizzle(expr, document, null, [elem]).length > 0;\n\t\t};\n\n\t\tSizzle.contains = function (context, elem) {\n\t\t\t// Set document vars if needed\n\t\t\tif ((context.ownerDocument || context) !== document) {\n\t\t\t\tsetDocument(context);\n\t\t\t}\n\t\t\treturn contains(context, elem);\n\t\t};\n\n\t\tSizzle.attr = function (elem, name) {\n\t\t\t// Set document vars if needed\n\t\t\tif ((elem.ownerDocument || elem) !== document) {\n\t\t\t\tsetDocument(elem);\n\t\t\t}\n\n\t\t\tvar fn = Expr.attrHandle[name.toLowerCase()],\n\n\t\t\t// Don't get fooled by Object.prototype properties (jQuery #13807)\n\t\t\tval = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;\n\n\t\t\treturn val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;\n\t\t};\n\n\t\tSizzle.escape = function (sel) {\n\t\t\treturn (sel + \"\").replace(rcssescape, fcssescape);\n\t\t};\n\n\t\tSizzle.error = function (msg) {\n\t\t\tthrow new Error(\"Syntax error, unrecognized expression: \" + msg);\n\t\t};\n\n\t\t/**\n   * Document sorting and removing duplicates\n   * @param {ArrayLike} results\n   */\n\t\tSizzle.uniqueSort = function (results) {\n\t\t\tvar elem,\n\t\t\t    duplicates = [],\n\t\t\t    j = 0,\n\t\t\t    i = 0;\n\n\t\t\t// Unless we *know* we can detect duplicates, assume their presence\n\t\t\thasDuplicate = !support.detectDuplicates;\n\t\t\tsortInput = !support.sortStable && results.slice(0);\n\t\t\tresults.sort(sortOrder);\n\n\t\t\tif (hasDuplicate) {\n\t\t\t\twhile (elem = results[i++]) {\n\t\t\t\t\tif (elem === results[i]) {\n\t\t\t\t\t\tj = duplicates.push(i);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\twhile (j--) {\n\t\t\t\t\tresults.splice(duplicates[j], 1);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Clear input after sorting to release objects\n\t\t\t// See https://github.com/jquery/sizzle/pull/225\n\t\t\tsortInput = null;\n\n\t\t\treturn results;\n\t\t};\n\n\t\t/**\n   * Utility function for retrieving the text value of an array of DOM nodes\n   * @param {Array|Element} elem\n   */\n\t\tgetText = Sizzle.getText = function (elem) {\n\t\t\tvar node,\n\t\t\t    ret = \"\",\n\t\t\t    i = 0,\n\t\t\t    nodeType = elem.nodeType;\n\n\t\t\tif (!nodeType) {\n\t\t\t\t// If no nodeType, this is expected to be an array\n\t\t\t\twhile (node = elem[i++]) {\n\t\t\t\t\t// Do not traverse comment nodes\n\t\t\t\t\tret += getText(node);\n\t\t\t\t}\n\t\t\t} else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {\n\t\t\t\t// Use textContent for elements\n\t\t\t\t// innerText usage removed for consistency of new lines (jQuery #11153)\n\t\t\t\tif (typeof elem.textContent === \"string\") {\n\t\t\t\t\treturn elem.textContent;\n\t\t\t\t} else {\n\t\t\t\t\t// Traverse its children\n\t\t\t\t\tfor (elem = elem.firstChild; elem; elem = elem.nextSibling) {\n\t\t\t\t\t\tret += getText(elem);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (nodeType === 3 || nodeType === 4) {\n\t\t\t\treturn elem.nodeValue;\n\t\t\t}\n\t\t\t// Do not include comment or processing instruction nodes\n\n\t\t\treturn ret;\n\t\t};\n\n\t\tExpr = Sizzle.selectors = {\n\n\t\t\t// Can be adjusted by the user\n\t\t\tcacheLength: 50,\n\n\t\t\tcreatePseudo: markFunction,\n\n\t\t\tmatch: matchExpr,\n\n\t\t\tattrHandle: {},\n\n\t\t\tfind: {},\n\n\t\t\trelative: {\n\t\t\t\t\">\": { dir: \"parentNode\", first: true },\n\t\t\t\t\" \": { dir: \"parentNode\" },\n\t\t\t\t\"+\": { dir: \"previousSibling\", first: true },\n\t\t\t\t\"~\": { dir: \"previousSibling\" }\n\t\t\t},\n\n\t\t\tpreFilter: {\n\t\t\t\t\"ATTR\": function ATTR(match) {\n\t\t\t\t\tmatch[1] = match[1].replace(runescape, funescape);\n\n\t\t\t\t\t// Move the given value to match[3] whether quoted or unquoted\n\t\t\t\t\tmatch[3] = (match[3] || match[4] || match[5] || \"\").replace(runescape, funescape);\n\n\t\t\t\t\tif (match[2] === \"~=\") {\n\t\t\t\t\t\tmatch[3] = \" \" + match[3] + \" \";\n\t\t\t\t\t}\n\n\t\t\t\t\treturn match.slice(0, 4);\n\t\t\t\t},\n\n\t\t\t\t\"CHILD\": function CHILD(match) {\n\t\t\t\t\t/* matches from matchExpr[\"CHILD\"]\n     \t1 type (only|nth|...)\n     \t2 what (child|of-type)\n     \t3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\n     \t4 xn-component of xn+y argument ([+-]?\\d*n|)\n     \t5 sign of xn-component\n     \t6 x of xn-component\n     \t7 sign of y-component\n     \t8 y of y-component\n     */\n\t\t\t\t\tmatch[1] = match[1].toLowerCase();\n\n\t\t\t\t\tif (match[1].slice(0, 3) === \"nth\") {\n\t\t\t\t\t\t// nth-* requires argument\n\t\t\t\t\t\tif (!match[3]) {\n\t\t\t\t\t\t\tSizzle.error(match[0]);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// numeric x and y parameters for Expr.filter.CHILD\n\t\t\t\t\t\t// remember that false/true cast respectively to 0/1\n\t\t\t\t\t\tmatch[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === \"even\" || match[3] === \"odd\"));\n\t\t\t\t\t\tmatch[5] = +(match[7] + match[8] || match[3] === \"odd\");\n\n\t\t\t\t\t\t// other types prohibit arguments\n\t\t\t\t\t} else if (match[3]) {\n\t\t\t\t\t\tSizzle.error(match[0]);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn match;\n\t\t\t\t},\n\n\t\t\t\t\"PSEUDO\": function PSEUDO(match) {\n\t\t\t\t\tvar excess,\n\t\t\t\t\t    unquoted = !match[6] && match[2];\n\n\t\t\t\t\tif (matchExpr[\"CHILD\"].test(match[0])) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Accept quoted arguments as-is\n\t\t\t\t\tif (match[3]) {\n\t\t\t\t\t\tmatch[2] = match[4] || match[5] || \"\";\n\n\t\t\t\t\t\t// Strip excess characters from unquoted arguments\n\t\t\t\t\t} else if (unquoted && rpseudo.test(unquoted) && (\n\t\t\t\t\t// Get excess from tokenize (recursively)\n\t\t\t\t\texcess = tokenize(unquoted, true)) && (\n\t\t\t\t\t// advance to the next closing parenthesis\n\t\t\t\t\texcess = unquoted.indexOf(\")\", unquoted.length - excess) - unquoted.length)) {\n\n\t\t\t\t\t\t// excess is a negative index\n\t\t\t\t\t\tmatch[0] = match[0].slice(0, excess);\n\t\t\t\t\t\tmatch[2] = unquoted.slice(0, excess);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Return only captures needed by the pseudo filter method (type and argument)\n\t\t\t\t\treturn match.slice(0, 3);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tfilter: {\n\n\t\t\t\t\"TAG\": function TAG(nodeNameSelector) {\n\t\t\t\t\tvar nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();\n\t\t\t\t\treturn nodeNameSelector === \"*\" ? function () {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t} : function (elem) {\n\t\t\t\t\t\treturn elem.nodeName && elem.nodeName.toLowerCase() === nodeName;\n\t\t\t\t\t};\n\t\t\t\t},\n\n\t\t\t\t\"CLASS\": function CLASS(className) {\n\t\t\t\t\tvar pattern = classCache[className + \" \"];\n\n\t\t\t\t\treturn pattern || (pattern = new RegExp(\"(^|\" + whitespace + \")\" + className + \"(\" + whitespace + \"|$)\")) && classCache(className, function (elem) {\n\t\t\t\t\t\treturn pattern.test(typeof elem.className === \"string\" && elem.className || typeof elem.getAttribute !== \"undefined\" && elem.getAttribute(\"class\") || \"\");\n\t\t\t\t\t});\n\t\t\t\t},\n\n\t\t\t\t\"ATTR\": function ATTR(name, operator, check) {\n\t\t\t\t\treturn function (elem) {\n\t\t\t\t\t\tvar result = Sizzle.attr(elem, name);\n\n\t\t\t\t\t\tif (result == null) {\n\t\t\t\t\t\t\treturn operator === \"!=\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!operator) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresult += \"\";\n\n\t\t\t\t\t\treturn operator === \"=\" ? result === check : operator === \"!=\" ? result !== check : operator === \"^=\" ? check && result.indexOf(check) === 0 : operator === \"*=\" ? check && result.indexOf(check) > -1 : operator === \"$=\" ? check && result.slice(-check.length) === check : operator === \"~=\" ? (\" \" + result.replace(rwhitespace, \" \") + \" \").indexOf(check) > -1 : operator === \"|=\" ? result === check || result.slice(0, check.length + 1) === check + \"-\" : false;\n\t\t\t\t\t};\n\t\t\t\t},\n\n\t\t\t\t\"CHILD\": function CHILD(type, what, argument, first, last) {\n\t\t\t\t\tvar simple = type.slice(0, 3) !== \"nth\",\n\t\t\t\t\t    forward = type.slice(-4) !== \"last\",\n\t\t\t\t\t    ofType = what === \"of-type\";\n\n\t\t\t\t\treturn first === 1 && last === 0 ?\n\n\t\t\t\t\t// Shortcut for :nth-*(n)\n\t\t\t\t\tfunction (elem) {\n\t\t\t\t\t\treturn !!elem.parentNode;\n\t\t\t\t\t} : function (elem, context, xml) {\n\t\t\t\t\t\tvar cache,\n\t\t\t\t\t\t    uniqueCache,\n\t\t\t\t\t\t    outerCache,\n\t\t\t\t\t\t    node,\n\t\t\t\t\t\t    nodeIndex,\n\t\t\t\t\t\t    start,\n\t\t\t\t\t\t    dir = simple !== forward ? \"nextSibling\" : \"previousSibling\",\n\t\t\t\t\t\t    parent = elem.parentNode,\n\t\t\t\t\t\t    name = ofType && elem.nodeName.toLowerCase(),\n\t\t\t\t\t\t    useCache = !xml && !ofType,\n\t\t\t\t\t\t    diff = false;\n\n\t\t\t\t\t\tif (parent) {\n\n\t\t\t\t\t\t\t// :(first|last|only)-(child|of-type)\n\t\t\t\t\t\t\tif (simple) {\n\t\t\t\t\t\t\t\twhile (dir) {\n\t\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\t\twhile (node = node[dir]) {\n\t\t\t\t\t\t\t\t\t\tif (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {\n\n\t\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// Reverse direction for :only-* (if we haven't yet done so)\n\t\t\t\t\t\t\t\t\tstart = dir = type === \"only\" && !start && \"nextSibling\";\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tstart = [forward ? parent.firstChild : parent.lastChild];\n\n\t\t\t\t\t\t\t// non-xml :nth-child(...) stores cache data on `parent`\n\t\t\t\t\t\t\tif (forward && useCache) {\n\n\t\t\t\t\t\t\t\t// Seek `elem` from a previously-cached index\n\n\t\t\t\t\t\t\t\t// ...in a gzip-friendly way\n\t\t\t\t\t\t\t\tnode = parent;\n\t\t\t\t\t\t\t\touterCache = node[expando] || (node[expando] = {});\n\n\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\tuniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});\n\n\t\t\t\t\t\t\t\tcache = uniqueCache[type] || [];\n\t\t\t\t\t\t\t\tnodeIndex = cache[0] === dirruns && cache[1];\n\t\t\t\t\t\t\t\tdiff = nodeIndex && cache[2];\n\t\t\t\t\t\t\t\tnode = nodeIndex && parent.childNodes[nodeIndex];\n\n\t\t\t\t\t\t\t\twhile (node = ++nodeIndex && node && node[dir] || (\n\n\t\t\t\t\t\t\t\t// Fallback to seeking `elem` from the start\n\t\t\t\t\t\t\t\tdiff = nodeIndex = 0) || start.pop()) {\n\n\t\t\t\t\t\t\t\t\t// When found, cache indexes on `parent` and break\n\t\t\t\t\t\t\t\t\tif (node.nodeType === 1 && ++diff && node === elem) {\n\t\t\t\t\t\t\t\t\t\tuniqueCache[type] = [dirruns, nodeIndex, diff];\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// Use previously-cached element index if available\n\t\t\t\t\t\t\t\tif (useCache) {\n\t\t\t\t\t\t\t\t\t// ...in a gzip-friendly way\n\t\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\t\touterCache = node[expando] || (node[expando] = {});\n\n\t\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\t\tuniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});\n\n\t\t\t\t\t\t\t\t\tcache = uniqueCache[type] || [];\n\t\t\t\t\t\t\t\t\tnodeIndex = cache[0] === dirruns && cache[1];\n\t\t\t\t\t\t\t\t\tdiff = nodeIndex;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// xml :nth-child(...)\n\t\t\t\t\t\t\t\t// or :nth-last-child(...) or :nth(-last)?-of-type(...)\n\t\t\t\t\t\t\t\tif (diff === false) {\n\t\t\t\t\t\t\t\t\t// Use the same loop as above to seek `elem` from the start\n\t\t\t\t\t\t\t\t\twhile (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {\n\n\t\t\t\t\t\t\t\t\t\tif ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {\n\n\t\t\t\t\t\t\t\t\t\t\t// Cache the index of each encountered element\n\t\t\t\t\t\t\t\t\t\t\tif (useCache) {\n\t\t\t\t\t\t\t\t\t\t\t\touterCache = node[expando] || (node[expando] = {});\n\n\t\t\t\t\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\t\t\t\t\tuniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});\n\n\t\t\t\t\t\t\t\t\t\t\t\tuniqueCache[type] = [dirruns, diff];\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\tif (node === elem) {\n\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Incorporate the offset, then check against cycle size\n\t\t\t\t\t\t\tdiff -= last;\n\t\t\t\t\t\t\treturn diff === first || diff % first === 0 && diff / first >= 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t},\n\n\t\t\t\t\"PSEUDO\": function PSEUDO(pseudo, argument) {\n\t\t\t\t\t// pseudo-class names are case-insensitive\n\t\t\t\t\t// http://www.w3.org/TR/selectors/#pseudo-classes\n\t\t\t\t\t// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n\t\t\t\t\t// Remember that setFilters inherits from pseudos\n\t\t\t\t\tvar args,\n\t\t\t\t\t    fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error(\"unsupported pseudo: \" + pseudo);\n\n\t\t\t\t\t// The user may use createPseudo to indicate that\n\t\t\t\t\t// arguments are needed to create the filter function\n\t\t\t\t\t// just as Sizzle does\n\t\t\t\t\tif (fn[expando]) {\n\t\t\t\t\t\treturn fn(argument);\n\t\t\t\t\t}\n\n\t\t\t\t\t// But maintain support for old signatures\n\t\t\t\t\tif (fn.length > 1) {\n\t\t\t\t\t\targs = [pseudo, pseudo, \"\", argument];\n\t\t\t\t\t\treturn Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {\n\t\t\t\t\t\t\tvar idx,\n\t\t\t\t\t\t\t    matched = fn(seed, argument),\n\t\t\t\t\t\t\t    i = matched.length;\n\t\t\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\t\t\tidx = indexOf(seed, matched[i]);\n\t\t\t\t\t\t\t\tseed[idx] = !(matches[idx] = matched[i]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}) : function (elem) {\n\t\t\t\t\t\t\treturn fn(elem, 0, args);\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\treturn fn;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tpseudos: {\n\t\t\t\t// Potentially complex pseudos\n\t\t\t\t\"not\": markFunction(function (selector) {\n\t\t\t\t\t// Trim the selector passed to compile\n\t\t\t\t\t// to avoid treating leading and trailing\n\t\t\t\t\t// spaces as combinators\n\t\t\t\t\tvar input = [],\n\t\t\t\t\t    results = [],\n\t\t\t\t\t    matcher = compile(selector.replace(rtrim, \"$1\"));\n\n\t\t\t\t\treturn matcher[expando] ? markFunction(function (seed, matches, context, xml) {\n\t\t\t\t\t\tvar elem,\n\t\t\t\t\t\t    unmatched = matcher(seed, null, xml, []),\n\t\t\t\t\t\t    i = seed.length;\n\n\t\t\t\t\t\t// Match elements unmatched by `matcher`\n\t\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\t\tif (elem = unmatched[i]) {\n\t\t\t\t\t\t\t\tseed[i] = !(matches[i] = elem);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}) : function (elem, context, xml) {\n\t\t\t\t\t\tinput[0] = elem;\n\t\t\t\t\t\tmatcher(input, null, xml, results);\n\t\t\t\t\t\t// Don't keep the element (issue #299)\n\t\t\t\t\t\tinput[0] = null;\n\t\t\t\t\t\treturn !results.pop();\n\t\t\t\t\t};\n\t\t\t\t}),\n\n\t\t\t\t\"has\": markFunction(function (selector) {\n\t\t\t\t\treturn function (elem) {\n\t\t\t\t\t\treturn Sizzle(selector, elem).length > 0;\n\t\t\t\t\t};\n\t\t\t\t}),\n\n\t\t\t\t\"contains\": markFunction(function (text) {\n\t\t\t\t\ttext = text.replace(runescape, funescape);\n\t\t\t\t\treturn function (elem) {\n\t\t\t\t\t\treturn (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;\n\t\t\t\t\t};\n\t\t\t\t}),\n\n\t\t\t\t// \"Whether an element is represented by a :lang() selector\n\t\t\t\t// is based solely on the element's language value\n\t\t\t\t// being equal to the identifier C,\n\t\t\t\t// or beginning with the identifier C immediately followed by \"-\".\n\t\t\t\t// The matching of C against the element's language value is performed case-insensitively.\n\t\t\t\t// The identifier C does not have to be a valid language name.\"\n\t\t\t\t// http://www.w3.org/TR/selectors/#lang-pseudo\n\t\t\t\t\"lang\": markFunction(function (lang) {\n\t\t\t\t\t// lang value must be a valid identifier\n\t\t\t\t\tif (!ridentifier.test(lang || \"\")) {\n\t\t\t\t\t\tSizzle.error(\"unsupported lang: \" + lang);\n\t\t\t\t\t}\n\t\t\t\t\tlang = lang.replace(runescape, funescape).toLowerCase();\n\t\t\t\t\treturn function (elem) {\n\t\t\t\t\t\tvar elemLang;\n\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\tif (elemLang = documentIsHTML ? elem.lang : elem.getAttribute(\"xml:lang\") || elem.getAttribute(\"lang\")) {\n\n\t\t\t\t\t\t\t\telemLang = elemLang.toLowerCase();\n\t\t\t\t\t\t\t\treturn elemLang === lang || elemLang.indexOf(lang + \"-\") === 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} while ((elem = elem.parentNode) && elem.nodeType === 1);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t};\n\t\t\t\t}),\n\n\t\t\t\t// Miscellaneous\n\t\t\t\t\"target\": function target(elem) {\n\t\t\t\t\tvar hash = window.location && window.location.hash;\n\t\t\t\t\treturn hash && hash.slice(1) === elem.id;\n\t\t\t\t},\n\n\t\t\t\t\"root\": function root(elem) {\n\t\t\t\t\treturn elem === docElem;\n\t\t\t\t},\n\n\t\t\t\t\"focus\": function focus(elem) {\n\t\t\t\t\treturn elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);\n\t\t\t\t},\n\n\t\t\t\t// Boolean properties\n\t\t\t\t\"enabled\": createDisabledPseudo(false),\n\t\t\t\t\"disabled\": createDisabledPseudo(true),\n\n\t\t\t\t\"checked\": function checked(elem) {\n\t\t\t\t\t// In CSS3, :checked should return both checked and selected elements\n\t\t\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\t\t\tvar nodeName = elem.nodeName.toLowerCase();\n\t\t\t\t\treturn nodeName === \"input\" && !!elem.checked || nodeName === \"option\" && !!elem.selected;\n\t\t\t\t},\n\n\t\t\t\t\"selected\": function selected(elem) {\n\t\t\t\t\t// Accessing this property makes selected-by-default\n\t\t\t\t\t// options in Safari work properly\n\t\t\t\t\tif (elem.parentNode) {\n\t\t\t\t\t\telem.parentNode.selectedIndex;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn elem.selected === true;\n\t\t\t\t},\n\n\t\t\t\t// Contents\n\t\t\t\t\"empty\": function empty(elem) {\n\t\t\t\t\t// http://www.w3.org/TR/selectors/#empty-pseudo\n\t\t\t\t\t// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\n\t\t\t\t\t//   but not by others (comment: 8; processing instruction: 7; etc.)\n\t\t\t\t\t// nodeType < 6 works because attributes (2) do not appear as children\n\t\t\t\t\tfor (elem = elem.firstChild; elem; elem = elem.nextSibling) {\n\t\t\t\t\t\tif (elem.nodeType < 6) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn true;\n\t\t\t\t},\n\n\t\t\t\t\"parent\": function parent(elem) {\n\t\t\t\t\treturn !Expr.pseudos[\"empty\"](elem);\n\t\t\t\t},\n\n\t\t\t\t// Element/input types\n\t\t\t\t\"header\": function header(elem) {\n\t\t\t\t\treturn rheader.test(elem.nodeName);\n\t\t\t\t},\n\n\t\t\t\t\"input\": function input(elem) {\n\t\t\t\t\treturn rinputs.test(elem.nodeName);\n\t\t\t\t},\n\n\t\t\t\t\"button\": function button(elem) {\n\t\t\t\t\tvar name = elem.nodeName.toLowerCase();\n\t\t\t\t\treturn name === \"input\" && elem.type === \"button\" || name === \"button\";\n\t\t\t\t},\n\n\t\t\t\t\"text\": function text(elem) {\n\t\t\t\t\tvar attr;\n\t\t\t\t\treturn elem.nodeName.toLowerCase() === \"input\" && elem.type === \"text\" && (\n\n\t\t\t\t\t// Support: IE<8\n\t\t\t\t\t// New HTML5 attribute values (e.g., \"search\") appear with elem.type === \"text\"\n\t\t\t\t\t(attr = elem.getAttribute(\"type\")) == null || attr.toLowerCase() === \"text\");\n\t\t\t\t},\n\n\t\t\t\t// Position-in-collection\n\t\t\t\t\"first\": createPositionalPseudo(function () {\n\t\t\t\t\treturn [0];\n\t\t\t\t}),\n\n\t\t\t\t\"last\": createPositionalPseudo(function (matchIndexes, length) {\n\t\t\t\t\treturn [length - 1];\n\t\t\t\t}),\n\n\t\t\t\t\"eq\": createPositionalPseudo(function (matchIndexes, length, argument) {\n\t\t\t\t\treturn [argument < 0 ? argument + length : argument];\n\t\t\t\t}),\n\n\t\t\t\t\"even\": createPositionalPseudo(function (matchIndexes, length) {\n\t\t\t\t\tvar i = 0;\n\t\t\t\t\tfor (; i < length; i += 2) {\n\t\t\t\t\t\tmatchIndexes.push(i);\n\t\t\t\t\t}\n\t\t\t\t\treturn matchIndexes;\n\t\t\t\t}),\n\n\t\t\t\t\"odd\": createPositionalPseudo(function (matchIndexes, length) {\n\t\t\t\t\tvar i = 1;\n\t\t\t\t\tfor (; i < length; i += 2) {\n\t\t\t\t\t\tmatchIndexes.push(i);\n\t\t\t\t\t}\n\t\t\t\t\treturn matchIndexes;\n\t\t\t\t}),\n\n\t\t\t\t\"lt\": createPositionalPseudo(function (matchIndexes, length, argument) {\n\t\t\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\t\t\tfor (; --i >= 0;) {\n\t\t\t\t\t\tmatchIndexes.push(i);\n\t\t\t\t\t}\n\t\t\t\t\treturn matchIndexes;\n\t\t\t\t}),\n\n\t\t\t\t\"gt\": createPositionalPseudo(function (matchIndexes, length, argument) {\n\t\t\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\t\t\tfor (; ++i < length;) {\n\t\t\t\t\t\tmatchIndexes.push(i);\n\t\t\t\t\t}\n\t\t\t\t\treturn matchIndexes;\n\t\t\t\t})\n\t\t\t}\n\t\t};\n\n\t\tExpr.pseudos[\"nth\"] = Expr.pseudos[\"eq\"];\n\n\t\t// Add button/input type pseudos\n\t\tfor (i in { radio: true, checkbox: true, file: true, password: true, image: true }) {\n\t\t\tExpr.pseudos[i] = createInputPseudo(i);\n\t\t}\n\t\tfor (i in { submit: true, reset: true }) {\n\t\t\tExpr.pseudos[i] = createButtonPseudo(i);\n\t\t}\n\n\t\t// Easy API for creating new setFilters\n\t\tfunction setFilters() {}\n\t\tsetFilters.prototype = Expr.filters = Expr.pseudos;\n\t\tExpr.setFilters = new setFilters();\n\n\t\ttokenize = Sizzle.tokenize = function (selector, parseOnly) {\n\t\t\tvar matched,\n\t\t\t    match,\n\t\t\t    tokens,\n\t\t\t    type,\n\t\t\t    soFar,\n\t\t\t    groups,\n\t\t\t    preFilters,\n\t\t\t    cached = tokenCache[selector + \" \"];\n\n\t\t\tif (cached) {\n\t\t\t\treturn parseOnly ? 0 : cached.slice(0);\n\t\t\t}\n\n\t\t\tsoFar = selector;\n\t\t\tgroups = [];\n\t\t\tpreFilters = Expr.preFilter;\n\n\t\t\twhile (soFar) {\n\n\t\t\t\t// Comma and first run\n\t\t\t\tif (!matched || (match = rcomma.exec(soFar))) {\n\t\t\t\t\tif (match) {\n\t\t\t\t\t\t// Don't consume trailing commas as valid\n\t\t\t\t\t\tsoFar = soFar.slice(match[0].length) || soFar;\n\t\t\t\t\t}\n\t\t\t\t\tgroups.push(tokens = []);\n\t\t\t\t}\n\n\t\t\t\tmatched = false;\n\n\t\t\t\t// Combinators\n\t\t\t\tif (match = rcombinators.exec(soFar)) {\n\t\t\t\t\tmatched = match.shift();\n\t\t\t\t\ttokens.push({\n\t\t\t\t\t\tvalue: matched,\n\t\t\t\t\t\t// Cast descendant combinators to space\n\t\t\t\t\t\ttype: match[0].replace(rtrim, \" \")\n\t\t\t\t\t});\n\t\t\t\t\tsoFar = soFar.slice(matched.length);\n\t\t\t\t}\n\n\t\t\t\t// Filters\n\t\t\t\tfor (type in Expr.filter) {\n\t\t\t\t\tif ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {\n\t\t\t\t\t\tmatched = match.shift();\n\t\t\t\t\t\ttokens.push({\n\t\t\t\t\t\t\tvalue: matched,\n\t\t\t\t\t\t\ttype: type,\n\t\t\t\t\t\t\tmatches: match\n\t\t\t\t\t\t});\n\t\t\t\t\t\tsoFar = soFar.slice(matched.length);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!matched) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Return the length of the invalid excess\n\t\t\t// if we're just parsing\n\t\t\t// Otherwise, throw an error or return tokens\n\t\t\treturn parseOnly ? soFar.length : soFar ? Sizzle.error(selector) :\n\t\t\t// Cache the tokens\n\t\t\ttokenCache(selector, groups).slice(0);\n\t\t};\n\n\t\tfunction toSelector(tokens) {\n\t\t\tvar i = 0,\n\t\t\t    len = tokens.length,\n\t\t\t    selector = \"\";\n\t\t\tfor (; i < len; i++) {\n\t\t\t\tselector += tokens[i].value;\n\t\t\t}\n\t\t\treturn selector;\n\t\t}\n\n\t\tfunction addCombinator(matcher, combinator, base) {\n\t\t\tvar dir = combinator.dir,\n\t\t\t    skip = combinator.next,\n\t\t\t    key = skip || dir,\n\t\t\t    checkNonElements = base && key === \"parentNode\",\n\t\t\t    doneName = done++;\n\n\t\t\treturn combinator.first ?\n\t\t\t// Check against closest ancestor/preceding element\n\t\t\tfunction (elem, context, xml) {\n\t\t\t\twhile (elem = elem[dir]) {\n\t\t\t\t\tif (elem.nodeType === 1 || checkNonElements) {\n\t\t\t\t\t\treturn matcher(elem, context, xml);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} :\n\n\t\t\t// Check against all ancestor/preceding elements\n\t\t\tfunction (elem, context, xml) {\n\t\t\t\tvar oldCache,\n\t\t\t\t    uniqueCache,\n\t\t\t\t    outerCache,\n\t\t\t\t    newCache = [dirruns, doneName];\n\n\t\t\t\t// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching\n\t\t\t\tif (xml) {\n\t\t\t\t\twhile (elem = elem[dir]) {\n\t\t\t\t\t\tif (elem.nodeType === 1 || checkNonElements) {\n\t\t\t\t\t\t\tif (matcher(elem, context, xml)) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\twhile (elem = elem[dir]) {\n\t\t\t\t\t\tif (elem.nodeType === 1 || checkNonElements) {\n\t\t\t\t\t\t\touterCache = elem[expando] || (elem[expando] = {});\n\n\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\tuniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {});\n\n\t\t\t\t\t\t\tif (skip && skip === elem.nodeName.toLowerCase()) {\n\t\t\t\t\t\t\t\telem = elem[dir] || elem;\n\t\t\t\t\t\t\t} else if ((oldCache = uniqueCache[key]) && oldCache[0] === dirruns && oldCache[1] === doneName) {\n\n\t\t\t\t\t\t\t\t// Assign to newCache so results back-propagate to previous elements\n\t\t\t\t\t\t\t\treturn newCache[2] = oldCache[2];\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// Reuse newcache so results back-propagate to previous elements\n\t\t\t\t\t\t\t\tuniqueCache[key] = newCache;\n\n\t\t\t\t\t\t\t\t// A match means we're done; a fail means we have to keep checking\n\t\t\t\t\t\t\t\tif (newCache[2] = matcher(elem, context, xml)) {\n\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tfunction elementMatcher(matchers) {\n\t\t\treturn matchers.length > 1 ? function (elem, context, xml) {\n\t\t\t\tvar i = matchers.length;\n\t\t\t\twhile (i--) {\n\t\t\t\t\tif (!matchers[i](elem, context, xml)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t} : matchers[0];\n\t\t}\n\n\t\tfunction multipleContexts(selector, contexts, results) {\n\t\t\tvar i = 0,\n\t\t\t    len = contexts.length;\n\t\t\tfor (; i < len; i++) {\n\t\t\t\tSizzle(selector, contexts[i], results);\n\t\t\t}\n\t\t\treturn results;\n\t\t}\n\n\t\tfunction condense(unmatched, map, filter, context, xml) {\n\t\t\tvar elem,\n\t\t\t    newUnmatched = [],\n\t\t\t    i = 0,\n\t\t\t    len = unmatched.length,\n\t\t\t    mapped = map != null;\n\n\t\t\tfor (; i < len; i++) {\n\t\t\t\tif (elem = unmatched[i]) {\n\t\t\t\t\tif (!filter || filter(elem, context, xml)) {\n\t\t\t\t\t\tnewUnmatched.push(elem);\n\t\t\t\t\t\tif (mapped) {\n\t\t\t\t\t\t\tmap.push(i);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn newUnmatched;\n\t\t}\n\n\t\tfunction setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {\n\t\t\tif (postFilter && !postFilter[expando]) {\n\t\t\t\tpostFilter = setMatcher(postFilter);\n\t\t\t}\n\t\t\tif (postFinder && !postFinder[expando]) {\n\t\t\t\tpostFinder = setMatcher(postFinder, postSelector);\n\t\t\t}\n\t\t\treturn markFunction(function (seed, results, context, xml) {\n\t\t\t\tvar temp,\n\t\t\t\t    i,\n\t\t\t\t    elem,\n\t\t\t\t    preMap = [],\n\t\t\t\t    postMap = [],\n\t\t\t\t    preexisting = results.length,\n\n\n\t\t\t\t// Get initial elements from seed or context\n\t\t\t\telems = seed || multipleContexts(selector || \"*\", context.nodeType ? [context] : context, []),\n\n\n\t\t\t\t// Prefilter to get matcher input, preserving a map for seed-results synchronization\n\t\t\t\tmatcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems,\n\t\t\t\t    matcherOut = matcher ?\n\t\t\t\t// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,\n\t\t\t\tpostFinder || (seed ? preFilter : preexisting || postFilter) ?\n\n\t\t\t\t// ...intermediate processing is necessary\n\t\t\t\t[] :\n\n\t\t\t\t// ...otherwise use results directly\n\t\t\t\tresults : matcherIn;\n\n\t\t\t\t// Find primary matches\n\t\t\t\tif (matcher) {\n\t\t\t\t\tmatcher(matcherIn, matcherOut, context, xml);\n\t\t\t\t}\n\n\t\t\t\t// Apply postFilter\n\t\t\t\tif (postFilter) {\n\t\t\t\t\ttemp = condense(matcherOut, postMap);\n\t\t\t\t\tpostFilter(temp, [], context, xml);\n\n\t\t\t\t\t// Un-match failing elements by moving them back to matcherIn\n\t\t\t\t\ti = temp.length;\n\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\tif (elem = temp[i]) {\n\t\t\t\t\t\t\tmatcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (seed) {\n\t\t\t\t\tif (postFinder || preFilter) {\n\t\t\t\t\t\tif (postFinder) {\n\t\t\t\t\t\t\t// Get the final matcherOut by condensing this intermediate into postFinder contexts\n\t\t\t\t\t\t\ttemp = [];\n\t\t\t\t\t\t\ti = matcherOut.length;\n\t\t\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\t\t\tif (elem = matcherOut[i]) {\n\t\t\t\t\t\t\t\t\t// Restore matcherIn since elem is not yet a final match\n\t\t\t\t\t\t\t\t\ttemp.push(matcherIn[i] = elem);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tpostFinder(null, matcherOut = [], temp, xml);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Move matched elements from seed to results to keep them synchronized\n\t\t\t\t\t\ti = matcherOut.length;\n\t\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\t\tif ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {\n\n\t\t\t\t\t\t\t\tseed[temp] = !(results[temp] = elem);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Add elements to results, through postFinder if defined\n\t\t\t\t} else {\n\t\t\t\t\tmatcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);\n\t\t\t\t\tif (postFinder) {\n\t\t\t\t\t\tpostFinder(null, results, matcherOut, xml);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpush.apply(results, matcherOut);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tfunction matcherFromTokens(tokens) {\n\t\t\tvar checkContext,\n\t\t\t    matcher,\n\t\t\t    j,\n\t\t\t    len = tokens.length,\n\t\t\t    leadingRelative = Expr.relative[tokens[0].type],\n\t\t\t    implicitRelative = leadingRelative || Expr.relative[\" \"],\n\t\t\t    i = leadingRelative ? 1 : 0,\n\n\n\t\t\t// The foundational matcher ensures that elements are reachable from top-level context(s)\n\t\t\tmatchContext = addCombinator(function (elem) {\n\t\t\t\treturn elem === checkContext;\n\t\t\t}, implicitRelative, true),\n\t\t\t    matchAnyContext = addCombinator(function (elem) {\n\t\t\t\treturn indexOf(checkContext, elem) > -1;\n\t\t\t}, implicitRelative, true),\n\t\t\t    matchers = [function (elem, context, xml) {\n\t\t\t\tvar ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));\n\t\t\t\t// Avoid hanging onto element (issue #299)\n\t\t\t\tcheckContext = null;\n\t\t\t\treturn ret;\n\t\t\t}];\n\n\t\t\tfor (; i < len; i++) {\n\t\t\t\tif (matcher = Expr.relative[tokens[i].type]) {\n\t\t\t\t\tmatchers = [addCombinator(elementMatcher(matchers), matcher)];\n\t\t\t\t} else {\n\t\t\t\t\tmatcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);\n\n\t\t\t\t\t// Return special upon seeing a positional matcher\n\t\t\t\t\tif (matcher[expando]) {\n\t\t\t\t\t\t// Find the next relative operator (if any) for proper handling\n\t\t\t\t\t\tj = ++i;\n\t\t\t\t\t\tfor (; j < len; j++) {\n\t\t\t\t\t\t\tif (Expr.relative[tokens[j].type]) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(\n\t\t\t\t\t\t// If the preceding token was a descendant combinator, insert an implicit any-element `*`\n\t\t\t\t\t\ttokens.slice(0, i - 1).concat({ value: tokens[i - 2].type === \" \" ? \"*\" : \"\" })).replace(rtrim, \"$1\"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));\n\t\t\t\t\t}\n\t\t\t\t\tmatchers.push(matcher);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn elementMatcher(matchers);\n\t\t}\n\n\t\tfunction matcherFromGroupMatchers(elementMatchers, setMatchers) {\n\t\t\tvar bySet = setMatchers.length > 0,\n\t\t\t    byElement = elementMatchers.length > 0,\n\t\t\t    superMatcher = function superMatcher(seed, context, xml, results, outermost) {\n\t\t\t\tvar elem,\n\t\t\t\t    j,\n\t\t\t\t    matcher,\n\t\t\t\t    matchedCount = 0,\n\t\t\t\t    i = \"0\",\n\t\t\t\t    unmatched = seed && [],\n\t\t\t\t    setMatched = [],\n\t\t\t\t    contextBackup = outermostContext,\n\n\t\t\t\t// We must always have either seed elements or outermost context\n\t\t\t\telems = seed || byElement && Expr.find[\"TAG\"](\"*\", outermost),\n\n\t\t\t\t// Use integer dirruns iff this is the outermost matcher\n\t\t\t\tdirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1,\n\t\t\t\t    len = elems.length;\n\n\t\t\t\tif (outermost) {\n\t\t\t\t\toutermostContext = context === document || context || outermost;\n\t\t\t\t}\n\n\t\t\t\t// Add elements passing elementMatchers directly to results\n\t\t\t\t// Support: IE<9, Safari\n\t\t\t\t// Tolerate NodeList properties (IE: \"length\"; Safari: <number>) matching elements by id\n\t\t\t\tfor (; i !== len && (elem = elems[i]) != null; i++) {\n\t\t\t\t\tif (byElement && elem) {\n\t\t\t\t\t\tj = 0;\n\t\t\t\t\t\tif (!context && elem.ownerDocument !== document) {\n\t\t\t\t\t\t\tsetDocument(elem);\n\t\t\t\t\t\t\txml = !documentIsHTML;\n\t\t\t\t\t\t}\n\t\t\t\t\t\twhile (matcher = elementMatchers[j++]) {\n\t\t\t\t\t\t\tif (matcher(elem, context || document, xml)) {\n\t\t\t\t\t\t\t\tresults.push(elem);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (outermost) {\n\t\t\t\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Track unmatched elements for set filters\n\t\t\t\t\tif (bySet) {\n\t\t\t\t\t\t// They will have gone through all possible matchers\n\t\t\t\t\t\tif (elem = !matcher && elem) {\n\t\t\t\t\t\t\tmatchedCount--;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Lengthen the array for every element, matched or not\n\t\t\t\t\t\tif (seed) {\n\t\t\t\t\t\t\tunmatched.push(elem);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// `i` is now the count of elements visited above, and adding it to `matchedCount`\n\t\t\t\t// makes the latter nonnegative.\n\t\t\t\tmatchedCount += i;\n\n\t\t\t\t// Apply set filters to unmatched elements\n\t\t\t\t// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`\n\t\t\t\t// equals `i`), unless we didn't visit _any_ elements in the above loop because we have\n\t\t\t\t// no element matchers and no seed.\n\t\t\t\t// Incrementing an initially-string \"0\" `i` allows `i` to remain a string only in that\n\t\t\t\t// case, which will result in a \"00\" `matchedCount` that differs from `i` but is also\n\t\t\t\t// numerically zero.\n\t\t\t\tif (bySet && i !== matchedCount) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile (matcher = setMatchers[j++]) {\n\t\t\t\t\t\tmatcher(unmatched, setMatched, context, xml);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (seed) {\n\t\t\t\t\t\t// Reintegrate element matches to eliminate the need for sorting\n\t\t\t\t\t\tif (matchedCount > 0) {\n\t\t\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\t\t\tif (!(unmatched[i] || setMatched[i])) {\n\t\t\t\t\t\t\t\t\tsetMatched[i] = pop.call(results);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Discard index placeholder values to get only actual matches\n\t\t\t\t\t\tsetMatched = condense(setMatched);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Add matches to results\n\t\t\t\t\tpush.apply(results, setMatched);\n\n\t\t\t\t\t// Seedless set matches succeeding multiple successful matchers stipulate sorting\n\t\t\t\t\tif (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {\n\n\t\t\t\t\t\tSizzle.uniqueSort(results);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Override manipulation of globals by nested matchers\n\t\t\t\tif (outermost) {\n\t\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\t\toutermostContext = contextBackup;\n\t\t\t\t}\n\n\t\t\t\treturn unmatched;\n\t\t\t};\n\n\t\t\treturn bySet ? markFunction(superMatcher) : superMatcher;\n\t\t}\n\n\t\tcompile = Sizzle.compile = function (selector, match /* Internal Use Only */) {\n\t\t\tvar i,\n\t\t\t    setMatchers = [],\n\t\t\t    elementMatchers = [],\n\t\t\t    cached = compilerCache[selector + \" \"];\n\n\t\t\tif (!cached) {\n\t\t\t\t// Generate a function of recursive functions that can be used to check each element\n\t\t\t\tif (!match) {\n\t\t\t\t\tmatch = tokenize(selector);\n\t\t\t\t}\n\t\t\t\ti = match.length;\n\t\t\t\twhile (i--) {\n\t\t\t\t\tcached = matcherFromTokens(match[i]);\n\t\t\t\t\tif (cached[expando]) {\n\t\t\t\t\t\tsetMatchers.push(cached);\n\t\t\t\t\t} else {\n\t\t\t\t\t\telementMatchers.push(cached);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Cache the compiled function\n\t\t\t\tcached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));\n\n\t\t\t\t// Save selector and tokenization\n\t\t\t\tcached.selector = selector;\n\t\t\t}\n\t\t\treturn cached;\n\t\t};\n\n\t\t/**\n   * A low-level selection function that works with Sizzle's compiled\n   *  selector functions\n   * @param {String|Function} selector A selector or a pre-compiled\n   *  selector function built with Sizzle.compile\n   * @param {Element} context\n   * @param {Array} [results]\n   * @param {Array} [seed] A set of elements to match against\n   */\n\t\tselect = Sizzle.select = function (selector, context, results, seed) {\n\t\t\tvar i,\n\t\t\t    tokens,\n\t\t\t    token,\n\t\t\t    type,\n\t\t\t    find,\n\t\t\t    compiled = typeof selector === \"function\" && selector,\n\t\t\t    match = !seed && tokenize(selector = compiled.selector || selector);\n\n\t\t\tresults = results || [];\n\n\t\t\t// Try to minimize operations if there is only one selector in the list and no seed\n\t\t\t// (the latter of which guarantees us context)\n\t\t\tif (match.length === 1) {\n\n\t\t\t\t// Reduce context if the leading compound selector is an ID\n\t\t\t\ttokens = match[0] = match[0].slice(0);\n\t\t\t\tif (tokens.length > 2 && (token = tokens[0]).type === \"ID\" && support.getById && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {\n\n\t\t\t\t\tcontext = (Expr.find[\"ID\"](token.matches[0].replace(runescape, funescape), context) || [])[0];\n\t\t\t\t\tif (!context) {\n\t\t\t\t\t\treturn results;\n\n\t\t\t\t\t\t// Precompiled matchers will still verify ancestry, so step up a level\n\t\t\t\t\t} else if (compiled) {\n\t\t\t\t\t\tcontext = context.parentNode;\n\t\t\t\t\t}\n\n\t\t\t\t\tselector = selector.slice(tokens.shift().value.length);\n\t\t\t\t}\n\n\t\t\t\t// Fetch a seed set for right-to-left matching\n\t\t\t\ti = matchExpr[\"needsContext\"].test(selector) ? 0 : tokens.length;\n\t\t\t\twhile (i--) {\n\t\t\t\t\ttoken = tokens[i];\n\n\t\t\t\t\t// Abort if we hit a combinator\n\t\t\t\t\tif (Expr.relative[type = token.type]) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif (find = Expr.find[type]) {\n\t\t\t\t\t\t// Search, expanding context for leading sibling combinators\n\t\t\t\t\t\tif (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {\n\n\t\t\t\t\t\t\t// If seed is empty or no tokens remain, we can return early\n\t\t\t\t\t\t\ttokens.splice(i, 1);\n\t\t\t\t\t\t\tselector = seed.length && toSelector(tokens);\n\t\t\t\t\t\t\tif (!selector) {\n\t\t\t\t\t\t\t\tpush.apply(results, seed);\n\t\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Compile and execute a filtering function if one is not provided\n\t\t\t// Provide `match` to avoid retokenization if we modified the selector above\n\t\t\t(compiled || compile(selector, match))(seed, context, !documentIsHTML, results, !context || rsibling.test(selector) && testContext(context.parentNode) || context);\n\t\t\treturn results;\n\t\t};\n\n\t\t// One-time assignments\n\n\t\t// Sort stability\n\t\tsupport.sortStable = expando.split(\"\").sort(sortOrder).join(\"\") === expando;\n\n\t\t// Support: Chrome 14-35+\n\t\t// Always assume duplicates if they aren't passed to the comparison function\n\t\tsupport.detectDuplicates = !!hasDuplicate;\n\n\t\t// Initialize against the default document\n\t\tsetDocument();\n\n\t\t// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)\n\t\t// Detached nodes confoundingly follow *each other*\n\t\tsupport.sortDetached = assert(function (el) {\n\t\t\t// Should return 1, but returns 4 (following)\n\t\t\treturn el.compareDocumentPosition(document.createElement(\"fieldset\")) & 1;\n\t\t});\n\n\t\t// Support: IE<8\n\t\t// Prevent attribute/property \"interpolation\"\n\t\t// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx\n\t\tif (!assert(function (el) {\n\t\t\tel.innerHTML = \"<a href='#'></a>\";\n\t\t\treturn el.firstChild.getAttribute(\"href\") === \"#\";\n\t\t})) {\n\t\t\taddHandle(\"type|href|height|width\", function (elem, name, isXML) {\n\t\t\t\tif (!isXML) {\n\t\t\t\t\treturn elem.getAttribute(name, name.toLowerCase() === \"type\" ? 1 : 2);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// Support: IE<9\n\t\t// Use defaultValue in place of getAttribute(\"value\")\n\t\tif (!support.attributes || !assert(function (el) {\n\t\t\tel.innerHTML = \"<input/>\";\n\t\t\tel.firstChild.setAttribute(\"value\", \"\");\n\t\t\treturn el.firstChild.getAttribute(\"value\") === \"\";\n\t\t})) {\n\t\t\taddHandle(\"value\", function (elem, name, isXML) {\n\t\t\t\tif (!isXML && elem.nodeName.toLowerCase() === \"input\") {\n\t\t\t\t\treturn elem.defaultValue;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// Support: IE<9\n\t\t// Use getAttributeNode to fetch booleans when getAttribute lies\n\t\tif (!assert(function (el) {\n\t\t\treturn el.getAttribute(\"disabled\") == null;\n\t\t})) {\n\t\t\taddHandle(booleans, function (elem, name, isXML) {\n\t\t\t\tvar val;\n\t\t\t\tif (!isXML) {\n\t\t\t\t\treturn elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\treturn Sizzle;\n\t}(window);\n\n\tjQuery.find = Sizzle;\n\tjQuery.expr = Sizzle.selectors;\n\n\t// Deprecated\n\tjQuery.expr[\":\"] = jQuery.expr.pseudos;\n\tjQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;\n\tjQuery.text = Sizzle.getText;\n\tjQuery.isXMLDoc = Sizzle.isXML;\n\tjQuery.contains = Sizzle.contains;\n\tjQuery.escapeSelector = Sizzle.escape;\n\n\tvar dir = function dir(elem, _dir, until) {\n\t\tvar matched = [],\n\t\t    truncate = until !== undefined;\n\n\t\twhile ((elem = elem[_dir]) && elem.nodeType !== 9) {\n\t\t\tif (elem.nodeType === 1) {\n\t\t\t\tif (truncate && jQuery(elem).is(until)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tmatched.push(elem);\n\t\t\t}\n\t\t}\n\t\treturn matched;\n\t};\n\n\tvar _siblings = function _siblings(n, elem) {\n\t\tvar matched = [];\n\n\t\tfor (; n; n = n.nextSibling) {\n\t\t\tif (n.nodeType === 1 && n !== elem) {\n\t\t\t\tmatched.push(n);\n\t\t\t}\n\t\t}\n\n\t\treturn matched;\n\t};\n\n\tvar rneedsContext = jQuery.expr.match.needsContext;\n\n\tvar rsingleTag = /^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i;\n\n\tvar risSimple = /^.[^:#\\[\\.,]*$/;\n\n\t// Implement the identical functionality for filter and not\n\tfunction winnow(elements, qualifier, not) {\n\t\tif (jQuery.isFunction(qualifier)) {\n\t\t\treturn jQuery.grep(elements, function (elem, i) {\n\t\t\t\treturn !!qualifier.call(elem, i, elem) !== not;\n\t\t\t});\n\t\t}\n\n\t\tif (qualifier.nodeType) {\n\t\t\treturn jQuery.grep(elements, function (elem) {\n\t\t\t\treturn elem === qualifier !== not;\n\t\t\t});\n\t\t}\n\n\t\tif (typeof qualifier === \"string\") {\n\t\t\tif (risSimple.test(qualifier)) {\n\t\t\t\treturn jQuery.filter(qualifier, elements, not);\n\t\t\t}\n\n\t\t\tqualifier = jQuery.filter(qualifier, elements);\n\t\t}\n\n\t\treturn jQuery.grep(elements, function (elem) {\n\t\t\treturn indexOf.call(qualifier, elem) > -1 !== not && elem.nodeType === 1;\n\t\t});\n\t}\n\n\tjQuery.filter = function (expr, elems, not) {\n\t\tvar elem = elems[0];\n\n\t\tif (not) {\n\t\t\texpr = \":not(\" + expr + \")\";\n\t\t}\n\n\t\treturn elems.length === 1 && elem.nodeType === 1 ? jQuery.find.matchesSelector(elem, expr) ? [elem] : [] : jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {\n\t\t\treturn elem.nodeType === 1;\n\t\t}));\n\t};\n\n\tjQuery.fn.extend({\n\t\tfind: function find(selector) {\n\t\t\tvar i,\n\t\t\t    ret,\n\t\t\t    len = this.length,\n\t\t\t    self = this;\n\n\t\t\tif (typeof selector !== \"string\") {\n\t\t\t\treturn this.pushStack(jQuery(selector).filter(function () {\n\t\t\t\t\tfor (i = 0; i < len; i++) {\n\t\t\t\t\t\tif (jQuery.contains(self[i], this)) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t}\n\n\t\t\tret = this.pushStack([]);\n\n\t\t\tfor (i = 0; i < len; i++) {\n\t\t\t\tjQuery.find(selector, self[i], ret);\n\t\t\t}\n\n\t\t\treturn len > 1 ? jQuery.uniqueSort(ret) : ret;\n\t\t},\n\t\tfilter: function filter(selector) {\n\t\t\treturn this.pushStack(winnow(this, selector || [], false));\n\t\t},\n\t\tnot: function not(selector) {\n\t\t\treturn this.pushStack(winnow(this, selector || [], true));\n\t\t},\n\t\tis: function is(selector) {\n\t\t\treturn !!winnow(this,\n\n\t\t\t// If this is a positional/relative selector, check membership in the returned set\n\t\t\t// so $(\"p:first\").is(\"p:last\") won't return true for a doc with two \"p\".\n\t\t\ttypeof selector === \"string\" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;\n\t\t}\n\t});\n\n\t// Initialize a jQuery object\n\n\n\t// A central reference to the root jQuery(document)\n\tvar rootjQuery,\n\n\n\t// A simple way to check for HTML strings\n\t// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)\n\t// Strict HTML recognition (#11290: must start with <)\n\t// Shortcut simple #id case for speed\n\trquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/,\n\t    init = jQuery.fn.init = function (selector, context, root) {\n\t\tvar match, elem;\n\n\t\t// HANDLE: $(\"\"), $(null), $(undefined), $(false)\n\t\tif (!selector) {\n\t\t\treturn this;\n\t\t}\n\n\t\t// Method init() accepts an alternate rootjQuery\n\t\t// so migrate can support jQuery.sub (gh-2101)\n\t\troot = root || rootjQuery;\n\n\t\t// Handle HTML strings\n\t\tif (typeof selector === \"string\") {\n\t\t\tif (selector[0] === \"<\" && selector[selector.length - 1] === \">\" && selector.length >= 3) {\n\n\t\t\t\t// Assume that strings that start and end with <> are HTML and skip the regex check\n\t\t\t\tmatch = [null, selector, null];\n\t\t\t} else {\n\t\t\t\tmatch = rquickExpr.exec(selector);\n\t\t\t}\n\n\t\t\t// Match html or make sure no context is specified for #id\n\t\t\tif (match && (match[1] || !context)) {\n\n\t\t\t\t// HANDLE: $(html) -> $(array)\n\t\t\t\tif (match[1]) {\n\t\t\t\t\tcontext = context instanceof jQuery ? context[0] : context;\n\n\t\t\t\t\t// Option to run scripts is true for back-compat\n\t\t\t\t\t// Intentionally let the error be thrown if parseHTML is not present\n\t\t\t\t\tjQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));\n\n\t\t\t\t\t// HANDLE: $(html, props)\n\t\t\t\t\tif (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {\n\t\t\t\t\t\tfor (match in context) {\n\n\t\t\t\t\t\t\t// Properties of context are called as methods if possible\n\t\t\t\t\t\t\tif (jQuery.isFunction(this[match])) {\n\t\t\t\t\t\t\t\tthis[match](context[match]);\n\n\t\t\t\t\t\t\t\t// ...and otherwise set as attributes\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.attr(match, context[match]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t\t// HANDLE: $(#id)\n\t\t\t\t} else {\n\t\t\t\t\telem = document.getElementById(match[2]);\n\n\t\t\t\t\tif (elem) {\n\n\t\t\t\t\t\t// Inject the element directly into the jQuery object\n\t\t\t\t\t\tthis[0] = elem;\n\t\t\t\t\t\tthis.length = 1;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\t\t\t\t// HANDLE: $(expr, $(...))\n\t\t\t} else if (!context || context.jquery) {\n\t\t\t\treturn (context || root).find(selector);\n\n\t\t\t\t// HANDLE: $(expr, context)\n\t\t\t\t// (which is just equivalent to: $(context).find(expr)\n\t\t\t} else {\n\t\t\t\treturn this.constructor(context).find(selector);\n\t\t\t}\n\n\t\t\t// HANDLE: $(DOMElement)\n\t\t} else if (selector.nodeType) {\n\t\t\tthis[0] = selector;\n\t\t\tthis.length = 1;\n\t\t\treturn this;\n\n\t\t\t// HANDLE: $(function)\n\t\t\t// Shortcut for document ready\n\t\t} else if (jQuery.isFunction(selector)) {\n\t\t\treturn root.ready !== undefined ? root.ready(selector) :\n\n\t\t\t// Execute immediately if ready is not present\n\t\t\tselector(jQuery);\n\t\t}\n\n\t\treturn jQuery.makeArray(selector, this);\n\t};\n\n\t// Give the init function the jQuery prototype for later instantiation\n\tinit.prototype = jQuery.fn;\n\n\t// Initialize central reference\n\trootjQuery = jQuery(document);\n\n\tvar rparentsprev = /^(?:parents|prev(?:Until|All))/,\n\n\n\t// Methods guaranteed to produce a unique set when starting from a unique set\n\tguaranteedUnique = {\n\t\tchildren: true,\n\t\tcontents: true,\n\t\tnext: true,\n\t\tprev: true\n\t};\n\n\tjQuery.fn.extend({\n\t\thas: function has(target) {\n\t\t\tvar targets = jQuery(target, this),\n\t\t\t    l = targets.length;\n\n\t\t\treturn this.filter(function () {\n\t\t\t\tvar i = 0;\n\t\t\t\tfor (; i < l; i++) {\n\t\t\t\t\tif (jQuery.contains(this, targets[i])) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\tclosest: function closest(selectors, context) {\n\t\t\tvar cur,\n\t\t\t    i = 0,\n\t\t\t    l = this.length,\n\t\t\t    matched = [],\n\t\t\t    targets = typeof selectors !== \"string\" && jQuery(selectors);\n\n\t\t\t// Positional selectors never match, since there's no _selection_ context\n\t\t\tif (!rneedsContext.test(selectors)) {\n\t\t\t\tfor (; i < l; i++) {\n\t\t\t\t\tfor (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {\n\n\t\t\t\t\t\t// Always skip document fragments\n\t\t\t\t\t\tif (cur.nodeType < 11 && (targets ? targets.index(cur) > -1 :\n\n\t\t\t\t\t\t// Don't pass non-elements to Sizzle\n\t\t\t\t\t\tcur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {\n\n\t\t\t\t\t\t\tmatched.push(cur);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this.pushStack(matched.length > 1 ? jQuery.uniqueSort(matched) : matched);\n\t\t},\n\n\t\t// Determine the position of an element within the set\n\t\tindex: function index(elem) {\n\n\t\t\t// No argument, return index in parent\n\t\t\tif (!elem) {\n\t\t\t\treturn this[0] && this[0].parentNode ? this.first().prevAll().length : -1;\n\t\t\t}\n\n\t\t\t// Index in selector\n\t\t\tif (typeof elem === \"string\") {\n\t\t\t\treturn indexOf.call(jQuery(elem), this[0]);\n\t\t\t}\n\n\t\t\t// Locate the position of the desired element\n\t\t\treturn indexOf.call(this,\n\n\t\t\t// If it receives a jQuery object, the first element is used\n\t\t\telem.jquery ? elem[0] : elem);\n\t\t},\n\n\t\tadd: function add(selector, context) {\n\t\t\treturn this.pushStack(jQuery.uniqueSort(jQuery.merge(this.get(), jQuery(selector, context))));\n\t\t},\n\n\t\taddBack: function addBack(selector) {\n\t\t\treturn this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));\n\t\t}\n\t});\n\n\tfunction sibling(cur, dir) {\n\t\twhile ((cur = cur[dir]) && cur.nodeType !== 1) {}\n\t\treturn cur;\n\t}\n\n\tjQuery.each({\n\t\tparent: function parent(elem) {\n\t\t\tvar parent = elem.parentNode;\n\t\t\treturn parent && parent.nodeType !== 11 ? parent : null;\n\t\t},\n\t\tparents: function parents(elem) {\n\t\t\treturn dir(elem, \"parentNode\");\n\t\t},\n\t\tparentsUntil: function parentsUntil(elem, i, until) {\n\t\t\treturn dir(elem, \"parentNode\", until);\n\t\t},\n\t\tnext: function next(elem) {\n\t\t\treturn sibling(elem, \"nextSibling\");\n\t\t},\n\t\tprev: function prev(elem) {\n\t\t\treturn sibling(elem, \"previousSibling\");\n\t\t},\n\t\tnextAll: function nextAll(elem) {\n\t\t\treturn dir(elem, \"nextSibling\");\n\t\t},\n\t\tprevAll: function prevAll(elem) {\n\t\t\treturn dir(elem, \"previousSibling\");\n\t\t},\n\t\tnextUntil: function nextUntil(elem, i, until) {\n\t\t\treturn dir(elem, \"nextSibling\", until);\n\t\t},\n\t\tprevUntil: function prevUntil(elem, i, until) {\n\t\t\treturn dir(elem, \"previousSibling\", until);\n\t\t},\n\t\tsiblings: function siblings(elem) {\n\t\t\treturn _siblings((elem.parentNode || {}).firstChild, elem);\n\t\t},\n\t\tchildren: function children(elem) {\n\t\t\treturn _siblings(elem.firstChild);\n\t\t},\n\t\tcontents: function contents(elem) {\n\t\t\treturn elem.contentDocument || jQuery.merge([], elem.childNodes);\n\t\t}\n\t}, function (name, fn) {\n\t\tjQuery.fn[name] = function (until, selector) {\n\t\t\tvar matched = jQuery.map(this, fn, until);\n\n\t\t\tif (name.slice(-5) !== \"Until\") {\n\t\t\t\tselector = until;\n\t\t\t}\n\n\t\t\tif (selector && typeof selector === \"string\") {\n\t\t\t\tmatched = jQuery.filter(selector, matched);\n\t\t\t}\n\n\t\t\tif (this.length > 1) {\n\n\t\t\t\t// Remove duplicates\n\t\t\t\tif (!guaranteedUnique[name]) {\n\t\t\t\t\tjQuery.uniqueSort(matched);\n\t\t\t\t}\n\n\t\t\t\t// Reverse order for parents* and prev-derivatives\n\t\t\t\tif (rparentsprev.test(name)) {\n\t\t\t\t\tmatched.reverse();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this.pushStack(matched);\n\t\t};\n\t});\n\tvar rnotwhite = /\\S+/g;\n\n\t// Convert String-formatted options into Object-formatted ones\n\tfunction createOptions(options) {\n\t\tvar object = {};\n\t\tjQuery.each(options.match(rnotwhite) || [], function (_, flag) {\n\t\t\tobject[flag] = true;\n\t\t});\n\t\treturn object;\n\t}\n\n\t/*\n  * Create a callback list using the following parameters:\n  *\n  *\toptions: an optional list of space-separated options that will change how\n  *\t\t\tthe callback list behaves or a more traditional option object\n  *\n  * By default a callback list will act like an event callback list and can be\n  * \"fired\" multiple times.\n  *\n  * Possible options:\n  *\n  *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\n  *\n  *\tmemory:\t\t\twill keep track of previous values and will call any callback added\n  *\t\t\t\t\tafter the list has been fired right away with the latest \"memorized\"\n  *\t\t\t\t\tvalues (like a Deferred)\n  *\n  *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\n  *\n  *\tstopOnFalse:\tinterrupt callings when a callback returns false\n  *\n  */\n\tjQuery.Callbacks = function (options) {\n\n\t\t// Convert options from String-formatted to Object-formatted if needed\n\t\t// (we check in cache first)\n\t\toptions = typeof options === \"string\" ? createOptions(options) : jQuery.extend({}, options);\n\n\t\tvar // Flag to know if list is currently firing\n\t\tfiring,\n\n\n\t\t// Last fire value for non-forgettable lists\n\t\tmemory,\n\n\n\t\t// Flag to know if list was already fired\n\t\t_fired,\n\n\n\t\t// Flag to prevent firing\n\t\t_locked,\n\n\n\t\t// Actual callback list\n\t\tlist = [],\n\n\n\t\t// Queue of execution data for repeatable lists\n\t\tqueue = [],\n\n\n\t\t// Index of currently firing callback (modified by add/remove as needed)\n\t\tfiringIndex = -1,\n\n\n\t\t// Fire callbacks\n\t\tfire = function fire() {\n\n\t\t\t// Enforce single-firing\n\t\t\t_locked = options.once;\n\n\t\t\t// Execute callbacks for all pending executions,\n\t\t\t// respecting firingIndex overrides and runtime changes\n\t\t\t_fired = firing = true;\n\t\t\tfor (; queue.length; firingIndex = -1) {\n\t\t\t\tmemory = queue.shift();\n\t\t\t\twhile (++firingIndex < list.length) {\n\n\t\t\t\t\t// Run callback and check for early termination\n\t\t\t\t\tif (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {\n\n\t\t\t\t\t\t// Jump to end and forget the data so .add doesn't re-fire\n\t\t\t\t\t\tfiringIndex = list.length;\n\t\t\t\t\t\tmemory = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Forget the data if we're done with it\n\t\t\tif (!options.memory) {\n\t\t\t\tmemory = false;\n\t\t\t}\n\n\t\t\tfiring = false;\n\n\t\t\t// Clean up if we're done firing for good\n\t\t\tif (_locked) {\n\n\t\t\t\t// Keep an empty list if we have data for future add calls\n\t\t\t\tif (memory) {\n\t\t\t\t\tlist = [];\n\n\t\t\t\t\t// Otherwise, this object is spent\n\t\t\t\t} else {\n\t\t\t\t\tlist = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\n\t\t// Actual Callbacks object\n\t\tself = {\n\n\t\t\t// Add a callback or a collection of callbacks to the list\n\t\t\tadd: function add() {\n\t\t\t\tif (list) {\n\n\t\t\t\t\t// If we have memory from a past run, we should fire after adding\n\t\t\t\t\tif (memory && !firing) {\n\t\t\t\t\t\tfiringIndex = list.length - 1;\n\t\t\t\t\t\tqueue.push(memory);\n\t\t\t\t\t}\n\n\t\t\t\t\t(function add(args) {\n\t\t\t\t\t\tjQuery.each(args, function (_, arg) {\n\t\t\t\t\t\t\tif (jQuery.isFunction(arg)) {\n\t\t\t\t\t\t\t\tif (!options.unique || !self.has(arg)) {\n\t\t\t\t\t\t\t\t\tlist.push(arg);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if (arg && arg.length && jQuery.type(arg) !== \"string\") {\n\n\t\t\t\t\t\t\t\t// Inspect recursively\n\t\t\t\t\t\t\t\tadd(arg);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t})(arguments);\n\n\t\t\t\t\tif (memory && !firing) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Remove a callback from the list\n\t\t\tremove: function remove() {\n\t\t\t\tjQuery.each(arguments, function (_, arg) {\n\t\t\t\t\tvar index;\n\t\t\t\t\twhile ((index = jQuery.inArray(arg, list, index)) > -1) {\n\t\t\t\t\t\tlist.splice(index, 1);\n\n\t\t\t\t\t\t// Handle firing indexes\n\t\t\t\t\t\tif (index <= firingIndex) {\n\t\t\t\t\t\t\tfiringIndex--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Check if a given callback is in the list.\n\t\t\t// If no argument is given, return whether or not list has callbacks attached.\n\t\t\thas: function has(fn) {\n\t\t\t\treturn fn ? jQuery.inArray(fn, list) > -1 : list.length > 0;\n\t\t\t},\n\n\t\t\t// Remove all callbacks from the list\n\t\t\tempty: function empty() {\n\t\t\t\tif (list) {\n\t\t\t\t\tlist = [];\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Disable .fire and .add\n\t\t\t// Abort any current/pending executions\n\t\t\t// Clear all callbacks and values\n\t\t\tdisable: function disable() {\n\t\t\t\t_locked = queue = [];\n\t\t\t\tlist = memory = \"\";\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tdisabled: function disabled() {\n\t\t\t\treturn !list;\n\t\t\t},\n\n\t\t\t// Disable .fire\n\t\t\t// Also disable .add unless we have memory (since it would have no effect)\n\t\t\t// Abort any pending executions\n\t\t\tlock: function lock() {\n\t\t\t\t_locked = queue = [];\n\t\t\t\tif (!memory && !firing) {\n\t\t\t\t\tlist = memory = \"\";\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tlocked: function locked() {\n\t\t\t\treturn !!_locked;\n\t\t\t},\n\n\t\t\t// Call all callbacks with the given context and arguments\n\t\t\tfireWith: function fireWith(context, args) {\n\t\t\t\tif (!_locked) {\n\t\t\t\t\targs = args || [];\n\t\t\t\t\targs = [context, args.slice ? args.slice() : args];\n\t\t\t\t\tqueue.push(args);\n\t\t\t\t\tif (!firing) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Call all the callbacks with the given arguments\n\t\t\tfire: function fire() {\n\t\t\t\tself.fireWith(this, arguments);\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// To know if the callbacks have already been called at least once\n\t\t\tfired: function fired() {\n\t\t\t\treturn !!_fired;\n\t\t\t}\n\t\t};\n\n\t\treturn self;\n\t};\n\n\tfunction Identity(v) {\n\t\treturn v;\n\t}\n\tfunction Thrower(ex) {\n\t\tthrow ex;\n\t}\n\n\tfunction adoptValue(value, resolve, reject) {\n\t\tvar method;\n\n\t\ttry {\n\n\t\t\t// Check for promise aspect first to privilege synchronous behavior\n\t\t\tif (value && jQuery.isFunction(method = value.promise)) {\n\t\t\t\tmethod.call(value).done(resolve).fail(reject);\n\n\t\t\t\t// Other thenables\n\t\t\t} else if (value && jQuery.isFunction(method = value.then)) {\n\t\t\t\tmethod.call(value, resolve, reject);\n\n\t\t\t\t// Other non-thenables\n\t\t\t} else {\n\n\t\t\t\t// Support: Android 4.0 only\n\t\t\t\t// Strict mode functions invoked without .call/.apply get global-object context\n\t\t\t\tresolve.call(undefined, value);\n\t\t\t}\n\n\t\t\t// For Promises/A+, convert exceptions into rejections\n\t\t\t// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in\n\t\t\t// Deferred#then to conditionally suppress rejection.\n\t\t} catch (value) {\n\n\t\t\t// Support: Android 4.0 only\n\t\t\t// Strict mode functions invoked without .call/.apply get global-object context\n\t\t\treject.call(undefined, value);\n\t\t}\n\t}\n\n\tjQuery.extend({\n\n\t\tDeferred: function Deferred(func) {\n\t\t\tvar tuples = [\n\n\t\t\t// action, add listener, callbacks,\n\t\t\t// ... .then handlers, argument index, [final state]\n\t\t\t[\"notify\", \"progress\", jQuery.Callbacks(\"memory\"), jQuery.Callbacks(\"memory\"), 2], [\"resolve\", \"done\", jQuery.Callbacks(\"once memory\"), jQuery.Callbacks(\"once memory\"), 0, \"resolved\"], [\"reject\", \"fail\", jQuery.Callbacks(\"once memory\"), jQuery.Callbacks(\"once memory\"), 1, \"rejected\"]],\n\t\t\t    _state = \"pending\",\n\t\t\t    _promise = {\n\t\t\t\tstate: function state() {\n\t\t\t\t\treturn _state;\n\t\t\t\t},\n\t\t\t\talways: function always() {\n\t\t\t\t\tdeferred.done(arguments).fail(arguments);\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\t\t\t\t\"catch\": function _catch(fn) {\n\t\t\t\t\treturn _promise.then(null, fn);\n\t\t\t\t},\n\n\t\t\t\t// Keep pipe for back-compat\n\t\t\t\tpipe: function pipe() /* fnDone, fnFail, fnProgress */{\n\t\t\t\t\tvar fns = arguments;\n\n\t\t\t\t\treturn jQuery.Deferred(function (newDefer) {\n\t\t\t\t\t\tjQuery.each(tuples, function (i, tuple) {\n\n\t\t\t\t\t\t\t// Map tuples (progress, done, fail) to arguments (done, fail, progress)\n\t\t\t\t\t\t\tvar fn = jQuery.isFunction(fns[tuple[4]]) && fns[tuple[4]];\n\n\t\t\t\t\t\t\t// deferred.progress(function() { bind to newDefer or newDefer.notify })\n\t\t\t\t\t\t\t// deferred.done(function() { bind to newDefer or newDefer.resolve })\n\t\t\t\t\t\t\t// deferred.fail(function() { bind to newDefer or newDefer.reject })\n\t\t\t\t\t\t\tdeferred[tuple[1]](function () {\n\t\t\t\t\t\t\t\tvar returned = fn && fn.apply(this, arguments);\n\t\t\t\t\t\t\t\tif (returned && jQuery.isFunction(returned.promise)) {\n\t\t\t\t\t\t\t\t\treturned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tnewDefer[tuple[0] + \"With\"](this, fn ? [returned] : arguments);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t\tfns = null;\n\t\t\t\t\t}).promise();\n\t\t\t\t},\n\t\t\t\tthen: function then(onFulfilled, onRejected, onProgress) {\n\t\t\t\t\tvar maxDepth = 0;\n\t\t\t\t\tfunction resolve(depth, deferred, handler, special) {\n\t\t\t\t\t\treturn function () {\n\t\t\t\t\t\t\tvar that = this,\n\t\t\t\t\t\t\t    args = arguments,\n\t\t\t\t\t\t\t    mightThrow = function mightThrow() {\n\t\t\t\t\t\t\t\tvar returned, then;\n\n\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.3\n\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-59\n\t\t\t\t\t\t\t\t// Ignore double-resolution attempts\n\t\t\t\t\t\t\t\tif (depth < maxDepth) {\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\treturned = handler.apply(that, args);\n\n\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.1\n\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-48\n\t\t\t\t\t\t\t\tif (returned === deferred.promise()) {\n\t\t\t\t\t\t\t\t\tthrow new TypeError(\"Thenable self-resolution\");\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// Support: Promises/A+ sections 2.3.3.1, 3.5\n\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-54\n\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-75\n\t\t\t\t\t\t\t\t// Retrieve `then` only once\n\t\t\t\t\t\t\t\tthen = returned && (\n\n\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.4\n\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-64\n\t\t\t\t\t\t\t\t// Only check objects and functions for thenability\n\t\t\t\t\t\t\t\t(typeof returned === \"undefined\" ? \"undefined\" : _typeof(returned)) === \"object\" || typeof returned === \"function\") && returned.then;\n\n\t\t\t\t\t\t\t\t// Handle a returned thenable\n\t\t\t\t\t\t\t\tif (jQuery.isFunction(then)) {\n\n\t\t\t\t\t\t\t\t\t// Special processors (notify) just wait for resolution\n\t\t\t\t\t\t\t\t\tif (special) {\n\t\t\t\t\t\t\t\t\t\tthen.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special));\n\n\t\t\t\t\t\t\t\t\t\t// Normal processors (resolve) also hook into progress\n\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t// ...and disregard older resolution values\n\t\t\t\t\t\t\t\t\t\tmaxDepth++;\n\n\t\t\t\t\t\t\t\t\t\tthen.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special), resolve(maxDepth, deferred, Identity, deferred.notifyWith));\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Handle all other returned values\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n\t\t\t\t\t\t\t\t\tif (handler !== Identity) {\n\t\t\t\t\t\t\t\t\t\tthat = undefined;\n\t\t\t\t\t\t\t\t\t\targs = [returned];\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Process the value(s)\n\t\t\t\t\t\t\t\t\t// Default process is resolve\n\t\t\t\t\t\t\t\t\t(special || deferred.resolveWith)(that, args);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\n\n\t\t\t\t\t\t\t// Only normal processors (resolve) catch and reject exceptions\n\t\t\t\t\t\t\tprocess = special ? mightThrow : function () {\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tmightThrow();\n\t\t\t\t\t\t\t\t} catch (e) {\n\n\t\t\t\t\t\t\t\t\tif (jQuery.Deferred.exceptionHook) {\n\t\t\t\t\t\t\t\t\t\tjQuery.Deferred.exceptionHook(e, process.stackTrace);\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.4.1\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-61\n\t\t\t\t\t\t\t\t\t// Ignore post-resolution exceptions\n\t\t\t\t\t\t\t\t\tif (depth + 1 >= maxDepth) {\n\n\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n\t\t\t\t\t\t\t\t\t\tif (handler !== Thrower) {\n\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\n\t\t\t\t\t\t\t\t\t\t\targs = [e];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tdeferred.rejectWith(that, args);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.1\n\t\t\t\t\t\t\t// https://promisesaplus.com/#point-57\n\t\t\t\t\t\t\t// Re-resolve promises immediately to dodge false rejection from\n\t\t\t\t\t\t\t// subsequent errors\n\t\t\t\t\t\t\tif (depth) {\n\t\t\t\t\t\t\t\tprocess();\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// Call an optional hook to record the stack, in case of exception\n\t\t\t\t\t\t\t\t// since it's otherwise lost when execution goes async\n\t\t\t\t\t\t\t\tif (jQuery.Deferred.getStackHook) {\n\t\t\t\t\t\t\t\t\tprocess.stackTrace = jQuery.Deferred.getStackHook();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\twindow.setTimeout(process);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\treturn jQuery.Deferred(function (newDefer) {\n\n\t\t\t\t\t\t// progress_handlers.add( ... )\n\t\t\t\t\t\ttuples[0][3].add(resolve(0, newDefer, jQuery.isFunction(onProgress) ? onProgress : Identity, newDefer.notifyWith));\n\n\t\t\t\t\t\t// fulfilled_handlers.add( ... )\n\t\t\t\t\t\ttuples[1][3].add(resolve(0, newDefer, jQuery.isFunction(onFulfilled) ? onFulfilled : Identity));\n\n\t\t\t\t\t\t// rejected_handlers.add( ... )\n\t\t\t\t\t\ttuples[2][3].add(resolve(0, newDefer, jQuery.isFunction(onRejected) ? onRejected : Thrower));\n\t\t\t\t\t}).promise();\n\t\t\t\t},\n\n\t\t\t\t// Get a promise for this deferred\n\t\t\t\t// If obj is provided, the promise aspect is added to the object\n\t\t\t\tpromise: function promise(obj) {\n\t\t\t\t\treturn obj != null ? jQuery.extend(obj, _promise) : _promise;\n\t\t\t\t}\n\t\t\t},\n\t\t\t    deferred = {};\n\n\t\t\t// Add list-specific methods\n\t\t\tjQuery.each(tuples, function (i, tuple) {\n\t\t\t\tvar list = tuple[2],\n\t\t\t\t    stateString = tuple[5];\n\n\t\t\t\t// promise.progress = list.add\n\t\t\t\t// promise.done = list.add\n\t\t\t\t// promise.fail = list.add\n\t\t\t\t_promise[tuple[1]] = list.add;\n\n\t\t\t\t// Handle state\n\t\t\t\tif (stateString) {\n\t\t\t\t\tlist.add(function () {\n\n\t\t\t\t\t\t// state = \"resolved\" (i.e., fulfilled)\n\t\t\t\t\t\t// state = \"rejected\"\n\t\t\t\t\t\t_state = stateString;\n\t\t\t\t\t},\n\n\t\t\t\t\t// rejected_callbacks.disable\n\t\t\t\t\t// fulfilled_callbacks.disable\n\t\t\t\t\ttuples[3 - i][2].disable,\n\n\t\t\t\t\t// progress_callbacks.lock\n\t\t\t\t\ttuples[0][2].lock);\n\t\t\t\t}\n\n\t\t\t\t// progress_handlers.fire\n\t\t\t\t// fulfilled_handlers.fire\n\t\t\t\t// rejected_handlers.fire\n\t\t\t\tlist.add(tuple[3].fire);\n\n\t\t\t\t// deferred.notify = function() { deferred.notifyWith(...) }\n\t\t\t\t// deferred.resolve = function() { deferred.resolveWith(...) }\n\t\t\t\t// deferred.reject = function() { deferred.rejectWith(...) }\n\t\t\t\tdeferred[tuple[0]] = function () {\n\t\t\t\t\tdeferred[tuple[0] + \"With\"](this === deferred ? undefined : this, arguments);\n\t\t\t\t\treturn this;\n\t\t\t\t};\n\n\t\t\t\t// deferred.notifyWith = list.fireWith\n\t\t\t\t// deferred.resolveWith = list.fireWith\n\t\t\t\t// deferred.rejectWith = list.fireWith\n\t\t\t\tdeferred[tuple[0] + \"With\"] = list.fireWith;\n\t\t\t});\n\n\t\t\t// Make the deferred a promise\n\t\t\t_promise.promise(deferred);\n\n\t\t\t// Call given func if any\n\t\t\tif (func) {\n\t\t\t\tfunc.call(deferred, deferred);\n\t\t\t}\n\n\t\t\t// All done!\n\t\t\treturn deferred;\n\t\t},\n\n\t\t// Deferred helper\n\t\twhen: function when(singleValue) {\n\t\t\tvar\n\n\t\t\t// count of uncompleted subordinates\n\t\t\tremaining = arguments.length,\n\n\n\t\t\t// count of unprocessed arguments\n\t\t\ti = remaining,\n\n\n\t\t\t// subordinate fulfillment data\n\t\t\tresolveContexts = Array(i),\n\t\t\t    resolveValues = _slice.call(arguments),\n\n\n\t\t\t// the master Deferred\n\t\t\tmaster = jQuery.Deferred(),\n\n\n\t\t\t// subordinate callback factory\n\t\t\tupdateFunc = function updateFunc(i) {\n\t\t\t\treturn function (value) {\n\t\t\t\t\tresolveContexts[i] = this;\n\t\t\t\t\tresolveValues[i] = arguments.length > 1 ? _slice.call(arguments) : value;\n\t\t\t\t\tif (! --remaining) {\n\t\t\t\t\t\tmaster.resolveWith(resolveContexts, resolveValues);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\n\t\t\t// Single- and empty arguments are adopted like Promise.resolve\n\t\t\tif (remaining <= 1) {\n\t\t\t\tadoptValue(singleValue, master.done(updateFunc(i)).resolve, master.reject);\n\n\t\t\t\t// Use .then() to unwrap secondary thenables (cf. gh-3000)\n\t\t\t\tif (master.state() === \"pending\" || jQuery.isFunction(resolveValues[i] && resolveValues[i].then)) {\n\n\t\t\t\t\treturn master.then();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Multiple arguments are aggregated like Promise.all array elements\n\t\t\twhile (i--) {\n\t\t\t\tadoptValue(resolveValues[i], updateFunc(i), master.reject);\n\t\t\t}\n\n\t\t\treturn master.promise();\n\t\t}\n\t});\n\n\t// These usually indicate a programmer mistake during development,\n\t// warn about them ASAP rather than swallowing them by default.\n\tvar rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;\n\n\tjQuery.Deferred.exceptionHook = function (error, stack) {\n\n\t\t// Support: IE 8 - 9 only\n\t\t// Console exists when dev tools are open, which can happen at any time\n\t\tif (window.console && window.console.warn && error && rerrorNames.test(error.name)) {\n\t\t\twindow.console.warn(\"jQuery.Deferred exception: \" + error.message, error.stack, stack);\n\t\t}\n\t};\n\n\tjQuery.readyException = function (error) {\n\t\twindow.setTimeout(function () {\n\t\t\tthrow error;\n\t\t});\n\t};\n\n\t// The deferred used on DOM ready\n\tvar readyList = jQuery.Deferred();\n\n\tjQuery.fn.ready = function (fn) {\n\n\t\treadyList.then(fn)\n\n\t\t// Wrap jQuery.readyException in a function so that the lookup\n\t\t// happens at the time of error handling instead of callback\n\t\t// registration.\n\t\t.catch(function (error) {\n\t\t\tjQuery.readyException(error);\n\t\t});\n\n\t\treturn this;\n\t};\n\n\tjQuery.extend({\n\n\t\t// Is the DOM ready to be used? Set to true once it occurs.\n\t\tisReady: false,\n\n\t\t// A counter to track how many items to wait for before\n\t\t// the ready event fires. See #6781\n\t\treadyWait: 1,\n\n\t\t// Hold (or release) the ready event\n\t\tholdReady: function holdReady(hold) {\n\t\t\tif (hold) {\n\t\t\t\tjQuery.readyWait++;\n\t\t\t} else {\n\t\t\t\tjQuery.ready(true);\n\t\t\t}\n\t\t},\n\n\t\t// Handle when the DOM is ready\n\t\tready: function ready(wait) {\n\n\t\t\t// Abort if there are pending holds or we're already ready\n\t\t\tif (wait === true ? --jQuery.readyWait : jQuery.isReady) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Remember that the DOM is ready\n\t\t\tjQuery.isReady = true;\n\n\t\t\t// If a normal DOM Ready event fired, decrement, and wait if need be\n\t\t\tif (wait !== true && --jQuery.readyWait > 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If there are functions bound, to execute\n\t\t\treadyList.resolveWith(document, [jQuery]);\n\t\t}\n\t});\n\n\tjQuery.ready.then = readyList.then;\n\n\t// The ready event handler and self cleanup method\n\tfunction completed() {\n\t\tdocument.removeEventListener(\"DOMContentLoaded\", completed);\n\t\twindow.removeEventListener(\"load\", completed);\n\t\tjQuery.ready();\n\t}\n\n\t// Catch cases where $(document).ready() is called\n\t// after the browser event has already occurred.\n\t// Support: IE <=9 - 10 only\n\t// Older IE sometimes signals \"interactive\" too soon\n\tif (document.readyState === \"complete\" || document.readyState !== \"loading\" && !document.documentElement.doScroll) {\n\n\t\t// Handle it asynchronously to allow scripts the opportunity to delay ready\n\t\twindow.setTimeout(jQuery.ready);\n\t} else {\n\n\t\t// Use the handy event callback\n\t\tdocument.addEventListener(\"DOMContentLoaded\", completed);\n\n\t\t// A fallback to window.onload, that will always work\n\t\twindow.addEventListener(\"load\", completed);\n\t}\n\n\t// Multifunctional method to get and set values of a collection\n\t// The value/s can optionally be executed if it's a function\n\tvar access = function access(elems, fn, key, value, chainable, emptyGet, raw) {\n\t\tvar i = 0,\n\t\t    len = elems.length,\n\t\t    bulk = key == null;\n\n\t\t// Sets many values\n\t\tif (jQuery.type(key) === \"object\") {\n\t\t\tchainable = true;\n\t\t\tfor (i in key) {\n\t\t\t\taccess(elems, fn, i, key[i], true, emptyGet, raw);\n\t\t\t}\n\n\t\t\t// Sets one value\n\t\t} else if (value !== undefined) {\n\t\t\tchainable = true;\n\n\t\t\tif (!jQuery.isFunction(value)) {\n\t\t\t\traw = true;\n\t\t\t}\n\n\t\t\tif (bulk) {\n\n\t\t\t\t// Bulk operations run against the entire set\n\t\t\t\tif (raw) {\n\t\t\t\t\tfn.call(elems, value);\n\t\t\t\t\tfn = null;\n\n\t\t\t\t\t// ...except when executing function values\n\t\t\t\t} else {\n\t\t\t\t\tbulk = fn;\n\t\t\t\t\tfn = function fn(elem, key, value) {\n\t\t\t\t\t\treturn bulk.call(jQuery(elem), value);\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (fn) {\n\t\t\t\tfor (; i < len; i++) {\n\t\t\t\t\tfn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn chainable ? elems :\n\n\t\t// Gets\n\t\tbulk ? fn.call(elems) : len ? fn(elems[0], key) : emptyGet;\n\t};\n\tvar acceptData = function acceptData(owner) {\n\n\t\t// Accepts only:\n\t\t//  - Node\n\t\t//    - Node.ELEMENT_NODE\n\t\t//    - Node.DOCUMENT_NODE\n\t\t//  - Object\n\t\t//    - Any\n\t\treturn owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;\n\t};\n\n\tfunction Data() {\n\t\tthis.expando = jQuery.expando + Data.uid++;\n\t}\n\n\tData.uid = 1;\n\n\tData.prototype = {\n\n\t\tcache: function cache(owner) {\n\n\t\t\t// Check if the owner object already has a cache\n\t\t\tvar value = owner[this.expando];\n\n\t\t\t// If not, create one\n\t\t\tif (!value) {\n\t\t\t\tvalue = {};\n\n\t\t\t\t// We can accept data for non-element nodes in modern browsers,\n\t\t\t\t// but we should not, see #8335.\n\t\t\t\t// Always return an empty object.\n\t\t\t\tif (acceptData(owner)) {\n\n\t\t\t\t\t// If it is a node unlikely to be stringify-ed or looped over\n\t\t\t\t\t// use plain assignment\n\t\t\t\t\tif (owner.nodeType) {\n\t\t\t\t\t\towner[this.expando] = value;\n\n\t\t\t\t\t\t// Otherwise secure it in a non-enumerable property\n\t\t\t\t\t\t// configurable must be true to allow the property to be\n\t\t\t\t\t\t// deleted when data is removed\n\t\t\t\t\t} else {\n\t\t\t\t\t\tObject.defineProperty(owner, this.expando, {\n\t\t\t\t\t\t\tvalue: value,\n\t\t\t\t\t\t\tconfigurable: true\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn value;\n\t\t},\n\t\tset: function set(owner, data, value) {\n\t\t\tvar prop,\n\t\t\t    cache = this.cache(owner);\n\n\t\t\t// Handle: [ owner, key, value ] args\n\t\t\t// Always use camelCase key (gh-2257)\n\t\t\tif (typeof data === \"string\") {\n\t\t\t\tcache[jQuery.camelCase(data)] = value;\n\n\t\t\t\t// Handle: [ owner, { properties } ] args\n\t\t\t} else {\n\n\t\t\t\t// Copy the properties one-by-one to the cache object\n\t\t\t\tfor (prop in data) {\n\t\t\t\t\tcache[jQuery.camelCase(prop)] = data[prop];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn cache;\n\t\t},\n\t\tget: function get(owner, key) {\n\t\t\treturn key === undefined ? this.cache(owner) :\n\n\t\t\t// Always use camelCase key (gh-2257)\n\t\t\towner[this.expando] && owner[this.expando][jQuery.camelCase(key)];\n\t\t},\n\t\taccess: function access(owner, key, value) {\n\n\t\t\t// In cases where either:\n\t\t\t//\n\t\t\t//   1. No key was specified\n\t\t\t//   2. A string key was specified, but no value provided\n\t\t\t//\n\t\t\t// Take the \"read\" path and allow the get method to determine\n\t\t\t// which value to return, respectively either:\n\t\t\t//\n\t\t\t//   1. The entire cache object\n\t\t\t//   2. The data stored at the key\n\t\t\t//\n\t\t\tif (key === undefined || key && typeof key === \"string\" && value === undefined) {\n\n\t\t\t\treturn this.get(owner, key);\n\t\t\t}\n\n\t\t\t// When the key is not a string, or both a key and value\n\t\t\t// are specified, set or extend (existing objects) with either:\n\t\t\t//\n\t\t\t//   1. An object of properties\n\t\t\t//   2. A key and value\n\t\t\t//\n\t\t\tthis.set(owner, key, value);\n\n\t\t\t// Since the \"set\" path can have two possible entry points\n\t\t\t// return the expected data based on which path was taken[*]\n\t\t\treturn value !== undefined ? value : key;\n\t\t},\n\t\tremove: function remove(owner, key) {\n\t\t\tvar i,\n\t\t\t    cache = owner[this.expando];\n\n\t\t\tif (cache === undefined) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (key !== undefined) {\n\n\t\t\t\t// Support array or space separated string of keys\n\t\t\t\tif (jQuery.isArray(key)) {\n\n\t\t\t\t\t// If key is an array of keys...\n\t\t\t\t\t// We always set camelCase keys, so remove that.\n\t\t\t\t\tkey = key.map(jQuery.camelCase);\n\t\t\t\t} else {\n\t\t\t\t\tkey = jQuery.camelCase(key);\n\n\t\t\t\t\t// If a key with the spaces exists, use it.\n\t\t\t\t\t// Otherwise, create an array by matching non-whitespace\n\t\t\t\t\tkey = key in cache ? [key] : key.match(rnotwhite) || [];\n\t\t\t\t}\n\n\t\t\t\ti = key.length;\n\n\t\t\t\twhile (i--) {\n\t\t\t\t\tdelete cache[key[i]];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Remove the expando if there's no more data\n\t\t\tif (key === undefined || jQuery.isEmptyObject(cache)) {\n\n\t\t\t\t// Support: Chrome <=35 - 45\n\t\t\t\t// Webkit & Blink performance suffers when deleting properties\n\t\t\t\t// from DOM nodes, so set to undefined instead\n\t\t\t\t// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)\n\t\t\t\tif (owner.nodeType) {\n\t\t\t\t\towner[this.expando] = undefined;\n\t\t\t\t} else {\n\t\t\t\t\tdelete owner[this.expando];\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\thasData: function hasData(owner) {\n\t\t\tvar cache = owner[this.expando];\n\t\t\treturn cache !== undefined && !jQuery.isEmptyObject(cache);\n\t\t}\n\t};\n\tvar dataPriv = new Data();\n\n\tvar dataUser = new Data();\n\n\t//\tImplementation Summary\n\t//\n\t//\t1. Enforce API surface and semantic compatibility with 1.9.x branch\n\t//\t2. Improve the module's maintainability by reducing the storage\n\t//\t\tpaths to a single mechanism.\n\t//\t3. Use the same single mechanism to support \"private\" and \"user\" data.\n\t//\t4. _Never_ expose \"private\" data to user code (TODO: Drop _data, _removeData)\n\t//\t5. Avoid exposing implementation details on user objects (eg. expando properties)\n\t//\t6. Provide a clear path for implementation upgrade to WeakMap in 2014\n\n\tvar rbrace = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\n\t    rmultiDash = /[A-Z]/g;\n\n\tfunction dataAttr(elem, key, data) {\n\t\tvar name;\n\n\t\t// If nothing was found internally, try to fetch any\n\t\t// data from the HTML5 data-* attribute\n\t\tif (data === undefined && elem.nodeType === 1) {\n\t\t\tname = \"data-\" + key.replace(rmultiDash, \"-$&\").toLowerCase();\n\t\t\tdata = elem.getAttribute(name);\n\n\t\t\tif (typeof data === \"string\") {\n\t\t\t\ttry {\n\t\t\t\t\tdata = data === \"true\" ? true : data === \"false\" ? false : data === \"null\" ? null :\n\n\t\t\t\t\t// Only convert to a number if it doesn't change the string\n\t\t\t\t\t+data + \"\" === data ? +data : rbrace.test(data) ? JSON.parse(data) : data;\n\t\t\t\t} catch (e) {}\n\n\t\t\t\t// Make sure we set the data so it isn't changed later\n\t\t\t\tdataUser.set(elem, key, data);\n\t\t\t} else {\n\t\t\t\tdata = undefined;\n\t\t\t}\n\t\t}\n\t\treturn data;\n\t}\n\n\tjQuery.extend({\n\t\thasData: function hasData(elem) {\n\t\t\treturn dataUser.hasData(elem) || dataPriv.hasData(elem);\n\t\t},\n\n\t\tdata: function data(elem, name, _data) {\n\t\t\treturn dataUser.access(elem, name, _data);\n\t\t},\n\n\t\tremoveData: function removeData(elem, name) {\n\t\t\tdataUser.remove(elem, name);\n\t\t},\n\n\t\t// TODO: Now that all calls to _data and _removeData have been replaced\n\t\t// with direct calls to dataPriv methods, these can be deprecated.\n\t\t_data: function _data(elem, name, data) {\n\t\t\treturn dataPriv.access(elem, name, data);\n\t\t},\n\n\t\t_removeData: function _removeData(elem, name) {\n\t\t\tdataPriv.remove(elem, name);\n\t\t}\n\t});\n\n\tjQuery.fn.extend({\n\t\tdata: function data(key, value) {\n\t\t\tvar i,\n\t\t\t    name,\n\t\t\t    data,\n\t\t\t    elem = this[0],\n\t\t\t    attrs = elem && elem.attributes;\n\n\t\t\t// Gets all values\n\t\t\tif (key === undefined) {\n\t\t\t\tif (this.length) {\n\t\t\t\t\tdata = dataUser.get(elem);\n\n\t\t\t\t\tif (elem.nodeType === 1 && !dataPriv.get(elem, \"hasDataAttrs\")) {\n\t\t\t\t\t\ti = attrs.length;\n\t\t\t\t\t\twhile (i--) {\n\n\t\t\t\t\t\t\t// Support: IE 11 only\n\t\t\t\t\t\t\t// The attrs elements can be null (#14894)\n\t\t\t\t\t\t\tif (attrs[i]) {\n\t\t\t\t\t\t\t\tname = attrs[i].name;\n\t\t\t\t\t\t\t\tif (name.indexOf(\"data-\") === 0) {\n\t\t\t\t\t\t\t\t\tname = jQuery.camelCase(name.slice(5));\n\t\t\t\t\t\t\t\t\tdataAttr(elem, name, data[name]);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdataPriv.set(elem, \"hasDataAttrs\", true);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\t\t\t}\n\n\t\t\t// Sets multiple values\n\t\t\tif ((typeof key === \"undefined\" ? \"undefined\" : _typeof(key)) === \"object\") {\n\t\t\t\treturn this.each(function () {\n\t\t\t\t\tdataUser.set(this, key);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn access(this, function (value) {\n\t\t\t\tvar data;\n\n\t\t\t\t// The calling jQuery object (element matches) is not empty\n\t\t\t\t// (and therefore has an element appears at this[ 0 ]) and the\n\t\t\t\t// `value` parameter was not undefined. An empty jQuery object\n\t\t\t\t// will result in `undefined` for elem = this[ 0 ] which will\n\t\t\t\t// throw an exception if an attempt to read a data cache is made.\n\t\t\t\tif (elem && value === undefined) {\n\n\t\t\t\t\t// Attempt to get data from the cache\n\t\t\t\t\t// The key will always be camelCased in Data\n\t\t\t\t\tdata = dataUser.get(elem, key);\n\t\t\t\t\tif (data !== undefined) {\n\t\t\t\t\t\treturn data;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Attempt to \"discover\" the data in\n\t\t\t\t\t// HTML5 custom data-* attrs\n\t\t\t\t\tdata = dataAttr(elem, key);\n\t\t\t\t\tif (data !== undefined) {\n\t\t\t\t\t\treturn data;\n\t\t\t\t\t}\n\n\t\t\t\t\t// We tried really hard, but the data doesn't exist.\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Set the data...\n\t\t\t\tthis.each(function () {\n\n\t\t\t\t\t// We always store the camelCased key\n\t\t\t\t\tdataUser.set(this, key, value);\n\t\t\t\t});\n\t\t\t}, null, value, arguments.length > 1, null, true);\n\t\t},\n\n\t\tremoveData: function removeData(key) {\n\t\t\treturn this.each(function () {\n\t\t\t\tdataUser.remove(this, key);\n\t\t\t});\n\t\t}\n\t});\n\n\tjQuery.extend({\n\t\tqueue: function queue(elem, type, data) {\n\t\t\tvar queue;\n\n\t\t\tif (elem) {\n\t\t\t\ttype = (type || \"fx\") + \"queue\";\n\t\t\t\tqueue = dataPriv.get(elem, type);\n\n\t\t\t\t// Speed up dequeue by getting out quickly if this is just a lookup\n\t\t\t\tif (data) {\n\t\t\t\t\tif (!queue || jQuery.isArray(data)) {\n\t\t\t\t\t\tqueue = dataPriv.access(elem, type, jQuery.makeArray(data));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tqueue.push(data);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn queue || [];\n\t\t\t}\n\t\t},\n\n\t\tdequeue: function dequeue(elem, type) {\n\t\t\ttype = type || \"fx\";\n\n\t\t\tvar queue = jQuery.queue(elem, type),\n\t\t\t    startLength = queue.length,\n\t\t\t    fn = queue.shift(),\n\t\t\t    hooks = jQuery._queueHooks(elem, type),\n\t\t\t    next = function next() {\n\t\t\t\tjQuery.dequeue(elem, type);\n\t\t\t};\n\n\t\t\t// If the fx queue is dequeued, always remove the progress sentinel\n\t\t\tif (fn === \"inprogress\") {\n\t\t\t\tfn = queue.shift();\n\t\t\t\tstartLength--;\n\t\t\t}\n\n\t\t\tif (fn) {\n\n\t\t\t\t// Add a progress sentinel to prevent the fx queue from being\n\t\t\t\t// automatically dequeued\n\t\t\t\tif (type === \"fx\") {\n\t\t\t\t\tqueue.unshift(\"inprogress\");\n\t\t\t\t}\n\n\t\t\t\t// Clear up the last queue stop function\n\t\t\t\tdelete hooks.stop;\n\t\t\t\tfn.call(elem, next, hooks);\n\t\t\t}\n\n\t\t\tif (!startLength && hooks) {\n\t\t\t\thooks.empty.fire();\n\t\t\t}\n\t\t},\n\n\t\t// Not public - generate a queueHooks object, or return the current one\n\t\t_queueHooks: function _queueHooks(elem, type) {\n\t\t\tvar key = type + \"queueHooks\";\n\t\t\treturn dataPriv.get(elem, key) || dataPriv.access(elem, key, {\n\t\t\t\tempty: jQuery.Callbacks(\"once memory\").add(function () {\n\t\t\t\t\tdataPriv.remove(elem, [type + \"queue\", key]);\n\t\t\t\t})\n\t\t\t});\n\t\t}\n\t});\n\n\tjQuery.fn.extend({\n\t\tqueue: function queue(type, data) {\n\t\t\tvar setter = 2;\n\n\t\t\tif (typeof type !== \"string\") {\n\t\t\t\tdata = type;\n\t\t\t\ttype = \"fx\";\n\t\t\t\tsetter--;\n\t\t\t}\n\n\t\t\tif (arguments.length < setter) {\n\t\t\t\treturn jQuery.queue(this[0], type);\n\t\t\t}\n\n\t\t\treturn data === undefined ? this : this.each(function () {\n\t\t\t\tvar queue = jQuery.queue(this, type, data);\n\n\t\t\t\t// Ensure a hooks for this queue\n\t\t\t\tjQuery._queueHooks(this, type);\n\n\t\t\t\tif (type === \"fx\" && queue[0] !== \"inprogress\") {\n\t\t\t\t\tjQuery.dequeue(this, type);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\tdequeue: function dequeue(type) {\n\t\t\treturn this.each(function () {\n\t\t\t\tjQuery.dequeue(this, type);\n\t\t\t});\n\t\t},\n\t\tclearQueue: function clearQueue(type) {\n\t\t\treturn this.queue(type || \"fx\", []);\n\t\t},\n\n\t\t// Get a promise resolved when queues of a certain type\n\t\t// are emptied (fx is the type by default)\n\t\tpromise: function promise(type, obj) {\n\t\t\tvar tmp,\n\t\t\t    count = 1,\n\t\t\t    defer = jQuery.Deferred(),\n\t\t\t    elements = this,\n\t\t\t    i = this.length,\n\t\t\t    resolve = function resolve() {\n\t\t\t\tif (! --count) {\n\t\t\t\t\tdefer.resolveWith(elements, [elements]);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tif (typeof type !== \"string\") {\n\t\t\t\tobj = type;\n\t\t\t\ttype = undefined;\n\t\t\t}\n\t\t\ttype = type || \"fx\";\n\n\t\t\twhile (i--) {\n\t\t\t\ttmp = dataPriv.get(elements[i], type + \"queueHooks\");\n\t\t\t\tif (tmp && tmp.empty) {\n\t\t\t\t\tcount++;\n\t\t\t\t\ttmp.empty.add(resolve);\n\t\t\t\t}\n\t\t\t}\n\t\t\tresolve();\n\t\t\treturn defer.promise(obj);\n\t\t}\n\t});\n\tvar pnum = /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/.source;\n\n\tvar rcssNum = new RegExp(\"^(?:([+-])=|)(\" + pnum + \")([a-z%]*)$\", \"i\");\n\n\tvar cssExpand = [\"Top\", \"Right\", \"Bottom\", \"Left\"];\n\n\tvar isHiddenWithinTree = function isHiddenWithinTree(elem, el) {\n\n\t\t// isHiddenWithinTree might be called from jQuery#filter function;\n\t\t// in that case, element will be second argument\n\t\telem = el || elem;\n\n\t\t// Inline style trumps all\n\t\treturn elem.style.display === \"none\" || elem.style.display === \"\" &&\n\n\t\t// Otherwise, check computed style\n\t\t// Support: Firefox <=43 - 45\n\t\t// Disconnected elements can have computed display: none, so first confirm that elem is\n\t\t// in the document.\n\t\tjQuery.contains(elem.ownerDocument, elem) && jQuery.css(elem, \"display\") === \"none\";\n\t};\n\n\tvar swap = function swap(elem, options, callback, args) {\n\t\tvar ret,\n\t\t    name,\n\t\t    old = {};\n\n\t\t// Remember the old values, and insert the new ones\n\t\tfor (name in options) {\n\t\t\told[name] = elem.style[name];\n\t\t\telem.style[name] = options[name];\n\t\t}\n\n\t\tret = callback.apply(elem, args || []);\n\n\t\t// Revert the old values\n\t\tfor (name in options) {\n\t\t\telem.style[name] = old[name];\n\t\t}\n\n\t\treturn ret;\n\t};\n\n\tfunction adjustCSS(elem, prop, valueParts, tween) {\n\t\tvar adjusted,\n\t\t    scale = 1,\n\t\t    maxIterations = 20,\n\t\t    currentValue = tween ? function () {\n\t\t\treturn tween.cur();\n\t\t} : function () {\n\t\t\treturn jQuery.css(elem, prop, \"\");\n\t\t},\n\t\t    initial = currentValue(),\n\t\t    unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? \"\" : \"px\"),\n\n\n\t\t// Starting value computation is required for potential unit mismatches\n\t\tinitialInUnit = (jQuery.cssNumber[prop] || unit !== \"px\" && +initial) && rcssNum.exec(jQuery.css(elem, prop));\n\n\t\tif (initialInUnit && initialInUnit[3] !== unit) {\n\n\t\t\t// Trust units reported by jQuery.css\n\t\t\tunit = unit || initialInUnit[3];\n\n\t\t\t// Make sure we update the tween properties later on\n\t\t\tvalueParts = valueParts || [];\n\n\t\t\t// Iteratively approximate from a nonzero starting point\n\t\t\tinitialInUnit = +initial || 1;\n\n\t\t\tdo {\n\n\t\t\t\t// If previous iteration zeroed out, double until we get *something*.\n\t\t\t\t// Use string for doubling so we don't accidentally see scale as unchanged below\n\t\t\t\tscale = scale || \".5\";\n\n\t\t\t\t// Adjust and apply\n\t\t\t\tinitialInUnit = initialInUnit / scale;\n\t\t\t\tjQuery.style(elem, prop, initialInUnit + unit);\n\n\t\t\t\t// Update scale, tolerating zero or NaN from tween.cur()\n\t\t\t\t// Break the loop if scale is unchanged or perfect, or if we've just had enough.\n\t\t\t} while (scale !== (scale = currentValue() / initial) && scale !== 1 && --maxIterations);\n\t\t}\n\n\t\tif (valueParts) {\n\t\t\tinitialInUnit = +initialInUnit || +initial || 0;\n\n\t\t\t// Apply relative offset (+=/-=) if specified\n\t\t\tadjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];\n\t\t\tif (tween) {\n\t\t\t\ttween.unit = unit;\n\t\t\t\ttween.start = initialInUnit;\n\t\t\t\ttween.end = adjusted;\n\t\t\t}\n\t\t}\n\t\treturn adjusted;\n\t}\n\n\tvar defaultDisplayMap = {};\n\n\tfunction getDefaultDisplay(elem) {\n\t\tvar temp,\n\t\t    doc = elem.ownerDocument,\n\t\t    nodeName = elem.nodeName,\n\t\t    display = defaultDisplayMap[nodeName];\n\n\t\tif (display) {\n\t\t\treturn display;\n\t\t}\n\n\t\ttemp = doc.body.appendChild(doc.createElement(nodeName)), display = jQuery.css(temp, \"display\");\n\n\t\ttemp.parentNode.removeChild(temp);\n\n\t\tif (display === \"none\") {\n\t\t\tdisplay = \"block\";\n\t\t}\n\t\tdefaultDisplayMap[nodeName] = display;\n\n\t\treturn display;\n\t}\n\n\tfunction showHide(elements, show) {\n\t\tvar display,\n\t\t    elem,\n\t\t    values = [],\n\t\t    index = 0,\n\t\t    length = elements.length;\n\n\t\t// Determine new display value for elements that need to change\n\t\tfor (; index < length; index++) {\n\t\t\telem = elements[index];\n\t\t\tif (!elem.style) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tdisplay = elem.style.display;\n\t\t\tif (show) {\n\n\t\t\t\t// Since we force visibility upon cascade-hidden elements, an immediate (and slow)\n\t\t\t\t// check is required in this first loop unless we have a nonempty display value (either\n\t\t\t\t// inline or about-to-be-restored)\n\t\t\t\tif (display === \"none\") {\n\t\t\t\t\tvalues[index] = dataPriv.get(elem, \"display\") || null;\n\t\t\t\t\tif (!values[index]) {\n\t\t\t\t\t\telem.style.display = \"\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (elem.style.display === \"\" && isHiddenWithinTree(elem)) {\n\t\t\t\t\tvalues[index] = getDefaultDisplay(elem);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (display !== \"none\") {\n\t\t\t\t\tvalues[index] = \"none\";\n\n\t\t\t\t\t// Remember what we're overwriting\n\t\t\t\t\tdataPriv.set(elem, \"display\", display);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Set the display of the elements in a second loop to avoid constant reflow\n\t\tfor (index = 0; index < length; index++) {\n\t\t\tif (values[index] != null) {\n\t\t\t\telements[index].style.display = values[index];\n\t\t\t}\n\t\t}\n\n\t\treturn elements;\n\t}\n\n\tjQuery.fn.extend({\n\t\tshow: function show() {\n\t\t\treturn showHide(this, true);\n\t\t},\n\t\thide: function hide() {\n\t\t\treturn showHide(this);\n\t\t},\n\t\ttoggle: function toggle(state) {\n\t\t\tif (typeof state === \"boolean\") {\n\t\t\t\treturn state ? this.show() : this.hide();\n\t\t\t}\n\n\t\t\treturn this.each(function () {\n\t\t\t\tif (isHiddenWithinTree(this)) {\n\t\t\t\t\tjQuery(this).show();\n\t\t\t\t} else {\n\t\t\t\t\tjQuery(this).hide();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n\tvar rcheckableType = /^(?:checkbox|radio)$/i;\n\n\tvar rtagName = /<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]+)/i;\n\n\tvar rscriptType = /^$|\\/(?:java|ecma)script/i;\n\n\t// We have to close these tags to support XHTML (#13200)\n\tvar wrapMap = {\n\n\t\t// Support: IE <=9 only\n\t\toption: [1, \"<select multiple='multiple'>\", \"</select>\"],\n\n\t\t// XHTML parsers do not magically insert elements in the\n\t\t// same way that tag soup parsers do. So we cannot shorten\n\t\t// this by omitting <tbody> or other required elements.\n\t\tthead: [1, \"<table>\", \"</table>\"],\n\t\tcol: [2, \"<table><colgroup>\", \"</colgroup></table>\"],\n\t\ttr: [2, \"<table><tbody>\", \"</tbody></table>\"],\n\t\ttd: [3, \"<table><tbody><tr>\", \"</tr></tbody></table>\"],\n\n\t\t_default: [0, \"\", \"\"]\n\t};\n\n\t// Support: IE <=9 only\n\twrapMap.optgroup = wrapMap.option;\n\n\twrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\n\twrapMap.th = wrapMap.td;\n\n\tfunction getAll(context, tag) {\n\n\t\t// Support: IE <=9 - 11 only\n\t\t// Use typeof to avoid zero-argument method invocation on host objects (#15151)\n\t\tvar ret = typeof context.getElementsByTagName !== \"undefined\" ? context.getElementsByTagName(tag || \"*\") : typeof context.querySelectorAll !== \"undefined\" ? context.querySelectorAll(tag || \"*\") : [];\n\n\t\treturn tag === undefined || tag && jQuery.nodeName(context, tag) ? jQuery.merge([context], ret) : ret;\n\t}\n\n\t// Mark scripts as having already been evaluated\n\tfunction setGlobalEval(elems, refElements) {\n\t\tvar i = 0,\n\t\t    l = elems.length;\n\n\t\tfor (; i < l; i++) {\n\t\t\tdataPriv.set(elems[i], \"globalEval\", !refElements || dataPriv.get(refElements[i], \"globalEval\"));\n\t\t}\n\t}\n\n\tvar rhtml = /<|&#?\\w+;/;\n\n\tfunction buildFragment(elems, context, scripts, selection, ignored) {\n\t\tvar elem,\n\t\t    tmp,\n\t\t    tag,\n\t\t    wrap,\n\t\t    contains,\n\t\t    j,\n\t\t    fragment = context.createDocumentFragment(),\n\t\t    nodes = [],\n\t\t    i = 0,\n\t\t    l = elems.length;\n\n\t\tfor (; i < l; i++) {\n\t\t\telem = elems[i];\n\n\t\t\tif (elem || elem === 0) {\n\n\t\t\t\t// Add nodes directly\n\t\t\t\tif (jQuery.type(elem) === \"object\") {\n\n\t\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\t\tjQuery.merge(nodes, elem.nodeType ? [elem] : elem);\n\n\t\t\t\t\t// Convert non-html into a text node\n\t\t\t\t} else if (!rhtml.test(elem)) {\n\t\t\t\t\tnodes.push(context.createTextNode(elem));\n\n\t\t\t\t\t// Convert html into DOM nodes\n\t\t\t\t} else {\n\t\t\t\t\ttmp = tmp || fragment.appendChild(context.createElement(\"div\"));\n\n\t\t\t\t\t// Deserialize a standard representation\n\t\t\t\t\ttag = (rtagName.exec(elem) || [\"\", \"\"])[1].toLowerCase();\n\t\t\t\t\twrap = wrapMap[tag] || wrapMap._default;\n\t\t\t\t\ttmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2];\n\n\t\t\t\t\t// Descend through wrappers to the right content\n\t\t\t\t\tj = wrap[0];\n\t\t\t\t\twhile (j--) {\n\t\t\t\t\t\ttmp = tmp.lastChild;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\t\tjQuery.merge(nodes, tmp.childNodes);\n\n\t\t\t\t\t// Remember the top-level container\n\t\t\t\t\ttmp = fragment.firstChild;\n\n\t\t\t\t\t// Ensure the created nodes are orphaned (#12392)\n\t\t\t\t\ttmp.textContent = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Remove wrapper from fragment\n\t\tfragment.textContent = \"\";\n\n\t\ti = 0;\n\t\twhile (elem = nodes[i++]) {\n\n\t\t\t// Skip elements already in the context collection (trac-4087)\n\t\t\tif (selection && jQuery.inArray(elem, selection) > -1) {\n\t\t\t\tif (ignored) {\n\t\t\t\t\tignored.push(elem);\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tcontains = jQuery.contains(elem.ownerDocument, elem);\n\n\t\t\t// Append to fragment\n\t\t\ttmp = getAll(fragment.appendChild(elem), \"script\");\n\n\t\t\t// Preserve script evaluation history\n\t\t\tif (contains) {\n\t\t\t\tsetGlobalEval(tmp);\n\t\t\t}\n\n\t\t\t// Capture executables\n\t\t\tif (scripts) {\n\t\t\t\tj = 0;\n\t\t\t\twhile (elem = tmp[j++]) {\n\t\t\t\t\tif (rscriptType.test(elem.type || \"\")) {\n\t\t\t\t\t\tscripts.push(elem);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn fragment;\n\t}\n\n\t(function () {\n\t\tvar fragment = document.createDocumentFragment(),\n\t\t    div = fragment.appendChild(document.createElement(\"div\")),\n\t\t    input = document.createElement(\"input\");\n\n\t\t// Support: Android 4.0 - 4.3 only\n\t\t// Check state lost if the name is set (#11217)\n\t\t// Support: Windows Web Apps (WWA)\n\t\t// `name` and `type` must use .setAttribute for WWA (#14901)\n\t\tinput.setAttribute(\"type\", \"radio\");\n\t\tinput.setAttribute(\"checked\", \"checked\");\n\t\tinput.setAttribute(\"name\", \"t\");\n\n\t\tdiv.appendChild(input);\n\n\t\t// Support: Android <=4.1 only\n\t\t// Older WebKit doesn't clone checked state correctly in fragments\n\t\tsupport.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;\n\n\t\t// Support: IE <=11 only\n\t\t// Make sure textarea (and checkbox) defaultValue is properly cloned\n\t\tdiv.innerHTML = \"<textarea>x</textarea>\";\n\t\tsupport.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;\n\t})();\n\tvar documentElement = document.documentElement;\n\n\tvar rkeyEvent = /^key/,\n\t    rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,\n\t    rtypenamespace = /^([^.]*)(?:\\.(.+)|)/;\n\n\tfunction returnTrue() {\n\t\treturn true;\n\t}\n\n\tfunction returnFalse() {\n\t\treturn false;\n\t}\n\n\t// Support: IE <=9 only\n\t// See #13393 for more info\n\tfunction safeActiveElement() {\n\t\ttry {\n\t\t\treturn document.activeElement;\n\t\t} catch (err) {}\n\t}\n\n\tfunction _on(elem, types, selector, data, fn, one) {\n\t\tvar origFn, type;\n\n\t\t// Types can be a map of types/handlers\n\t\tif ((typeof types === \"undefined\" ? \"undefined\" : _typeof(types)) === \"object\") {\n\n\t\t\t// ( types-Object, selector, data )\n\t\t\tif (typeof selector !== \"string\") {\n\n\t\t\t\t// ( types-Object, data )\n\t\t\t\tdata = data || selector;\n\t\t\t\tselector = undefined;\n\t\t\t}\n\t\t\tfor (type in types) {\n\t\t\t\t_on(elem, type, selector, data, types[type], one);\n\t\t\t}\n\t\t\treturn elem;\n\t\t}\n\n\t\tif (data == null && fn == null) {\n\n\t\t\t// ( types, fn )\n\t\t\tfn = selector;\n\t\t\tdata = selector = undefined;\n\t\t} else if (fn == null) {\n\t\t\tif (typeof selector === \"string\") {\n\n\t\t\t\t// ( types, selector, fn )\n\t\t\t\tfn = data;\n\t\t\t\tdata = undefined;\n\t\t\t} else {\n\n\t\t\t\t// ( types, data, fn )\n\t\t\t\tfn = data;\n\t\t\t\tdata = selector;\n\t\t\t\tselector = undefined;\n\t\t\t}\n\t\t}\n\t\tif (fn === false) {\n\t\t\tfn = returnFalse;\n\t\t} else if (!fn) {\n\t\t\treturn elem;\n\t\t}\n\n\t\tif (one === 1) {\n\t\t\torigFn = fn;\n\t\t\tfn = function fn(event) {\n\n\t\t\t\t// Can use an empty set, since event contains the info\n\t\t\t\tjQuery().off(event);\n\t\t\t\treturn origFn.apply(this, arguments);\n\t\t\t};\n\n\t\t\t// Use same guid so caller can remove using origFn\n\t\t\tfn.guid = origFn.guid || (origFn.guid = jQuery.guid++);\n\t\t}\n\t\treturn elem.each(function () {\n\t\t\tjQuery.event.add(this, types, fn, data, selector);\n\t\t});\n\t}\n\n\t/*\n  * Helper functions for managing events -- not part of the public interface.\n  * Props to Dean Edwards' addEvent library for many of the ideas.\n  */\n\tjQuery.event = {\n\n\t\tglobal: {},\n\n\t\tadd: function add(elem, types, handler, data, selector) {\n\n\t\t\tvar handleObjIn,\n\t\t\t    eventHandle,\n\t\t\t    tmp,\n\t\t\t    events,\n\t\t\t    t,\n\t\t\t    handleObj,\n\t\t\t    special,\n\t\t\t    handlers,\n\t\t\t    type,\n\t\t\t    namespaces,\n\t\t\t    origType,\n\t\t\t    elemData = dataPriv.get(elem);\n\n\t\t\t// Don't attach events to noData or text/comment nodes (but allow plain objects)\n\t\t\tif (!elemData) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Caller can pass in an object of custom data in lieu of the handler\n\t\t\tif (handler.handler) {\n\t\t\t\thandleObjIn = handler;\n\t\t\t\thandler = handleObjIn.handler;\n\t\t\t\tselector = handleObjIn.selector;\n\t\t\t}\n\n\t\t\t// Ensure that invalid selectors throw exceptions at attach time\n\t\t\t// Evaluate against documentElement in case elem is a non-element node (e.g., document)\n\t\t\tif (selector) {\n\t\t\t\tjQuery.find.matchesSelector(documentElement, selector);\n\t\t\t}\n\n\t\t\t// Make sure that the handler has a unique ID, used to find/remove it later\n\t\t\tif (!handler.guid) {\n\t\t\t\thandler.guid = jQuery.guid++;\n\t\t\t}\n\n\t\t\t// Init the element's event structure and main handler, if this is the first\n\t\t\tif (!(events = elemData.events)) {\n\t\t\t\tevents = elemData.events = {};\n\t\t\t}\n\t\t\tif (!(eventHandle = elemData.handle)) {\n\t\t\t\teventHandle = elemData.handle = function (e) {\n\n\t\t\t\t\t// Discard the second event of a jQuery.event.trigger() and\n\t\t\t\t\t// when an event is called after a page has unloaded\n\t\t\t\t\treturn typeof jQuery !== \"undefined\" && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined;\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// Handle multiple events separated by a space\n\t\t\ttypes = (types || \"\").match(rnotwhite) || [\"\"];\n\t\t\tt = types.length;\n\t\t\twhile (t--) {\n\t\t\t\ttmp = rtypenamespace.exec(types[t]) || [];\n\t\t\t\ttype = origType = tmp[1];\n\t\t\t\tnamespaces = (tmp[2] || \"\").split(\".\").sort();\n\n\t\t\t\t// There *must* be a type, no attaching namespace-only handlers\n\t\t\t\tif (!type) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// If event changes its type, use the special event handlers for the changed type\n\t\t\t\tspecial = jQuery.event.special[type] || {};\n\n\t\t\t\t// If selector defined, determine special event api type, otherwise given type\n\t\t\t\ttype = (selector ? special.delegateType : special.bindType) || type;\n\n\t\t\t\t// Update special based on newly reset type\n\t\t\t\tspecial = jQuery.event.special[type] || {};\n\n\t\t\t\t// handleObj is passed to all event handlers\n\t\t\t\thandleObj = jQuery.extend({\n\t\t\t\t\ttype: type,\n\t\t\t\t\torigType: origType,\n\t\t\t\t\tdata: data,\n\t\t\t\t\thandler: handler,\n\t\t\t\t\tguid: handler.guid,\n\t\t\t\t\tselector: selector,\n\t\t\t\t\tneedsContext: selector && jQuery.expr.match.needsContext.test(selector),\n\t\t\t\t\tnamespace: namespaces.join(\".\")\n\t\t\t\t}, handleObjIn);\n\n\t\t\t\t// Init the event handler queue if we're the first\n\t\t\t\tif (!(handlers = events[type])) {\n\t\t\t\t\thandlers = events[type] = [];\n\t\t\t\t\thandlers.delegateCount = 0;\n\n\t\t\t\t\t// Only use addEventListener if the special events handler returns false\n\t\t\t\t\tif (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {\n\n\t\t\t\t\t\tif (elem.addEventListener) {\n\t\t\t\t\t\t\telem.addEventListener(type, eventHandle);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (special.add) {\n\t\t\t\t\tspecial.add.call(elem, handleObj);\n\n\t\t\t\t\tif (!handleObj.handler.guid) {\n\t\t\t\t\t\thandleObj.handler.guid = handler.guid;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Add to the element's handler list, delegates in front\n\t\t\t\tif (selector) {\n\t\t\t\t\thandlers.splice(handlers.delegateCount++, 0, handleObj);\n\t\t\t\t} else {\n\t\t\t\t\thandlers.push(handleObj);\n\t\t\t\t}\n\n\t\t\t\t// Keep track of which events have ever been used, for event optimization\n\t\t\t\tjQuery.event.global[type] = true;\n\t\t\t}\n\t\t},\n\n\t\t// Detach an event or set of events from an element\n\t\tremove: function remove(elem, types, handler, selector, mappedTypes) {\n\n\t\t\tvar j,\n\t\t\t    origCount,\n\t\t\t    tmp,\n\t\t\t    events,\n\t\t\t    t,\n\t\t\t    handleObj,\n\t\t\t    special,\n\t\t\t    handlers,\n\t\t\t    type,\n\t\t\t    namespaces,\n\t\t\t    origType,\n\t\t\t    elemData = dataPriv.hasData(elem) && dataPriv.get(elem);\n\n\t\t\tif (!elemData || !(events = elemData.events)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Once for each type.namespace in types; type may be omitted\n\t\t\ttypes = (types || \"\").match(rnotwhite) || [\"\"];\n\t\t\tt = types.length;\n\t\t\twhile (t--) {\n\t\t\t\ttmp = rtypenamespace.exec(types[t]) || [];\n\t\t\t\ttype = origType = tmp[1];\n\t\t\t\tnamespaces = (tmp[2] || \"\").split(\".\").sort();\n\n\t\t\t\t// Unbind all events (on this namespace, if provided) for the element\n\t\t\t\tif (!type) {\n\t\t\t\t\tfor (type in events) {\n\t\t\t\t\t\tjQuery.event.remove(elem, type + types[t], handler, selector, true);\n\t\t\t\t\t}\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tspecial = jQuery.event.special[type] || {};\n\t\t\t\ttype = (selector ? special.delegateType : special.bindType) || type;\n\t\t\t\thandlers = events[type] || [];\n\t\t\t\ttmp = tmp[2] && new RegExp(\"(^|\\\\.)\" + namespaces.join(\"\\\\.(?:.*\\\\.|)\") + \"(\\\\.|$)\");\n\n\t\t\t\t// Remove matching events\n\t\t\t\torigCount = j = handlers.length;\n\t\t\t\twhile (j--) {\n\t\t\t\t\thandleObj = handlers[j];\n\n\t\t\t\t\tif ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === \"**\" && handleObj.selector)) {\n\t\t\t\t\t\thandlers.splice(j, 1);\n\n\t\t\t\t\t\tif (handleObj.selector) {\n\t\t\t\t\t\t\thandlers.delegateCount--;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (special.remove) {\n\t\t\t\t\t\t\tspecial.remove.call(elem, handleObj);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Remove generic event handler if we removed something and no more handlers exist\n\t\t\t\t// (avoids potential for endless recursion during removal of special event handlers)\n\t\t\t\tif (origCount && !handlers.length) {\n\t\t\t\t\tif (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {\n\n\t\t\t\t\t\tjQuery.removeEvent(elem, type, elemData.handle);\n\t\t\t\t\t}\n\n\t\t\t\t\tdelete events[type];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Remove data and the expando if it's no longer used\n\t\t\tif (jQuery.isEmptyObject(events)) {\n\t\t\t\tdataPriv.remove(elem, \"handle events\");\n\t\t\t}\n\t\t},\n\n\t\tdispatch: function dispatch(nativeEvent) {\n\n\t\t\t// Make a writable jQuery.Event from the native event object\n\t\t\tvar event = jQuery.event.fix(nativeEvent);\n\n\t\t\tvar i,\n\t\t\t    j,\n\t\t\t    ret,\n\t\t\t    matched,\n\t\t\t    handleObj,\n\t\t\t    handlerQueue,\n\t\t\t    args = new Array(arguments.length),\n\t\t\t    handlers = (dataPriv.get(this, \"events\") || {})[event.type] || [],\n\t\t\t    special = jQuery.event.special[event.type] || {};\n\n\t\t\t// Use the fix-ed jQuery.Event rather than the (read-only) native event\n\t\t\targs[0] = event;\n\n\t\t\tfor (i = 1; i < arguments.length; i++) {\n\t\t\t\targs[i] = arguments[i];\n\t\t\t}\n\n\t\t\tevent.delegateTarget = this;\n\n\t\t\t// Call the preDispatch hook for the mapped type, and let it bail if desired\n\t\t\tif (special.preDispatch && special.preDispatch.call(this, event) === false) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Determine handlers\n\t\t\thandlerQueue = jQuery.event.handlers.call(this, event, handlers);\n\n\t\t\t// Run delegates first; they may want to stop propagation beneath us\n\t\t\ti = 0;\n\t\t\twhile ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {\n\t\t\t\tevent.currentTarget = matched.elem;\n\n\t\t\t\tj = 0;\n\t\t\t\twhile ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {\n\n\t\t\t\t\t// Triggered event must either 1) have no namespace, or 2) have namespace(s)\n\t\t\t\t\t// a subset or equal to those in the bound event (both can have no namespace).\n\t\t\t\t\tif (!event.rnamespace || event.rnamespace.test(handleObj.namespace)) {\n\n\t\t\t\t\t\tevent.handleObj = handleObj;\n\t\t\t\t\t\tevent.data = handleObj.data;\n\n\t\t\t\t\t\tret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);\n\n\t\t\t\t\t\tif (ret !== undefined) {\n\t\t\t\t\t\t\tif ((event.result = ret) === false) {\n\t\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Call the postDispatch hook for the mapped type\n\t\t\tif (special.postDispatch) {\n\t\t\t\tspecial.postDispatch.call(this, event);\n\t\t\t}\n\n\t\t\treturn event.result;\n\t\t},\n\n\t\thandlers: function handlers(event, _handlers) {\n\t\t\tvar i,\n\t\t\t    matches,\n\t\t\t    sel,\n\t\t\t    handleObj,\n\t\t\t    handlerQueue = [],\n\t\t\t    delegateCount = _handlers.delegateCount,\n\t\t\t    cur = event.target;\n\n\t\t\t// Support: IE <=9\n\t\t\t// Find delegate handlers\n\t\t\t// Black-hole SVG <use> instance trees (#13180)\n\t\t\t//\n\t\t\t// Support: Firefox <=42\n\t\t\t// Avoid non-left-click in FF but don't block IE radio events (#3861, gh-2343)\n\t\t\tif (delegateCount && cur.nodeType && (event.type !== \"click\" || isNaN(event.button) || event.button < 1)) {\n\n\t\t\t\tfor (; cur !== this; cur = cur.parentNode || this) {\n\n\t\t\t\t\t// Don't check non-elements (#13208)\n\t\t\t\t\t// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)\n\t\t\t\t\tif (cur.nodeType === 1 && (cur.disabled !== true || event.type !== \"click\")) {\n\t\t\t\t\t\tmatches = [];\n\t\t\t\t\t\tfor (i = 0; i < delegateCount; i++) {\n\t\t\t\t\t\t\thandleObj = _handlers[i];\n\n\t\t\t\t\t\t\t// Don't conflict with Object.prototype properties (#13203)\n\t\t\t\t\t\t\tsel = handleObj.selector + \" \";\n\n\t\t\t\t\t\t\tif (matches[sel] === undefined) {\n\t\t\t\t\t\t\t\tmatches[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) > -1 : jQuery.find(sel, this, null, [cur]).length;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (matches[sel]) {\n\t\t\t\t\t\t\t\tmatches.push(handleObj);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (matches.length) {\n\t\t\t\t\t\t\thandlerQueue.push({ elem: cur, handlers: matches });\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add the remaining (directly-bound) handlers\n\t\t\tif (delegateCount < _handlers.length) {\n\t\t\t\thandlerQueue.push({ elem: this, handlers: _handlers.slice(delegateCount) });\n\t\t\t}\n\n\t\t\treturn handlerQueue;\n\t\t},\n\n\t\taddProp: function addProp(name, hook) {\n\t\t\tObject.defineProperty(jQuery.Event.prototype, name, {\n\t\t\t\tenumerable: true,\n\t\t\t\tconfigurable: true,\n\n\t\t\t\tget: jQuery.isFunction(hook) ? function () {\n\t\t\t\t\tif (this.originalEvent) {\n\t\t\t\t\t\treturn hook(this.originalEvent);\n\t\t\t\t\t}\n\t\t\t\t} : function () {\n\t\t\t\t\tif (this.originalEvent) {\n\t\t\t\t\t\treturn this.originalEvent[name];\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\tset: function set(value) {\n\t\t\t\t\tObject.defineProperty(this, name, {\n\t\t\t\t\t\tenumerable: true,\n\t\t\t\t\t\tconfigurable: true,\n\t\t\t\t\t\twritable: true,\n\t\t\t\t\t\tvalue: value\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\tfix: function fix(originalEvent) {\n\t\t\treturn originalEvent[jQuery.expando] ? originalEvent : new jQuery.Event(originalEvent);\n\t\t},\n\n\t\tspecial: {\n\t\t\tload: {\n\n\t\t\t\t// Prevent triggered image.load events from bubbling to window.load\n\t\t\t\tnoBubble: true\n\t\t\t},\n\t\t\tfocus: {\n\n\t\t\t\t// Fire native event if possible so blur/focus sequence is correct\n\t\t\t\ttrigger: function trigger() {\n\t\t\t\t\tif (this !== safeActiveElement() && this.focus) {\n\t\t\t\t\t\tthis.focus();\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tdelegateType: \"focusin\"\n\t\t\t},\n\t\t\tblur: {\n\t\t\t\ttrigger: function trigger() {\n\t\t\t\t\tif (this === safeActiveElement() && this.blur) {\n\t\t\t\t\t\tthis.blur();\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tdelegateType: \"focusout\"\n\t\t\t},\n\t\t\tclick: {\n\n\t\t\t\t// For checkbox, fire native event so checked state will be right\n\t\t\t\ttrigger: function trigger() {\n\t\t\t\t\tif (this.type === \"checkbox\" && this.click && jQuery.nodeName(this, \"input\")) {\n\t\t\t\t\t\tthis.click();\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\t// For cross-browser consistency, don't fire native .click() on links\n\t\t\t\t_default: function _default(event) {\n\t\t\t\t\treturn jQuery.nodeName(event.target, \"a\");\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tbeforeunload: {\n\t\t\t\tpostDispatch: function postDispatch(event) {\n\n\t\t\t\t\t// Support: Firefox 20+\n\t\t\t\t\t// Firefox doesn't alert if the returnValue field is not set.\n\t\t\t\t\tif (event.result !== undefined && event.originalEvent) {\n\t\t\t\t\t\tevent.originalEvent.returnValue = event.result;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tjQuery.removeEvent = function (elem, type, handle) {\n\n\t\t// This \"if\" is needed for plain objects\n\t\tif (elem.removeEventListener) {\n\t\t\telem.removeEventListener(type, handle);\n\t\t}\n\t};\n\n\tjQuery.Event = function (src, props) {\n\n\t\t// Allow instantiation without the 'new' keyword\n\t\tif (!(this instanceof jQuery.Event)) {\n\t\t\treturn new jQuery.Event(src, props);\n\t\t}\n\n\t\t// Event object\n\t\tif (src && src.type) {\n\t\t\tthis.originalEvent = src;\n\t\t\tthis.type = src.type;\n\n\t\t\t// Events bubbling up the document may have been marked as prevented\n\t\t\t// by a handler lower down the tree; reflect the correct value.\n\t\t\tthis.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined &&\n\n\t\t\t// Support: Android <=2.3 only\n\t\t\tsrc.returnValue === false ? returnTrue : returnFalse;\n\n\t\t\t// Create target properties\n\t\t\t// Support: Safari <=6 - 7 only\n\t\t\t// Target should not be a text node (#504, #13143)\n\t\t\tthis.target = src.target && src.target.nodeType === 3 ? src.target.parentNode : src.target;\n\n\t\t\tthis.currentTarget = src.currentTarget;\n\t\t\tthis.relatedTarget = src.relatedTarget;\n\n\t\t\t// Event type\n\t\t} else {\n\t\t\tthis.type = src;\n\t\t}\n\n\t\t// Put explicitly provided properties onto the event object\n\t\tif (props) {\n\t\t\tjQuery.extend(this, props);\n\t\t}\n\n\t\t// Create a timestamp if incoming event doesn't have one\n\t\tthis.timeStamp = src && src.timeStamp || jQuery.now();\n\n\t\t// Mark it as fixed\n\t\tthis[jQuery.expando] = true;\n\t};\n\n\t// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\n\t// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\n\tjQuery.Event.prototype = {\n\t\tconstructor: jQuery.Event,\n\t\tisDefaultPrevented: returnFalse,\n\t\tisPropagationStopped: returnFalse,\n\t\tisImmediatePropagationStopped: returnFalse,\n\t\tisSimulated: false,\n\n\t\tpreventDefault: function preventDefault() {\n\t\t\tvar e = this.originalEvent;\n\n\t\t\tthis.isDefaultPrevented = returnTrue;\n\n\t\t\tif (e && !this.isSimulated) {\n\t\t\t\te.preventDefault();\n\t\t\t}\n\t\t},\n\t\tstopPropagation: function stopPropagation() {\n\t\t\tvar e = this.originalEvent;\n\n\t\t\tthis.isPropagationStopped = returnTrue;\n\n\t\t\tif (e && !this.isSimulated) {\n\t\t\t\te.stopPropagation();\n\t\t\t}\n\t\t},\n\t\tstopImmediatePropagation: function stopImmediatePropagation() {\n\t\t\tvar e = this.originalEvent;\n\n\t\t\tthis.isImmediatePropagationStopped = returnTrue;\n\n\t\t\tif (e && !this.isSimulated) {\n\t\t\t\te.stopImmediatePropagation();\n\t\t\t}\n\n\t\t\tthis.stopPropagation();\n\t\t}\n\t};\n\n\t// Includes all common event props including KeyEvent and MouseEvent specific props\n\tjQuery.each({\n\t\taltKey: true,\n\t\tbubbles: true,\n\t\tcancelable: true,\n\t\tchangedTouches: true,\n\t\tctrlKey: true,\n\t\tdetail: true,\n\t\teventPhase: true,\n\t\tmetaKey: true,\n\t\tpageX: true,\n\t\tpageY: true,\n\t\tshiftKey: true,\n\t\tview: true,\n\t\t\"char\": true,\n\t\tcharCode: true,\n\t\tkey: true,\n\t\tkeyCode: true,\n\t\tbutton: true,\n\t\tbuttons: true,\n\t\tclientX: true,\n\t\tclientY: true,\n\t\toffsetX: true,\n\t\toffsetY: true,\n\t\tpointerId: true,\n\t\tpointerType: true,\n\t\tscreenX: true,\n\t\tscreenY: true,\n\t\ttargetTouches: true,\n\t\ttoElement: true,\n\t\ttouches: true,\n\n\t\twhich: function which(event) {\n\t\t\tvar button = event.button;\n\n\t\t\t// Add which for key events\n\t\t\tif (event.which == null && rkeyEvent.test(event.type)) {\n\t\t\t\treturn event.charCode != null ? event.charCode : event.keyCode;\n\t\t\t}\n\n\t\t\t// Add which for click: 1 === left; 2 === middle; 3 === right\n\t\t\tif (!event.which && button !== undefined && rmouseEvent.test(event.type)) {\n\t\t\t\treturn button & 1 ? 1 : button & 2 ? 3 : button & 4 ? 2 : 0;\n\t\t\t}\n\n\t\t\treturn event.which;\n\t\t}\n\t}, jQuery.event.addProp);\n\n\t// Create mouseenter/leave events using mouseover/out and event-time checks\n\t// so that event delegation works in jQuery.\n\t// Do the same for pointerenter/pointerleave and pointerover/pointerout\n\t//\n\t// Support: Safari 7 only\n\t// Safari sends mouseenter too often; see:\n\t// https://bugs.chromium.org/p/chromium/issues/detail?id=470258\n\t// for the description of the bug (it existed in older Chrome versions as well).\n\tjQuery.each({\n\t\tmouseenter: \"mouseover\",\n\t\tmouseleave: \"mouseout\",\n\t\tpointerenter: \"pointerover\",\n\t\tpointerleave: \"pointerout\"\n\t}, function (orig, fix) {\n\t\tjQuery.event.special[orig] = {\n\t\t\tdelegateType: fix,\n\t\t\tbindType: fix,\n\n\t\t\thandle: function handle(event) {\n\t\t\t\tvar ret,\n\t\t\t\t    target = this,\n\t\t\t\t    related = event.relatedTarget,\n\t\t\t\t    handleObj = event.handleObj;\n\n\t\t\t\t// For mouseenter/leave call the handler if related is outside the target.\n\t\t\t\t// NB: No relatedTarget if the mouse left/entered the browser window\n\t\t\t\tif (!related || related !== target && !jQuery.contains(target, related)) {\n\t\t\t\t\tevent.type = handleObj.origType;\n\t\t\t\t\tret = handleObj.handler.apply(this, arguments);\n\t\t\t\t\tevent.type = fix;\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t};\n\t});\n\n\tjQuery.fn.extend({\n\n\t\ton: function on(types, selector, data, fn) {\n\t\t\treturn _on(this, types, selector, data, fn);\n\t\t},\n\t\tone: function one(types, selector, data, fn) {\n\t\t\treturn _on(this, types, selector, data, fn, 1);\n\t\t},\n\t\toff: function off(types, selector, fn) {\n\t\t\tvar handleObj, type;\n\t\t\tif (types && types.preventDefault && types.handleObj) {\n\n\t\t\t\t// ( event )  dispatched jQuery.Event\n\t\t\t\thandleObj = types.handleObj;\n\t\t\t\tjQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + \".\" + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);\n\t\t\t\treturn this;\n\t\t\t}\n\t\t\tif ((typeof types === \"undefined\" ? \"undefined\" : _typeof(types)) === \"object\") {\n\n\t\t\t\t// ( types-object [, selector] )\n\t\t\t\tfor (type in types) {\n\t\t\t\t\tthis.off(type, selector, types[type]);\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t}\n\t\t\tif (selector === false || typeof selector === \"function\") {\n\n\t\t\t\t// ( types [, fn] )\n\t\t\t\tfn = selector;\n\t\t\t\tselector = undefined;\n\t\t\t}\n\t\t\tif (fn === false) {\n\t\t\t\tfn = returnFalse;\n\t\t\t}\n\t\t\treturn this.each(function () {\n\t\t\t\tjQuery.event.remove(this, types, fn, selector);\n\t\t\t});\n\t\t}\n\t});\n\n\tvar\n\n\t/* eslint-disable max-len */\n\n\t// See https://github.com/eslint/eslint/issues/3229\n\trxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi,\n\n\n\t/* eslint-enable */\n\n\t// Support: IE <=10 - 11, Edge 12 - 13\n\t// In IE/Edge using regex groups here causes severe slowdowns.\n\t// See https://connect.microsoft.com/IE/feedback/details/1736512/\n\trnoInnerhtml = /<script|<style|<link/i,\n\n\n\t// checked=\"checked\" or checked\n\trchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n\t    rscriptTypeMasked = /^true\\/(.*)/,\n\t    rcleanScript = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g;\n\n\tfunction manipulationTarget(elem, content) {\n\t\tif (jQuery.nodeName(elem, \"table\") && jQuery.nodeName(content.nodeType !== 11 ? content : content.firstChild, \"tr\")) {\n\n\t\t\treturn elem.getElementsByTagName(\"tbody\")[0] || elem;\n\t\t}\n\n\t\treturn elem;\n\t}\n\n\t// Replace/restore the type attribute of script elements for safe DOM manipulation\n\tfunction disableScript(elem) {\n\t\telem.type = (elem.getAttribute(\"type\") !== null) + \"/\" + elem.type;\n\t\treturn elem;\n\t}\n\tfunction restoreScript(elem) {\n\t\tvar match = rscriptTypeMasked.exec(elem.type);\n\n\t\tif (match) {\n\t\t\telem.type = match[1];\n\t\t} else {\n\t\t\telem.removeAttribute(\"type\");\n\t\t}\n\n\t\treturn elem;\n\t}\n\n\tfunction cloneCopyEvent(src, dest) {\n\t\tvar i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;\n\n\t\tif (dest.nodeType !== 1) {\n\t\t\treturn;\n\t\t}\n\n\t\t// 1. Copy private data: events, handlers, etc.\n\t\tif (dataPriv.hasData(src)) {\n\t\t\tpdataOld = dataPriv.access(src);\n\t\t\tpdataCur = dataPriv.set(dest, pdataOld);\n\t\t\tevents = pdataOld.events;\n\n\t\t\tif (events) {\n\t\t\t\tdelete pdataCur.handle;\n\t\t\t\tpdataCur.events = {};\n\n\t\t\t\tfor (type in events) {\n\t\t\t\t\tfor (i = 0, l = events[type].length; i < l; i++) {\n\t\t\t\t\t\tjQuery.event.add(dest, type, events[type][i]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// 2. Copy user data\n\t\tif (dataUser.hasData(src)) {\n\t\t\tudataOld = dataUser.access(src);\n\t\t\tudataCur = jQuery.extend({}, udataOld);\n\n\t\t\tdataUser.set(dest, udataCur);\n\t\t}\n\t}\n\n\t// Fix IE bugs, see support tests\n\tfunction fixInput(src, dest) {\n\t\tvar nodeName = dest.nodeName.toLowerCase();\n\n\t\t// Fails to persist the checked state of a cloned checkbox or radio button.\n\t\tif (nodeName === \"input\" && rcheckableType.test(src.type)) {\n\t\t\tdest.checked = src.checked;\n\n\t\t\t// Fails to return the selected option to the default selected state when cloning options\n\t\t} else if (nodeName === \"input\" || nodeName === \"textarea\") {\n\t\t\tdest.defaultValue = src.defaultValue;\n\t\t}\n\t}\n\n\tfunction domManip(collection, args, callback, ignored) {\n\n\t\t// Flatten any nested arrays\n\t\targs = concat.apply([], args);\n\n\t\tvar fragment,\n\t\t    first,\n\t\t    scripts,\n\t\t    hasScripts,\n\t\t    node,\n\t\t    doc,\n\t\t    i = 0,\n\t\t    l = collection.length,\n\t\t    iNoClone = l - 1,\n\t\t    value = args[0],\n\t\t    isFunction = jQuery.isFunction(value);\n\n\t\t// We can't cloneNode fragments that contain checked, in WebKit\n\t\tif (isFunction || l > 1 && typeof value === \"string\" && !support.checkClone && rchecked.test(value)) {\n\t\t\treturn collection.each(function (index) {\n\t\t\t\tvar self = collection.eq(index);\n\t\t\t\tif (isFunction) {\n\t\t\t\t\targs[0] = value.call(this, index, self.html());\n\t\t\t\t}\n\t\t\t\tdomManip(self, args, callback, ignored);\n\t\t\t});\n\t\t}\n\n\t\tif (l) {\n\t\t\tfragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);\n\t\t\tfirst = fragment.firstChild;\n\n\t\t\tif (fragment.childNodes.length === 1) {\n\t\t\t\tfragment = first;\n\t\t\t}\n\n\t\t\t// Require either new content or an interest in ignored elements to invoke the callback\n\t\t\tif (first || ignored) {\n\t\t\t\tscripts = jQuery.map(getAll(fragment, \"script\"), disableScript);\n\t\t\t\thasScripts = scripts.length;\n\n\t\t\t\t// Use the original fragment for the last item\n\t\t\t\t// instead of the first because it can end up\n\t\t\t\t// being emptied incorrectly in certain situations (#8070).\n\t\t\t\tfor (; i < l; i++) {\n\t\t\t\t\tnode = fragment;\n\n\t\t\t\t\tif (i !== iNoClone) {\n\t\t\t\t\t\tnode = jQuery.clone(node, true, true);\n\n\t\t\t\t\t\t// Keep references to cloned scripts for later restoration\n\t\t\t\t\t\tif (hasScripts) {\n\n\t\t\t\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\t\t\t\tjQuery.merge(scripts, getAll(node, \"script\"));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tcallback.call(collection[i], node, i);\n\t\t\t\t}\n\n\t\t\t\tif (hasScripts) {\n\t\t\t\t\tdoc = scripts[scripts.length - 1].ownerDocument;\n\n\t\t\t\t\t// Reenable scripts\n\t\t\t\t\tjQuery.map(scripts, restoreScript);\n\n\t\t\t\t\t// Evaluate executable scripts on first document insertion\n\t\t\t\t\tfor (i = 0; i < hasScripts; i++) {\n\t\t\t\t\t\tnode = scripts[i];\n\t\t\t\t\t\tif (rscriptType.test(node.type || \"\") && !dataPriv.access(node, \"globalEval\") && jQuery.contains(doc, node)) {\n\n\t\t\t\t\t\t\tif (node.src) {\n\n\t\t\t\t\t\t\t\t// Optional AJAX dependency, but won't run scripts if not present\n\t\t\t\t\t\t\t\tif (jQuery._evalUrl) {\n\t\t\t\t\t\t\t\t\tjQuery._evalUrl(node.src);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tDOMEval(node.textContent.replace(rcleanScript, \"\"), doc);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn collection;\n\t}\n\n\tfunction _remove(elem, selector, keepData) {\n\t\tvar node,\n\t\t    nodes = selector ? jQuery.filter(selector, elem) : elem,\n\t\t    i = 0;\n\n\t\tfor (; (node = nodes[i]) != null; i++) {\n\t\t\tif (!keepData && node.nodeType === 1) {\n\t\t\t\tjQuery.cleanData(getAll(node));\n\t\t\t}\n\n\t\t\tif (node.parentNode) {\n\t\t\t\tif (keepData && jQuery.contains(node.ownerDocument, node)) {\n\t\t\t\t\tsetGlobalEval(getAll(node, \"script\"));\n\t\t\t\t}\n\t\t\t\tnode.parentNode.removeChild(node);\n\t\t\t}\n\t\t}\n\n\t\treturn elem;\n\t}\n\n\tjQuery.extend({\n\t\thtmlPrefilter: function htmlPrefilter(html) {\n\t\t\treturn html.replace(rxhtmlTag, \"<$1></$2>\");\n\t\t},\n\n\t\tclone: function clone(elem, dataAndEvents, deepDataAndEvents) {\n\t\t\tvar i,\n\t\t\t    l,\n\t\t\t    srcElements,\n\t\t\t    destElements,\n\t\t\t    clone = elem.cloneNode(true),\n\t\t\t    inPage = jQuery.contains(elem.ownerDocument, elem);\n\n\t\t\t// Fix IE cloning issues\n\t\t\tif (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {\n\n\t\t\t\t// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2\n\t\t\t\tdestElements = getAll(clone);\n\t\t\t\tsrcElements = getAll(elem);\n\n\t\t\t\tfor (i = 0, l = srcElements.length; i < l; i++) {\n\t\t\t\t\tfixInput(srcElements[i], destElements[i]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Copy the events from the original to the clone\n\t\t\tif (dataAndEvents) {\n\t\t\t\tif (deepDataAndEvents) {\n\t\t\t\t\tsrcElements = srcElements || getAll(elem);\n\t\t\t\t\tdestElements = destElements || getAll(clone);\n\n\t\t\t\t\tfor (i = 0, l = srcElements.length; i < l; i++) {\n\t\t\t\t\t\tcloneCopyEvent(srcElements[i], destElements[i]);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tcloneCopyEvent(elem, clone);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Preserve script evaluation history\n\t\t\tdestElements = getAll(clone, \"script\");\n\t\t\tif (destElements.length > 0) {\n\t\t\t\tsetGlobalEval(destElements, !inPage && getAll(elem, \"script\"));\n\t\t\t}\n\n\t\t\t// Return the cloned set\n\t\t\treturn clone;\n\t\t},\n\n\t\tcleanData: function cleanData(elems) {\n\t\t\tvar data,\n\t\t\t    elem,\n\t\t\t    type,\n\t\t\t    special = jQuery.event.special,\n\t\t\t    i = 0;\n\n\t\t\tfor (; (elem = elems[i]) !== undefined; i++) {\n\t\t\t\tif (acceptData(elem)) {\n\t\t\t\t\tif (data = elem[dataPriv.expando]) {\n\t\t\t\t\t\tif (data.events) {\n\t\t\t\t\t\t\tfor (type in data.events) {\n\t\t\t\t\t\t\t\tif (special[type]) {\n\t\t\t\t\t\t\t\t\tjQuery.event.remove(elem, type);\n\n\t\t\t\t\t\t\t\t\t// This is a shortcut to avoid jQuery.event.remove's overhead\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tjQuery.removeEvent(elem, type, data.handle);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\t\telem[dataPriv.expando] = undefined;\n\t\t\t\t\t}\n\t\t\t\t\tif (elem[dataUser.expando]) {\n\n\t\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\t\telem[dataUser.expando] = undefined;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tjQuery.fn.extend({\n\t\tdetach: function detach(selector) {\n\t\t\treturn _remove(this, selector, true);\n\t\t},\n\n\t\tremove: function remove(selector) {\n\t\t\treturn _remove(this, selector);\n\t\t},\n\n\t\ttext: function text(value) {\n\t\t\treturn access(this, function (value) {\n\t\t\t\treturn value === undefined ? jQuery.text(this) : this.empty().each(function () {\n\t\t\t\t\tif (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\n\t\t\t\t\t\tthis.textContent = value;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}, null, value, arguments.length);\n\t\t},\n\n\t\tappend: function append() {\n\t\t\treturn domManip(this, arguments, function (elem) {\n\t\t\t\tif (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\n\t\t\t\t\tvar target = manipulationTarget(this, elem);\n\t\t\t\t\ttarget.appendChild(elem);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\tprepend: function prepend() {\n\t\t\treturn domManip(this, arguments, function (elem) {\n\t\t\t\tif (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\n\t\t\t\t\tvar target = manipulationTarget(this, elem);\n\t\t\t\t\ttarget.insertBefore(elem, target.firstChild);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\tbefore: function before() {\n\t\t\treturn domManip(this, arguments, function (elem) {\n\t\t\t\tif (this.parentNode) {\n\t\t\t\t\tthis.parentNode.insertBefore(elem, this);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\tafter: function after() {\n\t\t\treturn domManip(this, arguments, function (elem) {\n\t\t\t\tif (this.parentNode) {\n\t\t\t\t\tthis.parentNode.insertBefore(elem, this.nextSibling);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\tempty: function empty() {\n\t\t\tvar elem,\n\t\t\t    i = 0;\n\n\t\t\tfor (; (elem = this[i]) != null; i++) {\n\t\t\t\tif (elem.nodeType === 1) {\n\n\t\t\t\t\t// Prevent memory leaks\n\t\t\t\t\tjQuery.cleanData(getAll(elem, false));\n\n\t\t\t\t\t// Remove any remaining nodes\n\t\t\t\t\telem.textContent = \"\";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\n\t\tclone: function clone(dataAndEvents, deepDataAndEvents) {\n\t\t\tdataAndEvents = dataAndEvents == null ? false : dataAndEvents;\n\t\t\tdeepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\n\n\t\t\treturn this.map(function () {\n\t\t\t\treturn jQuery.clone(this, dataAndEvents, deepDataAndEvents);\n\t\t\t});\n\t\t},\n\n\t\thtml: function html(value) {\n\t\t\treturn access(this, function (value) {\n\t\t\t\tvar elem = this[0] || {},\n\t\t\t\t    i = 0,\n\t\t\t\t    l = this.length;\n\n\t\t\t\tif (value === undefined && elem.nodeType === 1) {\n\t\t\t\t\treturn elem.innerHTML;\n\t\t\t\t}\n\n\t\t\t\t// See if we can take a shortcut and just use innerHTML\n\t\t\t\tif (typeof value === \"string\" && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || [\"\", \"\"])[1].toLowerCase()]) {\n\n\t\t\t\t\tvalue = jQuery.htmlPrefilter(value);\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tfor (; i < l; i++) {\n\t\t\t\t\t\t\telem = this[i] || {};\n\n\t\t\t\t\t\t\t// Remove element nodes and prevent memory leaks\n\t\t\t\t\t\t\tif (elem.nodeType === 1) {\n\t\t\t\t\t\t\t\tjQuery.cleanData(getAll(elem, false));\n\t\t\t\t\t\t\t\telem.innerHTML = value;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\telem = 0;\n\n\t\t\t\t\t\t// If using innerHTML throws an exception, use the fallback method\n\t\t\t\t\t} catch (e) {}\n\t\t\t\t}\n\n\t\t\t\tif (elem) {\n\t\t\t\t\tthis.empty().append(value);\n\t\t\t\t}\n\t\t\t}, null, value, arguments.length);\n\t\t},\n\n\t\treplaceWith: function replaceWith() {\n\t\t\tvar ignored = [];\n\n\t\t\t// Make the changes, replacing each non-ignored context element with the new content\n\t\t\treturn domManip(this, arguments, function (elem) {\n\t\t\t\tvar parent = this.parentNode;\n\n\t\t\t\tif (jQuery.inArray(this, ignored) < 0) {\n\t\t\t\t\tjQuery.cleanData(getAll(this));\n\t\t\t\t\tif (parent) {\n\t\t\t\t\t\tparent.replaceChild(elem, this);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Force callback invocation\n\t\t\t}, ignored);\n\t\t}\n\t});\n\n\tjQuery.each({\n\t\tappendTo: \"append\",\n\t\tprependTo: \"prepend\",\n\t\tinsertBefore: \"before\",\n\t\tinsertAfter: \"after\",\n\t\treplaceAll: \"replaceWith\"\n\t}, function (name, original) {\n\t\tjQuery.fn[name] = function (selector) {\n\t\t\tvar elems,\n\t\t\t    ret = [],\n\t\t\t    insert = jQuery(selector),\n\t\t\t    last = insert.length - 1,\n\t\t\t    i = 0;\n\n\t\t\tfor (; i <= last; i++) {\n\t\t\t\telems = i === last ? this : this.clone(true);\n\t\t\t\tjQuery(insert[i])[original](elems);\n\n\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t// .get() because push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tpush.apply(ret, elems.get());\n\t\t\t}\n\n\t\t\treturn this.pushStack(ret);\n\t\t};\n\t});\n\tvar rmargin = /^margin/;\n\n\tvar rnumnonpx = new RegExp(\"^(\" + pnum + \")(?!px)[a-z%]+$\", \"i\");\n\n\tvar getStyles = function getStyles(elem) {\n\n\t\t// Support: IE <=11 only, Firefox <=30 (#15098, #14150)\n\t\t// IE throws on elements created in popups\n\t\t// FF meanwhile throws on frame elements through \"defaultView.getComputedStyle\"\n\t\tvar view = elem.ownerDocument.defaultView;\n\n\t\tif (!view || !view.opener) {\n\t\t\tview = window;\n\t\t}\n\n\t\treturn view.getComputedStyle(elem);\n\t};\n\n\t(function () {\n\n\t\t// Executing both pixelPosition & boxSizingReliable tests require only one layout\n\t\t// so they're executed at the same time to save the second computation.\n\t\tfunction computeStyleTests() {\n\n\t\t\t// This is a singleton, we need to execute it only once\n\t\t\tif (!div) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tdiv.style.cssText = \"box-sizing:border-box;\" + \"position:relative;display:block;\" + \"margin:auto;border:1px;padding:1px;\" + \"top:1%;width:50%\";\n\t\t\tdiv.innerHTML = \"\";\n\t\t\tdocumentElement.appendChild(container);\n\n\t\t\tvar divStyle = window.getComputedStyle(div);\n\t\t\tpixelPositionVal = divStyle.top !== \"1%\";\n\n\t\t\t// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44\n\t\t\treliableMarginLeftVal = divStyle.marginLeft === \"2px\";\n\t\t\tboxSizingReliableVal = divStyle.width === \"4px\";\n\n\t\t\t// Support: Android 4.0 - 4.3 only\n\t\t\t// Some styles come back with percentage values, even though they shouldn't\n\t\t\tdiv.style.marginRight = \"50%\";\n\t\t\tpixelMarginRightVal = divStyle.marginRight === \"4px\";\n\n\t\t\tdocumentElement.removeChild(container);\n\n\t\t\t// Nullify the div so it wouldn't be stored in the memory and\n\t\t\t// it will also be a sign that checks already performed\n\t\t\tdiv = null;\n\t\t}\n\n\t\tvar pixelPositionVal,\n\t\t    boxSizingReliableVal,\n\t\t    pixelMarginRightVal,\n\t\t    reliableMarginLeftVal,\n\t\t    container = document.createElement(\"div\"),\n\t\t    div = document.createElement(\"div\");\n\n\t\t// Finish early in limited (non-browser) environments\n\t\tif (!div.style) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Support: IE <=9 - 11 only\n\t\t// Style of cloned element affects source element cloned (#8908)\n\t\tdiv.style.backgroundClip = \"content-box\";\n\t\tdiv.cloneNode(true).style.backgroundClip = \"\";\n\t\tsupport.clearCloneStyle = div.style.backgroundClip === \"content-box\";\n\n\t\tcontainer.style.cssText = \"border:0;width:8px;height:0;top:0;left:-9999px;\" + \"padding:0;margin-top:1px;position:absolute\";\n\t\tcontainer.appendChild(div);\n\n\t\tjQuery.extend(support, {\n\t\t\tpixelPosition: function pixelPosition() {\n\t\t\t\tcomputeStyleTests();\n\t\t\t\treturn pixelPositionVal;\n\t\t\t},\n\t\t\tboxSizingReliable: function boxSizingReliable() {\n\t\t\t\tcomputeStyleTests();\n\t\t\t\treturn boxSizingReliableVal;\n\t\t\t},\n\t\t\tpixelMarginRight: function pixelMarginRight() {\n\t\t\t\tcomputeStyleTests();\n\t\t\t\treturn pixelMarginRightVal;\n\t\t\t},\n\t\t\treliableMarginLeft: function reliableMarginLeft() {\n\t\t\t\tcomputeStyleTests();\n\t\t\t\treturn reliableMarginLeftVal;\n\t\t\t}\n\t\t});\n\t})();\n\n\tfunction curCSS(elem, name, computed) {\n\t\tvar width,\n\t\t    minWidth,\n\t\t    maxWidth,\n\t\t    ret,\n\t\t    style = elem.style;\n\n\t\tcomputed = computed || getStyles(elem);\n\n\t\t// Support: IE <=9 only\n\t\t// getPropertyValue is only needed for .css('filter') (#12537)\n\t\tif (computed) {\n\t\t\tret = computed.getPropertyValue(name) || computed[name];\n\n\t\t\tif (ret === \"\" && !jQuery.contains(elem.ownerDocument, elem)) {\n\t\t\t\tret = jQuery.style(elem, name);\n\t\t\t}\n\n\t\t\t// A tribute to the \"awesome hack by Dean Edwards\"\n\t\t\t// Android Browser returns percentage for some values,\n\t\t\t// but width seems to be reliably pixels.\n\t\t\t// This is against the CSSOM draft spec:\n\t\t\t// https://drafts.csswg.org/cssom/#resolved-values\n\t\t\tif (!support.pixelMarginRight() && rnumnonpx.test(ret) && rmargin.test(name)) {\n\n\t\t\t\t// Remember the original values\n\t\t\t\twidth = style.width;\n\t\t\t\tminWidth = style.minWidth;\n\t\t\t\tmaxWidth = style.maxWidth;\n\n\t\t\t\t// Put in the new values to get a computed value out\n\t\t\t\tstyle.minWidth = style.maxWidth = style.width = ret;\n\t\t\t\tret = computed.width;\n\n\t\t\t\t// Revert the changed values\n\t\t\t\tstyle.width = width;\n\t\t\t\tstyle.minWidth = minWidth;\n\t\t\t\tstyle.maxWidth = maxWidth;\n\t\t\t}\n\t\t}\n\n\t\treturn ret !== undefined ?\n\n\t\t// Support: IE <=9 - 11 only\n\t\t// IE returns zIndex value as an integer.\n\t\tret + \"\" : ret;\n\t}\n\n\tfunction addGetHookIf(conditionFn, hookFn) {\n\n\t\t// Define the hook, we'll check on the first run if it's really needed.\n\t\treturn {\n\t\t\tget: function get() {\n\t\t\t\tif (conditionFn()) {\n\n\t\t\t\t\t// Hook not needed (or it's not possible to use it due\n\t\t\t\t\t// to missing dependency), remove it.\n\t\t\t\t\tdelete this.get;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Hook needed; redefine it so that the support test is not executed again.\n\t\t\t\treturn (this.get = hookFn).apply(this, arguments);\n\t\t\t}\n\t\t};\n\t}\n\n\tvar\n\n\t// Swappable if display is none or starts with table\n\t// except \"table\", \"table-cell\", or \"table-caption\"\n\t// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\n\trdisplayswap = /^(none|table(?!-c[ea]).+)/,\n\t    cssShow = { position: \"absolute\", visibility: \"hidden\", display: \"block\" },\n\t    cssNormalTransform = {\n\t\tletterSpacing: \"0\",\n\t\tfontWeight: \"400\"\n\t},\n\t    cssPrefixes = [\"Webkit\", \"Moz\", \"ms\"],\n\t    emptyStyle = document.createElement(\"div\").style;\n\n\t// Return a css property mapped to a potentially vendor prefixed property\n\tfunction vendorPropName(name) {\n\n\t\t// Shortcut for names that are not vendor prefixed\n\t\tif (name in emptyStyle) {\n\t\t\treturn name;\n\t\t}\n\n\t\t// Check for vendor prefixed names\n\t\tvar capName = name[0].toUpperCase() + name.slice(1),\n\t\t    i = cssPrefixes.length;\n\n\t\twhile (i--) {\n\t\t\tname = cssPrefixes[i] + capName;\n\t\t\tif (name in emptyStyle) {\n\t\t\t\treturn name;\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction setPositiveNumber(elem, value, subtract) {\n\n\t\t// Any relative (+/-) values have already been\n\t\t// normalized at this point\n\t\tvar matches = rcssNum.exec(value);\n\t\treturn matches ?\n\n\t\t// Guard against undefined \"subtract\", e.g., when used as in cssHooks\n\t\tMath.max(0, matches[2] - (subtract || 0)) + (matches[3] || \"px\") : value;\n\t}\n\n\tfunction augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {\n\t\tvar i = extra === (isBorderBox ? \"border\" : \"content\") ?\n\n\t\t// If we already have the right measurement, avoid augmentation\n\t\t4 :\n\n\t\t// Otherwise initialize for horizontal or vertical properties\n\t\tname === \"width\" ? 1 : 0,\n\t\t    val = 0;\n\n\t\tfor (; i < 4; i += 2) {\n\n\t\t\t// Both box models exclude margin, so add it if we want it\n\t\t\tif (extra === \"margin\") {\n\t\t\t\tval += jQuery.css(elem, extra + cssExpand[i], true, styles);\n\t\t\t}\n\n\t\t\tif (isBorderBox) {\n\n\t\t\t\t// border-box includes padding, so remove it if we want content\n\t\t\t\tif (extra === \"content\") {\n\t\t\t\t\tval -= jQuery.css(elem, \"padding\" + cssExpand[i], true, styles);\n\t\t\t\t}\n\n\t\t\t\t// At this point, extra isn't border nor margin, so remove border\n\t\t\t\tif (extra !== \"margin\") {\n\t\t\t\t\tval -= jQuery.css(elem, \"border\" + cssExpand[i] + \"Width\", true, styles);\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\t// At this point, extra isn't content, so add padding\n\t\t\t\tval += jQuery.css(elem, \"padding\" + cssExpand[i], true, styles);\n\n\t\t\t\t// At this point, extra isn't content nor padding, so add border\n\t\t\t\tif (extra !== \"padding\") {\n\t\t\t\t\tval += jQuery.css(elem, \"border\" + cssExpand[i] + \"Width\", true, styles);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn val;\n\t}\n\n\tfunction getWidthOrHeight(elem, name, extra) {\n\n\t\t// Start with offset property, which is equivalent to the border-box value\n\t\tvar val,\n\t\t    valueIsBorderBox = true,\n\t\t    styles = getStyles(elem),\n\t\t    isBorderBox = jQuery.css(elem, \"boxSizing\", false, styles) === \"border-box\";\n\n\t\t// Support: IE <=11 only\n\t\t// Running getBoundingClientRect on a disconnected node\n\t\t// in IE throws an error.\n\t\tif (elem.getClientRects().length) {\n\t\t\tval = elem.getBoundingClientRect()[name];\n\t\t}\n\n\t\t// Some non-html elements return undefined for offsetWidth, so check for null/undefined\n\t\t// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285\n\t\t// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668\n\t\tif (val <= 0 || val == null) {\n\n\t\t\t// Fall back to computed then uncomputed css if necessary\n\t\t\tval = curCSS(elem, name, styles);\n\t\t\tif (val < 0 || val == null) {\n\t\t\t\tval = elem.style[name];\n\t\t\t}\n\n\t\t\t// Computed unit is not pixels. Stop here and return.\n\t\t\tif (rnumnonpx.test(val)) {\n\t\t\t\treturn val;\n\t\t\t}\n\n\t\t\t// Check for style in case a browser which returns unreliable values\n\t\t\t// for getComputedStyle silently falls back to the reliable elem.style\n\t\t\tvalueIsBorderBox = isBorderBox && (support.boxSizingReliable() || val === elem.style[name]);\n\n\t\t\t// Normalize \"\", auto, and prepare for extra\n\t\t\tval = parseFloat(val) || 0;\n\t\t}\n\n\t\t// Use the active box-sizing model to add/subtract irrelevant styles\n\t\treturn val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? \"border\" : \"content\"), valueIsBorderBox, styles) + \"px\";\n\t}\n\n\tjQuery.extend({\n\n\t\t// Add in style property hooks for overriding the default\n\t\t// behavior of getting and setting a style property\n\t\tcssHooks: {\n\t\t\topacity: {\n\t\t\t\tget: function get(elem, computed) {\n\t\t\t\t\tif (computed) {\n\n\t\t\t\t\t\t// We should always get a number back from opacity\n\t\t\t\t\t\tvar ret = curCSS(elem, \"opacity\");\n\t\t\t\t\t\treturn ret === \"\" ? \"1\" : ret;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t// Don't automatically add \"px\" to these possibly-unitless properties\n\t\tcssNumber: {\n\t\t\t\"animationIterationCount\": true,\n\t\t\t\"columnCount\": true,\n\t\t\t\"fillOpacity\": true,\n\t\t\t\"flexGrow\": true,\n\t\t\t\"flexShrink\": true,\n\t\t\t\"fontWeight\": true,\n\t\t\t\"lineHeight\": true,\n\t\t\t\"opacity\": true,\n\t\t\t\"order\": true,\n\t\t\t\"orphans\": true,\n\t\t\t\"widows\": true,\n\t\t\t\"zIndex\": true,\n\t\t\t\"zoom\": true\n\t\t},\n\n\t\t// Add in properties whose names you wish to fix before\n\t\t// setting or getting the value\n\t\tcssProps: {\n\t\t\t\"float\": \"cssFloat\"\n\t\t},\n\n\t\t// Get and set the style property on a DOM Node\n\t\tstyle: function style(elem, name, value, extra) {\n\n\t\t\t// Don't set styles on text and comment nodes\n\t\t\tif (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Make sure that we're working with the right name\n\t\t\tvar ret,\n\t\t\t    type,\n\t\t\t    hooks,\n\t\t\t    origName = jQuery.camelCase(name),\n\t\t\t    style = elem.style;\n\n\t\t\tname = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(origName) || origName);\n\n\t\t\t// Gets hook for the prefixed version, then unprefixed version\n\t\t\thooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];\n\n\t\t\t// Check if we're setting a value\n\t\t\tif (value !== undefined) {\n\t\t\t\ttype = typeof value === \"undefined\" ? \"undefined\" : _typeof(value);\n\n\t\t\t\t// Convert \"+=\" or \"-=\" to relative numbers (#7345)\n\t\t\t\tif (type === \"string\" && (ret = rcssNum.exec(value)) && ret[1]) {\n\t\t\t\t\tvalue = adjustCSS(elem, name, ret);\n\n\t\t\t\t\t// Fixes bug #9237\n\t\t\t\t\ttype = \"number\";\n\t\t\t\t}\n\n\t\t\t\t// Make sure that null and NaN values aren't set (#7116)\n\t\t\t\tif (value == null || value !== value) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// If a number was passed in, add the unit (except for certain CSS properties)\n\t\t\t\tif (type === \"number\") {\n\t\t\t\t\tvalue += ret && ret[3] || (jQuery.cssNumber[origName] ? \"\" : \"px\");\n\t\t\t\t}\n\n\t\t\t\t// background-* props affect original clone's values\n\t\t\t\tif (!support.clearCloneStyle && value === \"\" && name.indexOf(\"background\") === 0) {\n\t\t\t\t\tstyle[name] = \"inherit\";\n\t\t\t\t}\n\n\t\t\t\t// If a hook was provided, use that value, otherwise just set the specified value\n\t\t\t\tif (!hooks || !(\"set\" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {\n\n\t\t\t\t\tstyle[name] = value;\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\t// If a hook was provided get the non-computed value from there\n\t\t\t\tif (hooks && \"get\" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {\n\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\n\t\t\t\t// Otherwise just get the value from the style object\n\t\t\t\treturn style[name];\n\t\t\t}\n\t\t},\n\n\t\tcss: function css(elem, name, extra, styles) {\n\t\t\tvar val,\n\t\t\t    num,\n\t\t\t    hooks,\n\t\t\t    origName = jQuery.camelCase(name);\n\n\t\t\t// Make sure that we're working with the right name\n\t\t\tname = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(origName) || origName);\n\n\t\t\t// Try prefixed name followed by the unprefixed name\n\t\t\thooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];\n\n\t\t\t// If a hook was provided get the computed value from there\n\t\t\tif (hooks && \"get\" in hooks) {\n\t\t\t\tval = hooks.get(elem, true, extra);\n\t\t\t}\n\n\t\t\t// Otherwise, if a way to get the computed value exists, use that\n\t\t\tif (val === undefined) {\n\t\t\t\tval = curCSS(elem, name, styles);\n\t\t\t}\n\n\t\t\t// Convert \"normal\" to computed value\n\t\t\tif (val === \"normal\" && name in cssNormalTransform) {\n\t\t\t\tval = cssNormalTransform[name];\n\t\t\t}\n\n\t\t\t// Make numeric if forced or a qualifier was provided and val looks numeric\n\t\t\tif (extra === \"\" || extra) {\n\t\t\t\tnum = parseFloat(val);\n\t\t\t\treturn extra === true || isFinite(num) ? num || 0 : val;\n\t\t\t}\n\t\t\treturn val;\n\t\t}\n\t});\n\n\tjQuery.each([\"height\", \"width\"], function (i, name) {\n\t\tjQuery.cssHooks[name] = {\n\t\t\tget: function get(elem, computed, extra) {\n\t\t\t\tif (computed) {\n\n\t\t\t\t\t// Certain elements can have dimension info if we invisibly show them\n\t\t\t\t\t// but it must have a current display style that would benefit\n\t\t\t\t\treturn rdisplayswap.test(jQuery.css(elem, \"display\")) && (\n\n\t\t\t\t\t// Support: Safari 8+\n\t\t\t\t\t// Table columns in Safari have non-zero offsetWidth & zero\n\t\t\t\t\t// getBoundingClientRect().width unless display is changed.\n\t\t\t\t\t// Support: IE <=11 only\n\t\t\t\t\t// Running getBoundingClientRect on a disconnected node\n\t\t\t\t\t// in IE throws an error.\n\t\t\t\t\t!elem.getClientRects().length || !elem.getBoundingClientRect().width) ? swap(elem, cssShow, function () {\n\t\t\t\t\t\treturn getWidthOrHeight(elem, name, extra);\n\t\t\t\t\t}) : getWidthOrHeight(elem, name, extra);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tset: function set(elem, value, extra) {\n\t\t\t\tvar matches,\n\t\t\t\t    styles = extra && getStyles(elem),\n\t\t\t\t    subtract = extra && augmentWidthOrHeight(elem, name, extra, jQuery.css(elem, \"boxSizing\", false, styles) === \"border-box\", styles);\n\n\t\t\t\t// Convert to pixels if value adjustment is needed\n\t\t\t\tif (subtract && (matches = rcssNum.exec(value)) && (matches[3] || \"px\") !== \"px\") {\n\n\t\t\t\t\telem.style[name] = value;\n\t\t\t\t\tvalue = jQuery.css(elem, name);\n\t\t\t\t}\n\n\t\t\t\treturn setPositiveNumber(elem, value, subtract);\n\t\t\t}\n\t\t};\n\t});\n\n\tjQuery.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft, function (elem, computed) {\n\t\tif (computed) {\n\t\t\treturn (parseFloat(curCSS(elem, \"marginLeft\")) || elem.getBoundingClientRect().left - swap(elem, { marginLeft: 0 }, function () {\n\t\t\t\treturn elem.getBoundingClientRect().left;\n\t\t\t})) + \"px\";\n\t\t}\n\t});\n\n\t// These hooks are used by animate to expand properties\n\tjQuery.each({\n\t\tmargin: \"\",\n\t\tpadding: \"\",\n\t\tborder: \"Width\"\n\t}, function (prefix, suffix) {\n\t\tjQuery.cssHooks[prefix + suffix] = {\n\t\t\texpand: function expand(value) {\n\t\t\t\tvar i = 0,\n\t\t\t\t    expanded = {},\n\n\n\t\t\t\t// Assumes a single number if not a string\n\t\t\t\tparts = typeof value === \"string\" ? value.split(\" \") : [value];\n\n\t\t\t\tfor (; i < 4; i++) {\n\t\t\t\t\texpanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];\n\t\t\t\t}\n\n\t\t\t\treturn expanded;\n\t\t\t}\n\t\t};\n\n\t\tif (!rmargin.test(prefix)) {\n\t\t\tjQuery.cssHooks[prefix + suffix].set = setPositiveNumber;\n\t\t}\n\t});\n\n\tjQuery.fn.extend({\n\t\tcss: function css(name, value) {\n\t\t\treturn access(this, function (elem, name, value) {\n\t\t\t\tvar styles,\n\t\t\t\t    len,\n\t\t\t\t    map = {},\n\t\t\t\t    i = 0;\n\n\t\t\t\tif (jQuery.isArray(name)) {\n\t\t\t\t\tstyles = getStyles(elem);\n\t\t\t\t\tlen = name.length;\n\n\t\t\t\t\tfor (; i < len; i++) {\n\t\t\t\t\t\tmap[name[i]] = jQuery.css(elem, name[i], false, styles);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn map;\n\t\t\t\t}\n\n\t\t\t\treturn value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);\n\t\t\t}, name, value, arguments.length > 1);\n\t\t}\n\t});\n\n\tfunction Tween(elem, options, prop, end, easing) {\n\t\treturn new Tween.prototype.init(elem, options, prop, end, easing);\n\t}\n\tjQuery.Tween = Tween;\n\n\tTween.prototype = {\n\t\tconstructor: Tween,\n\t\tinit: function init(elem, options, prop, end, easing, unit) {\n\t\t\tthis.elem = elem;\n\t\t\tthis.prop = prop;\n\t\t\tthis.easing = easing || jQuery.easing._default;\n\t\t\tthis.options = options;\n\t\t\tthis.start = this.now = this.cur();\n\t\t\tthis.end = end;\n\t\t\tthis.unit = unit || (jQuery.cssNumber[prop] ? \"\" : \"px\");\n\t\t},\n\t\tcur: function cur() {\n\t\t\tvar hooks = Tween.propHooks[this.prop];\n\n\t\t\treturn hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);\n\t\t},\n\t\trun: function run(percent) {\n\t\t\tvar eased,\n\t\t\t    hooks = Tween.propHooks[this.prop];\n\n\t\t\tif (this.options.duration) {\n\t\t\t\tthis.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);\n\t\t\t} else {\n\t\t\t\tthis.pos = eased = percent;\n\t\t\t}\n\t\t\tthis.now = (this.end - this.start) * eased + this.start;\n\n\t\t\tif (this.options.step) {\n\t\t\t\tthis.options.step.call(this.elem, this.now, this);\n\t\t\t}\n\n\t\t\tif (hooks && hooks.set) {\n\t\t\t\thooks.set(this);\n\t\t\t} else {\n\t\t\t\tTween.propHooks._default.set(this);\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t};\n\n\tTween.prototype.init.prototype = Tween.prototype;\n\n\tTween.propHooks = {\n\t\t_default: {\n\t\t\tget: function get(tween) {\n\t\t\t\tvar result;\n\n\t\t\t\t// Use a property on the element directly when it is not a DOM element,\n\t\t\t\t// or when there is no matching style property that exists.\n\t\t\t\tif (tween.elem.nodeType !== 1 || tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {\n\t\t\t\t\treturn tween.elem[tween.prop];\n\t\t\t\t}\n\n\t\t\t\t// Passing an empty string as a 3rd parameter to .css will automatically\n\t\t\t\t// attempt a parseFloat and fallback to a string if the parse fails.\n\t\t\t\t// Simple values such as \"10px\" are parsed to Float;\n\t\t\t\t// complex values such as \"rotate(1rad)\" are returned as-is.\n\t\t\t\tresult = jQuery.css(tween.elem, tween.prop, \"\");\n\n\t\t\t\t// Empty strings, null, undefined and \"auto\" are converted to 0.\n\t\t\t\treturn !result || result === \"auto\" ? 0 : result;\n\t\t\t},\n\t\t\tset: function set(tween) {\n\n\t\t\t\t// Use step hook for back compat.\n\t\t\t\t// Use cssHook if its there.\n\t\t\t\t// Use .style if available and use plain properties where available.\n\t\t\t\tif (jQuery.fx.step[tween.prop]) {\n\t\t\t\t\tjQuery.fx.step[tween.prop](tween);\n\t\t\t\t} else if (tween.elem.nodeType === 1 && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {\n\t\t\t\t\tjQuery.style(tween.elem, tween.prop, tween.now + tween.unit);\n\t\t\t\t} else {\n\t\t\t\t\ttween.elem[tween.prop] = tween.now;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\t// Support: IE <=9 only\n\t// Panic based approach to setting things on disconnected nodes\n\tTween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\n\t\tset: function set(tween) {\n\t\t\tif (tween.elem.nodeType && tween.elem.parentNode) {\n\t\t\t\ttween.elem[tween.prop] = tween.now;\n\t\t\t}\n\t\t}\n\t};\n\n\tjQuery.easing = {\n\t\tlinear: function linear(p) {\n\t\t\treturn p;\n\t\t},\n\t\tswing: function swing(p) {\n\t\t\treturn 0.5 - Math.cos(p * Math.PI) / 2;\n\t\t},\n\t\t_default: \"swing\"\n\t};\n\n\tjQuery.fx = Tween.prototype.init;\n\n\t// Back compat <1.8 extension point\n\tjQuery.fx.step = {};\n\n\tvar fxNow,\n\t    timerId,\n\t    rfxtypes = /^(?:toggle|show|hide)$/,\n\t    rrun = /queueHooks$/;\n\n\tfunction raf() {\n\t\tif (timerId) {\n\t\t\twindow.requestAnimationFrame(raf);\n\t\t\tjQuery.fx.tick();\n\t\t}\n\t}\n\n\t// Animations created synchronously will run synchronously\n\tfunction createFxNow() {\n\t\twindow.setTimeout(function () {\n\t\t\tfxNow = undefined;\n\t\t});\n\t\treturn fxNow = jQuery.now();\n\t}\n\n\t// Generate parameters to create a standard animation\n\tfunction genFx(type, includeWidth) {\n\t\tvar which,\n\t\t    i = 0,\n\t\t    attrs = { height: type };\n\n\t\t// If we include width, step value is 1 to do all cssExpand values,\n\t\t// otherwise step value is 2 to skip over Left and Right\n\t\tincludeWidth = includeWidth ? 1 : 0;\n\t\tfor (; i < 4; i += 2 - includeWidth) {\n\t\t\twhich = cssExpand[i];\n\t\t\tattrs[\"margin\" + which] = attrs[\"padding\" + which] = type;\n\t\t}\n\n\t\tif (includeWidth) {\n\t\t\tattrs.opacity = attrs.width = type;\n\t\t}\n\n\t\treturn attrs;\n\t}\n\n\tfunction createTween(value, prop, animation) {\n\t\tvar tween,\n\t\t    collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners[\"*\"]),\n\t\t    index = 0,\n\t\t    length = collection.length;\n\t\tfor (; index < length; index++) {\n\t\t\tif (tween = collection[index].call(animation, prop, value)) {\n\n\t\t\t\t// We're done with this property\n\t\t\t\treturn tween;\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction defaultPrefilter(elem, props, opts) {\n\t\tvar prop,\n\t\t    value,\n\t\t    toggle,\n\t\t    hooks,\n\t\t    oldfire,\n\t\t    propTween,\n\t\t    restoreDisplay,\n\t\t    display,\n\t\t    isBox = \"width\" in props || \"height\" in props,\n\t\t    anim = this,\n\t\t    orig = {},\n\t\t    style = elem.style,\n\t\t    hidden = elem.nodeType && isHiddenWithinTree(elem),\n\t\t    dataShow = dataPriv.get(elem, \"fxshow\");\n\n\t\t// Queue-skipping animations hijack the fx hooks\n\t\tif (!opts.queue) {\n\t\t\thooks = jQuery._queueHooks(elem, \"fx\");\n\t\t\tif (hooks.unqueued == null) {\n\t\t\t\thooks.unqueued = 0;\n\t\t\t\toldfire = hooks.empty.fire;\n\t\t\t\thooks.empty.fire = function () {\n\t\t\t\t\tif (!hooks.unqueued) {\n\t\t\t\t\t\toldfire();\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t\thooks.unqueued++;\n\n\t\t\tanim.always(function () {\n\n\t\t\t\t// Ensure the complete handler is called before this completes\n\t\t\t\tanim.always(function () {\n\t\t\t\t\thooks.unqueued--;\n\t\t\t\t\tif (!jQuery.queue(elem, \"fx\").length) {\n\t\t\t\t\t\thooks.empty.fire();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\t// Detect show/hide animations\n\t\tfor (prop in props) {\n\t\t\tvalue = props[prop];\n\t\t\tif (rfxtypes.test(value)) {\n\t\t\t\tdelete props[prop];\n\t\t\t\ttoggle = toggle || value === \"toggle\";\n\t\t\t\tif (value === (hidden ? \"hide\" : \"show\")) {\n\n\t\t\t\t\t// Pretend to be hidden if this is a \"show\" and\n\t\t\t\t\t// there is still data from a stopped show/hide\n\t\t\t\t\tif (value === \"show\" && dataShow && dataShow[prop] !== undefined) {\n\t\t\t\t\t\thidden = true;\n\n\t\t\t\t\t\t// Ignore all other no-op show/hide data\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\torig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);\n\t\t\t}\n\t\t}\n\n\t\t// Bail out if this is a no-op like .hide().hide()\n\t\tpropTween = !jQuery.isEmptyObject(props);\n\t\tif (!propTween && jQuery.isEmptyObject(orig)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Restrict \"overflow\" and \"display\" styles during box animations\n\t\tif (isBox && elem.nodeType === 1) {\n\n\t\t\t// Support: IE <=9 - 11, Edge 12 - 13\n\t\t\t// Record all 3 overflow attributes because IE does not infer the shorthand\n\t\t\t// from identically-valued overflowX and overflowY\n\t\t\topts.overflow = [style.overflow, style.overflowX, style.overflowY];\n\n\t\t\t// Identify a display type, preferring old show/hide data over the CSS cascade\n\t\t\trestoreDisplay = dataShow && dataShow.display;\n\t\t\tif (restoreDisplay == null) {\n\t\t\t\trestoreDisplay = dataPriv.get(elem, \"display\");\n\t\t\t}\n\t\t\tdisplay = jQuery.css(elem, \"display\");\n\t\t\tif (display === \"none\") {\n\t\t\t\tif (restoreDisplay) {\n\t\t\t\t\tdisplay = restoreDisplay;\n\t\t\t\t} else {\n\n\t\t\t\t\t// Get nonempty value(s) by temporarily forcing visibility\n\t\t\t\t\tshowHide([elem], true);\n\t\t\t\t\trestoreDisplay = elem.style.display || restoreDisplay;\n\t\t\t\t\tdisplay = jQuery.css(elem, \"display\");\n\t\t\t\t\tshowHide([elem]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Animate inline elements as inline-block\n\t\t\tif (display === \"inline\" || display === \"inline-block\" && restoreDisplay != null) {\n\t\t\t\tif (jQuery.css(elem, \"float\") === \"none\") {\n\n\t\t\t\t\t// Restore the original display value at the end of pure show/hide animations\n\t\t\t\t\tif (!propTween) {\n\t\t\t\t\t\tanim.done(function () {\n\t\t\t\t\t\t\tstyle.display = restoreDisplay;\n\t\t\t\t\t\t});\n\t\t\t\t\t\tif (restoreDisplay == null) {\n\t\t\t\t\t\t\tdisplay = style.display;\n\t\t\t\t\t\t\trestoreDisplay = display === \"none\" ? \"\" : display;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tstyle.display = \"inline-block\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (opts.overflow) {\n\t\t\tstyle.overflow = \"hidden\";\n\t\t\tanim.always(function () {\n\t\t\t\tstyle.overflow = opts.overflow[0];\n\t\t\t\tstyle.overflowX = opts.overflow[1];\n\t\t\t\tstyle.overflowY = opts.overflow[2];\n\t\t\t});\n\t\t}\n\n\t\t// Implement show/hide animations\n\t\tpropTween = false;\n\t\tfor (prop in orig) {\n\n\t\t\t// General show/hide setup for this element animation\n\t\t\tif (!propTween) {\n\t\t\t\tif (dataShow) {\n\t\t\t\t\tif (\"hidden\" in dataShow) {\n\t\t\t\t\t\thidden = dataShow.hidden;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tdataShow = dataPriv.access(elem, \"fxshow\", { display: restoreDisplay });\n\t\t\t\t}\n\n\t\t\t\t// Store hidden/visible for toggle so `.stop().toggle()` \"reverses\"\n\t\t\t\tif (toggle) {\n\t\t\t\t\tdataShow.hidden = !hidden;\n\t\t\t\t}\n\n\t\t\t\t// Show elements before animating them\n\t\t\t\tif (hidden) {\n\t\t\t\t\tshowHide([elem], true);\n\t\t\t\t}\n\n\t\t\t\t/* eslint-disable no-loop-func */\n\n\t\t\t\tanim.done(function () {\n\n\t\t\t\t\t/* eslint-enable no-loop-func */\n\n\t\t\t\t\t// The final step of a \"hide\" animation is actually hiding the element\n\t\t\t\t\tif (!hidden) {\n\t\t\t\t\t\tshowHide([elem]);\n\t\t\t\t\t}\n\t\t\t\t\tdataPriv.remove(elem, \"fxshow\");\n\t\t\t\t\tfor (prop in orig) {\n\t\t\t\t\t\tjQuery.style(elem, prop, orig[prop]);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Per-property setup\n\t\t\tpropTween = createTween(hidden ? dataShow[prop] : 0, prop, anim);\n\t\t\tif (!(prop in dataShow)) {\n\t\t\t\tdataShow[prop] = propTween.start;\n\t\t\t\tif (hidden) {\n\t\t\t\t\tpropTween.end = propTween.start;\n\t\t\t\t\tpropTween.start = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction propFilter(props, specialEasing) {\n\t\tvar index, name, easing, value, hooks;\n\n\t\t// camelCase, specialEasing and expand cssHook pass\n\t\tfor (index in props) {\n\t\t\tname = jQuery.camelCase(index);\n\t\t\teasing = specialEasing[name];\n\t\t\tvalue = props[index];\n\t\t\tif (jQuery.isArray(value)) {\n\t\t\t\teasing = value[1];\n\t\t\t\tvalue = props[index] = value[0];\n\t\t\t}\n\n\t\t\tif (index !== name) {\n\t\t\t\tprops[name] = value;\n\t\t\t\tdelete props[index];\n\t\t\t}\n\n\t\t\thooks = jQuery.cssHooks[name];\n\t\t\tif (hooks && \"expand\" in hooks) {\n\t\t\t\tvalue = hooks.expand(value);\n\t\t\t\tdelete props[name];\n\n\t\t\t\t// Not quite $.extend, this won't overwrite existing keys.\n\t\t\t\t// Reusing 'index' because we have the correct \"name\"\n\t\t\t\tfor (index in value) {\n\t\t\t\t\tif (!(index in props)) {\n\t\t\t\t\t\tprops[index] = value[index];\n\t\t\t\t\t\tspecialEasing[index] = easing;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tspecialEasing[name] = easing;\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction Animation(elem, properties, options) {\n\t\tvar result,\n\t\t    stopped,\n\t\t    index = 0,\n\t\t    length = Animation.prefilters.length,\n\t\t    deferred = jQuery.Deferred().always(function () {\n\n\t\t\t// Don't match elem in the :animated selector\n\t\t\tdelete tick.elem;\n\t\t}),\n\t\t    tick = function tick() {\n\t\t\tif (stopped) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tvar currentTime = fxNow || createFxNow(),\n\t\t\t    remaining = Math.max(0, animation.startTime + animation.duration - currentTime),\n\n\n\t\t\t// Support: Android 2.3 only\n\t\t\t// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)\n\t\t\ttemp = remaining / animation.duration || 0,\n\t\t\t    percent = 1 - temp,\n\t\t\t    index = 0,\n\t\t\t    length = animation.tweens.length;\n\n\t\t\tfor (; index < length; index++) {\n\t\t\t\tanimation.tweens[index].run(percent);\n\t\t\t}\n\n\t\t\tdeferred.notifyWith(elem, [animation, percent, remaining]);\n\n\t\t\tif (percent < 1 && length) {\n\t\t\t\treturn remaining;\n\t\t\t} else {\n\t\t\t\tdeferred.resolveWith(elem, [animation]);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t},\n\t\t    animation = deferred.promise({\n\t\t\telem: elem,\n\t\t\tprops: jQuery.extend({}, properties),\n\t\t\topts: jQuery.extend(true, {\n\t\t\t\tspecialEasing: {},\n\t\t\t\teasing: jQuery.easing._default\n\t\t\t}, options),\n\t\t\toriginalProperties: properties,\n\t\t\toriginalOptions: options,\n\t\t\tstartTime: fxNow || createFxNow(),\n\t\t\tduration: options.duration,\n\t\t\ttweens: [],\n\t\t\tcreateTween: function createTween(prop, end) {\n\t\t\t\tvar tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);\n\t\t\t\tanimation.tweens.push(tween);\n\t\t\t\treturn tween;\n\t\t\t},\n\t\t\tstop: function stop(gotoEnd) {\n\t\t\t\tvar index = 0,\n\n\n\t\t\t\t// If we are going to the end, we want to run all the tweens\n\t\t\t\t// otherwise we skip this part\n\t\t\t\tlength = gotoEnd ? animation.tweens.length : 0;\n\t\t\t\tif (stopped) {\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t\tstopped = true;\n\t\t\t\tfor (; index < length; index++) {\n\t\t\t\t\tanimation.tweens[index].run(1);\n\t\t\t\t}\n\n\t\t\t\t// Resolve when we played the last frame; otherwise, reject\n\t\t\t\tif (gotoEnd) {\n\t\t\t\t\tdeferred.notifyWith(elem, [animation, 1, 0]);\n\t\t\t\t\tdeferred.resolveWith(elem, [animation, gotoEnd]);\n\t\t\t\t} else {\n\t\t\t\t\tdeferred.rejectWith(elem, [animation, gotoEnd]);\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}),\n\t\t    props = animation.props;\n\n\t\tpropFilter(props, animation.opts.specialEasing);\n\n\t\tfor (; index < length; index++) {\n\t\t\tresult = Animation.prefilters[index].call(animation, elem, props, animation.opts);\n\t\t\tif (result) {\n\t\t\t\tif (jQuery.isFunction(result.stop)) {\n\t\t\t\t\tjQuery._queueHooks(animation.elem, animation.opts.queue).stop = jQuery.proxy(result.stop, result);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\n\t\tjQuery.map(props, createTween, animation);\n\n\t\tif (jQuery.isFunction(animation.opts.start)) {\n\t\t\tanimation.opts.start.call(elem, animation);\n\t\t}\n\n\t\tjQuery.fx.timer(jQuery.extend(tick, {\n\t\t\telem: elem,\n\t\t\tanim: animation,\n\t\t\tqueue: animation.opts.queue\n\t\t}));\n\n\t\t// attach callbacks from options\n\t\treturn animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);\n\t}\n\n\tjQuery.Animation = jQuery.extend(Animation, {\n\n\t\ttweeners: {\n\t\t\t\"*\": [function (prop, value) {\n\t\t\t\tvar tween = this.createTween(prop, value);\n\t\t\t\tadjustCSS(tween.elem, prop, rcssNum.exec(value), tween);\n\t\t\t\treturn tween;\n\t\t\t}]\n\t\t},\n\n\t\ttweener: function tweener(props, callback) {\n\t\t\tif (jQuery.isFunction(props)) {\n\t\t\t\tcallback = props;\n\t\t\t\tprops = [\"*\"];\n\t\t\t} else {\n\t\t\t\tprops = props.match(rnotwhite);\n\t\t\t}\n\n\t\t\tvar prop,\n\t\t\t    index = 0,\n\t\t\t    length = props.length;\n\n\t\t\tfor (; index < length; index++) {\n\t\t\t\tprop = props[index];\n\t\t\t\tAnimation.tweeners[prop] = Animation.tweeners[prop] || [];\n\t\t\t\tAnimation.tweeners[prop].unshift(callback);\n\t\t\t}\n\t\t},\n\n\t\tprefilters: [defaultPrefilter],\n\n\t\tprefilter: function prefilter(callback, prepend) {\n\t\t\tif (prepend) {\n\t\t\t\tAnimation.prefilters.unshift(callback);\n\t\t\t} else {\n\t\t\t\tAnimation.prefilters.push(callback);\n\t\t\t}\n\t\t}\n\t});\n\n\tjQuery.speed = function (speed, easing, fn) {\n\t\tvar opt = speed && (typeof speed === \"undefined\" ? \"undefined\" : _typeof(speed)) === \"object\" ? jQuery.extend({}, speed) : {\n\t\t\tcomplete: fn || !fn && easing || jQuery.isFunction(speed) && speed,\n\t\t\tduration: speed,\n\t\t\teasing: fn && easing || easing && !jQuery.isFunction(easing) && easing\n\t\t};\n\n\t\t// Go to the end state if fx are off or if document is hidden\n\t\tif (jQuery.fx.off || document.hidden) {\n\t\t\topt.duration = 0;\n\t\t} else {\n\t\t\topt.duration = typeof opt.duration === \"number\" ? opt.duration : opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default;\n\t\t}\n\n\t\t// Normalize opt.queue - true/undefined/null -> \"fx\"\n\t\tif (opt.queue == null || opt.queue === true) {\n\t\t\topt.queue = \"fx\";\n\t\t}\n\n\t\t// Queueing\n\t\topt.old = opt.complete;\n\n\t\topt.complete = function () {\n\t\t\tif (jQuery.isFunction(opt.old)) {\n\t\t\t\topt.old.call(this);\n\t\t\t}\n\n\t\t\tif (opt.queue) {\n\t\t\t\tjQuery.dequeue(this, opt.queue);\n\t\t\t}\n\t\t};\n\n\t\treturn opt;\n\t};\n\n\tjQuery.fn.extend({\n\t\tfadeTo: function fadeTo(speed, to, easing, callback) {\n\n\t\t\t// Show any hidden elements after setting opacity to 0\n\t\t\treturn this.filter(isHiddenWithinTree).css(\"opacity\", 0).show()\n\n\t\t\t// Animate to the value specified\n\t\t\t.end().animate({ opacity: to }, speed, easing, callback);\n\t\t},\n\t\tanimate: function animate(prop, speed, easing, callback) {\n\t\t\tvar empty = jQuery.isEmptyObject(prop),\n\t\t\t    optall = jQuery.speed(speed, easing, callback),\n\t\t\t    doAnimation = function doAnimation() {\n\n\t\t\t\t// Operate on a copy of prop so per-property easing won't be lost\n\t\t\t\tvar anim = Animation(this, jQuery.extend({}, prop), optall);\n\n\t\t\t\t// Empty animations, or finishing resolves immediately\n\t\t\t\tif (empty || dataPriv.get(this, \"finish\")) {\n\t\t\t\t\tanim.stop(true);\n\t\t\t\t}\n\t\t\t};\n\t\t\tdoAnimation.finish = doAnimation;\n\n\t\t\treturn empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);\n\t\t},\n\t\tstop: function stop(type, clearQueue, gotoEnd) {\n\t\t\tvar stopQueue = function stopQueue(hooks) {\n\t\t\t\tvar stop = hooks.stop;\n\t\t\t\tdelete hooks.stop;\n\t\t\t\tstop(gotoEnd);\n\t\t\t};\n\n\t\t\tif (typeof type !== \"string\") {\n\t\t\t\tgotoEnd = clearQueue;\n\t\t\t\tclearQueue = type;\n\t\t\t\ttype = undefined;\n\t\t\t}\n\t\t\tif (clearQueue && type !== false) {\n\t\t\t\tthis.queue(type || \"fx\", []);\n\t\t\t}\n\n\t\t\treturn this.each(function () {\n\t\t\t\tvar dequeue = true,\n\t\t\t\t    index = type != null && type + \"queueHooks\",\n\t\t\t\t    timers = jQuery.timers,\n\t\t\t\t    data = dataPriv.get(this);\n\n\t\t\t\tif (index) {\n\t\t\t\t\tif (data[index] && data[index].stop) {\n\t\t\t\t\t\tstopQueue(data[index]);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (index in data) {\n\t\t\t\t\t\tif (data[index] && data[index].stop && rrun.test(index)) {\n\t\t\t\t\t\t\tstopQueue(data[index]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfor (index = timers.length; index--;) {\n\t\t\t\t\tif (timers[index].elem === this && (type == null || timers[index].queue === type)) {\n\n\t\t\t\t\t\ttimers[index].anim.stop(gotoEnd);\n\t\t\t\t\t\tdequeue = false;\n\t\t\t\t\t\ttimers.splice(index, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Start the next in the queue if the last step wasn't forced.\n\t\t\t\t// Timers currently will call their complete callbacks, which\n\t\t\t\t// will dequeue but only if they were gotoEnd.\n\t\t\t\tif (dequeue || !gotoEnd) {\n\t\t\t\t\tjQuery.dequeue(this, type);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\tfinish: function finish(type) {\n\t\t\tif (type !== false) {\n\t\t\t\ttype = type || \"fx\";\n\t\t\t}\n\t\t\treturn this.each(function () {\n\t\t\t\tvar index,\n\t\t\t\t    data = dataPriv.get(this),\n\t\t\t\t    queue = data[type + \"queue\"],\n\t\t\t\t    hooks = data[type + \"queueHooks\"],\n\t\t\t\t    timers = jQuery.timers,\n\t\t\t\t    length = queue ? queue.length : 0;\n\n\t\t\t\t// Enable finishing flag on private data\n\t\t\t\tdata.finish = true;\n\n\t\t\t\t// Empty the queue first\n\t\t\t\tjQuery.queue(this, type, []);\n\n\t\t\t\tif (hooks && hooks.stop) {\n\t\t\t\t\thooks.stop.call(this, true);\n\t\t\t\t}\n\n\t\t\t\t// Look for any active animations, and finish them\n\t\t\t\tfor (index = timers.length; index--;) {\n\t\t\t\t\tif (timers[index].elem === this && timers[index].queue === type) {\n\t\t\t\t\t\ttimers[index].anim.stop(true);\n\t\t\t\t\t\ttimers.splice(index, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Look for any animations in the old queue and finish them\n\t\t\t\tfor (index = 0; index < length; index++) {\n\t\t\t\t\tif (queue[index] && queue[index].finish) {\n\t\t\t\t\t\tqueue[index].finish.call(this);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Turn off finishing flag\n\t\t\t\tdelete data.finish;\n\t\t\t});\n\t\t}\n\t});\n\n\tjQuery.each([\"toggle\", \"show\", \"hide\"], function (i, name) {\n\t\tvar cssFn = jQuery.fn[name];\n\t\tjQuery.fn[name] = function (speed, easing, callback) {\n\t\t\treturn speed == null || typeof speed === \"boolean\" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);\n\t\t};\n\t});\n\n\t// Generate shortcuts for custom animations\n\tjQuery.each({\n\t\tslideDown: genFx(\"show\"),\n\t\tslideUp: genFx(\"hide\"),\n\t\tslideToggle: genFx(\"toggle\"),\n\t\tfadeIn: { opacity: \"show\" },\n\t\tfadeOut: { opacity: \"hide\" },\n\t\tfadeToggle: { opacity: \"toggle\" }\n\t}, function (name, props) {\n\t\tjQuery.fn[name] = function (speed, easing, callback) {\n\t\t\treturn this.animate(props, speed, easing, callback);\n\t\t};\n\t});\n\n\tjQuery.timers = [];\n\tjQuery.fx.tick = function () {\n\t\tvar timer,\n\t\t    i = 0,\n\t\t    timers = jQuery.timers;\n\n\t\tfxNow = jQuery.now();\n\n\t\tfor (; i < timers.length; i++) {\n\t\t\ttimer = timers[i];\n\n\t\t\t// Checks the timer has not already been removed\n\t\t\tif (!timer() && timers[i] === timer) {\n\t\t\t\ttimers.splice(i--, 1);\n\t\t\t}\n\t\t}\n\n\t\tif (!timers.length) {\n\t\t\tjQuery.fx.stop();\n\t\t}\n\t\tfxNow = undefined;\n\t};\n\n\tjQuery.fx.timer = function (timer) {\n\t\tjQuery.timers.push(timer);\n\t\tif (timer()) {\n\t\t\tjQuery.fx.start();\n\t\t} else {\n\t\t\tjQuery.timers.pop();\n\t\t}\n\t};\n\n\tjQuery.fx.interval = 13;\n\tjQuery.fx.start = function () {\n\t\tif (!timerId) {\n\t\t\ttimerId = window.requestAnimationFrame ? window.requestAnimationFrame(raf) : window.setInterval(jQuery.fx.tick, jQuery.fx.interval);\n\t\t}\n\t};\n\n\tjQuery.fx.stop = function () {\n\t\tif (window.cancelAnimationFrame) {\n\t\t\twindow.cancelAnimationFrame(timerId);\n\t\t} else {\n\t\t\twindow.clearInterval(timerId);\n\t\t}\n\n\t\ttimerId = null;\n\t};\n\n\tjQuery.fx.speeds = {\n\t\tslow: 600,\n\t\tfast: 200,\n\n\t\t// Default speed\n\t\t_default: 400\n\t};\n\n\t// Based off of the plugin by Clint Helfers, with permission.\n\t// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/\n\tjQuery.fn.delay = function (time, type) {\n\t\ttime = jQuery.fx ? jQuery.fx.speeds[time] || time : time;\n\t\ttype = type || \"fx\";\n\n\t\treturn this.queue(type, function (next, hooks) {\n\t\t\tvar timeout = window.setTimeout(next, time);\n\t\t\thooks.stop = function () {\n\t\t\t\twindow.clearTimeout(timeout);\n\t\t\t};\n\t\t});\n\t};\n\n\t(function () {\n\t\tvar input = document.createElement(\"input\"),\n\t\t    select = document.createElement(\"select\"),\n\t\t    opt = select.appendChild(document.createElement(\"option\"));\n\n\t\tinput.type = \"checkbox\";\n\n\t\t// Support: Android <=4.3 only\n\t\t// Default value for a checkbox should be \"on\"\n\t\tsupport.checkOn = input.value !== \"\";\n\n\t\t// Support: IE <=11 only\n\t\t// Must access selectedIndex to make default options select\n\t\tsupport.optSelected = opt.selected;\n\n\t\t// Support: IE <=11 only\n\t\t// An input loses its value after becoming a radio\n\t\tinput = document.createElement(\"input\");\n\t\tinput.value = \"t\";\n\t\tinput.type = \"radio\";\n\t\tsupport.radioValue = input.value === \"t\";\n\t})();\n\n\tvar boolHook,\n\t    attrHandle = jQuery.expr.attrHandle;\n\n\tjQuery.fn.extend({\n\t\tattr: function attr(name, value) {\n\t\t\treturn access(this, jQuery.attr, name, value, arguments.length > 1);\n\t\t},\n\n\t\tremoveAttr: function removeAttr(name) {\n\t\t\treturn this.each(function () {\n\t\t\t\tjQuery.removeAttr(this, name);\n\t\t\t});\n\t\t}\n\t});\n\n\tjQuery.extend({\n\t\tattr: function attr(elem, name, value) {\n\t\t\tvar ret,\n\t\t\t    hooks,\n\t\t\t    nType = elem.nodeType;\n\n\t\t\t// Don't get/set attributes on text, comment and attribute nodes\n\t\t\tif (nType === 3 || nType === 8 || nType === 2) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Fallback to prop when attributes are not supported\n\t\t\tif (typeof elem.getAttribute === \"undefined\") {\n\t\t\t\treturn jQuery.prop(elem, name, value);\n\t\t\t}\n\n\t\t\t// Attribute hooks are determined by the lowercase version\n\t\t\t// Grab necessary hook if one is defined\n\t\t\tif (nType !== 1 || !jQuery.isXMLDoc(elem)) {\n\t\t\t\thooks = jQuery.attrHooks[name.toLowerCase()] || (jQuery.expr.match.bool.test(name) ? boolHook : undefined);\n\t\t\t}\n\n\t\t\tif (value !== undefined) {\n\t\t\t\tif (value === null) {\n\t\t\t\t\tjQuery.removeAttr(elem, name);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (hooks && \"set\" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\n\t\t\t\telem.setAttribute(name, value + \"\");\n\t\t\t\treturn value;\n\t\t\t}\n\n\t\t\tif (hooks && \"get\" in hooks && (ret = hooks.get(elem, name)) !== null) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\tret = jQuery.find.attr(elem, name);\n\n\t\t\t// Non-existent attributes return null, we normalize to undefined\n\t\t\treturn ret == null ? undefined : ret;\n\t\t},\n\n\t\tattrHooks: {\n\t\t\ttype: {\n\t\t\t\tset: function set(elem, value) {\n\t\t\t\t\tif (!support.radioValue && value === \"radio\" && jQuery.nodeName(elem, \"input\")) {\n\t\t\t\t\t\tvar val = elem.value;\n\t\t\t\t\t\telem.setAttribute(\"type\", value);\n\t\t\t\t\t\tif (val) {\n\t\t\t\t\t\t\telem.value = val;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tremoveAttr: function removeAttr(elem, value) {\n\t\t\tvar name,\n\t\t\t    i = 0,\n\t\t\t    attrNames = value && value.match(rnotwhite);\n\n\t\t\tif (attrNames && elem.nodeType === 1) {\n\t\t\t\twhile (name = attrNames[i++]) {\n\t\t\t\t\telem.removeAttribute(name);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\t// Hooks for boolean attributes\n\tboolHook = {\n\t\tset: function set(elem, value, name) {\n\t\t\tif (value === false) {\n\n\t\t\t\t// Remove boolean attributes when set to false\n\t\t\t\tjQuery.removeAttr(elem, name);\n\t\t\t} else {\n\t\t\t\telem.setAttribute(name, name);\n\t\t\t}\n\t\t\treturn name;\n\t\t}\n\t};\n\n\tjQuery.each(jQuery.expr.match.bool.source.match(/\\w+/g), function (i, name) {\n\t\tvar getter = attrHandle[name] || jQuery.find.attr;\n\n\t\tattrHandle[name] = function (elem, name, isXML) {\n\t\t\tvar ret,\n\t\t\t    handle,\n\t\t\t    lowercaseName = name.toLowerCase();\n\n\t\t\tif (!isXML) {\n\n\t\t\t\t// Avoid an infinite loop by temporarily removing this function from the getter\n\t\t\t\thandle = attrHandle[lowercaseName];\n\t\t\t\tattrHandle[lowercaseName] = ret;\n\t\t\t\tret = getter(elem, name, isXML) != null ? lowercaseName : null;\n\t\t\t\tattrHandle[lowercaseName] = handle;\n\t\t\t}\n\t\t\treturn ret;\n\t\t};\n\t});\n\n\tvar rfocusable = /^(?:input|select|textarea|button)$/i,\n\t    rclickable = /^(?:a|area)$/i;\n\n\tjQuery.fn.extend({\n\t\tprop: function prop(name, value) {\n\t\t\treturn access(this, jQuery.prop, name, value, arguments.length > 1);\n\t\t},\n\n\t\tremoveProp: function removeProp(name) {\n\t\t\treturn this.each(function () {\n\t\t\t\tdelete this[jQuery.propFix[name] || name];\n\t\t\t});\n\t\t}\n\t});\n\n\tjQuery.extend({\n\t\tprop: function prop(elem, name, value) {\n\t\t\tvar ret,\n\t\t\t    hooks,\n\t\t\t    nType = elem.nodeType;\n\n\t\t\t// Don't get/set properties on text, comment and attribute nodes\n\t\t\tif (nType === 3 || nType === 8 || nType === 2) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (nType !== 1 || !jQuery.isXMLDoc(elem)) {\n\n\t\t\t\t// Fix name and attach hooks\n\t\t\t\tname = jQuery.propFix[name] || name;\n\t\t\t\thooks = jQuery.propHooks[name];\n\t\t\t}\n\n\t\t\tif (value !== undefined) {\n\t\t\t\tif (hooks && \"set\" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\n\t\t\t\treturn elem[name] = value;\n\t\t\t}\n\n\t\t\tif (hooks && \"get\" in hooks && (ret = hooks.get(elem, name)) !== null) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\treturn elem[name];\n\t\t},\n\n\t\tpropHooks: {\n\t\t\ttabIndex: {\n\t\t\t\tget: function get(elem) {\n\n\t\t\t\t\t// Support: IE <=9 - 11 only\n\t\t\t\t\t// elem.tabIndex doesn't always return the\n\t\t\t\t\t// correct value when it hasn't been explicitly set\n\t\t\t\t\t// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/\n\t\t\t\t\t// Use proper attribute retrieval(#12072)\n\t\t\t\t\tvar tabindex = jQuery.find.attr(elem, \"tabindex\");\n\n\t\t\t\t\treturn tabindex ? parseInt(tabindex, 10) : rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href ? 0 : -1;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tpropFix: {\n\t\t\t\"for\": \"htmlFor\",\n\t\t\t\"class\": \"className\"\n\t\t}\n\t});\n\n\t// Support: IE <=11 only\n\t// Accessing the selectedIndex property\n\t// forces the browser to respect setting selected\n\t// on the option\n\t// The getter ensures a default option is selected\n\t// when in an optgroup\n\tif (!support.optSelected) {\n\t\tjQuery.propHooks.selected = {\n\t\t\tget: function get(elem) {\n\t\t\t\tvar parent = elem.parentNode;\n\t\t\t\tif (parent && parent.parentNode) {\n\t\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t},\n\t\t\tset: function set(elem) {\n\t\t\t\tvar parent = elem.parentNode;\n\t\t\t\tif (parent) {\n\t\t\t\t\tparent.selectedIndex;\n\n\t\t\t\t\tif (parent.parentNode) {\n\t\t\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\tjQuery.each([\"tabIndex\", \"readOnly\", \"maxLength\", \"cellSpacing\", \"cellPadding\", \"rowSpan\", \"colSpan\", \"useMap\", \"frameBorder\", \"contentEditable\"], function () {\n\t\tjQuery.propFix[this.toLowerCase()] = this;\n\t});\n\n\tvar rclass = /[\\t\\r\\n\\f]/g;\n\n\tfunction getClass(elem) {\n\t\treturn elem.getAttribute && elem.getAttribute(\"class\") || \"\";\n\t}\n\n\tjQuery.fn.extend({\n\t\taddClass: function addClass(value) {\n\t\t\tvar classes,\n\t\t\t    elem,\n\t\t\t    cur,\n\t\t\t    curValue,\n\t\t\t    clazz,\n\t\t\t    j,\n\t\t\t    finalValue,\n\t\t\t    i = 0;\n\n\t\t\tif (jQuery.isFunction(value)) {\n\t\t\t\treturn this.each(function (j) {\n\t\t\t\t\tjQuery(this).addClass(value.call(this, j, getClass(this)));\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (typeof value === \"string\" && value) {\n\t\t\t\tclasses = value.match(rnotwhite) || [];\n\n\t\t\t\twhile (elem = this[i++]) {\n\t\t\t\t\tcurValue = getClass(elem);\n\t\t\t\t\tcur = elem.nodeType === 1 && (\" \" + curValue + \" \").replace(rclass, \" \");\n\n\t\t\t\t\tif (cur) {\n\t\t\t\t\t\tj = 0;\n\t\t\t\t\t\twhile (clazz = classes[j++]) {\n\t\t\t\t\t\t\tif (cur.indexOf(\" \" + clazz + \" \") < 0) {\n\t\t\t\t\t\t\t\tcur += clazz + \" \";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\t\tfinalValue = jQuery.trim(cur);\n\t\t\t\t\t\tif (curValue !== finalValue) {\n\t\t\t\t\t\t\telem.setAttribute(\"class\", finalValue);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\n\t\tremoveClass: function removeClass(value) {\n\t\t\tvar classes,\n\t\t\t    elem,\n\t\t\t    cur,\n\t\t\t    curValue,\n\t\t\t    clazz,\n\t\t\t    j,\n\t\t\t    finalValue,\n\t\t\t    i = 0;\n\n\t\t\tif (jQuery.isFunction(value)) {\n\t\t\t\treturn this.each(function (j) {\n\t\t\t\t\tjQuery(this).removeClass(value.call(this, j, getClass(this)));\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (!arguments.length) {\n\t\t\t\treturn this.attr(\"class\", \"\");\n\t\t\t}\n\n\t\t\tif (typeof value === \"string\" && value) {\n\t\t\t\tclasses = value.match(rnotwhite) || [];\n\n\t\t\t\twhile (elem = this[i++]) {\n\t\t\t\t\tcurValue = getClass(elem);\n\n\t\t\t\t\t// This expression is here for better compressibility (see addClass)\n\t\t\t\t\tcur = elem.nodeType === 1 && (\" \" + curValue + \" \").replace(rclass, \" \");\n\n\t\t\t\t\tif (cur) {\n\t\t\t\t\t\tj = 0;\n\t\t\t\t\t\twhile (clazz = classes[j++]) {\n\n\t\t\t\t\t\t\t// Remove *all* instances\n\t\t\t\t\t\t\twhile (cur.indexOf(\" \" + clazz + \" \") > -1) {\n\t\t\t\t\t\t\t\tcur = cur.replace(\" \" + clazz + \" \", \" \");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\t\tfinalValue = jQuery.trim(cur);\n\t\t\t\t\t\tif (curValue !== finalValue) {\n\t\t\t\t\t\t\telem.setAttribute(\"class\", finalValue);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\n\t\ttoggleClass: function toggleClass(value, stateVal) {\n\t\t\tvar type = typeof value === \"undefined\" ? \"undefined\" : _typeof(value);\n\n\t\t\tif (typeof stateVal === \"boolean\" && type === \"string\") {\n\t\t\t\treturn stateVal ? this.addClass(value) : this.removeClass(value);\n\t\t\t}\n\n\t\t\tif (jQuery.isFunction(value)) {\n\t\t\t\treturn this.each(function (i) {\n\t\t\t\t\tjQuery(this).toggleClass(value.call(this, i, getClass(this), stateVal), stateVal);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn this.each(function () {\n\t\t\t\tvar className, i, self, classNames;\n\n\t\t\t\tif (type === \"string\") {\n\n\t\t\t\t\t// Toggle individual class names\n\t\t\t\t\ti = 0;\n\t\t\t\t\tself = jQuery(this);\n\t\t\t\t\tclassNames = value.match(rnotwhite) || [];\n\n\t\t\t\t\twhile (className = classNames[i++]) {\n\n\t\t\t\t\t\t// Check each className given, space separated list\n\t\t\t\t\t\tif (self.hasClass(className)) {\n\t\t\t\t\t\t\tself.removeClass(className);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tself.addClass(className);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Toggle whole class name\n\t\t\t\t} else if (value === undefined || type === \"boolean\") {\n\t\t\t\t\tclassName = getClass(this);\n\t\t\t\t\tif (className) {\n\n\t\t\t\t\t\t// Store className if set\n\t\t\t\t\t\tdataPriv.set(this, \"__className__\", className);\n\t\t\t\t\t}\n\n\t\t\t\t\t// If the element has a class name or if we're passed `false`,\n\t\t\t\t\t// then remove the whole classname (if there was one, the above saved it).\n\t\t\t\t\t// Otherwise bring back whatever was previously saved (if anything),\n\t\t\t\t\t// falling back to the empty string if nothing was stored.\n\t\t\t\t\tif (this.setAttribute) {\n\t\t\t\t\t\tthis.setAttribute(\"class\", className || value === false ? \"\" : dataPriv.get(this, \"__className__\") || \"\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\thasClass: function hasClass(selector) {\n\t\t\tvar className,\n\t\t\t    elem,\n\t\t\t    i = 0;\n\n\t\t\tclassName = \" \" + selector + \" \";\n\t\t\twhile (elem = this[i++]) {\n\t\t\t\tif (elem.nodeType === 1 && (\" \" + getClass(elem) + \" \").replace(rclass, \" \").indexOf(className) > -1) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\t});\n\n\tvar rreturn = /\\r/g,\n\t    rspaces = /[\\x20\\t\\r\\n\\f]+/g;\n\n\tjQuery.fn.extend({\n\t\tval: function val(value) {\n\t\t\tvar hooks,\n\t\t\t    ret,\n\t\t\t    isFunction,\n\t\t\t    elem = this[0];\n\n\t\t\tif (!arguments.length) {\n\t\t\t\tif (elem) {\n\t\t\t\t\thooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];\n\n\t\t\t\t\tif (hooks && \"get\" in hooks && (ret = hooks.get(elem, \"value\")) !== undefined) {\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t}\n\n\t\t\t\t\tret = elem.value;\n\n\t\t\t\t\treturn typeof ret === \"string\" ?\n\n\t\t\t\t\t// Handle most common string cases\n\t\t\t\t\tret.replace(rreturn, \"\") :\n\n\t\t\t\t\t// Handle cases where value is null/undef or number\n\t\t\t\t\tret == null ? \"\" : ret;\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tisFunction = jQuery.isFunction(value);\n\n\t\t\treturn this.each(function (i) {\n\t\t\t\tvar val;\n\n\t\t\t\tif (this.nodeType !== 1) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (isFunction) {\n\t\t\t\t\tval = value.call(this, i, jQuery(this).val());\n\t\t\t\t} else {\n\t\t\t\t\tval = value;\n\t\t\t\t}\n\n\t\t\t\t// Treat null/undefined as \"\"; convert numbers to string\n\t\t\t\tif (val == null) {\n\t\t\t\t\tval = \"\";\n\t\t\t\t} else if (typeof val === \"number\") {\n\t\t\t\t\tval += \"\";\n\t\t\t\t} else if (jQuery.isArray(val)) {\n\t\t\t\t\tval = jQuery.map(val, function (value) {\n\t\t\t\t\t\treturn value == null ? \"\" : value + \"\";\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\thooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];\n\n\t\t\t\t// If set returns undefined, fall back to normal setting\n\t\t\t\tif (!hooks || !(\"set\" in hooks) || hooks.set(this, val, \"value\") === undefined) {\n\t\t\t\t\tthis.value = val;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n\n\tjQuery.extend({\n\t\tvalHooks: {\n\t\t\toption: {\n\t\t\t\tget: function get(elem) {\n\n\t\t\t\t\tvar val = jQuery.find.attr(elem, \"value\");\n\t\t\t\t\treturn val != null ? val :\n\n\t\t\t\t\t// Support: IE <=10 - 11 only\n\t\t\t\t\t// option.text throws exceptions (#14686, #14858)\n\t\t\t\t\t// Strip and collapse whitespace\n\t\t\t\t\t// https://html.spec.whatwg.org/#strip-and-collapse-whitespace\n\t\t\t\t\tjQuery.trim(jQuery.text(elem)).replace(rspaces, \" \");\n\t\t\t\t}\n\t\t\t},\n\t\t\tselect: {\n\t\t\t\tget: function get(elem) {\n\t\t\t\t\tvar value,\n\t\t\t\t\t    option,\n\t\t\t\t\t    options = elem.options,\n\t\t\t\t\t    index = elem.selectedIndex,\n\t\t\t\t\t    one = elem.type === \"select-one\",\n\t\t\t\t\t    values = one ? null : [],\n\t\t\t\t\t    max = one ? index + 1 : options.length,\n\t\t\t\t\t    i = index < 0 ? max : one ? index : 0;\n\n\t\t\t\t\t// Loop through all the selected options\n\t\t\t\t\tfor (; i < max; i++) {\n\t\t\t\t\t\toption = options[i];\n\n\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t// IE8-9 doesn't update selected after form reset (#2551)\n\t\t\t\t\t\tif ((option.selected || i === index) &&\n\n\t\t\t\t\t\t// Don't return options that are disabled or in a disabled optgroup\n\t\t\t\t\t\t!option.disabled && (!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, \"optgroup\"))) {\n\n\t\t\t\t\t\t\t// Get the specific value for the option\n\t\t\t\t\t\t\tvalue = jQuery(option).val();\n\n\t\t\t\t\t\t\t// We don't need an array for one selects\n\t\t\t\t\t\t\tif (one) {\n\t\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Multi-Selects return an array\n\t\t\t\t\t\t\tvalues.push(value);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn values;\n\t\t\t\t},\n\n\t\t\t\tset: function set(elem, value) {\n\t\t\t\t\tvar optionSet,\n\t\t\t\t\t    option,\n\t\t\t\t\t    options = elem.options,\n\t\t\t\t\t    values = jQuery.makeArray(value),\n\t\t\t\t\t    i = options.length;\n\n\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\toption = options[i];\n\n\t\t\t\t\t\t/* eslint-disable no-cond-assign */\n\n\t\t\t\t\t\tif (option.selected = jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1) {\n\t\t\t\t\t\t\toptionSet = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t/* eslint-enable no-cond-assign */\n\t\t\t\t\t}\n\n\t\t\t\t\t// Force browsers to behave consistently when non-matching value is set\n\t\t\t\t\tif (!optionSet) {\n\t\t\t\t\t\telem.selectedIndex = -1;\n\t\t\t\t\t}\n\t\t\t\t\treturn values;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\t// Radios and checkboxes getter/setter\n\tjQuery.each([\"radio\", \"checkbox\"], function () {\n\t\tjQuery.valHooks[this] = {\n\t\t\tset: function set(elem, value) {\n\t\t\t\tif (jQuery.isArray(value)) {\n\t\t\t\t\treturn elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tif (!support.checkOn) {\n\t\t\tjQuery.valHooks[this].get = function (elem) {\n\t\t\t\treturn elem.getAttribute(\"value\") === null ? \"on\" : elem.value;\n\t\t\t};\n\t\t}\n\t});\n\n\t// Return jQuery for attributes-only inclusion\n\n\n\tvar rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;\n\n\tjQuery.extend(jQuery.event, {\n\n\t\ttrigger: function trigger(event, data, elem, onlyHandlers) {\n\n\t\t\tvar i,\n\t\t\t    cur,\n\t\t\t    tmp,\n\t\t\t    bubbleType,\n\t\t\t    ontype,\n\t\t\t    handle,\n\t\t\t    special,\n\t\t\t    eventPath = [elem || document],\n\t\t\t    type = hasOwn.call(event, \"type\") ? event.type : event,\n\t\t\t    namespaces = hasOwn.call(event, \"namespace\") ? event.namespace.split(\".\") : [];\n\n\t\t\tcur = tmp = elem = elem || document;\n\n\t\t\t// Don't do events on text and comment nodes\n\t\t\tif (elem.nodeType === 3 || elem.nodeType === 8) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// focus/blur morphs to focusin/out; ensure we're not firing them right now\n\t\t\tif (rfocusMorph.test(type + jQuery.event.triggered)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (type.indexOf(\".\") > -1) {\n\n\t\t\t\t// Namespaced trigger; create a regexp to match event type in handle()\n\t\t\t\tnamespaces = type.split(\".\");\n\t\t\t\ttype = namespaces.shift();\n\t\t\t\tnamespaces.sort();\n\t\t\t}\n\t\t\tontype = type.indexOf(\":\") < 0 && \"on\" + type;\n\n\t\t\t// Caller can pass in a jQuery.Event object, Object, or just an event type string\n\t\t\tevent = event[jQuery.expando] ? event : new jQuery.Event(type, (typeof event === \"undefined\" ? \"undefined\" : _typeof(event)) === \"object\" && event);\n\n\t\t\t// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)\n\t\t\tevent.isTrigger = onlyHandlers ? 2 : 3;\n\t\t\tevent.namespace = namespaces.join(\".\");\n\t\t\tevent.rnamespace = event.namespace ? new RegExp(\"(^|\\\\.)\" + namespaces.join(\"\\\\.(?:.*\\\\.|)\") + \"(\\\\.|$)\") : null;\n\n\t\t\t// Clean up the event in case it is being reused\n\t\t\tevent.result = undefined;\n\t\t\tif (!event.target) {\n\t\t\t\tevent.target = elem;\n\t\t\t}\n\n\t\t\t// Clone any incoming data and prepend the event, creating the handler arg list\n\t\t\tdata = data == null ? [event] : jQuery.makeArray(data, [event]);\n\n\t\t\t// Allow special events to draw outside the lines\n\t\t\tspecial = jQuery.event.special[type] || {};\n\t\t\tif (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Determine event propagation path in advance, per W3C events spec (#9951)\n\t\t\t// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)\n\t\t\tif (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {\n\n\t\t\t\tbubbleType = special.delegateType || type;\n\t\t\t\tif (!rfocusMorph.test(bubbleType + type)) {\n\t\t\t\t\tcur = cur.parentNode;\n\t\t\t\t}\n\t\t\t\tfor (; cur; cur = cur.parentNode) {\n\t\t\t\t\teventPath.push(cur);\n\t\t\t\t\ttmp = cur;\n\t\t\t\t}\n\n\t\t\t\t// Only add window if we got to document (e.g., not plain obj or detached DOM)\n\t\t\t\tif (tmp === (elem.ownerDocument || document)) {\n\t\t\t\t\teventPath.push(tmp.defaultView || tmp.parentWindow || window);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Fire handlers on the event path\n\t\t\ti = 0;\n\t\t\twhile ((cur = eventPath[i++]) && !event.isPropagationStopped()) {\n\n\t\t\t\tevent.type = i > 1 ? bubbleType : special.bindType || type;\n\n\t\t\t\t// jQuery handler\n\t\t\t\thandle = (dataPriv.get(cur, \"events\") || {})[event.type] && dataPriv.get(cur, \"handle\");\n\t\t\t\tif (handle) {\n\t\t\t\t\thandle.apply(cur, data);\n\t\t\t\t}\n\n\t\t\t\t// Native handler\n\t\t\t\thandle = ontype && cur[ontype];\n\t\t\t\tif (handle && handle.apply && acceptData(cur)) {\n\t\t\t\t\tevent.result = handle.apply(cur, data);\n\t\t\t\t\tif (event.result === false) {\n\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tevent.type = type;\n\n\t\t\t// If nobody prevented the default action, do it now\n\t\t\tif (!onlyHandlers && !event.isDefaultPrevented()) {\n\n\t\t\t\tif ((!special._default || special._default.apply(eventPath.pop(), data) === false) && acceptData(elem)) {\n\n\t\t\t\t\t// Call a native DOM method on the target with the same name as the event.\n\t\t\t\t\t// Don't do default actions on window, that's where global variables be (#6170)\n\t\t\t\t\tif (ontype && jQuery.isFunction(elem[type]) && !jQuery.isWindow(elem)) {\n\n\t\t\t\t\t\t// Don't re-trigger an onFOO event when we call its FOO() method\n\t\t\t\t\t\ttmp = elem[ontype];\n\n\t\t\t\t\t\tif (tmp) {\n\t\t\t\t\t\t\telem[ontype] = null;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Prevent re-triggering of the same event, since we already bubbled it above\n\t\t\t\t\t\tjQuery.event.triggered = type;\n\t\t\t\t\t\telem[type]();\n\t\t\t\t\t\tjQuery.event.triggered = undefined;\n\n\t\t\t\t\t\tif (tmp) {\n\t\t\t\t\t\t\telem[ontype] = tmp;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn event.result;\n\t\t},\n\n\t\t// Piggyback on a donor event to simulate a different one\n\t\t// Used only for `focus(in | out)` events\n\t\tsimulate: function simulate(type, elem, event) {\n\t\t\tvar e = jQuery.extend(new jQuery.Event(), event, {\n\t\t\t\ttype: type,\n\t\t\t\tisSimulated: true\n\t\t\t});\n\n\t\t\tjQuery.event.trigger(e, null, elem);\n\t\t}\n\n\t});\n\n\tjQuery.fn.extend({\n\n\t\ttrigger: function trigger(type, data) {\n\t\t\treturn this.each(function () {\n\t\t\t\tjQuery.event.trigger(type, data, this);\n\t\t\t});\n\t\t},\n\t\ttriggerHandler: function triggerHandler(type, data) {\n\t\t\tvar elem = this[0];\n\t\t\tif (elem) {\n\t\t\t\treturn jQuery.event.trigger(type, data, elem, true);\n\t\t\t}\n\t\t}\n\t});\n\n\tjQuery.each((\"blur focus focusin focusout resize scroll click dblclick \" + \"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave \" + \"change select submit keydown keypress keyup contextmenu\").split(\" \"), function (i, name) {\n\n\t\t// Handle event binding\n\t\tjQuery.fn[name] = function (data, fn) {\n\t\t\treturn arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);\n\t\t};\n\t});\n\n\tjQuery.fn.extend({\n\t\thover: function hover(fnOver, fnOut) {\n\t\t\treturn this.mouseenter(fnOver).mouseleave(fnOut || fnOver);\n\t\t}\n\t});\n\n\tsupport.focusin = \"onfocusin\" in window;\n\n\t// Support: Firefox <=44\n\t// Firefox doesn't have focus(in | out) events\n\t// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787\n\t//\n\t// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1\n\t// focus(in | out) events fire after focus & blur events,\n\t// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order\n\t// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857\n\tif (!support.focusin) {\n\t\tjQuery.each({ focus: \"focusin\", blur: \"focusout\" }, function (orig, fix) {\n\n\t\t\t// Attach a single capturing handler on the document while someone wants focusin/focusout\n\t\t\tvar handler = function handler(event) {\n\t\t\t\tjQuery.event.simulate(fix, event.target, jQuery.event.fix(event));\n\t\t\t};\n\n\t\t\tjQuery.event.special[fix] = {\n\t\t\t\tsetup: function setup() {\n\t\t\t\t\tvar doc = this.ownerDocument || this,\n\t\t\t\t\t    attaches = dataPriv.access(doc, fix);\n\n\t\t\t\t\tif (!attaches) {\n\t\t\t\t\t\tdoc.addEventListener(orig, handler, true);\n\t\t\t\t\t}\n\t\t\t\t\tdataPriv.access(doc, fix, (attaches || 0) + 1);\n\t\t\t\t},\n\t\t\t\tteardown: function teardown() {\n\t\t\t\t\tvar doc = this.ownerDocument || this,\n\t\t\t\t\t    attaches = dataPriv.access(doc, fix) - 1;\n\n\t\t\t\t\tif (!attaches) {\n\t\t\t\t\t\tdoc.removeEventListener(orig, handler, true);\n\t\t\t\t\t\tdataPriv.remove(doc, fix);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdataPriv.access(doc, fix, attaches);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\t}\n\tvar location = window.location;\n\n\tvar nonce = jQuery.now();\n\n\tvar rquery = /\\?/;\n\n\t// Cross-browser xml parsing\n\tjQuery.parseXML = function (data) {\n\t\tvar xml;\n\t\tif (!data || typeof data !== \"string\") {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Support: IE 9 - 11 only\n\t\t// IE throws on parseFromString with invalid input.\n\t\ttry {\n\t\t\txml = new window.DOMParser().parseFromString(data, \"text/xml\");\n\t\t} catch (e) {\n\t\t\txml = undefined;\n\t\t}\n\n\t\tif (!xml || xml.getElementsByTagName(\"parsererror\").length) {\n\t\t\tjQuery.error(\"Invalid XML: \" + data);\n\t\t}\n\t\treturn xml;\n\t};\n\n\tvar rbracket = /\\[\\]$/,\n\t    rCRLF = /\\r?\\n/g,\n\t    rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,\n\t    rsubmittable = /^(?:input|select|textarea|keygen)/i;\n\n\tfunction buildParams(prefix, obj, traditional, add) {\n\t\tvar name;\n\n\t\tif (jQuery.isArray(obj)) {\n\n\t\t\t// Serialize array item.\n\t\t\tjQuery.each(obj, function (i, v) {\n\t\t\t\tif (traditional || rbracket.test(prefix)) {\n\n\t\t\t\t\t// Treat each array item as a scalar.\n\t\t\t\t\tadd(prefix, v);\n\t\t\t\t} else {\n\n\t\t\t\t\t// Item is non-scalar (array or object), encode its numeric index.\n\t\t\t\t\tbuildParams(prefix + \"[\" + ((typeof v === \"undefined\" ? \"undefined\" : _typeof(v)) === \"object\" && v != null ? i : \"\") + \"]\", v, traditional, add);\n\t\t\t\t}\n\t\t\t});\n\t\t} else if (!traditional && jQuery.type(obj) === \"object\") {\n\n\t\t\t// Serialize object item.\n\t\t\tfor (name in obj) {\n\t\t\t\tbuildParams(prefix + \"[\" + name + \"]\", obj[name], traditional, add);\n\t\t\t}\n\t\t} else {\n\n\t\t\t// Serialize scalar item.\n\t\t\tadd(prefix, obj);\n\t\t}\n\t}\n\n\t// Serialize an array of form elements or a set of\n\t// key/values into a query string\n\tjQuery.param = function (a, traditional) {\n\t\tvar prefix,\n\t\t    s = [],\n\t\t    add = function add(key, valueOrFunction) {\n\n\t\t\t// If value is a function, invoke it and use its return value\n\t\t\tvar value = jQuery.isFunction(valueOrFunction) ? valueOrFunction() : valueOrFunction;\n\n\t\t\ts[s.length] = encodeURIComponent(key) + \"=\" + encodeURIComponent(value == null ? \"\" : value);\n\t\t};\n\n\t\t// If an array was passed in, assume that it is an array of form elements.\n\t\tif (jQuery.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {\n\n\t\t\t// Serialize the form elements\n\t\t\tjQuery.each(a, function () {\n\t\t\t\tadd(this.name, this.value);\n\t\t\t});\n\t\t} else {\n\n\t\t\t// If traditional, encode the \"old\" way (the way 1.3.2 or older\n\t\t\t// did it), otherwise encode params recursively.\n\t\t\tfor (prefix in a) {\n\t\t\t\tbuildParams(prefix, a[prefix], traditional, add);\n\t\t\t}\n\t\t}\n\n\t\t// Return the resulting serialization\n\t\treturn s.join(\"&\");\n\t};\n\n\tjQuery.fn.extend({\n\t\tserialize: function serialize() {\n\t\t\treturn jQuery.param(this.serializeArray());\n\t\t},\n\t\tserializeArray: function serializeArray() {\n\t\t\treturn this.map(function () {\n\n\t\t\t\t// Can add propHook for \"elements\" to filter or add form elements\n\t\t\t\tvar elements = jQuery.prop(this, \"elements\");\n\t\t\t\treturn elements ? jQuery.makeArray(elements) : this;\n\t\t\t}).filter(function () {\n\t\t\t\tvar type = this.type;\n\n\t\t\t\t// Use .is( \":disabled\" ) so that fieldset[disabled] works\n\t\t\t\treturn this.name && !jQuery(this).is(\":disabled\") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));\n\t\t\t}).map(function (i, elem) {\n\t\t\t\tvar val = jQuery(this).val();\n\n\t\t\t\treturn val == null ? null : jQuery.isArray(val) ? jQuery.map(val, function (val) {\n\t\t\t\t\treturn { name: elem.name, value: val.replace(rCRLF, \"\\r\\n\") };\n\t\t\t\t}) : { name: elem.name, value: val.replace(rCRLF, \"\\r\\n\") };\n\t\t\t}).get();\n\t\t}\n\t});\n\n\tvar r20 = /%20/g,\n\t    rhash = /#.*$/,\n\t    rts = /([?&])_=[^&]*/,\n\t    rheaders = /^(.*?):[ \\t]*([^\\r\\n]*)$/mg,\n\n\n\t// #7653, #8125, #8152: local protocol detection\n\trlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\n\t    rnoContent = /^(?:GET|HEAD)$/,\n\t    rprotocol = /^\\/\\//,\n\n\n\t/* Prefilters\n  * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\n  * 2) These are called:\n  *    - BEFORE asking for a transport\n  *    - AFTER param serialization (s.data is a string if s.processData is true)\n  * 3) key is the dataType\n  * 4) the catchall symbol \"*\" can be used\n  * 5) execution will start with transport dataType and THEN continue down to \"*\" if needed\n  */\n\tprefilters = {},\n\n\n\t/* Transports bindings\n  * 1) key is the dataType\n  * 2) the catchall symbol \"*\" can be used\n  * 3) selection will start with transport dataType and THEN go to \"*\" if needed\n  */\n\ttransports = {},\n\n\n\t// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression\n\tallTypes = \"*/\".concat(\"*\"),\n\n\n\t// Anchor tag for parsing the document origin\n\toriginAnchor = document.createElement(\"a\");\n\toriginAnchor.href = location.href;\n\n\t// Base \"constructor\" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\n\tfunction addToPrefiltersOrTransports(structure) {\n\n\t\t// dataTypeExpression is optional and defaults to \"*\"\n\t\treturn function (dataTypeExpression, func) {\n\n\t\t\tif (typeof dataTypeExpression !== \"string\") {\n\t\t\t\tfunc = dataTypeExpression;\n\t\t\t\tdataTypeExpression = \"*\";\n\t\t\t}\n\n\t\t\tvar dataType,\n\t\t\t    i = 0,\n\t\t\t    dataTypes = dataTypeExpression.toLowerCase().match(rnotwhite) || [];\n\n\t\t\tif (jQuery.isFunction(func)) {\n\n\t\t\t\t// For each dataType in the dataTypeExpression\n\t\t\t\twhile (dataType = dataTypes[i++]) {\n\n\t\t\t\t\t// Prepend if requested\n\t\t\t\t\tif (dataType[0] === \"+\") {\n\t\t\t\t\t\tdataType = dataType.slice(1) || \"*\";\n\t\t\t\t\t\t(structure[dataType] = structure[dataType] || []).unshift(func);\n\n\t\t\t\t\t\t// Otherwise append\n\t\t\t\t\t} else {\n\t\t\t\t\t\t(structure[dataType] = structure[dataType] || []).push(func);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\t// Base inspection function for prefilters and transports\n\tfunction inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {\n\n\t\tvar inspected = {},\n\t\t    seekingTransport = structure === transports;\n\n\t\tfunction inspect(dataType) {\n\t\t\tvar selected;\n\t\t\tinspected[dataType] = true;\n\t\t\tjQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {\n\t\t\t\tvar dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);\n\t\t\t\tif (typeof dataTypeOrTransport === \"string\" && !seekingTransport && !inspected[dataTypeOrTransport]) {\n\n\t\t\t\t\toptions.dataTypes.unshift(dataTypeOrTransport);\n\t\t\t\t\tinspect(dataTypeOrTransport);\n\t\t\t\t\treturn false;\n\t\t\t\t} else if (seekingTransport) {\n\t\t\t\t\treturn !(selected = dataTypeOrTransport);\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn selected;\n\t\t}\n\n\t\treturn inspect(options.dataTypes[0]) || !inspected[\"*\"] && inspect(\"*\");\n\t}\n\n\t// A special extend for ajax options\n\t// that takes \"flat\" options (not to be deep extended)\n\t// Fixes #9887\n\tfunction ajaxExtend(target, src) {\n\t\tvar key,\n\t\t    deep,\n\t\t    flatOptions = jQuery.ajaxSettings.flatOptions || {};\n\n\t\tfor (key in src) {\n\t\t\tif (src[key] !== undefined) {\n\t\t\t\t(flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];\n\t\t\t}\n\t\t}\n\t\tif (deep) {\n\t\t\tjQuery.extend(true, target, deep);\n\t\t}\n\n\t\treturn target;\n\t}\n\n\t/* Handles responses to an ajax request:\n  * - finds the right dataType (mediates between content-type and expected dataType)\n  * - returns the corresponding response\n  */\n\tfunction ajaxHandleResponses(s, jqXHR, responses) {\n\n\t\tvar ct,\n\t\t    type,\n\t\t    finalDataType,\n\t\t    firstDataType,\n\t\t    contents = s.contents,\n\t\t    dataTypes = s.dataTypes;\n\n\t\t// Remove auto dataType and get content-type in the process\n\t\twhile (dataTypes[0] === \"*\") {\n\t\t\tdataTypes.shift();\n\t\t\tif (ct === undefined) {\n\t\t\t\tct = s.mimeType || jqXHR.getResponseHeader(\"Content-Type\");\n\t\t\t}\n\t\t}\n\n\t\t// Check if we're dealing with a known content-type\n\t\tif (ct) {\n\t\t\tfor (type in contents) {\n\t\t\t\tif (contents[type] && contents[type].test(ct)) {\n\t\t\t\t\tdataTypes.unshift(type);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Check to see if we have a response for the expected dataType\n\t\tif (dataTypes[0] in responses) {\n\t\t\tfinalDataType = dataTypes[0];\n\t\t} else {\n\n\t\t\t// Try convertible dataTypes\n\t\t\tfor (type in responses) {\n\t\t\t\tif (!dataTypes[0] || s.converters[type + \" \" + dataTypes[0]]) {\n\t\t\t\t\tfinalDataType = type;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (!firstDataType) {\n\t\t\t\t\tfirstDataType = type;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Or just use first one\n\t\t\tfinalDataType = finalDataType || firstDataType;\n\t\t}\n\n\t\t// If we found a dataType\n\t\t// We add the dataType to the list if needed\n\t\t// and return the corresponding response\n\t\tif (finalDataType) {\n\t\t\tif (finalDataType !== dataTypes[0]) {\n\t\t\t\tdataTypes.unshift(finalDataType);\n\t\t\t}\n\t\t\treturn responses[finalDataType];\n\t\t}\n\t}\n\n\t/* Chain conversions given the request and the original response\n  * Also sets the responseXXX fields on the jqXHR instance\n  */\n\tfunction ajaxConvert(s, response, jqXHR, isSuccess) {\n\t\tvar conv2,\n\t\t    current,\n\t\t    conv,\n\t\t    tmp,\n\t\t    prev,\n\t\t    converters = {},\n\n\n\t\t// Work with a copy of dataTypes in case we need to modify it for conversion\n\t\tdataTypes = s.dataTypes.slice();\n\n\t\t// Create converters map with lowercased keys\n\t\tif (dataTypes[1]) {\n\t\t\tfor (conv in s.converters) {\n\t\t\t\tconverters[conv.toLowerCase()] = s.converters[conv];\n\t\t\t}\n\t\t}\n\n\t\tcurrent = dataTypes.shift();\n\n\t\t// Convert to each sequential dataType\n\t\twhile (current) {\n\n\t\t\tif (s.responseFields[current]) {\n\t\t\t\tjqXHR[s.responseFields[current]] = response;\n\t\t\t}\n\n\t\t\t// Apply the dataFilter if provided\n\t\t\tif (!prev && isSuccess && s.dataFilter) {\n\t\t\t\tresponse = s.dataFilter(response, s.dataType);\n\t\t\t}\n\n\t\t\tprev = current;\n\t\t\tcurrent = dataTypes.shift();\n\n\t\t\tif (current) {\n\n\t\t\t\t// There's only work to do if current dataType is non-auto\n\t\t\t\tif (current === \"*\") {\n\n\t\t\t\t\tcurrent = prev;\n\n\t\t\t\t\t// Convert response if prev dataType is non-auto and differs from current\n\t\t\t\t} else if (prev !== \"*\" && prev !== current) {\n\n\t\t\t\t\t// Seek a direct converter\n\t\t\t\t\tconv = converters[prev + \" \" + current] || converters[\"* \" + current];\n\n\t\t\t\t\t// If none found, seek a pair\n\t\t\t\t\tif (!conv) {\n\t\t\t\t\t\tfor (conv2 in converters) {\n\n\t\t\t\t\t\t\t// If conv2 outputs current\n\t\t\t\t\t\t\ttmp = conv2.split(\" \");\n\t\t\t\t\t\t\tif (tmp[1] === current) {\n\n\t\t\t\t\t\t\t\t// If prev can be converted to accepted input\n\t\t\t\t\t\t\t\tconv = converters[prev + \" \" + tmp[0]] || converters[\"* \" + tmp[0]];\n\t\t\t\t\t\t\t\tif (conv) {\n\n\t\t\t\t\t\t\t\t\t// Condense equivalence converters\n\t\t\t\t\t\t\t\t\tif (conv === true) {\n\t\t\t\t\t\t\t\t\t\tconv = converters[conv2];\n\n\t\t\t\t\t\t\t\t\t\t// Otherwise, insert the intermediate dataType\n\t\t\t\t\t\t\t\t\t} else if (converters[conv2] !== true) {\n\t\t\t\t\t\t\t\t\t\tcurrent = tmp[0];\n\t\t\t\t\t\t\t\t\t\tdataTypes.unshift(tmp[1]);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Apply converter (if not an equivalence)\n\t\t\t\t\tif (conv !== true) {\n\n\t\t\t\t\t\t// Unless errors are allowed to bubble, catch and return them\n\t\t\t\t\t\tif (conv && s.throws) {\n\t\t\t\t\t\t\tresponse = conv(response);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tresponse = conv(response);\n\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\tstate: \"parsererror\",\n\t\t\t\t\t\t\t\t\terror: conv ? e : \"No conversion from \" + prev + \" to \" + current\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn { state: \"success\", data: response };\n\t}\n\n\tjQuery.extend({\n\n\t\t// Counter for holding the number of active queries\n\t\tactive: 0,\n\n\t\t// Last-Modified header cache for next request\n\t\tlastModified: {},\n\t\tetag: {},\n\n\t\tajaxSettings: {\n\t\t\turl: location.href,\n\t\t\ttype: \"GET\",\n\t\t\tisLocal: rlocalProtocol.test(location.protocol),\n\t\t\tglobal: true,\n\t\t\tprocessData: true,\n\t\t\tasync: true,\n\t\t\tcontentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\n\n\t\t\t/*\n   timeout: 0,\n   data: null,\n   dataType: null,\n   username: null,\n   password: null,\n   cache: null,\n   throws: false,\n   traditional: false,\n   headers: {},\n   */\n\n\t\t\taccepts: {\n\t\t\t\t\"*\": allTypes,\n\t\t\t\ttext: \"text/plain\",\n\t\t\t\thtml: \"text/html\",\n\t\t\t\txml: \"application/xml, text/xml\",\n\t\t\t\tjson: \"application/json, text/javascript\"\n\t\t\t},\n\n\t\t\tcontents: {\n\t\t\t\txml: /\\bxml\\b/,\n\t\t\t\thtml: /\\bhtml/,\n\t\t\t\tjson: /\\bjson\\b/\n\t\t\t},\n\n\t\t\tresponseFields: {\n\t\t\t\txml: \"responseXML\",\n\t\t\t\ttext: \"responseText\",\n\t\t\t\tjson: \"responseJSON\"\n\t\t\t},\n\n\t\t\t// Data converters\n\t\t\t// Keys separate source (or catchall \"*\") and destination types with a single space\n\t\t\tconverters: {\n\n\t\t\t\t// Convert anything to text\n\t\t\t\t\"* text\": String,\n\n\t\t\t\t// Text to html (true = no transformation)\n\t\t\t\t\"text html\": true,\n\n\t\t\t\t// Evaluate text as a json expression\n\t\t\t\t\"text json\": JSON.parse,\n\n\t\t\t\t// Parse text as xml\n\t\t\t\t\"text xml\": jQuery.parseXML\n\t\t\t},\n\n\t\t\t// For options that shouldn't be deep extended:\n\t\t\t// you can add your own custom options here if\n\t\t\t// and when you create one that shouldn't be\n\t\t\t// deep extended (see ajaxExtend)\n\t\t\tflatOptions: {\n\t\t\t\turl: true,\n\t\t\t\tcontext: true\n\t\t\t}\n\t\t},\n\n\t\t// Creates a full fledged settings object into target\n\t\t// with both ajaxSettings and settings fields.\n\t\t// If target is omitted, writes into ajaxSettings.\n\t\tajaxSetup: function ajaxSetup(target, settings) {\n\t\t\treturn settings ?\n\n\t\t\t// Building a settings object\n\t\t\tajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) :\n\n\t\t\t// Extending ajaxSettings\n\t\t\tajaxExtend(jQuery.ajaxSettings, target);\n\t\t},\n\n\t\tajaxPrefilter: addToPrefiltersOrTransports(prefilters),\n\t\tajaxTransport: addToPrefiltersOrTransports(transports),\n\n\t\t// Main method\n\t\tajax: function ajax(url, options) {\n\n\t\t\t// If url is an object, simulate pre-1.5 signature\n\t\t\tif ((typeof url === \"undefined\" ? \"undefined\" : _typeof(url)) === \"object\") {\n\t\t\t\toptions = url;\n\t\t\t\turl = undefined;\n\t\t\t}\n\n\t\t\t// Force options to be an object\n\t\t\toptions = options || {};\n\n\t\t\tvar transport,\n\n\n\t\t\t// URL without anti-cache param\n\t\t\tcacheURL,\n\n\n\t\t\t// Response headers\n\t\t\tresponseHeadersString,\n\t\t\t    responseHeaders,\n\n\n\t\t\t// timeout handle\n\t\t\ttimeoutTimer,\n\n\n\t\t\t// Url cleanup var\n\t\t\turlAnchor,\n\n\n\t\t\t// Request state (becomes false upon send and true upon completion)\n\t\t\tcompleted,\n\n\n\t\t\t// To know if global events are to be dispatched\n\t\t\tfireGlobals,\n\n\n\t\t\t// Loop variable\n\t\t\ti,\n\n\n\t\t\t// uncached part of the url\n\t\t\tuncached,\n\n\n\t\t\t// Create the final options object\n\t\t\ts = jQuery.ajaxSetup({}, options),\n\n\n\t\t\t// Callbacks context\n\t\t\tcallbackContext = s.context || s,\n\n\n\t\t\t// Context for global events is callbackContext if it is a DOM node or jQuery collection\n\t\t\tglobalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event,\n\n\n\t\t\t// Deferreds\n\t\t\tdeferred = jQuery.Deferred(),\n\t\t\t    completeDeferred = jQuery.Callbacks(\"once memory\"),\n\n\n\t\t\t// Status-dependent callbacks\n\t\t\t_statusCode = s.statusCode || {},\n\n\n\t\t\t// Headers (they are sent all at once)\n\t\t\trequestHeaders = {},\n\t\t\t    requestHeadersNames = {},\n\n\n\t\t\t// Default abort message\n\t\t\tstrAbort = \"canceled\",\n\n\n\t\t\t// Fake xhr\n\t\t\tjqXHR = {\n\t\t\t\treadyState: 0,\n\n\t\t\t\t// Builds headers hashtable if needed\n\t\t\t\tgetResponseHeader: function getResponseHeader(key) {\n\t\t\t\t\tvar match;\n\t\t\t\t\tif (completed) {\n\t\t\t\t\t\tif (!responseHeaders) {\n\t\t\t\t\t\t\tresponseHeaders = {};\n\t\t\t\t\t\t\twhile (match = rheaders.exec(responseHeadersString)) {\n\t\t\t\t\t\t\t\tresponseHeaders[match[1].toLowerCase()] = match[2];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmatch = responseHeaders[key.toLowerCase()];\n\t\t\t\t\t}\n\t\t\t\t\treturn match == null ? null : match;\n\t\t\t\t},\n\n\t\t\t\t// Raw string\n\t\t\t\tgetAllResponseHeaders: function getAllResponseHeaders() {\n\t\t\t\t\treturn completed ? responseHeadersString : null;\n\t\t\t\t},\n\n\t\t\t\t// Caches the header\n\t\t\t\tsetRequestHeader: function setRequestHeader(name, value) {\n\t\t\t\t\tif (completed == null) {\n\t\t\t\t\t\tname = requestHeadersNames[name.toLowerCase()] = requestHeadersNames[name.toLowerCase()] || name;\n\t\t\t\t\t\trequestHeaders[name] = value;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Overrides response content-type header\n\t\t\t\toverrideMimeType: function overrideMimeType(type) {\n\t\t\t\t\tif (completed == null) {\n\t\t\t\t\t\ts.mimeType = type;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Status-dependent callbacks\n\t\t\t\tstatusCode: function statusCode(map) {\n\t\t\t\t\tvar code;\n\t\t\t\t\tif (map) {\n\t\t\t\t\t\tif (completed) {\n\n\t\t\t\t\t\t\t// Execute the appropriate callbacks\n\t\t\t\t\t\t\tjqXHR.always(map[jqXHR.status]);\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Lazy-add the new callbacks in a way that preserves old ones\n\t\t\t\t\t\t\tfor (code in map) {\n\t\t\t\t\t\t\t\t_statusCode[code] = [_statusCode[code], map[code]];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Cancel the request\n\t\t\t\tabort: function abort(statusText) {\n\t\t\t\t\tvar finalText = statusText || strAbort;\n\t\t\t\t\tif (transport) {\n\t\t\t\t\t\ttransport.abort(finalText);\n\t\t\t\t\t}\n\t\t\t\t\tdone(0, finalText);\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// Attach deferreds\n\t\t\tdeferred.promise(jqXHR);\n\n\t\t\t// Add protocol if not provided (prefilters might expect it)\n\t\t\t// Handle falsy url in the settings object (#10093: consistency with old signature)\n\t\t\t// We also use the url parameter if available\n\t\t\ts.url = ((url || s.url || location.href) + \"\").replace(rprotocol, location.protocol + \"//\");\n\n\t\t\t// Alias method option to type as per ticket #12004\n\t\t\ts.type = options.method || options.type || s.method || s.type;\n\n\t\t\t// Extract dataTypes list\n\t\t\ts.dataTypes = (s.dataType || \"*\").toLowerCase().match(rnotwhite) || [\"\"];\n\n\t\t\t// A cross-domain request is in order when the origin doesn't match the current origin.\n\t\t\tif (s.crossDomain == null) {\n\t\t\t\turlAnchor = document.createElement(\"a\");\n\n\t\t\t\t// Support: IE <=8 - 11, Edge 12 - 13\n\t\t\t\t// IE throws exception on accessing the href property if url is malformed,\n\t\t\t\t// e.g. http://example.com:80x/\n\t\t\t\ttry {\n\t\t\t\t\turlAnchor.href = s.url;\n\n\t\t\t\t\t// Support: IE <=8 - 11 only\n\t\t\t\t\t// Anchor's host property isn't correctly set when s.url is relative\n\t\t\t\t\turlAnchor.href = urlAnchor.href;\n\t\t\t\t\ts.crossDomain = originAnchor.protocol + \"//\" + originAnchor.host !== urlAnchor.protocol + \"//\" + urlAnchor.host;\n\t\t\t\t} catch (e) {\n\n\t\t\t\t\t// If there is an error parsing the URL, assume it is crossDomain,\n\t\t\t\t\t// it can be rejected by the transport if it is invalid\n\t\t\t\t\ts.crossDomain = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Convert data if not already a string\n\t\t\tif (s.data && s.processData && typeof s.data !== \"string\") {\n\t\t\t\ts.data = jQuery.param(s.data, s.traditional);\n\t\t\t}\n\n\t\t\t// Apply prefilters\n\t\t\tinspectPrefiltersOrTransports(prefilters, s, options, jqXHR);\n\n\t\t\t// If request was aborted inside a prefilter, stop there\n\t\t\tif (completed) {\n\t\t\t\treturn jqXHR;\n\t\t\t}\n\n\t\t\t// We can fire global events as of now if asked to\n\t\t\t// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)\n\t\t\tfireGlobals = jQuery.event && s.global;\n\n\t\t\t// Watch for a new set of requests\n\t\t\tif (fireGlobals && jQuery.active++ === 0) {\n\t\t\t\tjQuery.event.trigger(\"ajaxStart\");\n\t\t\t}\n\n\t\t\t// Uppercase the type\n\t\t\ts.type = s.type.toUpperCase();\n\n\t\t\t// Determine if request has content\n\t\t\ts.hasContent = !rnoContent.test(s.type);\n\n\t\t\t// Save the URL in case we're toying with the If-Modified-Since\n\t\t\t// and/or If-None-Match header later on\n\t\t\t// Remove hash to simplify url manipulation\n\t\t\tcacheURL = s.url.replace(rhash, \"\");\n\n\t\t\t// More options handling for requests with no content\n\t\t\tif (!s.hasContent) {\n\n\t\t\t\t// Remember the hash so we can put it back\n\t\t\t\tuncached = s.url.slice(cacheURL.length);\n\n\t\t\t\t// If data is available, append data to url\n\t\t\t\tif (s.data) {\n\t\t\t\t\tcacheURL += (rquery.test(cacheURL) ? \"&\" : \"?\") + s.data;\n\n\t\t\t\t\t// #9682: remove data so that it's not used in an eventual retry\n\t\t\t\t\tdelete s.data;\n\t\t\t\t}\n\n\t\t\t\t// Add anti-cache in uncached url if needed\n\t\t\t\tif (s.cache === false) {\n\t\t\t\t\tcacheURL = cacheURL.replace(rts, \"\");\n\t\t\t\t\tuncached = (rquery.test(cacheURL) ? \"&\" : \"?\") + \"_=\" + nonce++ + uncached;\n\t\t\t\t}\n\n\t\t\t\t// Put hash and anti-cache on the URL that will be requested (gh-1732)\n\t\t\t\ts.url = cacheURL + uncached;\n\n\t\t\t\t// Change '%20' to '+' if this is encoded form body content (gh-2658)\n\t\t\t} else if (s.data && s.processData && (s.contentType || \"\").indexOf(\"application/x-www-form-urlencoded\") === 0) {\n\t\t\t\ts.data = s.data.replace(r20, \"+\");\n\t\t\t}\n\n\t\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\t\tif (s.ifModified) {\n\t\t\t\tif (jQuery.lastModified[cacheURL]) {\n\t\t\t\t\tjqXHR.setRequestHeader(\"If-Modified-Since\", jQuery.lastModified[cacheURL]);\n\t\t\t\t}\n\t\t\t\tif (jQuery.etag[cacheURL]) {\n\t\t\t\t\tjqXHR.setRequestHeader(\"If-None-Match\", jQuery.etag[cacheURL]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Set the correct header, if data is being sent\n\t\t\tif (s.data && s.hasContent && s.contentType !== false || options.contentType) {\n\t\t\t\tjqXHR.setRequestHeader(\"Content-Type\", s.contentType);\n\t\t\t}\n\n\t\t\t// Set the Accepts header for the server, depending on the dataType\n\t\t\tjqXHR.setRequestHeader(\"Accept\", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== \"*\" ? \", \" + allTypes + \"; q=0.01\" : \"\") : s.accepts[\"*\"]);\n\n\t\t\t// Check for headers option\n\t\t\tfor (i in s.headers) {\n\t\t\t\tjqXHR.setRequestHeader(i, s.headers[i]);\n\t\t\t}\n\n\t\t\t// Allow custom headers/mimetypes and early abort\n\t\t\tif (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || completed)) {\n\n\t\t\t\t// Abort if not done already and return\n\t\t\t\treturn jqXHR.abort();\n\t\t\t}\n\n\t\t\t// Aborting is no longer a cancellation\n\t\t\tstrAbort = \"abort\";\n\n\t\t\t// Install callbacks on deferreds\n\t\t\tcompleteDeferred.add(s.complete);\n\t\t\tjqXHR.done(s.success);\n\t\t\tjqXHR.fail(s.error);\n\n\t\t\t// Get transport\n\t\t\ttransport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);\n\n\t\t\t// If no transport, we auto-abort\n\t\t\tif (!transport) {\n\t\t\t\tdone(-1, \"No Transport\");\n\t\t\t} else {\n\t\t\t\tjqXHR.readyState = 1;\n\n\t\t\t\t// Send global event\n\t\t\t\tif (fireGlobals) {\n\t\t\t\t\tglobalEventContext.trigger(\"ajaxSend\", [jqXHR, s]);\n\t\t\t\t}\n\n\t\t\t\t// If request was aborted inside ajaxSend, stop there\n\t\t\t\tif (completed) {\n\t\t\t\t\treturn jqXHR;\n\t\t\t\t}\n\n\t\t\t\t// Timeout\n\t\t\t\tif (s.async && s.timeout > 0) {\n\t\t\t\t\ttimeoutTimer = window.setTimeout(function () {\n\t\t\t\t\t\tjqXHR.abort(\"timeout\");\n\t\t\t\t\t}, s.timeout);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tcompleted = false;\n\t\t\t\t\ttransport.send(requestHeaders, done);\n\t\t\t\t} catch (e) {\n\n\t\t\t\t\t// Rethrow post-completion exceptions\n\t\t\t\t\tif (completed) {\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Propagate others as results\n\t\t\t\t\tdone(-1, e);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Callback for when everything is done\n\t\t\tfunction done(status, nativeStatusText, responses, headers) {\n\t\t\t\tvar isSuccess,\n\t\t\t\t    success,\n\t\t\t\t    error,\n\t\t\t\t    response,\n\t\t\t\t    modified,\n\t\t\t\t    statusText = nativeStatusText;\n\n\t\t\t\t// Ignore repeat invocations\n\t\t\t\tif (completed) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tcompleted = true;\n\n\t\t\t\t// Clear timeout if it exists\n\t\t\t\tif (timeoutTimer) {\n\t\t\t\t\twindow.clearTimeout(timeoutTimer);\n\t\t\t\t}\n\n\t\t\t\t// Dereference transport for early garbage collection\n\t\t\t\t// (no matter how long the jqXHR object will be used)\n\t\t\t\ttransport = undefined;\n\n\t\t\t\t// Cache response headers\n\t\t\t\tresponseHeadersString = headers || \"\";\n\n\t\t\t\t// Set readyState\n\t\t\t\tjqXHR.readyState = status > 0 ? 4 : 0;\n\n\t\t\t\t// Determine if successful\n\t\t\t\tisSuccess = status >= 200 && status < 300 || status === 304;\n\n\t\t\t\t// Get response data\n\t\t\t\tif (responses) {\n\t\t\t\t\tresponse = ajaxHandleResponses(s, jqXHR, responses);\n\t\t\t\t}\n\n\t\t\t\t// Convert no matter what (that way responseXXX fields are always set)\n\t\t\t\tresponse = ajaxConvert(s, response, jqXHR, isSuccess);\n\n\t\t\t\t// If successful, handle type chaining\n\t\t\t\tif (isSuccess) {\n\n\t\t\t\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\t\t\t\tif (s.ifModified) {\n\t\t\t\t\t\tmodified = jqXHR.getResponseHeader(\"Last-Modified\");\n\t\t\t\t\t\tif (modified) {\n\t\t\t\t\t\t\tjQuery.lastModified[cacheURL] = modified;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmodified = jqXHR.getResponseHeader(\"etag\");\n\t\t\t\t\t\tif (modified) {\n\t\t\t\t\t\t\tjQuery.etag[cacheURL] = modified;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// if no content\n\t\t\t\t\tif (status === 204 || s.type === \"HEAD\") {\n\t\t\t\t\t\tstatusText = \"nocontent\";\n\n\t\t\t\t\t\t// if not modified\n\t\t\t\t\t} else if (status === 304) {\n\t\t\t\t\t\tstatusText = \"notmodified\";\n\n\t\t\t\t\t\t// If we have data, let's convert it\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstatusText = response.state;\n\t\t\t\t\t\tsuccess = response.data;\n\t\t\t\t\t\terror = response.error;\n\t\t\t\t\t\tisSuccess = !error;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\n\t\t\t\t\t// Extract error from statusText and normalize for non-aborts\n\t\t\t\t\terror = statusText;\n\t\t\t\t\tif (status || !statusText) {\n\t\t\t\t\t\tstatusText = \"error\";\n\t\t\t\t\t\tif (status < 0) {\n\t\t\t\t\t\t\tstatus = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Set data for the fake xhr object\n\t\t\t\tjqXHR.status = status;\n\t\t\t\tjqXHR.statusText = (nativeStatusText || statusText) + \"\";\n\n\t\t\t\t// Success/Error\n\t\t\t\tif (isSuccess) {\n\t\t\t\t\tdeferred.resolveWith(callbackContext, [success, statusText, jqXHR]);\n\t\t\t\t} else {\n\t\t\t\t\tdeferred.rejectWith(callbackContext, [jqXHR, statusText, error]);\n\t\t\t\t}\n\n\t\t\t\t// Status-dependent callbacks\n\t\t\t\tjqXHR.statusCode(_statusCode);\n\t\t\t\t_statusCode = undefined;\n\n\t\t\t\tif (fireGlobals) {\n\t\t\t\t\tglobalEventContext.trigger(isSuccess ? \"ajaxSuccess\" : \"ajaxError\", [jqXHR, s, isSuccess ? success : error]);\n\t\t\t\t}\n\n\t\t\t\t// Complete\n\t\t\t\tcompleteDeferred.fireWith(callbackContext, [jqXHR, statusText]);\n\n\t\t\t\tif (fireGlobals) {\n\t\t\t\t\tglobalEventContext.trigger(\"ajaxComplete\", [jqXHR, s]);\n\n\t\t\t\t\t// Handle the global AJAX counter\n\t\t\t\t\tif (! --jQuery.active) {\n\t\t\t\t\t\tjQuery.event.trigger(\"ajaxStop\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn jqXHR;\n\t\t},\n\n\t\tgetJSON: function getJSON(url, data, callback) {\n\t\t\treturn jQuery.get(url, data, callback, \"json\");\n\t\t},\n\n\t\tgetScript: function getScript(url, callback) {\n\t\t\treturn jQuery.get(url, undefined, callback, \"script\");\n\t\t}\n\t});\n\n\tjQuery.each([\"get\", \"post\"], function (i, method) {\n\t\tjQuery[method] = function (url, data, callback, type) {\n\n\t\t\t// Shift arguments if data argument was omitted\n\t\t\tif (jQuery.isFunction(data)) {\n\t\t\t\ttype = type || callback;\n\t\t\t\tcallback = data;\n\t\t\t\tdata = undefined;\n\t\t\t}\n\n\t\t\t// The url can be an options object (which then must have .url)\n\t\t\treturn jQuery.ajax(jQuery.extend({\n\t\t\t\turl: url,\n\t\t\t\ttype: method,\n\t\t\t\tdataType: type,\n\t\t\t\tdata: data,\n\t\t\t\tsuccess: callback\n\t\t\t}, jQuery.isPlainObject(url) && url));\n\t\t};\n\t});\n\n\tjQuery._evalUrl = function (url) {\n\t\treturn jQuery.ajax({\n\t\t\turl: url,\n\n\t\t\t// Make this explicit, since user can override this through ajaxSetup (#11264)\n\t\t\ttype: \"GET\",\n\t\t\tdataType: \"script\",\n\t\t\tcache: true,\n\t\t\tasync: false,\n\t\t\tglobal: false,\n\t\t\t\"throws\": true\n\t\t});\n\t};\n\n\tjQuery.fn.extend({\n\t\twrapAll: function wrapAll(html) {\n\t\t\tvar wrap;\n\n\t\t\tif (this[0]) {\n\t\t\t\tif (jQuery.isFunction(html)) {\n\t\t\t\t\thtml = html.call(this[0]);\n\t\t\t\t}\n\n\t\t\t\t// The elements to wrap the target around\n\t\t\t\twrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);\n\n\t\t\t\tif (this[0].parentNode) {\n\t\t\t\t\twrap.insertBefore(this[0]);\n\t\t\t\t}\n\n\t\t\t\twrap.map(function () {\n\t\t\t\t\tvar elem = this;\n\n\t\t\t\t\twhile (elem.firstElementChild) {\n\t\t\t\t\t\telem = elem.firstElementChild;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn elem;\n\t\t\t\t}).append(this);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\n\t\twrapInner: function wrapInner(html) {\n\t\t\tif (jQuery.isFunction(html)) {\n\t\t\t\treturn this.each(function (i) {\n\t\t\t\t\tjQuery(this).wrapInner(html.call(this, i));\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn this.each(function () {\n\t\t\t\tvar self = jQuery(this),\n\t\t\t\t    contents = self.contents();\n\n\t\t\t\tif (contents.length) {\n\t\t\t\t\tcontents.wrapAll(html);\n\t\t\t\t} else {\n\t\t\t\t\tself.append(html);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\twrap: function wrap(html) {\n\t\t\tvar isFunction = jQuery.isFunction(html);\n\n\t\t\treturn this.each(function (i) {\n\t\t\t\tjQuery(this).wrapAll(isFunction ? html.call(this, i) : html);\n\t\t\t});\n\t\t},\n\n\t\tunwrap: function unwrap(selector) {\n\t\t\tthis.parent(selector).not(\"body\").each(function () {\n\t\t\t\tjQuery(this).replaceWith(this.childNodes);\n\t\t\t});\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tjQuery.expr.pseudos.hidden = function (elem) {\n\t\treturn !jQuery.expr.pseudos.visible(elem);\n\t};\n\tjQuery.expr.pseudos.visible = function (elem) {\n\t\treturn !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);\n\t};\n\n\tjQuery.ajaxSettings.xhr = function () {\n\t\ttry {\n\t\t\treturn new window.XMLHttpRequest();\n\t\t} catch (e) {}\n\t};\n\n\tvar xhrSuccessStatus = {\n\n\t\t// File protocol always yields status code 0, assume 200\n\t\t0: 200,\n\n\t\t// Support: IE <=9 only\n\t\t// #1450: sometimes IE returns 1223 when it should be 204\n\t\t1223: 204\n\t},\n\t    xhrSupported = jQuery.ajaxSettings.xhr();\n\n\tsupport.cors = !!xhrSupported && \"withCredentials\" in xhrSupported;\n\tsupport.ajax = xhrSupported = !!xhrSupported;\n\n\tjQuery.ajaxTransport(function (options) {\n\t\tvar _callback, errorCallback;\n\n\t\t// Cross domain only allowed if supported through XMLHttpRequest\n\t\tif (support.cors || xhrSupported && !options.crossDomain) {\n\t\t\treturn {\n\t\t\t\tsend: function send(headers, complete) {\n\t\t\t\t\tvar i,\n\t\t\t\t\t    xhr = options.xhr();\n\n\t\t\t\t\txhr.open(options.type, options.url, options.async, options.username, options.password);\n\n\t\t\t\t\t// Apply custom fields if provided\n\t\t\t\t\tif (options.xhrFields) {\n\t\t\t\t\t\tfor (i in options.xhrFields) {\n\t\t\t\t\t\t\txhr[i] = options.xhrFields[i];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Override mime type if needed\n\t\t\t\t\tif (options.mimeType && xhr.overrideMimeType) {\n\t\t\t\t\t\txhr.overrideMimeType(options.mimeType);\n\t\t\t\t\t}\n\n\t\t\t\t\t// X-Requested-With header\n\t\t\t\t\t// For cross-domain requests, seeing as conditions for a preflight are\n\t\t\t\t\t// akin to a jigsaw puzzle, we simply never set it to be sure.\n\t\t\t\t\t// (it can always be set on a per-request basis or even using ajaxSetup)\n\t\t\t\t\t// For same-domain requests, won't change header if already provided.\n\t\t\t\t\tif (!options.crossDomain && !headers[\"X-Requested-With\"]) {\n\t\t\t\t\t\theaders[\"X-Requested-With\"] = \"XMLHttpRequest\";\n\t\t\t\t\t}\n\n\t\t\t\t\t// Set headers\n\t\t\t\t\tfor (i in headers) {\n\t\t\t\t\t\txhr.setRequestHeader(i, headers[i]);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Callback\n\t\t\t\t\t_callback = function callback(type) {\n\t\t\t\t\t\treturn function () {\n\t\t\t\t\t\t\tif (_callback) {\n\t\t\t\t\t\t\t\t_callback = errorCallback = xhr.onload = xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;\n\n\t\t\t\t\t\t\t\tif (type === \"abort\") {\n\t\t\t\t\t\t\t\t\txhr.abort();\n\t\t\t\t\t\t\t\t} else if (type === \"error\") {\n\n\t\t\t\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t\t\t\t// On a manual native abort, IE9 throws\n\t\t\t\t\t\t\t\t\t// errors on any property access that is not readyState\n\t\t\t\t\t\t\t\t\tif (typeof xhr.status !== \"number\") {\n\t\t\t\t\t\t\t\t\t\tcomplete(0, \"error\");\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tcomplete(\n\n\t\t\t\t\t\t\t\t\t\t// File: protocol always yields status 0; see #8605, #14207\n\t\t\t\t\t\t\t\t\t\txhr.status, xhr.statusText);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tcomplete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText,\n\n\t\t\t\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t\t\t\t// IE9 has no XHR2 but throws on binary (trac-11426)\n\t\t\t\t\t\t\t\t\t// For XHR2 non-text, let the caller handle it (gh-2498)\n\t\t\t\t\t\t\t\t\t(xhr.responseType || \"text\") !== \"text\" || typeof xhr.responseText !== \"string\" ? { binary: xhr.response } : { text: xhr.responseText }, xhr.getAllResponseHeaders());\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t};\n\n\t\t\t\t\t// Listen to events\n\t\t\t\t\txhr.onload = _callback();\n\t\t\t\t\terrorCallback = xhr.onerror = _callback(\"error\");\n\n\t\t\t\t\t// Support: IE 9 only\n\t\t\t\t\t// Use onreadystatechange to replace onabort\n\t\t\t\t\t// to handle uncaught aborts\n\t\t\t\t\tif (xhr.onabort !== undefined) {\n\t\t\t\t\t\txhr.onabort = errorCallback;\n\t\t\t\t\t} else {\n\t\t\t\t\t\txhr.onreadystatechange = function () {\n\n\t\t\t\t\t\t\t// Check readyState before timeout as it changes\n\t\t\t\t\t\t\tif (xhr.readyState === 4) {\n\n\t\t\t\t\t\t\t\t// Allow onerror to be called first,\n\t\t\t\t\t\t\t\t// but that will not handle a native abort\n\t\t\t\t\t\t\t\t// Also, save errorCallback to a variable\n\t\t\t\t\t\t\t\t// as xhr.onerror cannot be accessed\n\t\t\t\t\t\t\t\twindow.setTimeout(function () {\n\t\t\t\t\t\t\t\t\tif (_callback) {\n\t\t\t\t\t\t\t\t\t\terrorCallback();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\t// Create the abort callback\n\t\t\t\t\t_callback = _callback(\"abort\");\n\n\t\t\t\t\ttry {\n\n\t\t\t\t\t\t// Do send the request (this may raise an exception)\n\t\t\t\t\t\txhr.send(options.hasContent && options.data || null);\n\t\t\t\t\t} catch (e) {\n\n\t\t\t\t\t\t// #14683: Only rethrow if this hasn't been notified as an error yet\n\t\t\t\t\t\tif (_callback) {\n\t\t\t\t\t\t\tthrow e;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\tabort: function abort() {\n\t\t\t\t\tif (_callback) {\n\t\t\t\t\t\t_callback();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t});\n\n\t// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)\n\tjQuery.ajaxPrefilter(function (s) {\n\t\tif (s.crossDomain) {\n\t\t\ts.contents.script = false;\n\t\t}\n\t});\n\n\t// Install script dataType\n\tjQuery.ajaxSetup({\n\t\taccepts: {\n\t\t\tscript: \"text/javascript, application/javascript, \" + \"application/ecmascript, application/x-ecmascript\"\n\t\t},\n\t\tcontents: {\n\t\t\tscript: /\\b(?:java|ecma)script\\b/\n\t\t},\n\t\tconverters: {\n\t\t\t\"text script\": function textScript(text) {\n\t\t\t\tjQuery.globalEval(text);\n\t\t\t\treturn text;\n\t\t\t}\n\t\t}\n\t});\n\n\t// Handle cache's special case and crossDomain\n\tjQuery.ajaxPrefilter(\"script\", function (s) {\n\t\tif (s.cache === undefined) {\n\t\t\ts.cache = false;\n\t\t}\n\t\tif (s.crossDomain) {\n\t\t\ts.type = \"GET\";\n\t\t}\n\t});\n\n\t// Bind script tag hack transport\n\tjQuery.ajaxTransport(\"script\", function (s) {\n\n\t\t// This transport only deals with cross domain requests\n\t\tif (s.crossDomain) {\n\t\t\tvar script, _callback2;\n\t\t\treturn {\n\t\t\t\tsend: function send(_, complete) {\n\t\t\t\t\tscript = jQuery(\"<script>\").prop({\n\t\t\t\t\t\tcharset: s.scriptCharset,\n\t\t\t\t\t\tsrc: s.url\n\t\t\t\t\t}).on(\"load error\", _callback2 = function callback(evt) {\n\t\t\t\t\t\tscript.remove();\n\t\t\t\t\t\t_callback2 = null;\n\t\t\t\t\t\tif (evt) {\n\t\t\t\t\t\t\tcomplete(evt.type === \"error\" ? 404 : 200, evt.type);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\t// Use native DOM manipulation to avoid our domManip AJAX trickery\n\t\t\t\t\tdocument.head.appendChild(script[0]);\n\t\t\t\t},\n\t\t\t\tabort: function abort() {\n\t\t\t\t\tif (_callback2) {\n\t\t\t\t\t\t_callback2();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t});\n\n\tvar oldCallbacks = [],\n\t    rjsonp = /(=)\\?(?=&|$)|\\?\\?/;\n\n\t// Default jsonp settings\n\tjQuery.ajaxSetup({\n\t\tjsonp: \"callback\",\n\t\tjsonpCallback: function jsonpCallback() {\n\t\t\tvar callback = oldCallbacks.pop() || jQuery.expando + \"_\" + nonce++;\n\t\t\tthis[callback] = true;\n\t\t\treturn callback;\n\t\t}\n\t});\n\n\t// Detect, normalize options and install callbacks for jsonp requests\n\tjQuery.ajaxPrefilter(\"json jsonp\", function (s, originalSettings, jqXHR) {\n\n\t\tvar callbackName,\n\t\t    overwritten,\n\t\t    responseContainer,\n\t\t    jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? \"url\" : typeof s.data === \"string\" && (s.contentType || \"\").indexOf(\"application/x-www-form-urlencoded\") === 0 && rjsonp.test(s.data) && \"data\");\n\n\t\t// Handle iff the expected data type is \"jsonp\" or we have a parameter to set\n\t\tif (jsonProp || s.dataTypes[0] === \"jsonp\") {\n\n\t\t\t// Get callback name, remembering preexisting value associated with it\n\t\t\tcallbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;\n\n\t\t\t// Insert callback into url or form data\n\t\t\tif (jsonProp) {\n\t\t\t\ts[jsonProp] = s[jsonProp].replace(rjsonp, \"$1\" + callbackName);\n\t\t\t} else if (s.jsonp !== false) {\n\t\t\t\ts.url += (rquery.test(s.url) ? \"&\" : \"?\") + s.jsonp + \"=\" + callbackName;\n\t\t\t}\n\n\t\t\t// Use data converter to retrieve json after script execution\n\t\t\ts.converters[\"script json\"] = function () {\n\t\t\t\tif (!responseContainer) {\n\t\t\t\t\tjQuery.error(callbackName + \" was not called\");\n\t\t\t\t}\n\t\t\t\treturn responseContainer[0];\n\t\t\t};\n\n\t\t\t// Force json dataType\n\t\t\ts.dataTypes[0] = \"json\";\n\n\t\t\t// Install callback\n\t\t\toverwritten = window[callbackName];\n\t\t\twindow[callbackName] = function () {\n\t\t\t\tresponseContainer = arguments;\n\t\t\t};\n\n\t\t\t// Clean-up function (fires after converters)\n\t\t\tjqXHR.always(function () {\n\n\t\t\t\t// If previous value didn't exist - remove it\n\t\t\t\tif (overwritten === undefined) {\n\t\t\t\t\tjQuery(window).removeProp(callbackName);\n\n\t\t\t\t\t// Otherwise restore preexisting value\n\t\t\t\t} else {\n\t\t\t\t\twindow[callbackName] = overwritten;\n\t\t\t\t}\n\n\t\t\t\t// Save back as free\n\t\t\t\tif (s[callbackName]) {\n\n\t\t\t\t\t// Make sure that re-using the options doesn't screw things around\n\t\t\t\t\ts.jsonpCallback = originalSettings.jsonpCallback;\n\n\t\t\t\t\t// Save the callback name for future use\n\t\t\t\t\toldCallbacks.push(callbackName);\n\t\t\t\t}\n\n\t\t\t\t// Call if it was a function and we have a response\n\t\t\t\tif (responseContainer && jQuery.isFunction(overwritten)) {\n\t\t\t\t\toverwritten(responseContainer[0]);\n\t\t\t\t}\n\n\t\t\t\tresponseContainer = overwritten = undefined;\n\t\t\t});\n\n\t\t\t// Delegate to script\n\t\t\treturn \"script\";\n\t\t}\n\t});\n\n\t// Support: Safari 8 only\n\t// In Safari 8 documents created via document.implementation.createHTMLDocument\n\t// collapse sibling forms: the second one becomes a child of the first one.\n\t// Because of that, this security measure has to be disabled in Safari 8.\n\t// https://bugs.webkit.org/show_bug.cgi?id=137337\n\tsupport.createHTMLDocument = function () {\n\t\tvar body = document.implementation.createHTMLDocument(\"\").body;\n\t\tbody.innerHTML = \"<form></form><form></form>\";\n\t\treturn body.childNodes.length === 2;\n\t}();\n\n\t// Argument \"data\" should be string of html\n\t// context (optional): If specified, the fragment will be created in this context,\n\t// defaults to document\n\t// keepScripts (optional): If true, will include scripts passed in the html string\n\tjQuery.parseHTML = function (data, context, keepScripts) {\n\t\tif (typeof data !== \"string\") {\n\t\t\treturn [];\n\t\t}\n\t\tif (typeof context === \"boolean\") {\n\t\t\tkeepScripts = context;\n\t\t\tcontext = false;\n\t\t}\n\n\t\tvar base, parsed, scripts;\n\n\t\tif (!context) {\n\n\t\t\t// Stop scripts or inline event handlers from being executed immediately\n\t\t\t// by using document.implementation\n\t\t\tif (support.createHTMLDocument) {\n\t\t\t\tcontext = document.implementation.createHTMLDocument(\"\");\n\n\t\t\t\t// Set the base href for the created document\n\t\t\t\t// so any parsed elements with URLs\n\t\t\t\t// are based on the document's URL (gh-2965)\n\t\t\t\tbase = context.createElement(\"base\");\n\t\t\t\tbase.href = document.location.href;\n\t\t\t\tcontext.head.appendChild(base);\n\t\t\t} else {\n\t\t\t\tcontext = document;\n\t\t\t}\n\t\t}\n\n\t\tparsed = rsingleTag.exec(data);\n\t\tscripts = !keepScripts && [];\n\n\t\t// Single tag\n\t\tif (parsed) {\n\t\t\treturn [context.createElement(parsed[1])];\n\t\t}\n\n\t\tparsed = buildFragment([data], context, scripts);\n\n\t\tif (scripts && scripts.length) {\n\t\t\tjQuery(scripts).remove();\n\t\t}\n\n\t\treturn jQuery.merge([], parsed.childNodes);\n\t};\n\n\t/**\n  * Load a url into a page\n  */\n\tjQuery.fn.load = function (url, params, callback) {\n\t\tvar selector,\n\t\t    type,\n\t\t    response,\n\t\t    self = this,\n\t\t    off = url.indexOf(\" \");\n\n\t\tif (off > -1) {\n\t\t\tselector = jQuery.trim(url.slice(off));\n\t\t\turl = url.slice(0, off);\n\t\t}\n\n\t\t// If it's a function\n\t\tif (jQuery.isFunction(params)) {\n\n\t\t\t// We assume that it's the callback\n\t\t\tcallback = params;\n\t\t\tparams = undefined;\n\n\t\t\t// Otherwise, build a param string\n\t\t} else if (params && (typeof params === \"undefined\" ? \"undefined\" : _typeof(params)) === \"object\") {\n\t\t\ttype = \"POST\";\n\t\t}\n\n\t\t// If we have elements to modify, make the request\n\t\tif (self.length > 0) {\n\t\t\tjQuery.ajax({\n\t\t\t\turl: url,\n\n\t\t\t\t// If \"type\" variable is undefined, then \"GET\" method will be used.\n\t\t\t\t// Make value of this field explicit since\n\t\t\t\t// user can override it through ajaxSetup method\n\t\t\t\ttype: type || \"GET\",\n\t\t\t\tdataType: \"html\",\n\t\t\t\tdata: params\n\t\t\t}).done(function (responseText) {\n\n\t\t\t\t// Save response for use in complete callback\n\t\t\t\tresponse = arguments;\n\n\t\t\t\tself.html(selector ?\n\n\t\t\t\t// If a selector was specified, locate the right elements in a dummy div\n\t\t\t\t// Exclude scripts to avoid IE 'Permission Denied' errors\n\t\t\t\tjQuery(\"<div>\").append(jQuery.parseHTML(responseText)).find(selector) :\n\n\t\t\t\t// Otherwise use the full result\n\t\t\t\tresponseText);\n\n\t\t\t\t// If the request succeeds, this function gets \"data\", \"status\", \"jqXHR\"\n\t\t\t\t// but they are ignored because response was set above.\n\t\t\t\t// If it fails, this function gets \"jqXHR\", \"status\", \"error\"\n\t\t\t}).always(callback && function (jqXHR, status) {\n\t\t\t\tself.each(function () {\n\t\t\t\t\tcallback.apply(this, response || [jqXHR.responseText, status, jqXHR]);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\treturn this;\n\t};\n\n\t// Attach a bunch of functions for handling common AJAX events\n\tjQuery.each([\"ajaxStart\", \"ajaxStop\", \"ajaxComplete\", \"ajaxError\", \"ajaxSuccess\", \"ajaxSend\"], function (i, type) {\n\t\tjQuery.fn[type] = function (fn) {\n\t\t\treturn this.on(type, fn);\n\t\t};\n\t});\n\n\tjQuery.expr.pseudos.animated = function (elem) {\n\t\treturn jQuery.grep(jQuery.timers, function (fn) {\n\t\t\treturn elem === fn.elem;\n\t\t}).length;\n\t};\n\n\t/**\n  * Gets a window from an element\n  */\n\tfunction getWindow(elem) {\n\t\treturn jQuery.isWindow(elem) ? elem : elem.nodeType === 9 && elem.defaultView;\n\t}\n\n\tjQuery.offset = {\n\t\tsetOffset: function setOffset(elem, options, i) {\n\t\t\tvar curPosition,\n\t\t\t    curLeft,\n\t\t\t    curCSSTop,\n\t\t\t    curTop,\n\t\t\t    curOffset,\n\t\t\t    curCSSLeft,\n\t\t\t    calculatePosition,\n\t\t\t    position = jQuery.css(elem, \"position\"),\n\t\t\t    curElem = jQuery(elem),\n\t\t\t    props = {};\n\n\t\t\t// Set position first, in-case top/left are set even on static elem\n\t\t\tif (position === \"static\") {\n\t\t\t\telem.style.position = \"relative\";\n\t\t\t}\n\n\t\t\tcurOffset = curElem.offset();\n\t\t\tcurCSSTop = jQuery.css(elem, \"top\");\n\t\t\tcurCSSLeft = jQuery.css(elem, \"left\");\n\t\t\tcalculatePosition = (position === \"absolute\" || position === \"fixed\") && (curCSSTop + curCSSLeft).indexOf(\"auto\") > -1;\n\n\t\t\t// Need to be able to calculate position if either\n\t\t\t// top or left is auto and position is either absolute or fixed\n\t\t\tif (calculatePosition) {\n\t\t\t\tcurPosition = curElem.position();\n\t\t\t\tcurTop = curPosition.top;\n\t\t\t\tcurLeft = curPosition.left;\n\t\t\t} else {\n\t\t\t\tcurTop = parseFloat(curCSSTop) || 0;\n\t\t\t\tcurLeft = parseFloat(curCSSLeft) || 0;\n\t\t\t}\n\n\t\t\tif (jQuery.isFunction(options)) {\n\n\t\t\t\t// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)\n\t\t\t\toptions = options.call(elem, i, jQuery.extend({}, curOffset));\n\t\t\t}\n\n\t\t\tif (options.top != null) {\n\t\t\t\tprops.top = options.top - curOffset.top + curTop;\n\t\t\t}\n\t\t\tif (options.left != null) {\n\t\t\t\tprops.left = options.left - curOffset.left + curLeft;\n\t\t\t}\n\n\t\t\tif (\"using\" in options) {\n\t\t\t\toptions.using.call(elem, props);\n\t\t\t} else {\n\t\t\t\tcurElem.css(props);\n\t\t\t}\n\t\t}\n\t};\n\n\tjQuery.fn.extend({\n\t\toffset: function offset(options) {\n\n\t\t\t// Preserve chaining for setter\n\t\t\tif (arguments.length) {\n\t\t\t\treturn options === undefined ? this : this.each(function (i) {\n\t\t\t\t\tjQuery.offset.setOffset(this, options, i);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tvar docElem,\n\t\t\t    win,\n\t\t\t    rect,\n\t\t\t    doc,\n\t\t\t    elem = this[0];\n\n\t\t\tif (!elem) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Support: IE <=11 only\n\t\t\t// Running getBoundingClientRect on a\n\t\t\t// disconnected node in IE throws an error\n\t\t\tif (!elem.getClientRects().length) {\n\t\t\t\treturn { top: 0, left: 0 };\n\t\t\t}\n\n\t\t\trect = elem.getBoundingClientRect();\n\n\t\t\t// Make sure element is not hidden (display: none)\n\t\t\tif (rect.width || rect.height) {\n\t\t\t\tdoc = elem.ownerDocument;\n\t\t\t\twin = getWindow(doc);\n\t\t\t\tdocElem = doc.documentElement;\n\n\t\t\t\treturn {\n\t\t\t\t\ttop: rect.top + win.pageYOffset - docElem.clientTop,\n\t\t\t\t\tleft: rect.left + win.pageXOffset - docElem.clientLeft\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// Return zeros for disconnected and hidden elements (gh-2310)\n\t\t\treturn rect;\n\t\t},\n\n\t\tposition: function position() {\n\t\t\tif (!this[0]) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar offsetParent,\n\t\t\t    offset,\n\t\t\t    elem = this[0],\n\t\t\t    parentOffset = { top: 0, left: 0 };\n\n\t\t\t// Fixed elements are offset from window (parentOffset = {top:0, left: 0},\n\t\t\t// because it is its only offset parent\n\t\t\tif (jQuery.css(elem, \"position\") === \"fixed\") {\n\n\t\t\t\t// Assume getBoundingClientRect is there when computed position is fixed\n\t\t\t\toffset = elem.getBoundingClientRect();\n\t\t\t} else {\n\n\t\t\t\t// Get *real* offsetParent\n\t\t\t\toffsetParent = this.offsetParent();\n\n\t\t\t\t// Get correct offsets\n\t\t\t\toffset = this.offset();\n\t\t\t\tif (!jQuery.nodeName(offsetParent[0], \"html\")) {\n\t\t\t\t\tparentOffset = offsetParent.offset();\n\t\t\t\t}\n\n\t\t\t\t// Add offsetParent borders\n\t\t\t\tparentOffset = {\n\t\t\t\t\ttop: parentOffset.top + jQuery.css(offsetParent[0], \"borderTopWidth\", true),\n\t\t\t\t\tleft: parentOffset.left + jQuery.css(offsetParent[0], \"borderLeftWidth\", true)\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// Subtract parent offsets and element margins\n\t\t\treturn {\n\t\t\t\ttop: offset.top - parentOffset.top - jQuery.css(elem, \"marginTop\", true),\n\t\t\t\tleft: offset.left - parentOffset.left - jQuery.css(elem, \"marginLeft\", true)\n\t\t\t};\n\t\t},\n\n\t\t// This method will return documentElement in the following cases:\n\t\t// 1) For the element inside the iframe without offsetParent, this method will return\n\t\t//    documentElement of the parent window\n\t\t// 2) For the hidden or detached element\n\t\t// 3) For body or html element, i.e. in case of the html node - it will return itself\n\t\t//\n\t\t// but those exceptions were never presented as a real life use-cases\n\t\t// and might be considered as more preferable results.\n\t\t//\n\t\t// This logic, however, is not guaranteed and can change at any point in the future\n\t\toffsetParent: function offsetParent() {\n\t\t\treturn this.map(function () {\n\t\t\t\tvar offsetParent = this.offsetParent;\n\n\t\t\t\twhile (offsetParent && jQuery.css(offsetParent, \"position\") === \"static\") {\n\t\t\t\t\toffsetParent = offsetParent.offsetParent;\n\t\t\t\t}\n\n\t\t\t\treturn offsetParent || documentElement;\n\t\t\t});\n\t\t}\n\t});\n\n\t// Create scrollLeft and scrollTop methods\n\tjQuery.each({ scrollLeft: \"pageXOffset\", scrollTop: \"pageYOffset\" }, function (method, prop) {\n\t\tvar top = \"pageYOffset\" === prop;\n\n\t\tjQuery.fn[method] = function (val) {\n\t\t\treturn access(this, function (elem, method, val) {\n\t\t\t\tvar win = getWindow(elem);\n\n\t\t\t\tif (val === undefined) {\n\t\t\t\t\treturn win ? win[prop] : elem[method];\n\t\t\t\t}\n\n\t\t\t\tif (win) {\n\t\t\t\t\twin.scrollTo(!top ? val : win.pageXOffset, top ? val : win.pageYOffset);\n\t\t\t\t} else {\n\t\t\t\t\telem[method] = val;\n\t\t\t\t}\n\t\t\t}, method, val, arguments.length);\n\t\t};\n\t});\n\n\t// Support: Safari <=7 - 9.1, Chrome <=37 - 49\n\t// Add the top/left cssHooks using jQuery.fn.position\n\t// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\n\t// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347\n\t// getComputedStyle returns percent when specified for top/left/bottom/right;\n\t// rather than make the css module depend on the offset module, just check for it here\n\tjQuery.each([\"top\", \"left\"], function (i, prop) {\n\t\tjQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) {\n\t\t\tif (computed) {\n\t\t\t\tcomputed = curCSS(elem, prop);\n\n\t\t\t\t// If curCSS returns percentage, fallback to offset\n\t\t\t\treturn rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + \"px\" : computed;\n\t\t\t}\n\t\t});\n\t});\n\n\t// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\n\tjQuery.each({ Height: \"height\", Width: \"width\" }, function (name, type) {\n\t\tjQuery.each({ padding: \"inner\" + name, content: type, \"\": \"outer\" + name }, function (defaultExtra, funcName) {\n\n\t\t\t// Margin is only for outerHeight, outerWidth\n\t\t\tjQuery.fn[funcName] = function (margin, value) {\n\t\t\t\tvar chainable = arguments.length && (defaultExtra || typeof margin !== \"boolean\"),\n\t\t\t\t    extra = defaultExtra || (margin === true || value === true ? \"margin\" : \"border\");\n\n\t\t\t\treturn access(this, function (elem, type, value) {\n\t\t\t\t\tvar doc;\n\n\t\t\t\t\tif (jQuery.isWindow(elem)) {\n\n\t\t\t\t\t\t// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)\n\t\t\t\t\t\treturn funcName.indexOf(\"outer\") === 0 ? elem[\"inner\" + name] : elem.document.documentElement[\"client\" + name];\n\t\t\t\t\t}\n\n\t\t\t\t\t// Get document width or height\n\t\t\t\t\tif (elem.nodeType === 9) {\n\t\t\t\t\t\tdoc = elem.documentElement;\n\n\t\t\t\t\t\t// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],\n\t\t\t\t\t\t// whichever is greatest\n\t\t\t\t\t\treturn Math.max(elem.body[\"scroll\" + name], doc[\"scroll\" + name], elem.body[\"offset\" + name], doc[\"offset\" + name], doc[\"client\" + name]);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn value === undefined ?\n\n\t\t\t\t\t// Get width or height on the element, requesting but not forcing parseFloat\n\t\t\t\t\tjQuery.css(elem, type, extra) :\n\n\t\t\t\t\t// Set width or height on the element\n\t\t\t\t\tjQuery.style(elem, type, value, extra);\n\t\t\t\t}, type, chainable ? margin : undefined, chainable);\n\t\t\t};\n\t\t});\n\t});\n\n\tjQuery.fn.extend({\n\n\t\tbind: function bind(types, data, fn) {\n\t\t\treturn this.on(types, null, data, fn);\n\t\t},\n\t\tunbind: function unbind(types, fn) {\n\t\t\treturn this.off(types, null, fn);\n\t\t},\n\n\t\tdelegate: function delegate(selector, types, data, fn) {\n\t\t\treturn this.on(types, selector, data, fn);\n\t\t},\n\t\tundelegate: function undelegate(selector, types, fn) {\n\n\t\t\t// ( namespace ) or ( selector, types [, fn] )\n\t\t\treturn arguments.length === 1 ? this.off(selector, \"**\") : this.off(types, selector || \"**\", fn);\n\t\t}\n\t});\n\n\tjQuery.parseJSON = JSON.parse;\n\n\t// Register as a named AMD module, since jQuery can be concatenated with other\n\t// files that may use define, but not via a proper concatenation script that\n\t// understands anonymous AMD modules. A named AMD is safest and most robust\n\t// way to register. Lowercase jquery is used because AMD module names are\n\t// derived from file names, and jQuery is normally delivered in a lowercase\n\t// file name. Do this after creating the global so that if an AMD module wants\n\t// to call noConflict to hide this version of jQuery, it will work.\n\n\t// Note that for maximum portability, libraries that are not jQuery should\n\t// declare themselves as anonymous modules, and avoid setting a global if an\n\t// AMD loader is present. jQuery is a special case. For more information, see\n\t// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon\n\n\tif (typeof define === \"function\" && define.amd) {\n\t\tdefine(\"jquery\", [], function () {\n\t\t\treturn jQuery;\n\t\t});\n\t}\n\n\tvar\n\n\t// Map over jQuery in case of overwrite\n\t_jQuery = window.jQuery,\n\n\n\t// Map over the $ in case of overwrite\n\t_$ = window.$;\n\n\tjQuery.noConflict = function (deep) {\n\t\tif (window.$ === jQuery) {\n\t\t\twindow.$ = _$;\n\t\t}\n\n\t\tif (deep && window.jQuery === jQuery) {\n\t\t\twindow.jQuery = _jQuery;\n\t\t}\n\n\t\treturn jQuery;\n\t};\n\n\t// Expose jQuery and $ identifiers, even in AMD\n\t// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)\n\t// and CommonJS for browser emulators (#13566)\n\tif (!noGlobal) {\n\t\twindow.jQuery = window.$ = jQuery;\n\t}\n\n\treturn jQuery;\n});\n//# sourceMappingURL=data:application/json;base64,","deps":{}},"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\node_modules\\urijs\\src\\IPv6.js":{"file":"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\node_modules\\urijs\\src\\IPv6.js","source":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\n/*!\n * URI.js - Mutating URLs\n * IPv6 Support\n *\n * Version: 1.18.1\n *\n * Author: Rodney Rehm\n * Web: http://medialize.github.io/URI.js/\n *\n * Licensed under\n *   MIT License http://www.opensource.org/licenses/mit-license\n *\n */\n\n(function (root, factory) {\n  'use strict';\n  // https://github.com/umdjs/umd/blob/master/returnExports.js\n\n  if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {\n    // Node\n    module.exports = factory();\n  } else if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(factory);\n  } else {\n    // Browser globals (root is window)\n    root.IPv6 = factory(root);\n  }\n})(undefined, function (root) {\n  'use strict';\n\n  /*\n  var _in = \"fe80:0000:0000:0000:0204:61ff:fe9d:f156\";\n  var _out = IPv6.best(_in);\n  var _expected = \"fe80::204:61ff:fe9d:f156\";\n   console.log(_in, _out, _expected, _out === _expected);\n  */\n\n  // save current IPv6 variable, if any\n\n  var _IPv6 = root && root.IPv6;\n\n  function bestPresentation(address) {\n    // based on:\n    // Javascript to test an IPv6 address for proper format, and to\n    // present the \"best text representation\" according to IETF Draft RFC at\n    // http://tools.ietf.org/html/draft-ietf-6man-text-addr-representation-04\n    // 8 Feb 2010 Rich Brown, Dartware, LLC\n    // Please feel free to use this code as long as you provide a link to\n    // http://www.intermapper.com\n    // http://intermapper.com/support/tools/IPV6-Validator.aspx\n    // http://download.dartware.com/thirdparty/ipv6validator.js\n\n    var _address = address.toLowerCase();\n    var segments = _address.split(':');\n    var length = segments.length;\n    var total = 8;\n\n    // trim colons (:: or ::a:b:c… or …a:b:c::)\n    if (segments[0] === '' && segments[1] === '' && segments[2] === '') {\n      // must have been ::\n      // remove first two items\n      segments.shift();\n      segments.shift();\n    } else if (segments[0] === '' && segments[1] === '') {\n      // must have been ::xxxx\n      // remove the first item\n      segments.shift();\n    } else if (segments[length - 1] === '' && segments[length - 2] === '') {\n      // must have been xxxx::\n      segments.pop();\n    }\n\n    length = segments.length;\n\n    // adjust total segments for IPv4 trailer\n    if (segments[length - 1].indexOf('.') !== -1) {\n      // found a \".\" which means IPv4\n      total = 7;\n    }\n\n    // fill empty segments them with \"0000\"\n    var pos;\n    for (pos = 0; pos < length; pos++) {\n      if (segments[pos] === '') {\n        break;\n      }\n    }\n\n    if (pos < total) {\n      segments.splice(pos, 1, '0000');\n      while (segments.length < total) {\n        segments.splice(pos, 0, '0000');\n      }\n    }\n\n    // strip leading zeros\n    var _segments;\n    for (var i = 0; i < total; i++) {\n      _segments = segments[i].split('');\n      for (var j = 0; j < 3; j++) {\n        if (_segments[0] === '0' && _segments.length > 1) {\n          _segments.splice(0, 1);\n        } else {\n          break;\n        }\n      }\n\n      segments[i] = _segments.join('');\n    }\n\n    // find longest sequence of zeroes and coalesce them into one segment\n    var best = -1;\n    var _best = 0;\n    var _current = 0;\n    var current = -1;\n    var inzeroes = false;\n    // i; already declared\n\n    for (i = 0; i < total; i++) {\n      if (inzeroes) {\n        if (segments[i] === '0') {\n          _current += 1;\n        } else {\n          inzeroes = false;\n          if (_current > _best) {\n            best = current;\n            _best = _current;\n          }\n        }\n      } else {\n        if (segments[i] === '0') {\n          inzeroes = true;\n          current = i;\n          _current = 1;\n        }\n      }\n    }\n\n    if (_current > _best) {\n      best = current;\n      _best = _current;\n    }\n\n    if (_best > 1) {\n      segments.splice(best, _best, '');\n    }\n\n    length = segments.length;\n\n    // assemble remaining segments\n    var result = '';\n    if (segments[0] === '') {\n      result = ':';\n    }\n\n    for (i = 0; i < length; i++) {\n      result += segments[i];\n      if (i === length - 1) {\n        break;\n      }\n\n      result += ':';\n    }\n\n    if (segments[length - 1] === '') {\n      result += ':';\n    }\n\n    return result;\n  }\n\n  function noConflict() {\n    /*jshint validthis: true */\n    if (root.IPv6 === this) {\n      root.IPv6 = _IPv6;\n    }\n\n    return this;\n  }\n\n  return {\n    best: bestPresentation,\n    noConflict: noConflict\n  };\n});\n//# sourceMappingURL=data:application/json;base64,","deps":{}},"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\node_modules\\urijs\\src\\punycode.js":{"file":"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\node_modules\\urijs\\src\\punycode.js","source":"(function (global){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\n/*! https://mths.be/punycode v1.4.0 by @mathias */\n;(function (root) {\n\n\t/** Detect free variables */\n\tvar freeExports = (typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) == 'object' && exports && !exports.nodeType && exports;\n\tvar freeModule = (typeof module === 'undefined' ? 'undefined' : _typeof(module)) == 'object' && module && !module.nodeType && module;\n\tvar freeGlobal = (typeof global === 'undefined' ? 'undefined' : _typeof(global)) == 'object' && global;\n\tif (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal) {\n\t\troot = freeGlobal;\n\t}\n\n\t/**\n  * The `punycode` object.\n  * @name punycode\n  * @type Object\n  */\n\tvar punycode,\n\n\n\t/** Highest positive signed 32-bit float value */\n\tmaxInt = 2147483647,\n\t    // aka. 0x7FFFFFFF or 2^31-1\n\n\t/** Bootstring parameters */\n\tbase = 36,\n\t    tMin = 1,\n\t    tMax = 26,\n\t    skew = 38,\n\t    damp = 700,\n\t    initialBias = 72,\n\t    initialN = 128,\n\t    // 0x80\n\tdelimiter = '-',\n\t    // '\\x2D'\n\n\t/** Regular expressions */\n\tregexPunycode = /^xn--/,\n\t    regexNonASCII = /[^\\x20-\\x7E]/,\n\t    // unprintable ASCII chars + non-ASCII chars\n\tregexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g,\n\t    // RFC 3490 separators\n\n\t/** Error messages */\n\terrors = {\n\t\t'overflow': 'Overflow: input needs wider integers to process',\n\t\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t\t'invalid-input': 'Invalid input'\n\t},\n\n\n\t/** Convenience shortcuts */\n\tbaseMinusTMin = base - tMin,\n\t    floor = Math.floor,\n\t    stringFromCharCode = String.fromCharCode,\n\n\n\t/** Temporary variable */\n\tkey;\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/**\n  * A generic error utility function.\n  * @private\n  * @param {String} type The error type.\n  * @returns {Error} Throws a `RangeError` with the applicable error message.\n  */\n\tfunction error(type) {\n\t\tthrow new RangeError(errors[type]);\n\t}\n\n\t/**\n  * A generic `Array#map` utility function.\n  * @private\n  * @param {Array} array The array to iterate over.\n  * @param {Function} callback The function that gets called for every array\n  * item.\n  * @returns {Array} A new array of values returned by the callback function.\n  */\n\tfunction map(array, fn) {\n\t\tvar length = array.length;\n\t\tvar result = [];\n\t\twhile (length--) {\n\t\t\tresult[length] = fn(array[length]);\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n  * A simple `Array#map`-like wrapper to work with domain name strings or email\n  * addresses.\n  * @private\n  * @param {String} domain The domain name or email address.\n  * @param {Function} callback The function that gets called for every\n  * character.\n  * @returns {Array} A new string of characters returned by the callback\n  * function.\n  */\n\tfunction mapDomain(string, fn) {\n\t\tvar parts = string.split('@');\n\t\tvar result = '';\n\t\tif (parts.length > 1) {\n\t\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t\t// the local part (i.e. everything up to `@`) intact.\n\t\t\tresult = parts[0] + '@';\n\t\t\tstring = parts[1];\n\t\t}\n\t\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\t\tstring = string.replace(regexSeparators, '\\x2E');\n\t\tvar labels = string.split('.');\n\t\tvar encoded = map(labels, fn).join('.');\n\t\treturn result + encoded;\n\t}\n\n\t/**\n  * Creates an array containing the numeric code points of each Unicode\n  * character in the string. While JavaScript uses UCS-2 internally,\n  * this function will convert a pair of surrogate halves (each of which\n  * UCS-2 exposes as separate characters) into a single code point,\n  * matching UTF-16.\n  * @see `punycode.ucs2.encode`\n  * @see <https://mathiasbynens.be/notes/javascript-encoding>\n  * @memberOf punycode.ucs2\n  * @name decode\n  * @param {String} string The Unicode input string (UCS-2).\n  * @returns {Array} The new array of code points.\n  */\n\tfunction ucs2decode(string) {\n\t\tvar output = [],\n\t\t    counter = 0,\n\t\t    length = string.length,\n\t\t    value,\n\t\t    extra;\n\t\twhile (counter < length) {\n\t\t\tvalue = string.charCodeAt(counter++);\n\t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t\t// high surrogate, and there is a next character\n\t\t\t\textra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) {\n\t\t\t\t\t// low surrogate\n\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t\t} else {\n\t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\n\t\t\t\t\t// code unit is the high surrogate of a surrogate pair\n\t\t\t\t\toutput.push(value);\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.push(value);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t/**\n  * Creates a string based on an array of numeric code points.\n  * @see `punycode.ucs2.decode`\n  * @memberOf punycode.ucs2\n  * @name encode\n  * @param {Array} codePoints The array of numeric code points.\n  * @returns {String} The new Unicode string (UCS-2).\n  */\n\tfunction ucs2encode(array) {\n\t\treturn map(array, function (value) {\n\t\t\tvar output = '';\n\t\t\tif (value > 0xFFFF) {\n\t\t\t\tvalue -= 0x10000;\n\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n\t\t\t\tvalue = 0xDC00 | value & 0x3FF;\n\t\t\t}\n\t\t\toutput += stringFromCharCode(value);\n\t\t\treturn output;\n\t\t}).join('');\n\t}\n\n\t/**\n  * Converts a basic code point into a digit/integer.\n  * @see `digitToBasic()`\n  * @private\n  * @param {Number} codePoint The basic numeric code point value.\n  * @returns {Number} The numeric value of a basic code point (for use in\n  * representing integers) in the range `0` to `base - 1`, or `base` if\n  * the code point does not represent a value.\n  */\n\tfunction basicToDigit(codePoint) {\n\t\tif (codePoint - 48 < 10) {\n\t\t\treturn codePoint - 22;\n\t\t}\n\t\tif (codePoint - 65 < 26) {\n\t\t\treturn codePoint - 65;\n\t\t}\n\t\tif (codePoint - 97 < 26) {\n\t\t\treturn codePoint - 97;\n\t\t}\n\t\treturn base;\n\t}\n\n\t/**\n  * Converts a digit/integer into a basic code point.\n  * @see `basicToDigit()`\n  * @private\n  * @param {Number} digit The numeric value of a basic code point.\n  * @returns {Number} The basic code point whose value (when used for\n  * representing integers) is `digit`, which needs to be in the range\n  * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n  * used; else, the lowercase form is used. The behavior is undefined\n  * if `flag` is non-zero and `digit` has no uppercase form.\n  */\n\tfunction digitToBasic(digit, flag) {\n\t\t//  0..25 map to ASCII a..z or A..Z\n\t\t// 26..35 map to ASCII 0..9\n\t\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n\t}\n\n\t/**\n  * Bias adaptation function as per section 3.4 of RFC 3492.\n  * https://tools.ietf.org/html/rfc3492#section-3.4\n  * @private\n  */\n\tfunction adapt(delta, numPoints, firstTime) {\n\t\tvar k = 0;\n\t\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\t\tdelta += floor(delta / numPoints);\n\t\tfor (; /* no initialization */delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\t\tdelta = floor(delta / baseMinusTMin);\n\t\t}\n\t\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n\t}\n\n\t/**\n  * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n  * symbols.\n  * @memberOf punycode\n  * @param {String} input The Punycode string of ASCII-only symbols.\n  * @returns {String} The resulting string of Unicode symbols.\n  */\n\tfunction decode(input) {\n\t\t// Don't use UCS-2\n\t\tvar output = [],\n\t\t    inputLength = input.length,\n\t\t    out,\n\t\t    i = 0,\n\t\t    n = initialN,\n\t\t    bias = initialBias,\n\t\t    basic,\n\t\t    j,\n\t\t    index,\n\t\t    oldi,\n\t\t    w,\n\t\t    k,\n\t\t    digit,\n\t\t    t,\n\n\t\t/** Cached calculation results */\n\t\tbaseMinusT;\n\n\t\t// Handle the basic code points: let `basic` be the number of input code\n\t\t// points before the last delimiter, or `0` if there is none, then copy\n\t\t// the first basic code points to the output.\n\n\t\tbasic = input.lastIndexOf(delimiter);\n\t\tif (basic < 0) {\n\t\t\tbasic = 0;\n\t\t}\n\n\t\tfor (j = 0; j < basic; ++j) {\n\t\t\t// if it's not a basic code point\n\t\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\t\terror('not-basic');\n\t\t\t}\n\t\t\toutput.push(input.charCodeAt(j));\n\t\t}\n\n\t\t// Main decoding loop: start just after the last delimiter if any basic code\n\t\t// points were copied; start at the beginning otherwise.\n\n\t\tfor (index = basic > 0 ? basic + 1 : 0; index < inputLength;) /* no final expression */{\n\n\t\t\t// `index` is the index of the next character to be consumed.\n\t\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t\t// which gets added to `i`. The overflow checking is easier\n\t\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t\t// value at the end to obtain `delta`.\n\t\t\tfor (oldi = i, w = 1, k = base;; /* no condition */k += base) {\n\n\t\t\t\tif (index >= inputLength) {\n\t\t\t\t\terror('invalid-input');\n\t\t\t\t}\n\n\t\t\t\tdigit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\ti += digit * w;\n\t\t\t\tt = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;\n\n\t\t\t\tif (digit < t) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tbaseMinusT = base - t;\n\t\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tw *= baseMinusT;\n\t\t\t}\n\n\t\t\tout = output.length + 1;\n\t\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t\t// incrementing `n` each time, so we'll fix that now:\n\t\t\tif (floor(i / out) > maxInt - n) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tn += floor(i / out);\n\t\t\ti %= out;\n\n\t\t\t// Insert `n` at position `i` of the output\n\t\t\toutput.splice(i++, 0, n);\n\t\t}\n\n\t\treturn ucs2encode(output);\n\t}\n\n\t/**\n  * Converts a string of Unicode symbols (e.g. a domain name label) to a\n  * Punycode string of ASCII-only symbols.\n  * @memberOf punycode\n  * @param {String} input The string of Unicode symbols.\n  * @returns {String} The resulting Punycode string of ASCII-only symbols.\n  */\n\tfunction encode(input) {\n\t\tvar n,\n\t\t    delta,\n\t\t    handledCPCount,\n\t\t    basicLength,\n\t\t    bias,\n\t\t    j,\n\t\t    m,\n\t\t    q,\n\t\t    k,\n\t\t    t,\n\t\t    currentValue,\n\t\t    output = [],\n\n\t\t/** `inputLength` will hold the number of code points in `input`. */\n\t\tinputLength,\n\n\t\t/** Cached calculation results */\n\t\thandledCPCountPlusOne,\n\t\t    baseMinusT,\n\t\t    qMinusT;\n\n\t\t// Convert the input in UCS-2 to Unicode\n\t\tinput = ucs2decode(input);\n\n\t\t// Cache the length\n\t\tinputLength = input.length;\n\n\t\t// Initialize the state\n\t\tn = initialN;\n\t\tdelta = 0;\n\t\tbias = initialBias;\n\n\t\t// Handle the basic code points\n\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\tcurrentValue = input[j];\n\t\t\tif (currentValue < 0x80) {\n\t\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t\t}\n\t\t}\n\n\t\thandledCPCount = basicLength = output.length;\n\n\t\t// `handledCPCount` is the number of code points that have been handled;\n\t\t// `basicLength` is the number of basic code points.\n\n\t\t// Finish the basic string - if it is not empty - with a delimiter\n\t\tif (basicLength) {\n\t\t\toutput.push(delimiter);\n\t\t}\n\n\t\t// Main encoding loop:\n\t\twhile (handledCPCount < inputLength) {\n\n\t\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t\t// larger one:\n\t\t\tfor (m = maxInt, j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\t\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\t\tm = currentValue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t\t// but guard against overflow\n\t\t\thandledCPCountPlusOne = handledCPCount + 1;\n\t\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\t\tn = m;\n\n\t\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\n\t\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tif (currentValue == n) {\n\t\t\t\t\t// Represent delta as a generalized variable-length integer\n\t\t\t\t\tfor (q = delta, k = base;; /* no condition */k += base) {\n\t\t\t\t\t\tt = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;\n\t\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tqMinusT = q - t;\n\t\t\t\t\t\tbaseMinusT = base - t;\n\t\t\t\t\t\toutput.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));\n\t\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t\t}\n\n\t\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\t\tdelta = 0;\n\t\t\t\t\t++handledCPCount;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t++delta;\n\t\t\t++n;\n\t\t}\n\t\treturn output.join('');\n\t}\n\n\t/**\n  * Converts a Punycode string representing a domain name or an email address\n  * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n  * it doesn't matter if you call it on a string that has already been\n  * converted to Unicode.\n  * @memberOf punycode\n  * @param {String} input The Punycoded domain name or email address to\n  * convert to Unicode.\n  * @returns {String} The Unicode representation of the given Punycode\n  * string.\n  */\n\tfunction toUnicode(input) {\n\t\treturn mapDomain(input, function (string) {\n\t\t\treturn regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;\n\t\t});\n\t}\n\n\t/**\n  * Converts a Unicode string representing a domain name or an email address to\n  * Punycode. Only the non-ASCII parts of the domain name will be converted,\n  * i.e. it doesn't matter if you call it with a domain that's already in\n  * ASCII.\n  * @memberOf punycode\n  * @param {String} input The domain name or email address to convert, as a\n  * Unicode string.\n  * @returns {String} The Punycode representation of the given domain name or\n  * email address.\n  */\n\tfunction toASCII(input) {\n\t\treturn mapDomain(input, function (string) {\n\t\t\treturn regexNonASCII.test(string) ? 'xn--' + encode(string) : string;\n\t\t});\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/** Define the public API */\n\tpunycode = {\n\t\t/**\n   * A string representing the current Punycode.js version number.\n   * @memberOf punycode\n   * @type String\n   */\n\t\t'version': '1.3.2',\n\t\t/**\n   * An object of methods to convert from JavaScript's internal character\n   * representation (UCS-2) to Unicode code points, and back.\n   * @see <https://mathiasbynens.be/notes/javascript-encoding>\n   * @memberOf punycode\n   * @type Object\n   */\n\t\t'ucs2': {\n\t\t\t'decode': ucs2decode,\n\t\t\t'encode': ucs2encode\n\t\t},\n\t\t'decode': decode,\n\t\t'encode': encode,\n\t\t'toASCII': toASCII,\n\t\t'toUnicode': toUnicode\n\t};\n\n\t/** Expose `punycode` */\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (typeof define == 'function' && _typeof(define.amd) == 'object' && define.amd) {\n\t\tdefine('punycode', function () {\n\t\t\treturn punycode;\n\t\t});\n\t} else if (freeExports && freeModule) {\n\t\tif (module.exports == freeExports) {\n\t\t\t// in Node.js, io.js, or RingoJS v0.8.0+\n\t\t\tfreeModule.exports = punycode;\n\t\t} else {\n\t\t\t// in Narwhal or RingoJS v0.7.0-\n\t\t\tfor (key in punycode) {\n\t\t\t\tpunycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// in Rhino or a web browser\n\t\troot.punycode = punycode;\n\t}\n})(undefined);\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","deps":{}},"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\node_modules\\urijs\\src\\SecondLevelDomains.js":{"file":"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\node_modules\\urijs\\src\\SecondLevelDomains.js","source":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\n/*!\n * URI.js - Mutating URLs\n * Second Level Domain (SLD) Support\n *\n * Version: 1.18.1\n *\n * Author: Rodney Rehm\n * Web: http://medialize.github.io/URI.js/\n *\n * Licensed under\n *   MIT License http://www.opensource.org/licenses/mit-license\n *\n */\n\n(function (root, factory) {\n  'use strict';\n  // https://github.com/umdjs/umd/blob/master/returnExports.js\n\n  if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {\n    // Node\n    module.exports = factory();\n  } else if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(factory);\n  } else {\n    // Browser globals (root is window)\n    root.SecondLevelDomains = factory(root);\n  }\n})(undefined, function (root) {\n  'use strict';\n\n  // save current SecondLevelDomains variable, if any\n\n  var _SecondLevelDomains = root && root.SecondLevelDomains;\n\n  var SLD = {\n    // list of known Second Level Domains\n    // converted list of SLDs from https://github.com/gavingmiller/second-level-domains\n    // ----\n    // publicsuffix.org is more current and actually used by a couple of browsers internally.\n    // downside is it also contains domains like \"dyndns.org\" - which is fine for the security\n    // issues browser have to deal with (SOP for cookies, etc) - but is way overboard for URI.js\n    // ----\n    list: {\n      'ac': ' com gov mil net org ',\n      'ae': ' ac co gov mil name net org pro sch ',\n      'af': ' com edu gov net org ',\n      'al': ' com edu gov mil net org ',\n      'ao': ' co ed gv it og pb ',\n      'ar': ' com edu gob gov int mil net org tur ',\n      'at': ' ac co gv or ',\n      'au': ' asn com csiro edu gov id net org ',\n      'ba': ' co com edu gov mil net org rs unbi unmo unsa untz unze ',\n      'bb': ' biz co com edu gov info net org store tv ',\n      'bh': ' biz cc com edu gov info net org ',\n      'bn': ' com edu gov net org ',\n      'bo': ' com edu gob gov int mil net org tv ',\n      'br': ' adm adv agr am arq art ato b bio blog bmd cim cng cnt com coop ecn edu eng esp etc eti far flog fm fnd fot fst g12 ggf gov imb ind inf jor jus lel mat med mil mus net nom not ntr odo org ppg pro psc psi qsl rec slg srv tmp trd tur tv vet vlog wiki zlg ',\n      'bs': ' com edu gov net org ',\n      'bz': ' du et om ov rg ',\n      'ca': ' ab bc mb nb nf nl ns nt nu on pe qc sk yk ',\n      'ck': ' biz co edu gen gov info net org ',\n      'cn': ' ac ah bj com cq edu fj gd gov gs gx gz ha hb he hi hl hn jl js jx ln mil net nm nx org qh sc sd sh sn sx tj tw xj xz yn zj ',\n      'co': ' com edu gov mil net nom org ',\n      'cr': ' ac c co ed fi go or sa ',\n      'cy': ' ac biz com ekloges gov ltd name net org parliament press pro tm ',\n      'do': ' art com edu gob gov mil net org sld web ',\n      'dz': ' art asso com edu gov net org pol ',\n      'ec': ' com edu fin gov info med mil net org pro ',\n      'eg': ' com edu eun gov mil name net org sci ',\n      'er': ' com edu gov ind mil net org rochest w ',\n      'es': ' com edu gob nom org ',\n      'et': ' biz com edu gov info name net org ',\n      'fj': ' ac biz com info mil name net org pro ',\n      'fk': ' ac co gov net nom org ',\n      'fr': ' asso com f gouv nom prd presse tm ',\n      'gg': ' co net org ',\n      'gh': ' com edu gov mil org ',\n      'gn': ' ac com gov net org ',\n      'gr': ' com edu gov mil net org ',\n      'gt': ' com edu gob ind mil net org ',\n      'gu': ' com edu gov net org ',\n      'hk': ' com edu gov idv net org ',\n      'hu': ' 2000 agrar bolt casino city co erotica erotika film forum games hotel info ingatlan jogasz konyvelo lakas media news org priv reklam sex shop sport suli szex tm tozsde utazas video ',\n      'id': ' ac co go mil net or sch web ',\n      'il': ' ac co gov idf k12 muni net org ',\n      'in': ' ac co edu ernet firm gen gov i ind mil net nic org res ',\n      'iq': ' com edu gov i mil net org ',\n      'ir': ' ac co dnssec gov i id net org sch ',\n      'it': ' edu gov ',\n      'je': ' co net org ',\n      'jo': ' com edu gov mil name net org sch ',\n      'jp': ' ac ad co ed go gr lg ne or ',\n      'ke': ' ac co go info me mobi ne or sc ',\n      'kh': ' com edu gov mil net org per ',\n      'ki': ' biz com de edu gov info mob net org tel ',\n      'km': ' asso com coop edu gouv k medecin mil nom notaires pharmaciens presse tm veterinaire ',\n      'kn': ' edu gov net org ',\n      'kr': ' ac busan chungbuk chungnam co daegu daejeon es gangwon go gwangju gyeongbuk gyeonggi gyeongnam hs incheon jeju jeonbuk jeonnam k kg mil ms ne or pe re sc seoul ulsan ',\n      'kw': ' com edu gov net org ',\n      'ky': ' com edu gov net org ',\n      'kz': ' com edu gov mil net org ',\n      'lb': ' com edu gov net org ',\n      'lk': ' assn com edu gov grp hotel int ltd net ngo org sch soc web ',\n      'lr': ' com edu gov net org ',\n      'lv': ' asn com conf edu gov id mil net org ',\n      'ly': ' com edu gov id med net org plc sch ',\n      'ma': ' ac co gov m net org press ',\n      'mc': ' asso tm ',\n      'me': ' ac co edu gov its net org priv ',\n      'mg': ' com edu gov mil nom org prd tm ',\n      'mk': ' com edu gov inf name net org pro ',\n      'ml': ' com edu gov net org presse ',\n      'mn': ' edu gov org ',\n      'mo': ' com edu gov net org ',\n      'mt': ' com edu gov net org ',\n      'mv': ' aero biz com coop edu gov info int mil museum name net org pro ',\n      'mw': ' ac co com coop edu gov int museum net org ',\n      'mx': ' com edu gob net org ',\n      'my': ' com edu gov mil name net org sch ',\n      'nf': ' arts com firm info net other per rec store web ',\n      'ng': ' biz com edu gov mil mobi name net org sch ',\n      'ni': ' ac co com edu gob mil net nom org ',\n      'np': ' com edu gov mil net org ',\n      'nr': ' biz com edu gov info net org ',\n      'om': ' ac biz co com edu gov med mil museum net org pro sch ',\n      'pe': ' com edu gob mil net nom org sld ',\n      'ph': ' com edu gov i mil net ngo org ',\n      'pk': ' biz com edu fam gob gok gon gop gos gov net org web ',\n      'pl': ' art bialystok biz com edu gda gdansk gorzow gov info katowice krakow lodz lublin mil net ngo olsztyn org poznan pwr radom slupsk szczecin torun warszawa waw wroc wroclaw zgora ',\n      'pr': ' ac biz com edu est gov info isla name net org pro prof ',\n      'ps': ' com edu gov net org plo sec ',\n      'pw': ' belau co ed go ne or ',\n      'ro': ' arts com firm info nom nt org rec store tm www ',\n      'rs': ' ac co edu gov in org ',\n      'sb': ' com edu gov net org ',\n      'sc': ' com edu gov net org ',\n      'sh': ' co com edu gov net nom org ',\n      'sl': ' com edu gov net org ',\n      'st': ' co com consulado edu embaixada gov mil net org principe saotome store ',\n      'sv': ' com edu gob org red ',\n      'sz': ' ac co org ',\n      'tr': ' av bbs bel biz com dr edu gen gov info k12 name net org pol tel tsk tv web ',\n      'tt': ' aero biz cat co com coop edu gov info int jobs mil mobi museum name net org pro tel travel ',\n      'tw': ' club com ebiz edu game gov idv mil net org ',\n      'mu': ' ac co com gov net or org ',\n      'mz': ' ac co edu gov org ',\n      'na': ' co com ',\n      'nz': ' ac co cri geek gen govt health iwi maori mil net org parliament school ',\n      'pa': ' abo ac com edu gob ing med net nom org sld ',\n      'pt': ' com edu gov int net nome org publ ',\n      'py': ' com edu gov mil net org ',\n      'qa': ' com edu gov mil net org ',\n      're': ' asso com nom ',\n      'ru': ' ac adygeya altai amur arkhangelsk astrakhan bashkiria belgorod bir bryansk buryatia cbg chel chelyabinsk chita chukotka chuvashia com dagestan e-burg edu gov grozny int irkutsk ivanovo izhevsk jar joshkar-ola kalmykia kaluga kamchatka karelia kazan kchr kemerovo khabarovsk khakassia khv kirov koenig komi kostroma kranoyarsk kuban kurgan kursk lipetsk magadan mari mari-el marine mil mordovia mosreg msk murmansk nalchik net nnov nov novosibirsk nsk omsk orenburg org oryol penza perm pp pskov ptz rnd ryazan sakhalin samara saratov simbirsk smolensk spb stavropol stv surgut tambov tatarstan tom tomsk tsaritsyn tsk tula tuva tver tyumen udm udmurtia ulan-ude vladikavkaz vladimir vladivostok volgograd vologda voronezh vrn vyatka yakutia yamal yekaterinburg yuzhno-sakhalinsk ',\n      'rw': ' ac co com edu gouv gov int mil net ',\n      'sa': ' com edu gov med net org pub sch ',\n      'sd': ' com edu gov info med net org tv ',\n      'se': ' a ac b bd c d e f g h i k l m n o org p parti pp press r s t tm u w x y z ',\n      'sg': ' com edu gov idn net org per ',\n      'sn': ' art com edu gouv org perso univ ',\n      'sy': ' com edu gov mil net news org ',\n      'th': ' ac co go in mi net or ',\n      'tj': ' ac biz co com edu go gov info int mil name net nic org test web ',\n      'tn': ' agrinet com defense edunet ens fin gov ind info intl mincom nat net org perso rnrt rns rnu tourism ',\n      'tz': ' ac co go ne or ',\n      'ua': ' biz cherkassy chernigov chernovtsy ck cn co com crimea cv dn dnepropetrovsk donetsk dp edu gov if in ivano-frankivsk kh kharkov kherson khmelnitskiy kiev kirovograd km kr ks kv lg lugansk lutsk lviv me mk net nikolaev od odessa org pl poltava pp rovno rv sebastopol sumy te ternopil uzhgorod vinnica vn zaporizhzhe zhitomir zp zt ',\n      'ug': ' ac co go ne or org sc ',\n      'uk': ' ac bl british-library co cym gov govt icnet jet lea ltd me mil mod national-library-scotland nel net nhs nic nls org orgn parliament plc police sch scot soc ',\n      'us': ' dni fed isa kids nsn ',\n      'uy': ' com edu gub mil net org ',\n      've': ' co com edu gob info mil net org web ',\n      'vi': ' co com k12 net org ',\n      'vn': ' ac biz com edu gov health info int name net org pro ',\n      'ye': ' co com gov ltd me net org plc ',\n      'yu': ' ac co edu gov org ',\n      'za': ' ac agric alt bourse city co cybernet db edu gov grondar iaccess imt inca landesign law mil net ngo nis nom olivetti org pix school tm web ',\n      'zm': ' ac co com edu gov net org sch '\n    },\n    // gorhill 2013-10-25: Using indexOf() instead Regexp(). Significant boost\n    // in both performance and memory footprint. No initialization required.\n    // http://jsperf.com/uri-js-sld-regex-vs-binary-search/4\n    // Following methods use lastIndexOf() rather than array.split() in order\n    // to avoid any memory allocations.\n    has: function has(domain) {\n      var tldOffset = domain.lastIndexOf('.');\n      if (tldOffset <= 0 || tldOffset >= domain.length - 1) {\n        return false;\n      }\n      var sldOffset = domain.lastIndexOf('.', tldOffset - 1);\n      if (sldOffset <= 0 || sldOffset >= tldOffset - 1) {\n        return false;\n      }\n      var sldList = SLD.list[domain.slice(tldOffset + 1)];\n      if (!sldList) {\n        return false;\n      }\n      return sldList.indexOf(' ' + domain.slice(sldOffset + 1, tldOffset) + ' ') >= 0;\n    },\n    is: function is(domain) {\n      var tldOffset = domain.lastIndexOf('.');\n      if (tldOffset <= 0 || tldOffset >= domain.length - 1) {\n        return false;\n      }\n      var sldOffset = domain.lastIndexOf('.', tldOffset - 1);\n      if (sldOffset >= 0) {\n        return false;\n      }\n      var sldList = SLD.list[domain.slice(tldOffset + 1)];\n      if (!sldList) {\n        return false;\n      }\n      return sldList.indexOf(' ' + domain.slice(0, tldOffset) + ' ') >= 0;\n    },\n    get: function get(domain) {\n      var tldOffset = domain.lastIndexOf('.');\n      if (tldOffset <= 0 || tldOffset >= domain.length - 1) {\n        return null;\n      }\n      var sldOffset = domain.lastIndexOf('.', tldOffset - 1);\n      if (sldOffset <= 0 || sldOffset >= tldOffset - 1) {\n        return null;\n      }\n      var sldList = SLD.list[domain.slice(tldOffset + 1)];\n      if (!sldList) {\n        return null;\n      }\n      if (sldList.indexOf(' ' + domain.slice(sldOffset + 1, tldOffset) + ' ') < 0) {\n        return null;\n      }\n      return domain.slice(sldOffset + 1);\n    },\n    noConflict: function noConflict() {\n      if (root.SecondLevelDomains === this) {\n        root.SecondLevelDomains = _SecondLevelDomains;\n      }\n      return this;\n    }\n  };\n\n  return SLD;\n});\n//# sourceMappingURL=data:application/json;base64,","deps":{}},"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\node_modules\\urijs\\src\\URI.min.js":{"file":"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\node_modules\\urijs\\src\\URI.min.js","source":"(function (global){\n\"use strict\";\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\n/*! URI.js v1.18.1 http://medialize.github.io/URI.js/ */\n/* build contains: IPv6.js, punycode.js, SecondLevelDomains.js, URI.js */\n(function (k, n) {\n  \"object\" === (typeof exports === \"undefined\" ? \"undefined\" : _typeof(exports)) ? module.exports = n() : \"function\" === typeof define && define.amd ? define(n) : k.IPv6 = n(k);\n})(undefined, function (k) {\n  var n = k && k.IPv6;return { best: function best(g) {\n      g = g.toLowerCase().split(\":\");var f = g.length,\n          d = 8;\"\" === g[0] && \"\" === g[1] && \"\" === g[2] ? (g.shift(), g.shift()) : \"\" === g[0] && \"\" === g[1] ? g.shift() : \"\" === g[f - 1] && \"\" === g[f - 2] && g.pop();f = g.length;-1 !== g[f - 1].indexOf(\".\") && (d = 7);var h;for (h = 0; h < f && \"\" !== g[h]; h++) {}if (h < d) for (g.splice(h, 1, \"0000\"); g.length < d;) {\n        g.splice(h, 0, \"0000\");\n      }for (h = 0; h < d; h++) {\n        for (var f = g[h].split(\"\"), k = 0; 3 > k; k++) {\n          if (\"0\" === f[0] && 1 < f.length) f.splice(0, 1);else break;\n        }g[h] = f.join(\"\");\n      }var f = -1,\n          p = k = 0,\n          n = -1,\n          u = !1;for (h = 0; h < d; h++) {\n        u ? \"0\" === g[h] ? p += 1 : (u = !1, p > k && (f = n, k = p)) : \"0\" === g[h] && (u = !0, n = h, p = 1);\n      }p > k && (f = n, k = p);1 < k && g.splice(f, k, \"\");f = g.length;d = \"\";\"\" === g[0] && (d = \":\");for (h = 0; h < f; h++) {\n        d += g[h];if (h === f - 1) break;d += \":\";\n      }\"\" === g[f - 1] && (d += \":\");return d;\n    }, noConflict: function noConflict() {\n      k.IPv6 === this && (k.IPv6 = n);return this;\n    } };\n});\n(function (k) {\n  function n(d) {\n    throw new RangeError(e[d]);\n  }function g(d, e) {\n    for (var f = d.length, h = []; f--;) {\n      h[f] = e(d[f]);\n    }return h;\n  }function f(d, e) {\n    var f = d.split(\"@\"),\n        h = \"\";1 < f.length && (h = f[0] + \"@\", d = f[1]);d = d.replace(H, \".\");f = d.split(\".\");f = g(f, e).join(\".\");return h + f;\n  }function d(d) {\n    for (var e = [], f = 0, h = d.length, g, a; f < h;) {\n      g = d.charCodeAt(f++), 55296 <= g && 56319 >= g && f < h ? (a = d.charCodeAt(f++), 56320 == (a & 64512) ? e.push(((g & 1023) << 10) + (a & 1023) + 65536) : (e.push(g), f--)) : e.push(g);\n    }return e;\n  }function h(d) {\n    return g(d, function (d) {\n      var e = \"\";65535 < d && (d -= 65536, e += t(d >>> 10 & 1023 | 55296), d = 56320 | d & 1023);return e += t(d);\n    }).join(\"\");\n  }function w(d, e) {\n    return d + 22 + 75 * (26 > d) - ((0 != e) << 5);\n  }function p(d, e, f) {\n    var h = 0;d = f ? r(d / 700) : d >> 1;for (d += r(d / e); 455 < d; h += 36) {\n      d = r(d / 35);\n    }return r(h + 36 * d / (d + 38));\n  }function D(d) {\n    var e = [],\n        f = d.length,\n        g,\n        k = 0,\n        a = 128,\n        b = 72,\n        c,\n        l,\n        m,\n        q,\n        y;c = d.lastIndexOf(\"-\");0 > c && (c = 0);for (l = 0; l < c; ++l) {\n      128 <= d.charCodeAt(l) && n(\"not-basic\"), e.push(d.charCodeAt(l));\n    }for (c = 0 < c ? c + 1 : 0; c < f;) {\n      l = k;g = 1;for (m = 36;; m += 36) {\n        c >= f && n(\"invalid-input\");q = d.charCodeAt(c++);\n        q = 10 > q - 48 ? q - 22 : 26 > q - 65 ? q - 65 : 26 > q - 97 ? q - 97 : 36;(36 <= q || q > r((2147483647 - k) / g)) && n(\"overflow\");k += q * g;y = m <= b ? 1 : m >= b + 26 ? 26 : m - b;if (q < y) break;q = 36 - y;g > r(2147483647 / q) && n(\"overflow\");g *= q;\n      }g = e.length + 1;b = p(k - l, g, 0 == l);r(k / g) > 2147483647 - a && n(\"overflow\");a += r(k / g);k %= g;e.splice(k++, 0, a);\n    }return h(e);\n  }function u(e) {\n    var f,\n        g,\n        h,\n        k,\n        a,\n        b,\n        c,\n        l,\n        m,\n        q = [],\n        y,\n        E,\n        I;e = d(e);y = e.length;f = 128;g = 0;a = 72;for (b = 0; b < y; ++b) {\n      m = e[b], 128 > m && q.push(t(m));\n    }for ((h = k = q.length) && q.push(\"-\"); h < y;) {\n      c = 2147483647;for (b = 0; b < y; ++b) {\n        m = e[b], m >= f && m < c && (c = m);\n      }E = h + 1;c - f > r((2147483647 - g) / E) && n(\"overflow\");g += (c - f) * E;f = c;for (b = 0; b < y; ++b) {\n        if (m = e[b], m < f && 2147483647 < ++g && n(\"overflow\"), m == f) {\n          l = g;for (c = 36;; c += 36) {\n            m = c <= a ? 1 : c >= a + 26 ? 26 : c - a;if (l < m) break;I = l - m;l = 36 - m;q.push(t(w(m + I % l, 0)));l = r(I / l);\n          }q.push(t(w(l, 0)));a = p(g, E, h == k);g = 0;++h;\n        }\n      }++g;++f;\n    }return q.join(\"\");\n  }var B = \"object\" == (typeof exports === \"undefined\" ? \"undefined\" : _typeof(exports)) && exports && !exports.nodeType && exports,\n      C = \"object\" == (typeof module === \"undefined\" ? \"undefined\" : _typeof(module)) && module && !module.nodeType && module,\n      z = \"object\" == (typeof global === \"undefined\" ? \"undefined\" : _typeof(global)) && global;if (z.global === z || z.window === z || z.self === z) k = z;var v,\n      A = /^xn--/,\n      F = /[^\\x20-\\x7E]/,\n      H = /[\\x2E\\u3002\\uFF0E\\uFF61]/g,\n      e = { overflow: \"Overflow: input needs wider integers to process\", \"not-basic\": \"Illegal input >= 0x80 (not a basic code point)\", \"invalid-input\": \"Invalid input\" },\n      r = Math.floor,\n      t = String.fromCharCode,\n      x;v = { version: \"1.3.2\", ucs2: { decode: d, encode: h }, decode: D, encode: u, toASCII: function toASCII(d) {\n      return f(d, function (d) {\n        return F.test(d) ? \"xn--\" + u(d) : d;\n      });\n    }, toUnicode: function toUnicode(d) {\n      return f(d, function (d) {\n        return A.test(d) ? D(d.slice(4).toLowerCase()) : d;\n      });\n    } };if (\"function\" == typeof define && \"object\" == _typeof(define.amd) && define.amd) define(\"punycode\", function () {\n    return v;\n  });else if (B && C) {\n    if (module.exports == B) C.exports = v;else for (x in v) {\n      v.hasOwnProperty(x) && (B[x] = v[x]);\n    }\n  } else k.punycode = v;\n})(undefined);\n(function (k, n) {\n  \"object\" === (typeof exports === \"undefined\" ? \"undefined\" : _typeof(exports)) ? module.exports = n() : \"function\" === typeof define && define.amd ? define(n) : k.SecondLevelDomains = n(k);\n})(undefined, function (k) {\n  var n = k && k.SecondLevelDomains,\n      g = { list: { ac: \" com gov mil net org \", ae: \" ac co gov mil name net org pro sch \", af: \" com edu gov net org \", al: \" com edu gov mil net org \", ao: \" co ed gv it og pb \", ar: \" com edu gob gov int mil net org tur \", at: \" ac co gv or \", au: \" asn com csiro edu gov id net org \", ba: \" co com edu gov mil net org rs unbi unmo unsa untz unze \",\n      bb: \" biz co com edu gov info net org store tv \", bh: \" biz cc com edu gov info net org \", bn: \" com edu gov net org \", bo: \" com edu gob gov int mil net org tv \", br: \" adm adv agr am arq art ato b bio blog bmd cim cng cnt com coop ecn edu eng esp etc eti far flog fm fnd fot fst g12 ggf gov imb ind inf jor jus lel mat med mil mus net nom not ntr odo org ppg pro psc psi qsl rec slg srv tmp trd tur tv vet vlog wiki zlg \", bs: \" com edu gov net org \", bz: \" du et om ov rg \", ca: \" ab bc mb nb nf nl ns nt nu on pe qc sk yk \",\n      ck: \" biz co edu gen gov info net org \", cn: \" ac ah bj com cq edu fj gd gov gs gx gz ha hb he hi hl hn jl js jx ln mil net nm nx org qh sc sd sh sn sx tj tw xj xz yn zj \", co: \" com edu gov mil net nom org \", cr: \" ac c co ed fi go or sa \", cy: \" ac biz com ekloges gov ltd name net org parliament press pro tm \", \"do\": \" art com edu gob gov mil net org sld web \", dz: \" art asso com edu gov net org pol \", ec: \" com edu fin gov info med mil net org pro \", eg: \" com edu eun gov mil name net org sci \", er: \" com edu gov ind mil net org rochest w \",\n      es: \" com edu gob nom org \", et: \" biz com edu gov info name net org \", fj: \" ac biz com info mil name net org pro \", fk: \" ac co gov net nom org \", fr: \" asso com f gouv nom prd presse tm \", gg: \" co net org \", gh: \" com edu gov mil org \", gn: \" ac com gov net org \", gr: \" com edu gov mil net org \", gt: \" com edu gob ind mil net org \", gu: \" com edu gov net org \", hk: \" com edu gov idv net org \", hu: \" 2000 agrar bolt casino city co erotica erotika film forum games hotel info ingatlan jogasz konyvelo lakas media news org priv reklam sex shop sport suli szex tm tozsde utazas video \",\n      id: \" ac co go mil net or sch web \", il: \" ac co gov idf k12 muni net org \", \"in\": \" ac co edu ernet firm gen gov i ind mil net nic org res \", iq: \" com edu gov i mil net org \", ir: \" ac co dnssec gov i id net org sch \", it: \" edu gov \", je: \" co net org \", jo: \" com edu gov mil name net org sch \", jp: \" ac ad co ed go gr lg ne or \", ke: \" ac co go info me mobi ne or sc \", kh: \" com edu gov mil net org per \", ki: \" biz com de edu gov info mob net org tel \", km: \" asso com coop edu gouv k medecin mil nom notaires pharmaciens presse tm veterinaire \",\n      kn: \" edu gov net org \", kr: \" ac busan chungbuk chungnam co daegu daejeon es gangwon go gwangju gyeongbuk gyeonggi gyeongnam hs incheon jeju jeonbuk jeonnam k kg mil ms ne or pe re sc seoul ulsan \", kw: \" com edu gov net org \", ky: \" com edu gov net org \", kz: \" com edu gov mil net org \", lb: \" com edu gov net org \", lk: \" assn com edu gov grp hotel int ltd net ngo org sch soc web \", lr: \" com edu gov net org \", lv: \" asn com conf edu gov id mil net org \", ly: \" com edu gov id med net org plc sch \", ma: \" ac co gov m net org press \",\n      mc: \" asso tm \", me: \" ac co edu gov its net org priv \", mg: \" com edu gov mil nom org prd tm \", mk: \" com edu gov inf name net org pro \", ml: \" com edu gov net org presse \", mn: \" edu gov org \", mo: \" com edu gov net org \", mt: \" com edu gov net org \", mv: \" aero biz com coop edu gov info int mil museum name net org pro \", mw: \" ac co com coop edu gov int museum net org \", mx: \" com edu gob net org \", my: \" com edu gov mil name net org sch \", nf: \" arts com firm info net other per rec store web \", ng: \" biz com edu gov mil mobi name net org sch \",\n      ni: \" ac co com edu gob mil net nom org \", np: \" com edu gov mil net org \", nr: \" biz com edu gov info net org \", om: \" ac biz co com edu gov med mil museum net org pro sch \", pe: \" com edu gob mil net nom org sld \", ph: \" com edu gov i mil net ngo org \", pk: \" biz com edu fam gob gok gon gop gos gov net org web \", pl: \" art bialystok biz com edu gda gdansk gorzow gov info katowice krakow lodz lublin mil net ngo olsztyn org poznan pwr radom slupsk szczecin torun warszawa waw wroc wroclaw zgora \", pr: \" ac biz com edu est gov info isla name net org pro prof \",\n      ps: \" com edu gov net org plo sec \", pw: \" belau co ed go ne or \", ro: \" arts com firm info nom nt org rec store tm www \", rs: \" ac co edu gov in org \", sb: \" com edu gov net org \", sc: \" com edu gov net org \", sh: \" co com edu gov net nom org \", sl: \" com edu gov net org \", st: \" co com consulado edu embaixada gov mil net org principe saotome store \", sv: \" com edu gob org red \", sz: \" ac co org \", tr: \" av bbs bel biz com dr edu gen gov info k12 name net org pol tel tsk tv web \", tt: \" aero biz cat co com coop edu gov info int jobs mil mobi museum name net org pro tel travel \",\n      tw: \" club com ebiz edu game gov idv mil net org \", mu: \" ac co com gov net or org \", mz: \" ac co edu gov org \", na: \" co com \", nz: \" ac co cri geek gen govt health iwi maori mil net org parliament school \", pa: \" abo ac com edu gob ing med net nom org sld \", pt: \" com edu gov int net nome org publ \", py: \" com edu gov mil net org \", qa: \" com edu gov mil net org \", re: \" asso com nom \", ru: \" ac adygeya altai amur arkhangelsk astrakhan bashkiria belgorod bir bryansk buryatia cbg chel chelyabinsk chita chukotka chuvashia com dagestan e-burg edu gov grozny int irkutsk ivanovo izhevsk jar joshkar-ola kalmykia kaluga kamchatka karelia kazan kchr kemerovo khabarovsk khakassia khv kirov koenig komi kostroma kranoyarsk kuban kurgan kursk lipetsk magadan mari mari-el marine mil mordovia mosreg msk murmansk nalchik net nnov nov novosibirsk nsk omsk orenburg org oryol penza perm pp pskov ptz rnd ryazan sakhalin samara saratov simbirsk smolensk spb stavropol stv surgut tambov tatarstan tom tomsk tsaritsyn tsk tula tuva tver tyumen udm udmurtia ulan-ude vladikavkaz vladimir vladivostok volgograd vologda voronezh vrn vyatka yakutia yamal yekaterinburg yuzhno-sakhalinsk \",\n      rw: \" ac co com edu gouv gov int mil net \", sa: \" com edu gov med net org pub sch \", sd: \" com edu gov info med net org tv \", se: \" a ac b bd c d e f g h i k l m n o org p parti pp press r s t tm u w x y z \", sg: \" com edu gov idn net org per \", sn: \" art com edu gouv org perso univ \", sy: \" com edu gov mil net news org \", th: \" ac co go in mi net or \", tj: \" ac biz co com edu go gov info int mil name net nic org test web \", tn: \" agrinet com defense edunet ens fin gov ind info intl mincom nat net org perso rnrt rns rnu tourism \",\n      tz: \" ac co go ne or \", ua: \" biz cherkassy chernigov chernovtsy ck cn co com crimea cv dn dnepropetrovsk donetsk dp edu gov if in ivano-frankivsk kh kharkov kherson khmelnitskiy kiev kirovograd km kr ks kv lg lugansk lutsk lviv me mk net nikolaev od odessa org pl poltava pp rovno rv sebastopol sumy te ternopil uzhgorod vinnica vn zaporizhzhe zhitomir zp zt \", ug: \" ac co go ne or org sc \", uk: \" ac bl british-library co cym gov govt icnet jet lea ltd me mil mod national-library-scotland nel net nhs nic nls org orgn parliament plc police sch scot soc \",\n      us: \" dni fed isa kids nsn \", uy: \" com edu gub mil net org \", ve: \" co com edu gob info mil net org web \", vi: \" co com k12 net org \", vn: \" ac biz com edu gov health info int name net org pro \", ye: \" co com gov ltd me net org plc \", yu: \" ac co edu gov org \", za: \" ac agric alt bourse city co cybernet db edu gov grondar iaccess imt inca landesign law mil net ngo nis nom olivetti org pix school tm web \", zm: \" ac co com edu gov net org sch \" }, has: function has(f) {\n      var d = f.lastIndexOf(\".\");if (0 >= d || d >= f.length - 1) return !1;\n      var h = f.lastIndexOf(\".\", d - 1);if (0 >= h || h >= d - 1) return !1;var k = g.list[f.slice(d + 1)];return k ? 0 <= k.indexOf(\" \" + f.slice(h + 1, d) + \" \") : !1;\n    }, is: function is(f) {\n      var d = f.lastIndexOf(\".\");if (0 >= d || d >= f.length - 1 || 0 <= f.lastIndexOf(\".\", d - 1)) return !1;var h = g.list[f.slice(d + 1)];return h ? 0 <= h.indexOf(\" \" + f.slice(0, d) + \" \") : !1;\n    }, get: function get(f) {\n      var d = f.lastIndexOf(\".\");if (0 >= d || d >= f.length - 1) return null;var h = f.lastIndexOf(\".\", d - 1);if (0 >= h || h >= d - 1) return null;var k = g.list[f.slice(d + 1)];return !k || 0 > k.indexOf(\" \" + f.slice(h + 1, d) + \" \") ? null : f.slice(h + 1);\n    }, noConflict: function noConflict() {\n      k.SecondLevelDomains === this && (k.SecondLevelDomains = n);return this;\n    } };return g;\n});\n(function (k, n) {\n  \"object\" === (typeof exports === \"undefined\" ? \"undefined\" : _typeof(exports)) ? module.exports = n(require(\"./punycode\"), require(\"./IPv6\"), require(\"./SecondLevelDomains\")) : \"function\" === typeof define && define.amd ? define([\"./punycode\", \"./IPv6\", \"./SecondLevelDomains\"], n) : k.URI = n(k.punycode, k.IPv6, k.SecondLevelDomains, k);\n})(undefined, function (k, n, g, f) {\n  function d(a, b) {\n    var c = 1 <= arguments.length,\n        l = 2 <= arguments.length;if (!(this instanceof d)) return c ? l ? new d(a, b) : new d(a) : new d();if (void 0 === a) {\n      if (c) throw new TypeError(\"undefined is not a valid argument for URI\");\n      a = \"undefined\" !== typeof location ? location.href + \"\" : \"\";\n    }this.href(a);return void 0 !== b ? this.absoluteTo(b) : this;\n  }function h(a) {\n    return a.replace(/([.*+?^=!:${}()|[\\]\\/\\\\])/g, \"\\\\$1\");\n  }function w(a) {\n    return void 0 === a ? \"Undefined\" : String(Object.prototype.toString.call(a)).slice(8, -1);\n  }function p(a) {\n    return \"Array\" === w(a);\n  }function D(a, b) {\n    var c = {},\n        d,\n        m;if (\"RegExp\" === w(b)) c = null;else if (p(b)) for (d = 0, m = b.length; d < m; d++) {\n      c[b[d]] = !0;\n    } else c[b] = !0;d = 0;for (m = a.length; d < m; d++) {\n      if (c && void 0 !== c[a[d]] || !c && b.test(a[d])) a.splice(d, 1), m--, d--;\n    }return a;\n  }function u(a, b) {\n    var c, d;if (p(b)) {\n      c = 0;for (d = b.length; c < d; c++) {\n        if (!u(a, b[c])) return !1;\n      }return !0;\n    }var m = w(b);c = 0;for (d = a.length; c < d; c++) {\n      if (\"RegExp\" === m) {\n        if (\"string\" === typeof a[c] && a[c].match(b)) return !0;\n      } else if (a[c] === b) return !0;\n    }return !1;\n  }function B(a, b) {\n    if (!p(a) || !p(b) || a.length !== b.length) return !1;a.sort();b.sort();for (var c = 0, d = a.length; c < d; c++) {\n      if (a[c] !== b[c]) return !1;\n    }return !0;\n  }function C(a) {\n    return a.replace(/^\\/+|\\/+$/g, \"\");\n  }function z(a) {\n    return escape(a);\n  }function v(a) {\n    return encodeURIComponent(a).replace(/[!'()*]/g, z).replace(/\\*/g, \"%2A\");\n  }function A(a) {\n    return function (b, c) {\n      if (void 0 === b) return this._parts[a] || \"\";this._parts[a] = b || null;this.build(!c);return this;\n    };\n  }function F(a, b) {\n    return function (c, d) {\n      if (void 0 === c) return this._parts[a] || \"\";null !== c && (c += \"\", c.charAt(0) === b && (c = c.substring(1)));this._parts[a] = c;this.build(!d);return this;\n    };\n  }var H = f && f.URI;d.version = \"1.18.1\";var e = d.prototype,\n      r = Object.prototype.hasOwnProperty;d._parts = function () {\n    return { protocol: null, username: null, password: null, hostname: null, urn: null,\n      port: null, path: null, query: null, fragment: null, duplicateQueryParameters: d.duplicateQueryParameters, escapeQuerySpace: d.escapeQuerySpace };\n  };d.duplicateQueryParameters = !1;d.escapeQuerySpace = !0;d.protocol_expression = /^[a-z][a-z0-9.+-]*$/i;d.idn_expression = /[^a-z0-9\\.-]/i;d.punycode_expression = /(xn--)/i;d.ip4_expression = /^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/;d.ip6_expression = /^\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*$/;\n  d.find_uri_expression = /\\b((?:[a-z][\\w-]+:(?:\\/{1,3}|[a-z0-9%])|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}\\/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:'\".,<>?\\u00ab\\u00bb\\u201c\\u201d\\u2018\\u2019]))/ig;d.findUri = { start: /\\b(?:([a-z][a-z0-9.+-]*:\\/\\/)|www\\.)/gi, end: /[\\s\\r\\n]|$/, trim: /[`!()\\[\\]{};:'\".,<>?\\u00ab\\u00bb\\u201c\\u201d\\u201e\\u2018\\u2019]+$/ };d.defaultPorts = { http: \"80\", https: \"443\", ftp: \"21\", gopher: \"70\", ws: \"80\", wss: \"443\" };d.invalid_hostname_characters = /[^a-zA-Z0-9\\.-]/;d.domAttributes = { a: \"href\", blockquote: \"cite\", link: \"href\", base: \"href\", script: \"src\", form: \"action\", img: \"src\", area: \"href\", iframe: \"src\", embed: \"src\", source: \"src\", track: \"src\", input: \"src\", audio: \"src\", video: \"src\" };d.getDomAttribute = function (a) {\n    if (a && a.nodeName) {\n      var b = a.nodeName.toLowerCase();return \"input\" === b && \"image\" !== a.type ? void 0 : d.domAttributes[b];\n    }\n  };d.encode = v;d.decode = decodeURIComponent;d.iso8859 = function () {\n    d.encode = escape;d.decode = unescape;\n  };d.unicode = function () {\n    d.encode = v;d.decode = decodeURIComponent;\n  };d.characters = { pathname: { encode: { expression: /%(24|26|2B|2C|3B|3D|3A|40)/ig, map: { \"%24\": \"$\", \"%26\": \"&\", \"%2B\": \"+\", \"%2C\": \",\", \"%3B\": \";\", \"%3D\": \"=\", \"%3A\": \":\", \"%40\": \"@\" } }, decode: { expression: /[\\/\\?#]/g, map: { \"/\": \"%2F\", \"?\": \"%3F\", \"#\": \"%23\" } } }, reserved: { encode: { expression: /%(21|23|24|26|27|28|29|2A|2B|2C|2F|3A|3B|3D|3F|40|5B|5D)/ig, map: { \"%3A\": \":\", \"%2F\": \"/\", \"%3F\": \"?\", \"%23\": \"#\", \"%5B\": \"[\", \"%5D\": \"]\", \"%40\": \"@\", \"%21\": \"!\", \"%24\": \"$\", \"%26\": \"&\", \"%27\": \"'\", \"%28\": \"(\", \"%29\": \")\", \"%2A\": \"*\", \"%2B\": \"+\", \"%2C\": \",\",\n          \"%3B\": \";\", \"%3D\": \"=\" } } }, urnpath: { encode: { expression: /%(21|24|27|28|29|2A|2B|2C|3B|3D|40)/ig, map: { \"%21\": \"!\", \"%24\": \"$\", \"%27\": \"'\", \"%28\": \"(\", \"%29\": \")\", \"%2A\": \"*\", \"%2B\": \"+\", \"%2C\": \",\", \"%3B\": \";\", \"%3D\": \"=\", \"%40\": \"@\" } }, decode: { expression: /[\\/\\?#:]/g, map: { \"/\": \"%2F\", \"?\": \"%3F\", \"#\": \"%23\", \":\": \"%3A\" } } } };d.encodeQuery = function (a, b) {\n    var c = d.encode(a + \"\");void 0 === b && (b = d.escapeQuerySpace);return b ? c.replace(/%20/g, \"+\") : c;\n  };d.decodeQuery = function (a, b) {\n    a += \"\";void 0 === b && (b = d.escapeQuerySpace);try {\n      return d.decode(b ? a.replace(/\\+/g, \"%20\") : a);\n    } catch (c) {\n      return a;\n    }\n  };var t = { encode: \"encode\", decode: \"decode\" },\n      x,\n      G = function G(a, b) {\n    return function (c) {\n      try {\n        return d[b](c + \"\").replace(d.characters[a][b].expression, function (c) {\n          return d.characters[a][b].map[c];\n        });\n      } catch (l) {\n        return c;\n      }\n    };\n  };for (x in t) {\n    d[x + \"PathSegment\"] = G(\"pathname\", t[x]), d[x + \"UrnPathSegment\"] = G(\"urnpath\", t[x]);\n  }t = function t(a, b, c) {\n    return function (l) {\n      var m;m = c ? function (a) {\n        return d[b](d[c](a));\n      } : d[b];l = (l + \"\").split(a);for (var e = 0, f = l.length; e < f; e++) {\n        l[e] = m(l[e]);\n      }return l.join(a);\n    };\n  };d.decodePath = t(\"/\", \"decodePathSegment\");d.decodeUrnPath = t(\":\", \"decodeUrnPathSegment\");d.recodePath = t(\"/\", \"encodePathSegment\", \"decode\");d.recodeUrnPath = t(\":\", \"encodeUrnPathSegment\", \"decode\");d.encodeReserved = G(\"reserved\", \"encode\");d.parse = function (a, b) {\n    var c;b || (b = {});c = a.indexOf(\"#\");-1 < c && (b.fragment = a.substring(c + 1) || null, a = a.substring(0, c));c = a.indexOf(\"?\");-1 < c && (b.query = a.substring(c + 1) || null, a = a.substring(0, c));\"//\" === a.substring(0, 2) ? (b.protocol = null, a = a.substring(2), a = d.parseAuthority(a, b)) : (c = a.indexOf(\":\"), -1 < c && (b.protocol = a.substring(0, c) || null, b.protocol && !b.protocol.match(d.protocol_expression) ? b.protocol = void 0 : \"//\" === a.substring(c + 1, c + 3) ? (a = a.substring(c + 3), a = d.parseAuthority(a, b)) : (a = a.substring(c + 1), b.urn = !0)));b.path = a;return b;\n  };d.parseHost = function (a, b) {\n    a = a.replace(/\\\\/g, \"/\");var c = a.indexOf(\"/\"),\n        d;-1 === c && (c = a.length);if (\"[\" === a.charAt(0)) d = a.indexOf(\"]\"), b.hostname = a.substring(1, d) || null, b.port = a.substring(d + 2, c) || null, \"/\" === b.port && (b.port = null);else {\n      var m = a.indexOf(\":\");d = a.indexOf(\"/\");\n      m = a.indexOf(\":\", m + 1);-1 !== m && (-1 === d || m < d) ? (b.hostname = a.substring(0, c) || null, b.port = null) : (d = a.substring(0, c).split(\":\"), b.hostname = d[0] || null, b.port = d[1] || null);\n    }b.hostname && \"/\" !== a.substring(c).charAt(0) && (c++, a = \"/\" + a);return a.substring(c) || \"/\";\n  };d.parseAuthority = function (a, b) {\n    a = d.parseUserinfo(a, b);return d.parseHost(a, b);\n  };d.parseUserinfo = function (a, b) {\n    var c = a.indexOf(\"/\"),\n        l = a.lastIndexOf(\"@\", -1 < c ? c : a.length - 1);-1 < l && (-1 === c || l < c) ? (c = a.substring(0, l).split(\":\"), b.username = c[0] ? d.decode(c[0]) : null, c.shift(), b.password = c[0] ? d.decode(c.join(\":\")) : null, a = a.substring(l + 1)) : (b.username = null, b.password = null);return a;\n  };d.parseQuery = function (a, b) {\n    if (!a) return {};a = a.replace(/&+/g, \"&\").replace(/^\\?*&*|&+$/g, \"\");if (!a) return {};for (var c = {}, l = a.split(\"&\"), m = l.length, e, f, g = 0; g < m; g++) {\n      if (e = l[g].split(\"=\"), f = d.decodeQuery(e.shift(), b), e = e.length ? d.decodeQuery(e.join(\"=\"), b) : null, r.call(c, f)) {\n        if (\"string\" === typeof c[f] || null === c[f]) c[f] = [c[f]];c[f].push(e);\n      } else c[f] = e;\n    }return c;\n  };d.build = function (a) {\n    var b = \"\";\n    a.protocol && (b += a.protocol + \":\");a.urn || !b && !a.hostname || (b += \"//\");b += d.buildAuthority(a) || \"\";\"string\" === typeof a.path && (\"/\" !== a.path.charAt(0) && \"string\" === typeof a.hostname && (b += \"/\"), b += a.path);\"string\" === typeof a.query && a.query && (b += \"?\" + a.query);\"string\" === typeof a.fragment && a.fragment && (b += \"#\" + a.fragment);return b;\n  };d.buildHost = function (a) {\n    var b = \"\";if (a.hostname) b = d.ip6_expression.test(a.hostname) ? b + (\"[\" + a.hostname + \"]\") : b + a.hostname;else return \"\";a.port && (b += \":\" + a.port);return b;\n  };d.buildAuthority = function (a) {\n    return d.buildUserinfo(a) + d.buildHost(a);\n  };d.buildUserinfo = function (a) {\n    var b = \"\";a.username && (b += d.encode(a.username));a.password && (b += \":\" + d.encode(a.password));b && (b += \"@\");return b;\n  };d.buildQuery = function (a, b, c) {\n    var l = \"\",\n        m,\n        e,\n        f,\n        g;for (e in a) {\n      if (r.call(a, e) && e) if (p(a[e])) for (m = {}, f = 0, g = a[e].length; f < g; f++) {\n        void 0 !== a[e][f] && void 0 === m[a[e][f] + \"\"] && (l += \"&\" + d.buildQueryParameter(e, a[e][f], c), !0 !== b && (m[a[e][f] + \"\"] = !0));\n      } else void 0 !== a[e] && (l += \"&\" + d.buildQueryParameter(e, a[e], c));\n    }return l.substring(1);\n  };\n  d.buildQueryParameter = function (a, b, c) {\n    return d.encodeQuery(a, c) + (null !== b ? \"=\" + d.encodeQuery(b, c) : \"\");\n  };d.addQuery = function (a, b, c) {\n    if (\"object\" === (typeof b === \"undefined\" ? \"undefined\" : _typeof(b))) for (var l in b) {\n      r.call(b, l) && d.addQuery(a, l, b[l]);\n    } else if (\"string\" === typeof b) void 0 === a[b] ? a[b] = c : (\"string\" === typeof a[b] && (a[b] = [a[b]]), p(c) || (c = [c]), a[b] = (a[b] || []).concat(c));else throw new TypeError(\"URI.addQuery() accepts an object, string as the name parameter\");\n  };d.removeQuery = function (a, b, c) {\n    var l;if (p(b)) for (c = 0, l = b.length; c < l; c++) {\n      a[b[c]] = void 0;\n    } else if (\"RegExp\" === w(b)) for (l in a) {\n      b.test(l) && (a[l] = void 0);\n    } else if (\"object\" === (typeof b === \"undefined\" ? \"undefined\" : _typeof(b))) for (l in b) {\n      r.call(b, l) && d.removeQuery(a, l, b[l]);\n    } else if (\"string\" === typeof b) void 0 !== c ? \"RegExp\" === w(c) ? !p(a[b]) && c.test(a[b]) ? a[b] = void 0 : a[b] = D(a[b], c) : a[b] !== String(c) || p(c) && 1 !== c.length ? p(a[b]) && (a[b] = D(a[b], c)) : a[b] = void 0 : a[b] = void 0;else throw new TypeError(\"URI.removeQuery() accepts an object, string, RegExp as the first parameter\");\n  };d.hasQuery = function (a, b, c, l) {\n    switch (w(b)) {case \"String\":\n        break;\n      case \"RegExp\":\n        for (var e in a) {\n          if (r.call(a, e) && b.test(e) && (void 0 === c || d.hasQuery(a, e, c))) return !0;\n        }return !1;case \"Object\":\n        for (var f in b) {\n          if (r.call(b, f) && !d.hasQuery(a, f, b[f])) return !1;\n        }return !0;default:\n        throw new TypeError(\"URI.hasQuery() accepts a string, regular expression or object as the name parameter\");}switch (w(c)) {case \"Undefined\":\n        return b in a;case \"Boolean\":\n        return a = !(p(a[b]) ? !a[b].length : !a[b]), c === a;case \"Function\":\n        return !!c(a[b], b, a);case \"Array\":\n        return p(a[b]) ? (l ? u : B)(a[b], c) : !1;case \"RegExp\":\n        return p(a[b]) ? l ? u(a[b], c) : !1 : !(!a[b] || !a[b].match(c));case \"Number\":\n        c = String(c);case \"String\":\n        return p(a[b]) ? l ? u(a[b], c) : !1 : a[b] === c;default:\n        throw new TypeError(\"URI.hasQuery() accepts undefined, boolean, string, number, RegExp, Function as the value parameter\");}\n  };d.joinPaths = function () {\n    for (var a = [], b = [], c = 0, l = 0; l < arguments.length; l++) {\n      var e = new d(arguments[l]);a.push(e);for (var e = e.segment(), f = 0; f < e.length; f++) {\n        \"string\" === typeof e[f] && b.push(e[f]), e[f] && c++;\n      }\n    }if (!b.length || !c) return new d(\"\");b = new d(\"\").segment(b);\n    \"\" !== a[0].path() && \"/\" !== a[0].path().slice(0, 1) || b.path(\"/\" + b.path());return b.normalize();\n  };d.commonPath = function (a, b) {\n    var c = Math.min(a.length, b.length),\n        d;for (d = 0; d < c; d++) {\n      if (a.charAt(d) !== b.charAt(d)) {\n        d--;break;\n      }\n    }if (1 > d) return a.charAt(0) === b.charAt(0) && \"/\" === a.charAt(0) ? \"/\" : \"\";if (\"/\" !== a.charAt(d) || \"/\" !== b.charAt(d)) d = a.substring(0, d).lastIndexOf(\"/\");return a.substring(0, d + 1);\n  };d.withinString = function (a, b, c) {\n    c || (c = {});var l = c.start || d.findUri.start,\n        e = c.end || d.findUri.end,\n        f = c.trim || d.findUri.trim,\n        g = /[a-z0-9-]=[\"']?$/i;for (l.lastIndex = 0;;) {\n      var h = l.exec(a);if (!h) break;h = h.index;if (c.ignoreHtml) {\n        var k = a.slice(Math.max(h - 3, 0), h);if (k && g.test(k)) continue;\n      }var k = h + a.slice(h).search(e),\n          n = a.slice(h, k).replace(f, \"\");c.ignore && c.ignore.test(n) || (k = h + n.length, n = b(n, h, k, a), a = a.slice(0, h) + n + a.slice(k), l.lastIndex = h + n.length);\n    }l.lastIndex = 0;return a;\n  };d.ensureValidHostname = function (a) {\n    if (a.match(d.invalid_hostname_characters)) {\n      if (!k) throw new TypeError('Hostname \"' + a + '\" contains characters other than [A-Z0-9.-] and Punycode.js is not available');\n      if (k.toASCII(a).match(d.invalid_hostname_characters)) throw new TypeError('Hostname \"' + a + '\" contains characters other than [A-Z0-9.-]');\n    }\n  };d.noConflict = function (a) {\n    if (a) return a = { URI: this.noConflict() }, f.URITemplate && \"function\" === typeof f.URITemplate.noConflict && (a.URITemplate = f.URITemplate.noConflict()), f.IPv6 && \"function\" === typeof f.IPv6.noConflict && (a.IPv6 = f.IPv6.noConflict()), f.SecondLevelDomains && \"function\" === typeof f.SecondLevelDomains.noConflict && (a.SecondLevelDomains = f.SecondLevelDomains.noConflict()), a;f.URI === this && (f.URI = H);return this;\n  };e.build = function (a) {\n    if (!0 === a) this._deferred_build = !0;else if (void 0 === a || this._deferred_build) this._string = d.build(this._parts), this._deferred_build = !1;return this;\n  };e.clone = function () {\n    return new d(this);\n  };e.valueOf = e.toString = function () {\n    return this.build(!1)._string;\n  };e.protocol = A(\"protocol\");e.username = A(\"username\");e.password = A(\"password\");e.hostname = A(\"hostname\");e.port = A(\"port\");e.query = F(\"query\", \"?\");e.fragment = F(\"fragment\", \"#\");e.search = function (a, b) {\n    var c = this.query(a, b);return \"string\" === typeof c && c.length ? \"?\" + c : c;\n  };e.hash = function (a, b) {\n    var c = this.fragment(a, b);return \"string\" === typeof c && c.length ? \"#\" + c : c;\n  };e.pathname = function (a, b) {\n    if (void 0 === a || !0 === a) {\n      var c = this._parts.path || (this._parts.hostname ? \"/\" : \"\");return a ? (this._parts.urn ? d.decodeUrnPath : d.decodePath)(c) : c;\n    }this._parts.path = this._parts.urn ? a ? d.recodeUrnPath(a) : \"\" : a ? d.recodePath(a) : \"/\";this.build(!b);return this;\n  };e.path = e.pathname;e.href = function (a, b) {\n    var c;if (void 0 === a) return this.toString();\n    this._string = \"\";this._parts = d._parts();var e = a instanceof d,\n        f = \"object\" === (typeof a === \"undefined\" ? \"undefined\" : _typeof(a)) && (a.hostname || a.path || a.pathname);a.nodeName && (f = d.getDomAttribute(a), a = a[f] || \"\", f = !1);!e && f && void 0 !== a.pathname && (a = a.toString());if (\"string\" === typeof a || a instanceof String) this._parts = d.parse(String(a), this._parts);else if (e || f) for (c in e = e ? a._parts : a, e) {\n      r.call(this._parts, c) && (this._parts[c] = e[c]);\n    } else throw new TypeError(\"invalid input\");this.build(!b);return this;\n  };e.is = function (a) {\n    var b = !1,\n        c = !1,\n        e = !1,\n        f = !1,\n        h = !1,\n        k = !1,\n        n = !1,\n        p = !this._parts.urn;this._parts.hostname && (p = !1, c = d.ip4_expression.test(this._parts.hostname), e = d.ip6_expression.test(this._parts.hostname), b = c || e, h = (f = !b) && g && g.has(this._parts.hostname), k = f && d.idn_expression.test(this._parts.hostname), n = f && d.punycode_expression.test(this._parts.hostname));switch (a.toLowerCase()) {case \"relative\":\n        return p;case \"absolute\":\n        return !p;case \"domain\":case \"name\":\n        return f;case \"sld\":\n        return h;case \"ip\":\n        return b;case \"ip4\":case \"ipv4\":case \"inet4\":\n        return c;case \"ip6\":case \"ipv6\":case \"inet6\":\n        return e;\n      case \"idn\":\n        return k;case \"url\":\n        return !this._parts.urn;case \"urn\":\n        return !!this._parts.urn;case \"punycode\":\n        return n;}return null;\n  };var J = e.protocol,\n      K = e.port,\n      L = e.hostname;e.protocol = function (a, b) {\n    if (void 0 !== a && a && (a = a.replace(/:(\\/\\/)?$/, \"\"), !a.match(d.protocol_expression))) throw new TypeError('Protocol \"' + a + \"\\\" contains characters other than [A-Z0-9.+-] or doesn't start with [A-Z]\");return J.call(this, a, b);\n  };e.scheme = e.protocol;e.port = function (a, b) {\n    if (this._parts.urn) return void 0 === a ? \"\" : this;if (void 0 !== a && (0 === a && (a = null), a && (a += \"\", \":\" === a.charAt(0) && (a = a.substring(1)), a.match(/[^0-9]/)))) throw new TypeError('Port \"' + a + '\" contains characters other than [0-9]');return K.call(this, a, b);\n  };e.hostname = function (a, b) {\n    if (this._parts.urn) return void 0 === a ? \"\" : this;if (void 0 !== a) {\n      var c = {};if (\"/\" !== d.parseHost(a, c)) throw new TypeError('Hostname \"' + a + '\" contains characters other than [A-Z0-9.-]');a = c.hostname;\n    }return L.call(this, a, b);\n  };e.origin = function (a, b) {\n    if (this._parts.urn) return void 0 === a ? \"\" : this;if (void 0 === a) {\n      var c = this.protocol();return this.authority() ? (c ? c + \"://\" : \"\") + this.authority() : \"\";\n    }c = d(a);this.protocol(c.protocol()).authority(c.authority()).build(!b);return this;\n  };e.host = function (a, b) {\n    if (this._parts.urn) return void 0 === a ? \"\" : this;if (void 0 === a) return this._parts.hostname ? d.buildHost(this._parts) : \"\";if (\"/\" !== d.parseHost(a, this._parts)) throw new TypeError('Hostname \"' + a + '\" contains characters other than [A-Z0-9.-]');this.build(!b);return this;\n  };e.authority = function (a, b) {\n    if (this._parts.urn) return void 0 === a ? \"\" : this;if (void 0 === a) return this._parts.hostname ? d.buildAuthority(this._parts) : \"\";if (\"/\" !== d.parseAuthority(a, this._parts)) throw new TypeError('Hostname \"' + a + '\" contains characters other than [A-Z0-9.-]');this.build(!b);return this;\n  };e.userinfo = function (a, b) {\n    if (this._parts.urn) return void 0 === a ? \"\" : this;if (void 0 === a) {\n      var c = d.buildUserinfo(this._parts);return c ? c.substring(0, c.length - 1) : c;\n    }\"@\" !== a[a.length - 1] && (a += \"@\");d.parseUserinfo(a, this._parts);this.build(!b);return this;\n  };e.resource = function (a, b) {\n    var c;if (void 0 === a) return this.path() + this.search() + this.hash();c = d.parse(a);this._parts.path = c.path;this._parts.query = c.query;this._parts.fragment = c.fragment;this.build(!b);return this;\n  };e.subdomain = function (a, b) {\n    if (this._parts.urn) return void 0 === a ? \"\" : this;if (void 0 === a) {\n      if (!this._parts.hostname || this.is(\"IP\")) return \"\";var c = this._parts.hostname.length - this.domain().length - 1;return this._parts.hostname.substring(0, c) || \"\";\n    }c = this._parts.hostname.length - this.domain().length;c = this._parts.hostname.substring(0, c);c = new RegExp(\"^\" + h(c));a && \".\" !== a.charAt(a.length - 1) && (a += \".\");a && d.ensureValidHostname(a);this._parts.hostname = this._parts.hostname.replace(c, a);this.build(!b);return this;\n  };e.domain = function (a, b) {\n    if (this._parts.urn) return void 0 === a ? \"\" : this;\"boolean\" === typeof a && (b = a, a = void 0);if (void 0 === a) {\n      if (!this._parts.hostname || this.is(\"IP\")) return \"\";var c = this._parts.hostname.match(/\\./g);if (c && 2 > c.length) return this._parts.hostname;c = this._parts.hostname.length - this.tld(b).length - 1;c = this._parts.hostname.lastIndexOf(\".\", c - 1) + 1;return this._parts.hostname.substring(c) || \"\";\n    }if (!a) throw new TypeError(\"cannot set domain empty\");d.ensureValidHostname(a);!this._parts.hostname || this.is(\"IP\") ? this._parts.hostname = a : (c = new RegExp(h(this.domain()) + \"$\"), this._parts.hostname = this._parts.hostname.replace(c, a));this.build(!b);return this;\n  };e.tld = function (a, b) {\n    if (this._parts.urn) return void 0 === a ? \"\" : this;\"boolean\" === typeof a && (b = a, a = void 0);if (void 0 === a) {\n      if (!this._parts.hostname || this.is(\"IP\")) return \"\";var c = this._parts.hostname.lastIndexOf(\".\"),\n          c = this._parts.hostname.substring(c + 1);return !0 !== b && g && g.list[c.toLowerCase()] ? g.get(this._parts.hostname) || c : c;\n    }if (a) {\n      if (a.match(/[^a-zA-Z0-9-]/)) {\n        if (g && g.is(a)) c = new RegExp(h(this.tld()) + \"$\"), this._parts.hostname = this._parts.hostname.replace(c, a);else throw new TypeError('TLD \"' + a + '\" contains characters other than [A-Z0-9]');\n      } else {\n        if (!this._parts.hostname || this.is(\"IP\")) throw new ReferenceError(\"cannot set TLD on non-domain host\");c = new RegExp(h(this.tld()) + \"$\");this._parts.hostname = this._parts.hostname.replace(c, a);\n      }\n    } else throw new TypeError(\"cannot set TLD empty\");this.build(!b);return this;\n  };e.directory = function (a, b) {\n    if (this._parts.urn) return void 0 === a ? \"\" : this;if (void 0 === a || !0 === a) {\n      if (!this._parts.path && !this._parts.hostname) return \"\";if (\"/\" === this._parts.path) return \"/\";var c = this._parts.path.length - this.filename().length - 1,\n          c = this._parts.path.substring(0, c) || (this._parts.hostname ? \"/\" : \"\");return a ? d.decodePath(c) : c;\n    }c = this._parts.path.length - this.filename().length;c = this._parts.path.substring(0, c);c = new RegExp(\"^\" + h(c));this.is(\"relative\") || (a || (a = \"/\"), \"/\" !== a.charAt(0) && (a = \"/\" + a));a && \"/\" !== a.charAt(a.length - 1) && (a += \"/\");a = d.recodePath(a);this._parts.path = this._parts.path.replace(c, a);this.build(!b);return this;\n  };e.filename = function (a, b) {\n    if (this._parts.urn) return void 0 === a ? \"\" : this;if (void 0 === a || !0 === a) {\n      if (!this._parts.path || \"/\" === this._parts.path) return \"\";var c = this._parts.path.lastIndexOf(\"/\"),\n          c = this._parts.path.substring(c + 1);return a ? d.decodePathSegment(c) : c;\n    }c = !1;\"/\" === a.charAt(0) && (a = a.substring(1));a.match(/\\.?\\//) && (c = !0);var e = new RegExp(h(this.filename()) + \"$\");a = d.recodePath(a);this._parts.path = this._parts.path.replace(e, a);c ? this.normalizePath(b) : this.build(!b);return this;\n  };e.suffix = function (a, b) {\n    if (this._parts.urn) return void 0 === a ? \"\" : this;if (void 0 === a || !0 === a) {\n      if (!this._parts.path || \"/\" === this._parts.path) return \"\";var c = this.filename(),\n          e = c.lastIndexOf(\".\");if (-1 === e) return \"\";c = c.substring(e + 1);c = /^[a-z0-9%]+$/i.test(c) ? c : \"\";return a ? d.decodePathSegment(c) : c;\n    }\".\" === a.charAt(0) && (a = a.substring(1));if (c = this.suffix()) e = a ? new RegExp(h(c) + \"$\") : new RegExp(h(\".\" + c) + \"$\");else {\n      if (!a) return this;this._parts.path += \".\" + d.recodePath(a);\n    }e && (a = d.recodePath(a), this._parts.path = this._parts.path.replace(e, a));this.build(!b);return this;\n  };e.segment = function (a, b, c) {\n    var d = this._parts.urn ? \":\" : \"/\",\n        e = this.path(),\n        f = \"/\" === e.substring(0, 1),\n        e = e.split(d);void 0 !== a && \"number\" !== typeof a && (c = b, b = a, a = void 0);if (void 0 !== a && \"number\" !== typeof a) throw Error('Bad segment \"' + a + '\", must be 0-based integer');f && e.shift();0 > a && (a = Math.max(e.length + a, 0));if (void 0 === b) return void 0 === a ? e : e[a];if (null === a || void 0 === e[a]) {\n      if (p(b)) {\n        e = [];a = 0;for (var g = b.length; a < g; a++) {\n          if (b[a].length || e.length && e[e.length - 1].length) e.length && !e[e.length - 1].length && e.pop(), e.push(C(b[a]));\n        }\n      } else {\n        if (b || \"string\" === typeof b) b = C(b), \"\" === e[e.length - 1] ? e[e.length - 1] = b : e.push(b);\n      }\n    } else b ? e[a] = C(b) : e.splice(a, 1);f && e.unshift(\"\");return this.path(e.join(d), c);\n  };e.segmentCoded = function (a, b, c) {\n    var e, f;\"number\" !== typeof a && (c = b, b = a, a = void 0);if (void 0 === b) {\n      a = this.segment(a, b, c);if (p(a)) for (e = 0, f = a.length; e < f; e++) {\n        a[e] = d.decode(a[e]);\n      } else a = void 0 !== a ? d.decode(a) : void 0;return a;\n    }if (p(b)) for (e = 0, f = b.length; e < f; e++) {\n      b[e] = d.encode(b[e]);\n    } else b = \"string\" === typeof b || b instanceof String ? d.encode(b) : b;return this.segment(a, b, c);\n  };var M = e.query;e.query = function (a, b) {\n    if (!0 === a) return d.parseQuery(this._parts.query, this._parts.escapeQuerySpace);if (\"function\" === typeof a) {\n      var c = d.parseQuery(this._parts.query, this._parts.escapeQuerySpace),\n          e = a.call(this, c);this._parts.query = d.buildQuery(e || c, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);this.build(!b);return this;\n    }return void 0 !== a && \"string\" !== typeof a ? (this._parts.query = d.buildQuery(a, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace), this.build(!b), this) : M.call(this, a, b);\n  };e.setQuery = function (a, b, c) {\n    var e = d.parseQuery(this._parts.query, this._parts.escapeQuerySpace);if (\"string\" === typeof a || a instanceof String) e[a] = void 0 !== b ? b : null;else if (\"object\" === (typeof a === \"undefined\" ? \"undefined\" : _typeof(a))) for (var f in a) {\n      r.call(a, f) && (e[f] = a[f]);\n    } else throw new TypeError(\"URI.addQuery() accepts an object, string as the name parameter\");\n    this._parts.query = d.buildQuery(e, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);\"string\" !== typeof a && (c = b);this.build(!c);return this;\n  };e.addQuery = function (a, b, c) {\n    var e = d.parseQuery(this._parts.query, this._parts.escapeQuerySpace);d.addQuery(e, a, void 0 === b ? null : b);this._parts.query = d.buildQuery(e, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);\"string\" !== typeof a && (c = b);this.build(!c);return this;\n  };e.removeQuery = function (a, b, c) {\n    var e = d.parseQuery(this._parts.query, this._parts.escapeQuerySpace);d.removeQuery(e, a, b);this._parts.query = d.buildQuery(e, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);\"string\" !== typeof a && (c = b);this.build(!c);return this;\n  };e.hasQuery = function (a, b, c) {\n    var e = d.parseQuery(this._parts.query, this._parts.escapeQuerySpace);return d.hasQuery(e, a, b, c);\n  };e.setSearch = e.setQuery;e.addSearch = e.addQuery;e.removeSearch = e.removeQuery;e.hasSearch = e.hasQuery;e.normalize = function () {\n    return this._parts.urn ? this.normalizeProtocol(!1).normalizePath(!1).normalizeQuery(!1).normalizeFragment(!1).build() : this.normalizeProtocol(!1).normalizeHostname(!1).normalizePort(!1).normalizePath(!1).normalizeQuery(!1).normalizeFragment(!1).build();\n  };e.normalizeProtocol = function (a) {\n    \"string\" === typeof this._parts.protocol && (this._parts.protocol = this._parts.protocol.toLowerCase(), this.build(!a));return this;\n  };e.normalizeHostname = function (a) {\n    this._parts.hostname && (this.is(\"IDN\") && k ? this._parts.hostname = k.toASCII(this._parts.hostname) : this.is(\"IPv6\") && n && (this._parts.hostname = n.best(this._parts.hostname)), this._parts.hostname = this._parts.hostname.toLowerCase(), this.build(!a));return this;\n  };e.normalizePort = function (a) {\n    \"string\" === typeof this._parts.protocol && this._parts.port === d.defaultPorts[this._parts.protocol] && (this._parts.port = null, this.build(!a));return this;\n  };e.normalizePath = function (a) {\n    var b = this._parts.path;if (!b) return this;if (this._parts.urn) return this._parts.path = d.recodeUrnPath(this._parts.path), this.build(!a), this;if (\"/\" === this._parts.path) return this;var b = d.recodePath(b),\n        c,\n        e = \"\",\n        f,\n        g;\"/\" !== b.charAt(0) && (c = !0, b = \"/\" + b);if (\"/..\" === b.slice(-3) || \"/.\" === b.slice(-2)) b += \"/\";b = b.replace(/(\\/(\\.\\/)+)|(\\/\\.$)/g, \"/\").replace(/\\/{2,}/g, \"/\");c && (e = b.substring(1).match(/^(\\.\\.\\/)+/) || \"\") && (e = e[0]);for (;;) {\n      f = b.search(/\\/\\.\\.(\\/|$)/);if (-1 === f) break;else if (0 === f) {\n        b = b.substring(3);continue;\n      }g = b.substring(0, f).lastIndexOf(\"/\");-1 === g && (g = f);b = b.substring(0, g) + b.substring(f + 3);\n    }c && this.is(\"relative\") && (b = e + b.substring(1));this._parts.path = b;this.build(!a);return this;\n  };e.normalizePathname = e.normalizePath;e.normalizeQuery = function (a) {\n    \"string\" === typeof this._parts.query && (this._parts.query.length ? this.query(d.parseQuery(this._parts.query, this._parts.escapeQuerySpace)) : this._parts.query = null, this.build(!a));return this;\n  };e.normalizeFragment = function (a) {\n    this._parts.fragment || (this._parts.fragment = null, this.build(!a));return this;\n  };e.normalizeSearch = e.normalizeQuery;e.normalizeHash = e.normalizeFragment;e.iso8859 = function () {\n    var a = d.encode,\n        b = d.decode;d.encode = escape;d.decode = decodeURIComponent;try {\n      this.normalize();\n    } finally {\n      d.encode = a, d.decode = b;\n    }return this;\n  };e.unicode = function () {\n    var a = d.encode,\n        b = d.decode;d.encode = v;d.decode = unescape;try {\n      this.normalize();\n    } finally {\n      d.encode = a, d.decode = b;\n    }return this;\n  };e.readable = function () {\n    var a = this.clone();a.username(\"\").password(\"\").normalize();var b = \"\";a._parts.protocol && (b += a._parts.protocol + \"://\");a._parts.hostname && (a.is(\"punycode\") && k ? (b += k.toUnicode(a._parts.hostname), a._parts.port && (b += \":\" + a._parts.port)) : b += a.host());a._parts.hostname && a._parts.path && \"/\" !== a._parts.path.charAt(0) && (b += \"/\");\n    b += a.path(!0);if (a._parts.query) {\n      for (var c = \"\", e = 0, f = a._parts.query.split(\"&\"), g = f.length; e < g; e++) {\n        var h = (f[e] || \"\").split(\"=\"),\n            c = c + (\"&\" + d.decodeQuery(h[0], this._parts.escapeQuerySpace).replace(/&/g, \"%26\"));void 0 !== h[1] && (c += \"=\" + d.decodeQuery(h[1], this._parts.escapeQuerySpace).replace(/&/g, \"%26\"));\n      }b += \"?\" + c.substring(1);\n    }return b += d.decodeQuery(a.hash(), !0);\n  };e.absoluteTo = function (a) {\n    var b = this.clone(),\n        c = [\"protocol\", \"username\", \"password\", \"hostname\", \"port\"],\n        e,\n        f;if (this._parts.urn) throw Error(\"URNs do not have any generally defined hierarchical components\");\n    a instanceof d || (a = new d(a));b._parts.protocol || (b._parts.protocol = a._parts.protocol);if (this._parts.hostname) return b;for (e = 0; f = c[e]; e++) {\n      b._parts[f] = a._parts[f];\n    }b._parts.path ? \"..\" === b._parts.path.substring(-2) && (b._parts.path += \"/\") : (b._parts.path = a._parts.path, b._parts.query || (b._parts.query = a._parts.query));\"/\" !== b.path().charAt(0) && (c = (c = a.directory()) ? c : 0 === a.path().indexOf(\"/\") ? \"/\" : \"\", b._parts.path = (c ? c + \"/\" : \"\") + b._parts.path, b.normalizePath());b.build();return b;\n  };e.relativeTo = function (a) {\n    var b = this.clone().normalize(),\n        c,\n        e,\n        f;if (b._parts.urn) throw Error(\"URNs do not have any generally defined hierarchical components\");a = new d(a).normalize();c = b._parts;e = a._parts;f = b.path();a = a.path();if (\"/\" !== f.charAt(0)) throw Error(\"URI is already relative\");if (\"/\" !== a.charAt(0)) throw Error(\"Cannot calculate a URI relative to another relative URI\");c.protocol === e.protocol && (c.protocol = null);if (c.username === e.username && c.password === e.password && null === c.protocol && null === c.username && null === c.password && c.hostname === e.hostname && c.port === e.port) c.hostname = null, c.port = null;else return b.build();if (f === a) return c.path = \"\", b.build();f = d.commonPath(f, a);if (!f) return b.build();e = e.path.substring(f.length).replace(/[^\\/]*$/, \"\").replace(/.*?\\//g, \"../\");c.path = e + c.path.substring(f.length) || \"./\";return b.build();\n  };e.equals = function (a) {\n    var b = this.clone(),\n        c = new d(a),\n        e;a = {};var f, g;b.normalize();c.normalize();if (b.toString() === c.toString()) return !0;f = b.query();e = c.query();b.query(\"\");c.query(\"\");if (b.toString() !== c.toString() || f.length !== e.length) return !1;b = d.parseQuery(f, this._parts.escapeQuerySpace);e = d.parseQuery(e, this._parts.escapeQuerySpace);for (g in b) {\n      if (r.call(b, g)) {\n        if (!p(b[g])) {\n          if (b[g] !== e[g]) return !1;\n        } else if (!B(b[g], e[g])) return !1;a[g] = !0;\n      }\n    }for (g in e) {\n      if (r.call(e, g) && !a[g]) return !1;\n    }return !0;\n  };e.duplicateQueryParameters = function (a) {\n    this._parts.duplicateQueryParameters = !!a;return this;\n  };e.escapeQuerySpace = function (a) {\n    this._parts.escapeQuerySpace = !!a;return this;\n  };return d;\n});\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","deps":{"./SecondLevelDomains":"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\node_modules\\urijs\\src\\SecondLevelDomains.js","./IPv6":"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\node_modules\\urijs\\src\\IPv6.js","./punycode":"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\node_modules\\urijs\\src\\punycode.js"}},"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\node_modules\\knockout\\build\\output\\knockout-latest.debug.js":{"file":"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\node_modules\\knockout\\build\\output\\knockout-latest.debug.js","source":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\n/*!\n * Knockout JavaScript library v3.4.0\n * (c) Steven Sanderson - http://knockoutjs.com/\n * License: MIT (http://www.opensource.org/licenses/mit-license.php)\n */\n\n(function () {\n    var DEBUG = true;\n    (function (undefined) {\n        // (0, eval)('this') is a robust way of getting a reference to the global object\n        // For details, see http://stackoverflow.com/questions/14119988/return-this-0-evalthis/14120023#14120023\n        var window = this || (0, eval)('this'),\n            document = window['document'],\n            navigator = window['navigator'],\n            jQueryInstance = window[\"jQuery\"],\n            JSON = window[\"JSON\"];\n        (function (factory) {\n            // Support three module loading scenarios\n            if (typeof define === 'function' && define['amd']) {\n                // [1] AMD anonymous module\n                define(['exports', 'require'], factory);\n            } else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object' && (typeof module === 'undefined' ? 'undefined' : _typeof(module)) === 'object') {\n                // [2] CommonJS/Node.js\n                factory(module['exports'] || exports); // module.exports is for Node.js\n            } else {\n                // [3] No module loader (plain <script> tag) - put directly in global namespace\n                factory(window['ko'] = {});\n            }\n        })(function (koExports, amdRequire) {\n            // Internally, all KO objects are attached to koExports (even the non-exported ones whose names will be minified by the closure compiler).\n            // In the future, the following \"ko\" variable may be made distinct from \"koExports\" so that private objects are not externally reachable.\n            var ko = typeof koExports !== 'undefined' ? koExports : {};\n            // Google Closure Compiler helpers (used only to make the minified file smaller)\n            ko.exportSymbol = function (koPath, object) {\n                var tokens = koPath.split(\".\");\n\n                // In the future, \"ko\" may become distinct from \"koExports\" (so that non-exported objects are not reachable)\n                // At that point, \"target\" would be set to: (typeof koExports !== \"undefined\" ? koExports : ko)\n                var target = ko;\n\n                for (var i = 0; i < tokens.length - 1; i++) {\n                    target = target[tokens[i]];\n                }target[tokens[tokens.length - 1]] = object;\n            };\n            ko.exportProperty = function (owner, publicName, object) {\n                owner[publicName] = object;\n            };\n            ko.version = \"3.4.0\";\n\n            ko.exportSymbol('version', ko.version);\n            // For any options that may affect various areas of Knockout and aren't directly associated with data binding.\n            ko.options = {\n                'deferUpdates': false,\n                'useOnlyNativeEvents': false\n            };\n\n            //ko.exportSymbol('options', ko.options);   // 'options' isn't minified\n            ko.utils = function () {\n                function objectForEach(obj, action) {\n                    for (var prop in obj) {\n                        if (obj.hasOwnProperty(prop)) {\n                            action(prop, obj[prop]);\n                        }\n                    }\n                }\n\n                function extend(target, source) {\n                    if (source) {\n                        for (var prop in source) {\n                            if (source.hasOwnProperty(prop)) {\n                                target[prop] = source[prop];\n                            }\n                        }\n                    }\n                    return target;\n                }\n\n                function setPrototypeOf(obj, proto) {\n                    obj.__proto__ = proto;\n                    return obj;\n                }\n\n                var canSetPrototype = { __proto__: [] } instanceof Array;\n                var canUseSymbols = !DEBUG && typeof Symbol === 'function';\n\n                // Represent the known event types in a compact way, then at runtime transform it into a hash with event name as key (for fast lookup)\n                var knownEvents = {},\n                    knownEventTypesByEventName = {};\n                var keyEventTypeName = navigator && /Firefox\\/2/i.test(navigator.userAgent) ? 'KeyboardEvent' : 'UIEvents';\n                knownEvents[keyEventTypeName] = ['keyup', 'keydown', 'keypress'];\n                knownEvents['MouseEvents'] = ['click', 'dblclick', 'mousedown', 'mouseup', 'mousemove', 'mouseover', 'mouseout', 'mouseenter', 'mouseleave'];\n                objectForEach(knownEvents, function (eventType, knownEventsForType) {\n                    if (knownEventsForType.length) {\n                        for (var i = 0, j = knownEventsForType.length; i < j; i++) {\n                            knownEventTypesByEventName[knownEventsForType[i]] = eventType;\n                        }\n                    }\n                });\n                var eventsThatMustBeRegisteredUsingAttachEvent = { 'propertychange': true }; // Workaround for an IE9 issue - https://github.com/SteveSanderson/knockout/issues/406\n\n                // Detect IE versions for bug workarounds (uses IE conditionals, not UA string, for robustness)\n                // Note that, since IE 10 does not support conditional comments, the following logic only detects IE < 10.\n                // Currently this is by design, since IE 10+ behaves correctly when treated as a standard browser.\n                // If there is a future need to detect specific versions of IE10+, we will amend this.\n                var ieVersion = document && function () {\n                    var version = 3,\n                        div = document.createElement('div'),\n                        iElems = div.getElementsByTagName('i');\n\n                    // Keep constructing conditional HTML blocks until we hit one that resolves to an empty fragment\n                    while (div.innerHTML = '<!--[if gt IE ' + ++version + ']><i></i><![endif]-->', iElems[0]) {}\n                    return version > 4 ? version : undefined;\n                }();\n                var isIe6 = ieVersion === 6,\n                    isIe7 = ieVersion === 7;\n\n                function isClickOnCheckableElement(element, eventType) {\n                    if (ko.utils.tagNameLower(element) !== \"input\" || !element.type) return false;\n                    if (eventType.toLowerCase() != \"click\") return false;\n                    var inputType = element.type;\n                    return inputType == \"checkbox\" || inputType == \"radio\";\n                }\n\n                // For details on the pattern for changing node classes\n                // see: https://github.com/knockout/knockout/issues/1597\n                var cssClassNameRegex = /\\S+/g;\n\n                function toggleDomNodeCssClass(node, classNames, shouldHaveClass) {\n                    var addOrRemoveFn;\n                    if (classNames) {\n                        if (_typeof(node.classList) === 'object') {\n                            addOrRemoveFn = node.classList[shouldHaveClass ? 'add' : 'remove'];\n                            ko.utils.arrayForEach(classNames.match(cssClassNameRegex), function (className) {\n                                addOrRemoveFn.call(node.classList, className);\n                            });\n                        } else if (typeof node.className['baseVal'] === 'string') {\n                            // SVG tag .classNames is an SVGAnimatedString instance\n                            toggleObjectClassPropertyString(node.className, 'baseVal', classNames, shouldHaveClass);\n                        } else {\n                            // node.className ought to be a string.\n                            toggleObjectClassPropertyString(node, 'className', classNames, shouldHaveClass);\n                        }\n                    }\n                }\n\n                function toggleObjectClassPropertyString(obj, prop, classNames, shouldHaveClass) {\n                    // obj/prop is either a node/'className' or a SVGAnimatedString/'baseVal'.\n                    var currentClassNames = obj[prop].match(cssClassNameRegex) || [];\n                    ko.utils.arrayForEach(classNames.match(cssClassNameRegex), function (className) {\n                        ko.utils.addOrRemoveItem(currentClassNames, className, shouldHaveClass);\n                    });\n                    obj[prop] = currentClassNames.join(\" \");\n                }\n\n                return {\n                    fieldsIncludedWithJsonPost: ['authenticity_token', /^__RequestVerificationToken(_.*)?$/],\n\n                    arrayForEach: function arrayForEach(array, action) {\n                        for (var i = 0, j = array.length; i < j; i++) {\n                            action(array[i], i);\n                        }\n                    },\n\n                    arrayIndexOf: function arrayIndexOf(array, item) {\n                        if (typeof Array.prototype.indexOf == \"function\") return Array.prototype.indexOf.call(array, item);\n                        for (var i = 0, j = array.length; i < j; i++) {\n                            if (array[i] === item) return i;\n                        }return -1;\n                    },\n\n                    arrayFirst: function arrayFirst(array, predicate, predicateOwner) {\n                        for (var i = 0, j = array.length; i < j; i++) {\n                            if (predicate.call(predicateOwner, array[i], i)) return array[i];\n                        }return null;\n                    },\n\n                    arrayRemoveItem: function arrayRemoveItem(array, itemToRemove) {\n                        var index = ko.utils.arrayIndexOf(array, itemToRemove);\n                        if (index > 0) {\n                            array.splice(index, 1);\n                        } else if (index === 0) {\n                            array.shift();\n                        }\n                    },\n\n                    arrayGetDistinctValues: function arrayGetDistinctValues(array) {\n                        array = array || [];\n                        var result = [];\n                        for (var i = 0, j = array.length; i < j; i++) {\n                            if (ko.utils.arrayIndexOf(result, array[i]) < 0) result.push(array[i]);\n                        }\n                        return result;\n                    },\n\n                    arrayMap: function arrayMap(array, mapping) {\n                        array = array || [];\n                        var result = [];\n                        for (var i = 0, j = array.length; i < j; i++) {\n                            result.push(mapping(array[i], i));\n                        }return result;\n                    },\n\n                    arrayFilter: function arrayFilter(array, predicate) {\n                        array = array || [];\n                        var result = [];\n                        for (var i = 0, j = array.length; i < j; i++) {\n                            if (predicate(array[i], i)) result.push(array[i]);\n                        }return result;\n                    },\n\n                    arrayPushAll: function arrayPushAll(array, valuesToPush) {\n                        if (valuesToPush instanceof Array) array.push.apply(array, valuesToPush);else for (var i = 0, j = valuesToPush.length; i < j; i++) {\n                            array.push(valuesToPush[i]);\n                        }return array;\n                    },\n\n                    addOrRemoveItem: function addOrRemoveItem(array, value, included) {\n                        var existingEntryIndex = ko.utils.arrayIndexOf(ko.utils.peekObservable(array), value);\n                        if (existingEntryIndex < 0) {\n                            if (included) array.push(value);\n                        } else {\n                            if (!included) array.splice(existingEntryIndex, 1);\n                        }\n                    },\n\n                    canSetPrototype: canSetPrototype,\n\n                    extend: extend,\n\n                    setPrototypeOf: setPrototypeOf,\n\n                    setPrototypeOfOrExtend: canSetPrototype ? setPrototypeOf : extend,\n\n                    objectForEach: objectForEach,\n\n                    objectMap: function objectMap(source, mapping) {\n                        if (!source) return source;\n                        var target = {};\n                        for (var prop in source) {\n                            if (source.hasOwnProperty(prop)) {\n                                target[prop] = mapping(source[prop], prop, source);\n                            }\n                        }\n                        return target;\n                    },\n\n                    emptyDomNode: function emptyDomNode(domNode) {\n                        while (domNode.firstChild) {\n                            ko.removeNode(domNode.firstChild);\n                        }\n                    },\n\n                    moveCleanedNodesToContainerElement: function moveCleanedNodesToContainerElement(nodes) {\n                        // Ensure it's a real array, as we're about to reparent the nodes and\n                        // we don't want the underlying collection to change while we're doing that.\n                        var nodesArray = ko.utils.makeArray(nodes);\n                        var templateDocument = nodesArray[0] && nodesArray[0].ownerDocument || document;\n\n                        var container = templateDocument.createElement('div');\n                        for (var i = 0, j = nodesArray.length; i < j; i++) {\n                            container.appendChild(ko.cleanNode(nodesArray[i]));\n                        }\n                        return container;\n                    },\n\n                    cloneNodes: function cloneNodes(nodesArray, shouldCleanNodes) {\n                        for (var i = 0, j = nodesArray.length, newNodesArray = []; i < j; i++) {\n                            var clonedNode = nodesArray[i].cloneNode(true);\n                            newNodesArray.push(shouldCleanNodes ? ko.cleanNode(clonedNode) : clonedNode);\n                        }\n                        return newNodesArray;\n                    },\n\n                    setDomNodeChildren: function setDomNodeChildren(domNode, childNodes) {\n                        ko.utils.emptyDomNode(domNode);\n                        if (childNodes) {\n                            for (var i = 0, j = childNodes.length; i < j; i++) {\n                                domNode.appendChild(childNodes[i]);\n                            }\n                        }\n                    },\n\n                    replaceDomNodes: function replaceDomNodes(nodeToReplaceOrNodeArray, newNodesArray) {\n                        var nodesToReplaceArray = nodeToReplaceOrNodeArray.nodeType ? [nodeToReplaceOrNodeArray] : nodeToReplaceOrNodeArray;\n                        if (nodesToReplaceArray.length > 0) {\n                            var insertionPoint = nodesToReplaceArray[0];\n                            var parent = insertionPoint.parentNode;\n                            for (var i = 0, j = newNodesArray.length; i < j; i++) {\n                                parent.insertBefore(newNodesArray[i], insertionPoint);\n                            }for (var i = 0, j = nodesToReplaceArray.length; i < j; i++) {\n                                ko.removeNode(nodesToReplaceArray[i]);\n                            }\n                        }\n                    },\n\n                    fixUpContinuousNodeArray: function fixUpContinuousNodeArray(continuousNodeArray, parentNode) {\n                        // Before acting on a set of nodes that were previously outputted by a template function, we have to reconcile\n                        // them against what is in the DOM right now. It may be that some of the nodes have already been removed, or that\n                        // new nodes might have been inserted in the middle, for example by a binding. Also, there may previously have been\n                        // leading comment nodes (created by rewritten string-based templates) that have since been removed during binding.\n                        // So, this function translates the old \"map\" output array into its best guess of the set of current DOM nodes.\n                        //\n                        // Rules:\n                        //   [A] Any leading nodes that have been removed should be ignored\n                        //       These most likely correspond to memoization nodes that were already removed during binding\n                        //       See https://github.com/knockout/knockout/pull/440\n                        //   [B] Any trailing nodes that have been remove should be ignored\n                        //       This prevents the code here from adding unrelated nodes to the array while processing rule [C]\n                        //       See https://github.com/knockout/knockout/pull/1903\n                        //   [C] We want to output a continuous series of nodes. So, ignore any nodes that have already been removed,\n                        //       and include any nodes that have been inserted among the previous collection\n\n                        if (continuousNodeArray.length) {\n                            // The parent node can be a virtual element; so get the real parent node\n                            parentNode = parentNode.nodeType === 8 && parentNode.parentNode || parentNode;\n\n                            // Rule [A]\n                            while (continuousNodeArray.length && continuousNodeArray[0].parentNode !== parentNode) {\n                                continuousNodeArray.splice(0, 1);\n                            } // Rule [B]\n                            while (continuousNodeArray.length > 1 && continuousNodeArray[continuousNodeArray.length - 1].parentNode !== parentNode) {\n                                continuousNodeArray.length--;\n                            } // Rule [C]\n                            if (continuousNodeArray.length > 1) {\n                                var current = continuousNodeArray[0],\n                                    last = continuousNodeArray[continuousNodeArray.length - 1];\n                                // Replace with the actual new continuous node set\n                                continuousNodeArray.length = 0;\n                                while (current !== last) {\n                                    continuousNodeArray.push(current);\n                                    current = current.nextSibling;\n                                }\n                                continuousNodeArray.push(last);\n                            }\n                        }\n                        return continuousNodeArray;\n                    },\n\n                    setOptionNodeSelectionState: function setOptionNodeSelectionState(optionNode, isSelected) {\n                        // IE6 sometimes throws \"unknown error\" if you try to write to .selected directly, whereas Firefox struggles with setAttribute. Pick one based on browser.\n                        if (ieVersion < 7) optionNode.setAttribute(\"selected\", isSelected);else optionNode.selected = isSelected;\n                    },\n\n                    stringTrim: function stringTrim(string) {\n                        return string === null || string === undefined ? '' : string.trim ? string.trim() : string.toString().replace(/^[\\s\\xa0]+|[\\s\\xa0]+$/g, '');\n                    },\n\n                    stringStartsWith: function stringStartsWith(string, startsWith) {\n                        string = string || \"\";\n                        if (startsWith.length > string.length) return false;\n                        return string.substring(0, startsWith.length) === startsWith;\n                    },\n\n                    domNodeIsContainedBy: function domNodeIsContainedBy(node, containedByNode) {\n                        if (node === containedByNode) return true;\n                        if (node.nodeType === 11) return false; // Fixes issue #1162 - can't use node.contains for document fragments on IE8\n                        if (containedByNode.contains) return containedByNode.contains(node.nodeType === 3 ? node.parentNode : node);\n                        if (containedByNode.compareDocumentPosition) return (containedByNode.compareDocumentPosition(node) & 16) == 16;\n                        while (node && node != containedByNode) {\n                            node = node.parentNode;\n                        }\n                        return !!node;\n                    },\n\n                    domNodeIsAttachedToDocument: function domNodeIsAttachedToDocument(node) {\n                        return ko.utils.domNodeIsContainedBy(node, node.ownerDocument.documentElement);\n                    },\n\n                    anyDomNodeIsAttachedToDocument: function anyDomNodeIsAttachedToDocument(nodes) {\n                        return !!ko.utils.arrayFirst(nodes, ko.utils.domNodeIsAttachedToDocument);\n                    },\n\n                    tagNameLower: function tagNameLower(element) {\n                        // For HTML elements, tagName will always be upper case; for XHTML elements, it'll be lower case.\n                        // Possible future optimization: If we know it's an element from an XHTML document (not HTML),\n                        // we don't need to do the .toLowerCase() as it will always be lower case anyway.\n                        return element && element.tagName && element.tagName.toLowerCase();\n                    },\n\n                    catchFunctionErrors: function catchFunctionErrors(delegate) {\n                        return ko['onError'] ? function () {\n                            try {\n                                return delegate.apply(this, arguments);\n                            } catch (e) {\n                                ko['onError'] && ko['onError'](e);\n                                throw e;\n                            }\n                        } : delegate;\n                    },\n\n                    setTimeout: function (_setTimeout) {\n                        function setTimeout(_x, _x2) {\n                            return _setTimeout.apply(this, arguments);\n                        }\n\n                        setTimeout.toString = function () {\n                            return _setTimeout.toString();\n                        };\n\n                        return setTimeout;\n                    }(function (handler, timeout) {\n                        return setTimeout(ko.utils.catchFunctionErrors(handler), timeout);\n                    }),\n\n                    deferError: function deferError(error) {\n                        setTimeout(function () {\n                            ko['onError'] && ko['onError'](error);\n                            throw error;\n                        }, 0);\n                    },\n\n                    registerEventHandler: function registerEventHandler(element, eventType, handler) {\n                        var wrappedHandler = ko.utils.catchFunctionErrors(handler);\n\n                        var mustUseAttachEvent = ieVersion && eventsThatMustBeRegisteredUsingAttachEvent[eventType];\n                        if (!ko.options['useOnlyNativeEvents'] && !mustUseAttachEvent && jQueryInstance) {\n                            jQueryInstance(element)['bind'](eventType, wrappedHandler);\n                        } else if (!mustUseAttachEvent && typeof element.addEventListener == \"function\") element.addEventListener(eventType, wrappedHandler, false);else if (typeof element.attachEvent != \"undefined\") {\n                            var attachEventHandler = function attachEventHandler(event) {\n                                wrappedHandler.call(element, event);\n                            },\n                                attachEventName = \"on\" + eventType;\n                            element.attachEvent(attachEventName, attachEventHandler);\n\n                            // IE does not dispose attachEvent handlers automatically (unlike with addEventListener)\n                            // so to avoid leaks, we have to remove them manually. See bug #856\n                            ko.utils.domNodeDisposal.addDisposeCallback(element, function () {\n                                element.detachEvent(attachEventName, attachEventHandler);\n                            });\n                        } else throw new Error(\"Browser doesn't support addEventListener or attachEvent\");\n                    },\n\n                    triggerEvent: function triggerEvent(element, eventType) {\n                        if (!(element && element.nodeType)) throw new Error(\"element must be a DOM node when calling triggerEvent\");\n\n                        // For click events on checkboxes and radio buttons, jQuery toggles the element checked state *after* the\n                        // event handler runs instead of *before*. (This was fixed in 1.9 for checkboxes but not for radio buttons.)\n                        // IE doesn't change the checked state when you trigger the click event using \"fireEvent\".\n                        // In both cases, we'll use the click method instead.\n                        var useClickWorkaround = isClickOnCheckableElement(element, eventType);\n\n                        if (!ko.options['useOnlyNativeEvents'] && jQueryInstance && !useClickWorkaround) {\n                            jQueryInstance(element)['trigger'](eventType);\n                        } else if (typeof document.createEvent == \"function\") {\n                            if (typeof element.dispatchEvent == \"function\") {\n                                var eventCategory = knownEventTypesByEventName[eventType] || \"HTMLEvents\";\n                                var event = document.createEvent(eventCategory);\n                                event.initEvent(eventType, true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, element);\n                                element.dispatchEvent(event);\n                            } else throw new Error(\"The supplied element doesn't support dispatchEvent\");\n                        } else if (useClickWorkaround && element.click) {\n                            element.click();\n                        } else if (typeof element.fireEvent != \"undefined\") {\n                            element.fireEvent(\"on\" + eventType);\n                        } else {\n                            throw new Error(\"Browser doesn't support triggering events\");\n                        }\n                    },\n\n                    unwrapObservable: function unwrapObservable(value) {\n                        return ko.isObservable(value) ? value() : value;\n                    },\n\n                    peekObservable: function peekObservable(value) {\n                        return ko.isObservable(value) ? value.peek() : value;\n                    },\n\n                    toggleDomNodeCssClass: toggleDomNodeCssClass,\n\n                    setTextContent: function setTextContent(element, textContent) {\n                        var value = ko.utils.unwrapObservable(textContent);\n                        if (value === null || value === undefined) value = \"\";\n\n                        // We need there to be exactly one child: a text node.\n                        // If there are no children, more than one, or if it's not a text node,\n                        // we'll clear everything and create a single text node.\n                        var innerTextNode = ko.virtualElements.firstChild(element);\n                        if (!innerTextNode || innerTextNode.nodeType != 3 || ko.virtualElements.nextSibling(innerTextNode)) {\n                            ko.virtualElements.setDomNodeChildren(element, [element.ownerDocument.createTextNode(value)]);\n                        } else {\n                            innerTextNode.data = value;\n                        }\n\n                        ko.utils.forceRefresh(element);\n                    },\n\n                    setElementName: function setElementName(element, name) {\n                        element.name = name;\n\n                        // Workaround IE 6/7 issue\n                        // - https://github.com/SteveSanderson/knockout/issues/197\n                        // - http://www.matts411.com/post/setting_the_name_attribute_in_ie_dom/\n                        if (ieVersion <= 7) {\n                            try {\n                                element.mergeAttributes(document.createElement(\"<input name='\" + element.name + \"'/>\"), false);\n                            } catch (e) {} // For IE9 with doc mode \"IE9 Standards\" and browser mode \"IE9 Compatibility View\"\n                        }\n                    },\n\n                    forceRefresh: function forceRefresh(node) {\n                        // Workaround for an IE9 rendering bug - https://github.com/SteveSanderson/knockout/issues/209\n                        if (ieVersion >= 9) {\n                            // For text nodes and comment nodes (most likely virtual elements), we will have to refresh the container\n                            var elem = node.nodeType == 1 ? node : node.parentNode;\n                            if (elem.style) elem.style.zoom = elem.style.zoom;\n                        }\n                    },\n\n                    ensureSelectElementIsRenderedCorrectly: function ensureSelectElementIsRenderedCorrectly(selectElement) {\n                        // Workaround for IE9 rendering bug - it doesn't reliably display all the text in dynamically-added select boxes unless you force it to re-render by updating the width.\n                        // (See https://github.com/SteveSanderson/knockout/issues/312, http://stackoverflow.com/questions/5908494/select-only-shows-first-char-of-selected-option)\n                        // Also fixes IE7 and IE8 bug that causes selects to be zero width if enclosed by 'if' or 'with'. (See issue #839)\n                        if (ieVersion) {\n                            var originalWidth = selectElement.style.width;\n                            selectElement.style.width = 0;\n                            selectElement.style.width = originalWidth;\n                        }\n                    },\n\n                    range: function range(min, max) {\n                        min = ko.utils.unwrapObservable(min);\n                        max = ko.utils.unwrapObservable(max);\n                        var result = [];\n                        for (var i = min; i <= max; i++) {\n                            result.push(i);\n                        }return result;\n                    },\n\n                    makeArray: function makeArray(arrayLikeObject) {\n                        var result = [];\n                        for (var i = 0, j = arrayLikeObject.length; i < j; i++) {\n                            result.push(arrayLikeObject[i]);\n                        };\n                        return result;\n                    },\n\n                    createSymbolOrString: function createSymbolOrString(identifier) {\n                        return canUseSymbols ? Symbol(identifier) : identifier;\n                    },\n\n                    isIe6: isIe6,\n                    isIe7: isIe7,\n                    ieVersion: ieVersion,\n\n                    getFormFields: function getFormFields(form, fieldName) {\n                        var fields = ko.utils.makeArray(form.getElementsByTagName(\"input\")).concat(ko.utils.makeArray(form.getElementsByTagName(\"textarea\")));\n                        var isMatchingField = typeof fieldName == 'string' ? function (field) {\n                            return field.name === fieldName;\n                        } : function (field) {\n                            return fieldName.test(field.name);\n                        }; // Treat fieldName as regex or object containing predicate\n                        var matches = [];\n                        for (var i = fields.length - 1; i >= 0; i--) {\n                            if (isMatchingField(fields[i])) matches.push(fields[i]);\n                        };\n                        return matches;\n                    },\n\n                    parseJson: function parseJson(jsonString) {\n                        if (typeof jsonString == \"string\") {\n                            jsonString = ko.utils.stringTrim(jsonString);\n                            if (jsonString) {\n                                if (JSON && JSON.parse) // Use native parsing where available\n                                    return JSON.parse(jsonString);\n                                return new Function(\"return \" + jsonString)(); // Fallback on less safe parsing for older browsers\n                            }\n                        }\n                        return null;\n                    },\n\n                    stringifyJson: function stringifyJson(data, replacer, space) {\n                        // replacer and space are optional\n                        if (!JSON || !JSON.stringify) throw new Error(\"Cannot find JSON.stringify(). Some browsers (e.g., IE < 8) don't support it natively, but you can overcome this by adding a script reference to json2.js, downloadable from http://www.json.org/json2.js\");\n                        return JSON.stringify(ko.utils.unwrapObservable(data), replacer, space);\n                    },\n\n                    postJson: function postJson(urlOrForm, data, options) {\n                        options = options || {};\n                        var params = options['params'] || {};\n                        var includeFields = options['includeFields'] || this.fieldsIncludedWithJsonPost;\n                        var url = urlOrForm;\n\n                        // If we were given a form, use its 'action' URL and pick out any requested field values\n                        if ((typeof urlOrForm === 'undefined' ? 'undefined' : _typeof(urlOrForm)) == 'object' && ko.utils.tagNameLower(urlOrForm) === \"form\") {\n                            var originalForm = urlOrForm;\n                            url = originalForm.action;\n                            for (var i = includeFields.length - 1; i >= 0; i--) {\n                                var fields = ko.utils.getFormFields(originalForm, includeFields[i]);\n                                for (var j = fields.length - 1; j >= 0; j--) {\n                                    params[fields[j].name] = fields[j].value;\n                                }\n                            }\n                        }\n\n                        data = ko.utils.unwrapObservable(data);\n                        var form = document.createElement(\"form\");\n                        form.style.display = \"none\";\n                        form.action = url;\n                        form.method = \"post\";\n                        for (var key in data) {\n                            // Since 'data' this is a model object, we include all properties including those inherited from its prototype\n                            var input = document.createElement(\"input\");\n                            input.type = \"hidden\";\n                            input.name = key;\n                            input.value = ko.utils.stringifyJson(ko.utils.unwrapObservable(data[key]));\n                            form.appendChild(input);\n                        }\n                        objectForEach(params, function (key, value) {\n                            var input = document.createElement(\"input\");\n                            input.type = \"hidden\";\n                            input.name = key;\n                            input.value = value;\n                            form.appendChild(input);\n                        });\n                        document.body.appendChild(form);\n                        options['submitter'] ? options['submitter'](form) : form.submit();\n                        setTimeout(function () {\n                            form.parentNode.removeChild(form);\n                        }, 0);\n                    }\n                };\n            }();\n\n            ko.exportSymbol('utils', ko.utils);\n            ko.exportSymbol('utils.arrayForEach', ko.utils.arrayForEach);\n            ko.exportSymbol('utils.arrayFirst', ko.utils.arrayFirst);\n            ko.exportSymbol('utils.arrayFilter', ko.utils.arrayFilter);\n            ko.exportSymbol('utils.arrayGetDistinctValues', ko.utils.arrayGetDistinctValues);\n            ko.exportSymbol('utils.arrayIndexOf', ko.utils.arrayIndexOf);\n            ko.exportSymbol('utils.arrayMap', ko.utils.arrayMap);\n            ko.exportSymbol('utils.arrayPushAll', ko.utils.arrayPushAll);\n            ko.exportSymbol('utils.arrayRemoveItem', ko.utils.arrayRemoveItem);\n            ko.exportSymbol('utils.extend', ko.utils.extend);\n            ko.exportSymbol('utils.fieldsIncludedWithJsonPost', ko.utils.fieldsIncludedWithJsonPost);\n            ko.exportSymbol('utils.getFormFields', ko.utils.getFormFields);\n            ko.exportSymbol('utils.peekObservable', ko.utils.peekObservable);\n            ko.exportSymbol('utils.postJson', ko.utils.postJson);\n            ko.exportSymbol('utils.parseJson', ko.utils.parseJson);\n            ko.exportSymbol('utils.registerEventHandler', ko.utils.registerEventHandler);\n            ko.exportSymbol('utils.stringifyJson', ko.utils.stringifyJson);\n            ko.exportSymbol('utils.range', ko.utils.range);\n            ko.exportSymbol('utils.toggleDomNodeCssClass', ko.utils.toggleDomNodeCssClass);\n            ko.exportSymbol('utils.triggerEvent', ko.utils.triggerEvent);\n            ko.exportSymbol('utils.unwrapObservable', ko.utils.unwrapObservable);\n            ko.exportSymbol('utils.objectForEach', ko.utils.objectForEach);\n            ko.exportSymbol('utils.addOrRemoveItem', ko.utils.addOrRemoveItem);\n            ko.exportSymbol('utils.setTextContent', ko.utils.setTextContent);\n            ko.exportSymbol('unwrap', ko.utils.unwrapObservable); // Convenient shorthand, because this is used so commonly\n\n            if (!Function.prototype['bind']) {\n                // Function.prototype.bind is a standard part of ECMAScript 5th Edition (December 2009, http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf)\n                // In case the browser doesn't implement it natively, provide a JavaScript implementation. This implementation is based on the one in prototype.js\n                Function.prototype['bind'] = function (object) {\n                    var originalFunction = this;\n                    if (arguments.length === 1) {\n                        return function () {\n                            return originalFunction.apply(object, arguments);\n                        };\n                    } else {\n                        var partialArgs = Array.prototype.slice.call(arguments, 1);\n                        return function () {\n                            var args = partialArgs.slice(0);\n                            args.push.apply(args, arguments);\n                            return originalFunction.apply(object, args);\n                        };\n                    }\n                };\n            }\n\n            ko.utils.domData = new function () {\n                var uniqueId = 0;\n                var dataStoreKeyExpandoPropertyName = \"__ko__\" + new Date().getTime();\n                var dataStore = {};\n\n                function getAll(node, createIfNotFound) {\n                    var dataStoreKey = node[dataStoreKeyExpandoPropertyName];\n                    var hasExistingDataStore = dataStoreKey && dataStoreKey !== \"null\" && dataStore[dataStoreKey];\n                    if (!hasExistingDataStore) {\n                        if (!createIfNotFound) return undefined;\n                        dataStoreKey = node[dataStoreKeyExpandoPropertyName] = \"ko\" + uniqueId++;\n                        dataStore[dataStoreKey] = {};\n                    }\n                    return dataStore[dataStoreKey];\n                }\n\n                return {\n                    get: function get(node, key) {\n                        var allDataForNode = getAll(node, false);\n                        return allDataForNode === undefined ? undefined : allDataForNode[key];\n                    },\n                    set: function set(node, key, value) {\n                        if (value === undefined) {\n                            // Make sure we don't actually create a new domData key if we are actually deleting a value\n                            if (getAll(node, false) === undefined) return;\n                        }\n                        var allDataForNode = getAll(node, true);\n                        allDataForNode[key] = value;\n                    },\n                    clear: function clear(node) {\n                        var dataStoreKey = node[dataStoreKeyExpandoPropertyName];\n                        if (dataStoreKey) {\n                            delete dataStore[dataStoreKey];\n                            node[dataStoreKeyExpandoPropertyName] = null;\n                            return true; // Exposing \"did clean\" flag purely so specs can infer whether things have been cleaned up as intended\n                        }\n                        return false;\n                    },\n\n                    nextKey: function nextKey() {\n                        return uniqueId++ + dataStoreKeyExpandoPropertyName;\n                    }\n                };\n            }();\n\n            ko.exportSymbol('utils.domData', ko.utils.domData);\n            ko.exportSymbol('utils.domData.clear', ko.utils.domData.clear); // Exporting only so specs can clear up after themselves fully\n\n            ko.utils.domNodeDisposal = new function () {\n                var domDataKey = ko.utils.domData.nextKey();\n                var cleanableNodeTypes = { 1: true, 8: true, 9: true }; // Element, Comment, Document\n                var cleanableNodeTypesWithDescendants = { 1: true, 9: true }; // Element, Document\n\n                function getDisposeCallbacksCollection(node, createIfNotFound) {\n                    var allDisposeCallbacks = ko.utils.domData.get(node, domDataKey);\n                    if (allDisposeCallbacks === undefined && createIfNotFound) {\n                        allDisposeCallbacks = [];\n                        ko.utils.domData.set(node, domDataKey, allDisposeCallbacks);\n                    }\n                    return allDisposeCallbacks;\n                }\n                function destroyCallbacksCollection(node) {\n                    ko.utils.domData.set(node, domDataKey, undefined);\n                }\n\n                function cleanSingleNode(node) {\n                    // Run all the dispose callbacks\n                    var callbacks = getDisposeCallbacksCollection(node, false);\n                    if (callbacks) {\n                        callbacks = callbacks.slice(0); // Clone, as the array may be modified during iteration (typically, callbacks will remove themselves)\n                        for (var i = 0; i < callbacks.length; i++) {\n                            callbacks[i](node);\n                        }\n                    }\n\n                    // Erase the DOM data\n                    ko.utils.domData.clear(node);\n\n                    // Perform cleanup needed by external libraries (currently only jQuery, but can be extended)\n                    ko.utils.domNodeDisposal[\"cleanExternalData\"](node);\n\n                    // Clear any immediate-child comment nodes, as these wouldn't have been found by\n                    // node.getElementsByTagName(\"*\") in cleanNode() (comment nodes aren't elements)\n                    if (cleanableNodeTypesWithDescendants[node.nodeType]) cleanImmediateCommentTypeChildren(node);\n                }\n\n                function cleanImmediateCommentTypeChildren(nodeWithChildren) {\n                    var child,\n                        nextChild = nodeWithChildren.firstChild;\n                    while (child = nextChild) {\n                        nextChild = child.nextSibling;\n                        if (child.nodeType === 8) cleanSingleNode(child);\n                    }\n                }\n\n                return {\n                    addDisposeCallback: function addDisposeCallback(node, callback) {\n                        if (typeof callback != \"function\") throw new Error(\"Callback must be a function\");\n                        getDisposeCallbacksCollection(node, true).push(callback);\n                    },\n\n                    removeDisposeCallback: function removeDisposeCallback(node, callback) {\n                        var callbacksCollection = getDisposeCallbacksCollection(node, false);\n                        if (callbacksCollection) {\n                            ko.utils.arrayRemoveItem(callbacksCollection, callback);\n                            if (callbacksCollection.length == 0) destroyCallbacksCollection(node);\n                        }\n                    },\n\n                    cleanNode: function cleanNode(node) {\n                        // First clean this node, where applicable\n                        if (cleanableNodeTypes[node.nodeType]) {\n                            cleanSingleNode(node);\n\n                            // ... then its descendants, where applicable\n                            if (cleanableNodeTypesWithDescendants[node.nodeType]) {\n                                // Clone the descendants list in case it changes during iteration\n                                var descendants = [];\n                                ko.utils.arrayPushAll(descendants, node.getElementsByTagName(\"*\"));\n                                for (var i = 0, j = descendants.length; i < j; i++) {\n                                    cleanSingleNode(descendants[i]);\n                                }\n                            }\n                        }\n                        return node;\n                    },\n\n                    removeNode: function removeNode(node) {\n                        ko.cleanNode(node);\n                        if (node.parentNode) node.parentNode.removeChild(node);\n                    },\n\n                    \"cleanExternalData\": function cleanExternalData(node) {\n                        // Special support for jQuery here because it's so commonly used.\n                        // Many jQuery plugins (including jquery.tmpl) store data using jQuery's equivalent of domData\n                        // so notify it to tear down any resources associated with the node & descendants here.\n                        if (jQueryInstance && typeof jQueryInstance['cleanData'] == \"function\") jQueryInstance['cleanData']([node]);\n                    }\n                };\n            }();\n            ko.cleanNode = ko.utils.domNodeDisposal.cleanNode; // Shorthand name for convenience\n            ko.removeNode = ko.utils.domNodeDisposal.removeNode; // Shorthand name for convenience\n            ko.exportSymbol('cleanNode', ko.cleanNode);\n            ko.exportSymbol('removeNode', ko.removeNode);\n            ko.exportSymbol('utils.domNodeDisposal', ko.utils.domNodeDisposal);\n            ko.exportSymbol('utils.domNodeDisposal.addDisposeCallback', ko.utils.domNodeDisposal.addDisposeCallback);\n            ko.exportSymbol('utils.domNodeDisposal.removeDisposeCallback', ko.utils.domNodeDisposal.removeDisposeCallback);\n            (function () {\n                var none = [0, \"\", \"\"],\n                    table = [1, \"<table>\", \"</table>\"],\n                    tbody = [2, \"<table><tbody>\", \"</tbody></table>\"],\n                    tr = [3, \"<table><tbody><tr>\", \"</tr></tbody></table>\"],\n                    select = [1, \"<select multiple='multiple'>\", \"</select>\"],\n                    lookup = {\n                    'thead': table,\n                    'tbody': table,\n                    'tfoot': table,\n                    'tr': tbody,\n                    'td': tr,\n                    'th': tr,\n                    'option': select,\n                    'optgroup': select\n                },\n\n\n                // This is needed for old IE if you're *not* using either jQuery or innerShiv. Doesn't affect other cases.\n                mayRequireCreateElementHack = ko.utils.ieVersion <= 8;\n\n                function getWrap(tags) {\n                    var m = tags.match(/^<([a-z]+)[ >]/);\n                    return m && lookup[m[1]] || none;\n                }\n\n                function simpleHtmlParse(html, documentContext) {\n                    documentContext || (documentContext = document);\n                    var windowContext = documentContext['parentWindow'] || documentContext['defaultView'] || window;\n\n                    // Based on jQuery's \"clean\" function, but only accounting for table-related elements.\n                    // If you have referenced jQuery, this won't be used anyway - KO will use jQuery's \"clean\" function directly\n\n                    // Note that there's still an issue in IE < 9 whereby it will discard comment nodes that are the first child of\n                    // a descendant node. For example: \"<div><!-- mycomment -->abc</div>\" will get parsed as \"<div>abc</div>\"\n                    // This won't affect anyone who has referenced jQuery, and there's always the workaround of inserting a dummy node\n                    // (possibly a text node) in front of the comment. So, KO does not attempt to workaround this IE issue automatically at present.\n\n                    // Trim whitespace, otherwise indexOf won't work as expected\n                    var tags = ko.utils.stringTrim(html).toLowerCase(),\n                        div = documentContext.createElement(\"div\"),\n                        wrap = getWrap(tags),\n                        depth = wrap[0];\n\n                    // Go to html and back, then peel off extra wrappers\n                    // Note that we always prefix with some dummy text, because otherwise, IE<9 will strip out leading comment nodes in descendants. Total madness.\n                    var markup = \"ignored<div>\" + wrap[1] + html + wrap[2] + \"</div>\";\n                    if (typeof windowContext['innerShiv'] == \"function\") {\n                        // Note that innerShiv is deprecated in favour of html5shiv. We should consider adding\n                        // support for html5shiv (except if no explicit support is needed, e.g., if html5shiv\n                        // somehow shims the native APIs so it just works anyway)\n                        div.appendChild(windowContext['innerShiv'](markup));\n                    } else {\n                        if (mayRequireCreateElementHack) {\n                            // The document.createElement('my-element') trick to enable custom elements in IE6-8\n                            // only works if we assign innerHTML on an element associated with that document.\n                            documentContext.appendChild(div);\n                        }\n\n                        div.innerHTML = markup;\n\n                        if (mayRequireCreateElementHack) {\n                            div.parentNode.removeChild(div);\n                        }\n                    }\n\n                    // Move to the right depth\n                    while (depth--) {\n                        div = div.lastChild;\n                    }return ko.utils.makeArray(div.lastChild.childNodes);\n                }\n\n                function jQueryHtmlParse(html, documentContext) {\n                    // jQuery's \"parseHTML\" function was introduced in jQuery 1.8.0 and is a documented public API.\n                    if (jQueryInstance['parseHTML']) {\n                        return jQueryInstance['parseHTML'](html, documentContext) || []; // Ensure we always return an array and never null\n                    } else {\n                        // For jQuery < 1.8.0, we fall back on the undocumented internal \"clean\" function.\n                        var elems = jQueryInstance['clean']([html], documentContext);\n\n                        // As of jQuery 1.7.1, jQuery parses the HTML by appending it to some dummy parent nodes held in an in-memory document fragment.\n                        // Unfortunately, it never clears the dummy parent nodes from the document fragment, so it leaks memory over time.\n                        // Fix this by finding the top-most dummy parent element, and detaching it from its owner fragment.\n                        if (elems && elems[0]) {\n                            // Find the top-most parent element that's a direct child of a document fragment\n                            var elem = elems[0];\n                            while (elem.parentNode && elem.parentNode.nodeType !== 11 /* i.e., DocumentFragment */) {\n                                elem = elem.parentNode;\n                            } // ... then detach it\n                            if (elem.parentNode) elem.parentNode.removeChild(elem);\n                        }\n\n                        return elems;\n                    }\n                }\n\n                ko.utils.parseHtmlFragment = function (html, documentContext) {\n                    return jQueryInstance ? jQueryHtmlParse(html, documentContext) : // As below, benefit from jQuery's optimisations where possible\n                    simpleHtmlParse(html, documentContext); // ... otherwise, this simple logic will do in most common cases.\n                };\n\n                ko.utils.setHtml = function (node, html) {\n                    ko.utils.emptyDomNode(node);\n\n                    // There's no legitimate reason to display a stringified observable without unwrapping it, so we'll unwrap it\n                    html = ko.utils.unwrapObservable(html);\n\n                    if (html !== null && html !== undefined) {\n                        if (typeof html != 'string') html = html.toString();\n\n                        // jQuery contains a lot of sophisticated code to parse arbitrary HTML fragments,\n                        // for example <tr> elements which are not normally allowed to exist on their own.\n                        // If you've referenced jQuery we'll use that rather than duplicating its code.\n                        if (jQueryInstance) {\n                            jQueryInstance(node)['html'](html);\n                        } else {\n                            // ... otherwise, use KO's own parsing logic.\n                            var parsedNodes = ko.utils.parseHtmlFragment(html, node.ownerDocument);\n                            for (var i = 0; i < parsedNodes.length; i++) {\n                                node.appendChild(parsedNodes[i]);\n                            }\n                        }\n                    }\n                };\n            })();\n\n            ko.exportSymbol('utils.parseHtmlFragment', ko.utils.parseHtmlFragment);\n            ko.exportSymbol('utils.setHtml', ko.utils.setHtml);\n\n            ko.memoization = function () {\n                var memos = {};\n\n                function randomMax8HexChars() {\n                    return ((1 + Math.random()) * 0x100000000 | 0).toString(16).substring(1);\n                }\n                function generateRandomId() {\n                    return randomMax8HexChars() + randomMax8HexChars();\n                }\n                function findMemoNodes(rootNode, appendToArray) {\n                    if (!rootNode) return;\n                    if (rootNode.nodeType == 8) {\n                        var memoId = ko.memoization.parseMemoText(rootNode.nodeValue);\n                        if (memoId != null) appendToArray.push({ domNode: rootNode, memoId: memoId });\n                    } else if (rootNode.nodeType == 1) {\n                        for (var i = 0, childNodes = rootNode.childNodes, j = childNodes.length; i < j; i++) {\n                            findMemoNodes(childNodes[i], appendToArray);\n                        }\n                    }\n                }\n\n                return {\n                    memoize: function memoize(callback) {\n                        if (typeof callback != \"function\") throw new Error(\"You can only pass a function to ko.memoization.memoize()\");\n                        var memoId = generateRandomId();\n                        memos[memoId] = callback;\n                        return \"<!--[ko_memo:\" + memoId + \"]-->\";\n                    },\n\n                    unmemoize: function unmemoize(memoId, callbackParams) {\n                        var callback = memos[memoId];\n                        if (callback === undefined) throw new Error(\"Couldn't find any memo with ID \" + memoId + \". Perhaps it's already been unmemoized.\");\n                        try {\n                            callback.apply(null, callbackParams || []);\n                            return true;\n                        } finally {\n                            delete memos[memoId];\n                        }\n                    },\n\n                    unmemoizeDomNodeAndDescendants: function unmemoizeDomNodeAndDescendants(domNode, extraCallbackParamsArray) {\n                        var memos = [];\n                        findMemoNodes(domNode, memos);\n                        for (var i = 0, j = memos.length; i < j; i++) {\n                            var node = memos[i].domNode;\n                            var combinedParams = [node];\n                            if (extraCallbackParamsArray) ko.utils.arrayPushAll(combinedParams, extraCallbackParamsArray);\n                            ko.memoization.unmemoize(memos[i].memoId, combinedParams);\n                            node.nodeValue = \"\"; // Neuter this node so we don't try to unmemoize it again\n                            if (node.parentNode) node.parentNode.removeChild(node); // If possible, erase it totally (not always possible - someone else might just hold a reference to it then call unmemoizeDomNodeAndDescendants again)\n                        }\n                    },\n\n                    parseMemoText: function parseMemoText(memoText) {\n                        var match = memoText.match(/^\\[ko_memo\\:(.*?)\\]$/);\n                        return match ? match[1] : null;\n                    }\n                };\n            }();\n\n            ko.exportSymbol('memoization', ko.memoization);\n            ko.exportSymbol('memoization.memoize', ko.memoization.memoize);\n            ko.exportSymbol('memoization.unmemoize', ko.memoization.unmemoize);\n            ko.exportSymbol('memoization.parseMemoText', ko.memoization.parseMemoText);\n            ko.exportSymbol('memoization.unmemoizeDomNodeAndDescendants', ko.memoization.unmemoizeDomNodeAndDescendants);\n            ko.tasks = function () {\n                var scheduler,\n                    taskQueue = [],\n                    taskQueueLength = 0,\n                    nextHandle = 1,\n                    nextIndexToProcess = 0;\n\n                if (window['MutationObserver']) {\n                    // Chrome 27+, Firefox 14+, IE 11+, Opera 15+, Safari 6.1+\n                    // From https://github.com/petkaantonov/bluebird * Copyright (c) 2014 Petka Antonov * License: MIT\n                    scheduler = function (callback) {\n                        var div = document.createElement(\"div\");\n                        new MutationObserver(callback).observe(div, { attributes: true });\n                        return function () {\n                            div.classList.toggle(\"foo\");\n                        };\n                    }(scheduledProcess);\n                } else if (document && \"onreadystatechange\" in document.createElement(\"script\")) {\n                    // IE 6-10\n                    // From https://github.com/YuzuJS/setImmediate * Copyright (c) 2012 Barnesandnoble.com, llc, Donavon West, and Domenic Denicola * License: MIT\n                    scheduler = function scheduler(callback) {\n                        var script = document.createElement(\"script\");\n                        script.onreadystatechange = function () {\n                            script.onreadystatechange = null;\n                            document.documentElement.removeChild(script);\n                            script = null;\n                            callback();\n                        };\n                        document.documentElement.appendChild(script);\n                    };\n                } else {\n                    scheduler = function scheduler(callback) {\n                        setTimeout(callback, 0);\n                    };\n                }\n\n                function processTasks() {\n                    if (taskQueueLength) {\n                        // Each mark represents the end of a logical group of tasks and the number of these groups is\n                        // limited to prevent unchecked recursion.\n                        var mark = taskQueueLength,\n                            countMarks = 0;\n\n                        // nextIndexToProcess keeps track of where we are in the queue; processTasks can be called recursively without issue\n                        for (var task; nextIndexToProcess < taskQueueLength;) {\n                            if (task = taskQueue[nextIndexToProcess++]) {\n                                if (nextIndexToProcess > mark) {\n                                    if (++countMarks >= 5000) {\n                                        nextIndexToProcess = taskQueueLength; // skip all tasks remaining in the queue since any of them could be causing the recursion\n                                        ko.utils.deferError(Error(\"'Too much recursion' after processing \" + countMarks + \" task groups.\"));\n                                        break;\n                                    }\n                                    mark = taskQueueLength;\n                                }\n                                try {\n                                    task();\n                                } catch (ex) {\n                                    ko.utils.deferError(ex);\n                                }\n                            }\n                        }\n                    }\n                }\n\n                function scheduledProcess() {\n                    processTasks();\n\n                    // Reset the queue\n                    nextIndexToProcess = taskQueueLength = taskQueue.length = 0;\n                }\n\n                function scheduleTaskProcessing() {\n                    ko.tasks['scheduler'](scheduledProcess);\n                }\n\n                var tasks = {\n                    'scheduler': scheduler, // Allow overriding the scheduler\n\n                    schedule: function schedule(func) {\n                        if (!taskQueueLength) {\n                            scheduleTaskProcessing();\n                        }\n\n                        taskQueue[taskQueueLength++] = func;\n                        return nextHandle++;\n                    },\n\n                    cancel: function cancel(handle) {\n                        var index = handle - (nextHandle - taskQueueLength);\n                        if (index >= nextIndexToProcess && index < taskQueueLength) {\n                            taskQueue[index] = null;\n                        }\n                    },\n\n                    // For testing only: reset the queue and return the previous queue length\n                    'resetForTesting': function resetForTesting() {\n                        var length = taskQueueLength - nextIndexToProcess;\n                        nextIndexToProcess = taskQueueLength = taskQueue.length = 0;\n                        return length;\n                    },\n\n                    runEarly: processTasks\n                };\n\n                return tasks;\n            }();\n\n            ko.exportSymbol('tasks', ko.tasks);\n            ko.exportSymbol('tasks.schedule', ko.tasks.schedule);\n            //ko.exportSymbol('tasks.cancel', ko.tasks.cancel);  \"cancel\" isn't minified\n            ko.exportSymbol('tasks.runEarly', ko.tasks.runEarly);\n            ko.extenders = {\n                'throttle': function throttle(target, timeout) {\n                    // Throttling means two things:\n\n                    // (1) For dependent observables, we throttle *evaluations* so that, no matter how fast its dependencies\n                    //     notify updates, the target doesn't re-evaluate (and hence doesn't notify) faster than a certain rate\n                    target['throttleEvaluation'] = timeout;\n\n                    // (2) For writable targets (observables, or writable dependent observables), we throttle *writes*\n                    //     so the target cannot change value synchronously or faster than a certain rate\n                    var writeTimeoutInstance = null;\n                    return ko.dependentObservable({\n                        'read': target,\n                        'write': function write(value) {\n                            clearTimeout(writeTimeoutInstance);\n                            writeTimeoutInstance = ko.utils.setTimeout(function () {\n                                target(value);\n                            }, timeout);\n                        }\n                    });\n                },\n\n                'rateLimit': function rateLimit(target, options) {\n                    var timeout, method, limitFunction;\n\n                    if (typeof options == 'number') {\n                        timeout = options;\n                    } else {\n                        timeout = options['timeout'];\n                        method = options['method'];\n                    }\n\n                    // rateLimit supersedes deferred updates\n                    target._deferUpdates = false;\n\n                    limitFunction = method == 'notifyWhenChangesStop' ? debounce : throttle;\n                    target.limit(function (callback) {\n                        return limitFunction(callback, timeout);\n                    });\n                },\n\n                'deferred': function deferred(target, options) {\n                    if (options !== true) {\n                        throw new Error('The \\'deferred\\' extender only accepts the value \\'true\\', because it is not supported to turn deferral off once enabled.');\n                    }\n\n                    if (!target._deferUpdates) {\n                        target._deferUpdates = true;\n                        target.limit(function (callback) {\n                            var handle;\n                            return function () {\n                                ko.tasks.cancel(handle);\n                                handle = ko.tasks.schedule(callback);\n                                target['notifySubscribers'](undefined, 'dirty');\n                            };\n                        });\n                    }\n                },\n\n                'notify': function notify(target, notifyWhen) {\n                    target[\"equalityComparer\"] = notifyWhen == \"always\" ? null : // null equalityComparer means to always notify\n                    valuesArePrimitiveAndEqual;\n                }\n            };\n\n            var primitiveTypes = { 'undefined': 1, 'boolean': 1, 'number': 1, 'string': 1 };\n            function valuesArePrimitiveAndEqual(a, b) {\n                var oldValueIsPrimitive = a === null || (typeof a === 'undefined' ? 'undefined' : _typeof(a)) in primitiveTypes;\n                return oldValueIsPrimitive ? a === b : false;\n            }\n\n            function throttle(callback, timeout) {\n                var timeoutInstance;\n                return function () {\n                    if (!timeoutInstance) {\n                        timeoutInstance = ko.utils.setTimeout(function () {\n                            timeoutInstance = undefined;\n                            callback();\n                        }, timeout);\n                    }\n                };\n            }\n\n            function debounce(callback, timeout) {\n                var timeoutInstance;\n                return function () {\n                    clearTimeout(timeoutInstance);\n                    timeoutInstance = ko.utils.setTimeout(callback, timeout);\n                };\n            }\n\n            function applyExtenders(requestedExtenders) {\n                var target = this;\n                if (requestedExtenders) {\n                    ko.utils.objectForEach(requestedExtenders, function (key, value) {\n                        var extenderHandler = ko.extenders[key];\n                        if (typeof extenderHandler == 'function') {\n                            target = extenderHandler(target, value) || target;\n                        }\n                    });\n                }\n                return target;\n            }\n\n            ko.exportSymbol('extenders', ko.extenders);\n\n            ko.subscription = function (target, callback, disposeCallback) {\n                this._target = target;\n                this.callback = callback;\n                this.disposeCallback = disposeCallback;\n                this.isDisposed = false;\n                ko.exportProperty(this, 'dispose', this.dispose);\n            };\n            ko.subscription.prototype.dispose = function () {\n                this.isDisposed = true;\n                this.disposeCallback();\n            };\n\n            ko.subscribable = function () {\n                ko.utils.setPrototypeOfOrExtend(this, ko_subscribable_fn);\n                ko_subscribable_fn.init(this);\n            };\n\n            var defaultEvent = \"change\";\n\n            // Moved out of \"limit\" to avoid the extra closure\n            function limitNotifySubscribers(value, event) {\n                if (!event || event === defaultEvent) {\n                    this._limitChange(value);\n                } else if (event === 'beforeChange') {\n                    this._limitBeforeChange(value);\n                } else {\n                    this._origNotifySubscribers(value, event);\n                }\n            }\n\n            var ko_subscribable_fn = {\n                init: function init(instance) {\n                    instance._subscriptions = {};\n                    instance._versionNumber = 1;\n                },\n\n                subscribe: function subscribe(callback, callbackTarget, event) {\n                    var self = this;\n\n                    event = event || defaultEvent;\n                    var boundCallback = callbackTarget ? callback.bind(callbackTarget) : callback;\n\n                    var subscription = new ko.subscription(self, boundCallback, function () {\n                        ko.utils.arrayRemoveItem(self._subscriptions[event], subscription);\n                        if (self.afterSubscriptionRemove) self.afterSubscriptionRemove(event);\n                    });\n\n                    if (self.beforeSubscriptionAdd) self.beforeSubscriptionAdd(event);\n\n                    if (!self._subscriptions[event]) self._subscriptions[event] = [];\n                    self._subscriptions[event].push(subscription);\n\n                    return subscription;\n                },\n\n                \"notifySubscribers\": function notifySubscribers(valueToNotify, event) {\n                    event = event || defaultEvent;\n                    if (event === defaultEvent) {\n                        this.updateVersion();\n                    }\n                    if (this.hasSubscriptionsForEvent(event)) {\n                        try {\n                            ko.dependencyDetection.begin(); // Begin suppressing dependency detection (by setting the top frame to undefined)\n                            for (var a = this._subscriptions[event].slice(0), i = 0, subscription; subscription = a[i]; ++i) {\n                                // In case a subscription was disposed during the arrayForEach cycle, check\n                                // for isDisposed on each subscription before invoking its callback\n                                if (!subscription.isDisposed) subscription.callback(valueToNotify);\n                            }\n                        } finally {\n                            ko.dependencyDetection.end(); // End suppressing dependency detection\n                        }\n                    }\n                },\n\n                getVersion: function getVersion() {\n                    return this._versionNumber;\n                },\n\n                hasChanged: function hasChanged(versionToCheck) {\n                    return this.getVersion() !== versionToCheck;\n                },\n\n                updateVersion: function updateVersion() {\n                    ++this._versionNumber;\n                },\n\n                limit: function limit(limitFunction) {\n                    var self = this,\n                        selfIsObservable = ko.isObservable(self),\n                        ignoreBeforeChange,\n                        previousValue,\n                        pendingValue,\n                        beforeChange = 'beforeChange';\n\n                    if (!self._origNotifySubscribers) {\n                        self._origNotifySubscribers = self[\"notifySubscribers\"];\n                        self[\"notifySubscribers\"] = limitNotifySubscribers;\n                    }\n\n                    var finish = limitFunction(function () {\n                        self._notificationIsPending = false;\n\n                        // If an observable provided a reference to itself, access it to get the latest value.\n                        // This allows computed observables to delay calculating their value until needed.\n                        if (selfIsObservable && pendingValue === self) {\n                            pendingValue = self();\n                        }\n                        ignoreBeforeChange = false;\n                        if (self.isDifferent(previousValue, pendingValue)) {\n                            self._origNotifySubscribers(previousValue = pendingValue);\n                        }\n                    });\n\n                    self._limitChange = function (value) {\n                        self._notificationIsPending = ignoreBeforeChange = true;\n                        pendingValue = value;\n                        finish();\n                    };\n                    self._limitBeforeChange = function (value) {\n                        if (!ignoreBeforeChange) {\n                            previousValue = value;\n                            self._origNotifySubscribers(value, beforeChange);\n                        }\n                    };\n                },\n\n                hasSubscriptionsForEvent: function hasSubscriptionsForEvent(event) {\n                    return this._subscriptions[event] && this._subscriptions[event].length;\n                },\n\n                getSubscriptionsCount: function getSubscriptionsCount(event) {\n                    if (event) {\n                        return this._subscriptions[event] && this._subscriptions[event].length || 0;\n                    } else {\n                        var total = 0;\n                        ko.utils.objectForEach(this._subscriptions, function (eventName, subscriptions) {\n                            if (eventName !== 'dirty') total += subscriptions.length;\n                        });\n                        return total;\n                    }\n                },\n\n                isDifferent: function isDifferent(oldValue, newValue) {\n                    return !this['equalityComparer'] || !this['equalityComparer'](oldValue, newValue);\n                },\n\n                extend: applyExtenders\n            };\n\n            ko.exportProperty(ko_subscribable_fn, 'subscribe', ko_subscribable_fn.subscribe);\n            ko.exportProperty(ko_subscribable_fn, 'extend', ko_subscribable_fn.extend);\n            ko.exportProperty(ko_subscribable_fn, 'getSubscriptionsCount', ko_subscribable_fn.getSubscriptionsCount);\n\n            // For browsers that support proto assignment, we overwrite the prototype of each\n            // observable instance. Since observables are functions, we need Function.prototype\n            // to still be in the prototype chain.\n            if (ko.utils.canSetPrototype) {\n                ko.utils.setPrototypeOf(ko_subscribable_fn, Function.prototype);\n            }\n\n            ko.subscribable['fn'] = ko_subscribable_fn;\n\n            ko.isSubscribable = function (instance) {\n                return instance != null && typeof instance.subscribe == \"function\" && typeof instance[\"notifySubscribers\"] == \"function\";\n            };\n\n            ko.exportSymbol('subscribable', ko.subscribable);\n            ko.exportSymbol('isSubscribable', ko.isSubscribable);\n\n            ko.computedContext = ko.dependencyDetection = function () {\n                var outerFrames = [],\n                    currentFrame,\n                    lastId = 0;\n\n                // Return a unique ID that can be assigned to an observable for dependency tracking.\n                // Theoretically, you could eventually overflow the number storage size, resulting\n                // in duplicate IDs. But in JavaScript, the largest exact integral value is 2^53\n                // or 9,007,199,254,740,992. If you created 1,000,000 IDs per second, it would\n                // take over 285 years to reach that number.\n                // Reference http://blog.vjeux.com/2010/javascript/javascript-max_int-number-limits.html\n                function getId() {\n                    return ++lastId;\n                }\n\n                function begin(options) {\n                    outerFrames.push(currentFrame);\n                    currentFrame = options;\n                }\n\n                function end() {\n                    currentFrame = outerFrames.pop();\n                }\n\n                return {\n                    begin: begin,\n\n                    end: end,\n\n                    registerDependency: function registerDependency(subscribable) {\n                        if (currentFrame) {\n                            if (!ko.isSubscribable(subscribable)) throw new Error(\"Only subscribable things can act as dependencies\");\n                            currentFrame.callback.call(currentFrame.callbackTarget, subscribable, subscribable._id || (subscribable._id = getId()));\n                        }\n                    },\n\n                    ignore: function ignore(callback, callbackTarget, callbackArgs) {\n                        try {\n                            begin();\n                            return callback.apply(callbackTarget, callbackArgs || []);\n                        } finally {\n                            end();\n                        }\n                    },\n\n                    getDependenciesCount: function getDependenciesCount() {\n                        if (currentFrame) return currentFrame.computed.getDependenciesCount();\n                    },\n\n                    isInitial: function isInitial() {\n                        if (currentFrame) return currentFrame.isInitial;\n                    }\n                };\n            }();\n\n            ko.exportSymbol('computedContext', ko.computedContext);\n            ko.exportSymbol('computedContext.getDependenciesCount', ko.computedContext.getDependenciesCount);\n            ko.exportSymbol('computedContext.isInitial', ko.computedContext.isInitial);\n\n            ko.exportSymbol('ignoreDependencies', ko.ignoreDependencies = ko.dependencyDetection.ignore);\n            var observableLatestValue = ko.utils.createSymbolOrString('_latestValue');\n\n            ko.observable = function (initialValue) {\n                function observable() {\n                    if (arguments.length > 0) {\n                        // Write\n\n                        // Ignore writes if the value hasn't changed\n                        if (observable.isDifferent(observable[observableLatestValue], arguments[0])) {\n                            observable.valueWillMutate();\n                            observable[observableLatestValue] = arguments[0];\n                            observable.valueHasMutated();\n                        }\n                        return this; // Permits chained assignments\n                    } else {\n                        // Read\n                        ko.dependencyDetection.registerDependency(observable); // The caller only needs to be notified of changes if they did a \"read\" operation\n                        return observable[observableLatestValue];\n                    }\n                }\n\n                observable[observableLatestValue] = initialValue;\n\n                // Inherit from 'subscribable'\n                if (!ko.utils.canSetPrototype) {\n                    // 'subscribable' won't be on the prototype chain unless we put it there directly\n                    ko.utils.extend(observable, ko.subscribable['fn']);\n                }\n                ko.subscribable['fn'].init(observable);\n\n                // Inherit from 'observable'\n                ko.utils.setPrototypeOfOrExtend(observable, observableFn);\n\n                if (ko.options['deferUpdates']) {\n                    ko.extenders['deferred'](observable, true);\n                }\n\n                return observable;\n            };\n\n            // Define prototype for observables\n            var observableFn = {\n                'equalityComparer': valuesArePrimitiveAndEqual,\n                peek: function peek() {\n                    return this[observableLatestValue];\n                },\n                valueHasMutated: function valueHasMutated() {\n                    this['notifySubscribers'](this[observableLatestValue]);\n                },\n                valueWillMutate: function valueWillMutate() {\n                    this['notifySubscribers'](this[observableLatestValue], 'beforeChange');\n                }\n            };\n\n            // Note that for browsers that don't support proto assignment, the\n            // inheritance chain is created manually in the ko.observable constructor\n            if (ko.utils.canSetPrototype) {\n                ko.utils.setPrototypeOf(observableFn, ko.subscribable['fn']);\n            }\n\n            var protoProperty = ko.observable.protoProperty = '__ko_proto__';\n            observableFn[protoProperty] = ko.observable;\n\n            ko.hasPrototype = function (instance, prototype) {\n                if (instance === null || instance === undefined || instance[protoProperty] === undefined) return false;\n                if (instance[protoProperty] === prototype) return true;\n                return ko.hasPrototype(instance[protoProperty], prototype); // Walk the prototype chain\n            };\n\n            ko.isObservable = function (instance) {\n                return ko.hasPrototype(instance, ko.observable);\n            };\n            ko.isWriteableObservable = function (instance) {\n                // Observable\n                if (typeof instance == 'function' && instance[protoProperty] === ko.observable) return true;\n                // Writeable dependent observable\n                if (typeof instance == 'function' && instance[protoProperty] === ko.dependentObservable && instance.hasWriteFunction) return true;\n                // Anything else\n                return false;\n            };\n\n            ko.exportSymbol('observable', ko.observable);\n            ko.exportSymbol('isObservable', ko.isObservable);\n            ko.exportSymbol('isWriteableObservable', ko.isWriteableObservable);\n            ko.exportSymbol('isWritableObservable', ko.isWriteableObservable);\n            ko.exportSymbol('observable.fn', observableFn);\n            ko.exportProperty(observableFn, 'peek', observableFn.peek);\n            ko.exportProperty(observableFn, 'valueHasMutated', observableFn.valueHasMutated);\n            ko.exportProperty(observableFn, 'valueWillMutate', observableFn.valueWillMutate);\n            ko.observableArray = function (initialValues) {\n                initialValues = initialValues || [];\n\n                if ((typeof initialValues === 'undefined' ? 'undefined' : _typeof(initialValues)) != 'object' || !('length' in initialValues)) throw new Error(\"The argument passed when initializing an observable array must be an array, or null, or undefined.\");\n\n                var result = ko.observable(initialValues);\n                ko.utils.setPrototypeOfOrExtend(result, ko.observableArray['fn']);\n                return result.extend({ 'trackArrayChanges': true });\n            };\n\n            ko.observableArray['fn'] = {\n                'remove': function remove(valueOrPredicate) {\n                    var underlyingArray = this.peek();\n                    var removedValues = [];\n                    var predicate = typeof valueOrPredicate == \"function\" && !ko.isObservable(valueOrPredicate) ? valueOrPredicate : function (value) {\n                        return value === valueOrPredicate;\n                    };\n                    for (var i = 0; i < underlyingArray.length; i++) {\n                        var value = underlyingArray[i];\n                        if (predicate(value)) {\n                            if (removedValues.length === 0) {\n                                this.valueWillMutate();\n                            }\n                            removedValues.push(value);\n                            underlyingArray.splice(i, 1);\n                            i--;\n                        }\n                    }\n                    if (removedValues.length) {\n                        this.valueHasMutated();\n                    }\n                    return removedValues;\n                },\n\n                'removeAll': function removeAll(arrayOfValues) {\n                    // If you passed zero args, we remove everything\n                    if (arrayOfValues === undefined) {\n                        var underlyingArray = this.peek();\n                        var allValues = underlyingArray.slice(0);\n                        this.valueWillMutate();\n                        underlyingArray.splice(0, underlyingArray.length);\n                        this.valueHasMutated();\n                        return allValues;\n                    }\n                    // If you passed an arg, we interpret it as an array of entries to remove\n                    if (!arrayOfValues) return [];\n                    return this['remove'](function (value) {\n                        return ko.utils.arrayIndexOf(arrayOfValues, value) >= 0;\n                    });\n                },\n\n                'destroy': function destroy(valueOrPredicate) {\n                    var underlyingArray = this.peek();\n                    var predicate = typeof valueOrPredicate == \"function\" && !ko.isObservable(valueOrPredicate) ? valueOrPredicate : function (value) {\n                        return value === valueOrPredicate;\n                    };\n                    this.valueWillMutate();\n                    for (var i = underlyingArray.length - 1; i >= 0; i--) {\n                        var value = underlyingArray[i];\n                        if (predicate(value)) underlyingArray[i][\"_destroy\"] = true;\n                    }\n                    this.valueHasMutated();\n                },\n\n                'destroyAll': function destroyAll(arrayOfValues) {\n                    // If you passed zero args, we destroy everything\n                    if (arrayOfValues === undefined) return this['destroy'](function () {\n                        return true;\n                    });\n\n                    // If you passed an arg, we interpret it as an array of entries to destroy\n                    if (!arrayOfValues) return [];\n                    return this['destroy'](function (value) {\n                        return ko.utils.arrayIndexOf(arrayOfValues, value) >= 0;\n                    });\n                },\n\n                'indexOf': function indexOf(item) {\n                    var underlyingArray = this();\n                    return ko.utils.arrayIndexOf(underlyingArray, item);\n                },\n\n                'replace': function replace(oldItem, newItem) {\n                    var index = this['indexOf'](oldItem);\n                    if (index >= 0) {\n                        this.valueWillMutate();\n                        this.peek()[index] = newItem;\n                        this.valueHasMutated();\n                    }\n                }\n            };\n\n            // Note that for browsers that don't support proto assignment, the\n            // inheritance chain is created manually in the ko.observableArray constructor\n            if (ko.utils.canSetPrototype) {\n                ko.utils.setPrototypeOf(ko.observableArray['fn'], ko.observable['fn']);\n            }\n\n            // Populate ko.observableArray.fn with read/write functions from native arrays\n            // Important: Do not add any additional functions here that may reasonably be used to *read* data from the array\n            // because we'll eval them without causing subscriptions, so ko.computed output could end up getting stale\n            ko.utils.arrayForEach([\"pop\", \"push\", \"reverse\", \"shift\", \"sort\", \"splice\", \"unshift\"], function (methodName) {\n                ko.observableArray['fn'][methodName] = function () {\n                    // Use \"peek\" to avoid creating a subscription in any computed that we're executing in the context of\n                    // (for consistency with mutating regular observables)\n                    var underlyingArray = this.peek();\n                    this.valueWillMutate();\n                    this.cacheDiffForKnownOperation(underlyingArray, methodName, arguments);\n                    var methodCallResult = underlyingArray[methodName].apply(underlyingArray, arguments);\n                    this.valueHasMutated();\n                    // The native sort and reverse methods return a reference to the array, but it makes more sense to return the observable array instead.\n                    return methodCallResult === underlyingArray ? this : methodCallResult;\n                };\n            });\n\n            // Populate ko.observableArray.fn with read-only functions from native arrays\n            ko.utils.arrayForEach([\"slice\"], function (methodName) {\n                ko.observableArray['fn'][methodName] = function () {\n                    var underlyingArray = this();\n                    return underlyingArray[methodName].apply(underlyingArray, arguments);\n                };\n            });\n\n            ko.exportSymbol('observableArray', ko.observableArray);\n            var arrayChangeEventName = 'arrayChange';\n            ko.extenders['trackArrayChanges'] = function (target, options) {\n                // Use the provided options--each call to trackArrayChanges overwrites the previously set options\n                target.compareArrayOptions = {};\n                if (options && (typeof options === 'undefined' ? 'undefined' : _typeof(options)) == \"object\") {\n                    ko.utils.extend(target.compareArrayOptions, options);\n                }\n                target.compareArrayOptions['sparse'] = true;\n\n                // Only modify the target observable once\n                if (target.cacheDiffForKnownOperation) {\n                    return;\n                }\n                var trackingChanges = false,\n                    cachedDiff = null,\n                    arrayChangeSubscription,\n                    pendingNotifications = 0,\n                    underlyingBeforeSubscriptionAddFunction = target.beforeSubscriptionAdd,\n                    underlyingAfterSubscriptionRemoveFunction = target.afterSubscriptionRemove;\n\n                // Watch \"subscribe\" calls, and for array change events, ensure change tracking is enabled\n                target.beforeSubscriptionAdd = function (event) {\n                    if (underlyingBeforeSubscriptionAddFunction) underlyingBeforeSubscriptionAddFunction.call(target, event);\n                    if (event === arrayChangeEventName) {\n                        trackChanges();\n                    }\n                };\n                // Watch \"dispose\" calls, and for array change events, ensure change tracking is disabled when all are disposed\n                target.afterSubscriptionRemove = function (event) {\n                    if (underlyingAfterSubscriptionRemoveFunction) underlyingAfterSubscriptionRemoveFunction.call(target, event);\n                    if (event === arrayChangeEventName && !target.hasSubscriptionsForEvent(arrayChangeEventName)) {\n                        arrayChangeSubscription.dispose();\n                        trackingChanges = false;\n                    }\n                };\n\n                function trackChanges() {\n                    // Calling 'trackChanges' multiple times is the same as calling it once\n                    if (trackingChanges) {\n                        return;\n                    }\n\n                    trackingChanges = true;\n\n                    // Intercept \"notifySubscribers\" to track how many times it was called.\n                    var underlyingNotifySubscribersFunction = target['notifySubscribers'];\n                    target['notifySubscribers'] = function (valueToNotify, event) {\n                        if (!event || event === defaultEvent) {\n                            ++pendingNotifications;\n                        }\n                        return underlyingNotifySubscribersFunction.apply(this, arguments);\n                    };\n\n                    // Each time the array changes value, capture a clone so that on the next\n                    // change it's possible to produce a diff\n                    var previousContents = [].concat(target.peek() || []);\n                    cachedDiff = null;\n                    arrayChangeSubscription = target.subscribe(function (currentContents) {\n                        // Make a copy of the current contents and ensure it's an array\n                        currentContents = [].concat(currentContents || []);\n\n                        // Compute the diff and issue notifications, but only if someone is listening\n                        if (target.hasSubscriptionsForEvent(arrayChangeEventName)) {\n                            var changes = getChanges(previousContents, currentContents);\n                        }\n\n                        // Eliminate references to the old, removed items, so they can be GCed\n                        previousContents = currentContents;\n                        cachedDiff = null;\n                        pendingNotifications = 0;\n\n                        if (changes && changes.length) {\n                            target['notifySubscribers'](changes, arrayChangeEventName);\n                        }\n                    });\n                }\n\n                function getChanges(previousContents, currentContents) {\n                    // We try to re-use cached diffs.\n                    // The scenarios where pendingNotifications > 1 are when using rate-limiting or the Deferred Updates\n                    // plugin, which without this check would not be compatible with arrayChange notifications. Normally,\n                    // notifications are issued immediately so we wouldn't be queueing up more than one.\n                    if (!cachedDiff || pendingNotifications > 1) {\n                        cachedDiff = ko.utils.compareArrays(previousContents, currentContents, target.compareArrayOptions);\n                    }\n\n                    return cachedDiff;\n                }\n\n                target.cacheDiffForKnownOperation = function (rawArray, operationName, args) {\n                    // Only run if we're currently tracking changes for this observable array\n                    // and there aren't any pending deferred notifications.\n                    if (!trackingChanges || pendingNotifications) {\n                        return;\n                    }\n                    var diff = [],\n                        arrayLength = rawArray.length,\n                        argsLength = args.length,\n                        offset = 0;\n\n                    function pushDiff(status, value, index) {\n                        return diff[diff.length] = { 'status': status, 'value': value, 'index': index };\n                    }\n                    switch (operationName) {\n                        case 'push':\n                            offset = arrayLength;\n                        case 'unshift':\n                            for (var index = 0; index < argsLength; index++) {\n                                pushDiff('added', args[index], offset + index);\n                            }\n                            break;\n\n                        case 'pop':\n                            offset = arrayLength - 1;\n                        case 'shift':\n                            if (arrayLength) {\n                                pushDiff('deleted', rawArray[offset], offset);\n                            }\n                            break;\n\n                        case 'splice':\n                            // Negative start index means 'from end of array'. After that we clamp to [0...arrayLength].\n                            // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\n                            var startIndex = Math.min(Math.max(0, args[0] < 0 ? arrayLength + args[0] : args[0]), arrayLength),\n                                endDeleteIndex = argsLength === 1 ? arrayLength : Math.min(startIndex + (args[1] || 0), arrayLength),\n                                endAddIndex = startIndex + argsLength - 2,\n                                endIndex = Math.max(endDeleteIndex, endAddIndex),\n                                additions = [],\n                                deletions = [];\n                            for (var index = startIndex, argsIndex = 2; index < endIndex; ++index, ++argsIndex) {\n                                if (index < endDeleteIndex) deletions.push(pushDiff('deleted', rawArray[index], index));\n                                if (index < endAddIndex) additions.push(pushDiff('added', args[argsIndex], index));\n                            }\n                            ko.utils.findMovesInArrayComparison(deletions, additions);\n                            break;\n\n                        default:\n                            return;\n                    }\n                    cachedDiff = diff;\n                };\n            };\n            var computedState = ko.utils.createSymbolOrString('_state');\n\n            ko.computed = ko.dependentObservable = function (evaluatorFunctionOrOptions, evaluatorFunctionTarget, options) {\n                if ((typeof evaluatorFunctionOrOptions === 'undefined' ? 'undefined' : _typeof(evaluatorFunctionOrOptions)) === \"object\") {\n                    // Single-parameter syntax - everything is on this \"options\" param\n                    options = evaluatorFunctionOrOptions;\n                } else {\n                    // Multi-parameter syntax - construct the options according to the params passed\n                    options = options || {};\n                    if (evaluatorFunctionOrOptions) {\n                        options[\"read\"] = evaluatorFunctionOrOptions;\n                    }\n                }\n                if (typeof options[\"read\"] != \"function\") throw Error(\"Pass a function that returns the value of the ko.computed\");\n\n                var writeFunction = options[\"write\"];\n                var state = {\n                    latestValue: undefined,\n                    isStale: true,\n                    isBeingEvaluated: false,\n                    suppressDisposalUntilDisposeWhenReturnsFalse: false,\n                    isDisposed: false,\n                    pure: false,\n                    isSleeping: false,\n                    readFunction: options[\"read\"],\n                    evaluatorFunctionTarget: evaluatorFunctionTarget || options[\"owner\"],\n                    disposeWhenNodeIsRemoved: options[\"disposeWhenNodeIsRemoved\"] || options.disposeWhenNodeIsRemoved || null,\n                    disposeWhen: options[\"disposeWhen\"] || options.disposeWhen,\n                    domNodeDisposalCallback: null,\n                    dependencyTracking: {},\n                    dependenciesCount: 0,\n                    evaluationTimeoutInstance: null\n                };\n\n                function computedObservable() {\n                    if (arguments.length > 0) {\n                        if (typeof writeFunction === \"function\") {\n                            // Writing a value\n                            writeFunction.apply(state.evaluatorFunctionTarget, arguments);\n                        } else {\n                            throw new Error(\"Cannot write a value to a ko.computed unless you specify a 'write' option. If you wish to read the current value, don't pass any parameters.\");\n                        }\n                        return this; // Permits chained assignments\n                    } else {\n                        // Reading the value\n                        ko.dependencyDetection.registerDependency(computedObservable);\n                        if (state.isStale || state.isSleeping && computedObservable.haveDependenciesChanged()) {\n                            computedObservable.evaluateImmediate();\n                        }\n                        return state.latestValue;\n                    }\n                }\n\n                computedObservable[computedState] = state;\n                computedObservable.hasWriteFunction = typeof writeFunction === \"function\";\n\n                // Inherit from 'subscribable'\n                if (!ko.utils.canSetPrototype) {\n                    // 'subscribable' won't be on the prototype chain unless we put it there directly\n                    ko.utils.extend(computedObservable, ko.subscribable['fn']);\n                }\n                ko.subscribable['fn'].init(computedObservable);\n\n                // Inherit from 'computed'\n                ko.utils.setPrototypeOfOrExtend(computedObservable, computedFn);\n\n                if (options['pure']) {\n                    state.pure = true;\n                    state.isSleeping = true; // Starts off sleeping; will awake on the first subscription\n                    ko.utils.extend(computedObservable, pureComputedOverrides);\n                } else if (options['deferEvaluation']) {\n                    ko.utils.extend(computedObservable, deferEvaluationOverrides);\n                }\n\n                if (ko.options['deferUpdates']) {\n                    ko.extenders['deferred'](computedObservable, true);\n                }\n\n                if (DEBUG) {\n                    // #1731 - Aid debugging by exposing the computed's options\n                    computedObservable[\"_options\"] = options;\n                }\n\n                if (state.disposeWhenNodeIsRemoved) {\n                    // Since this computed is associated with a DOM node, and we don't want to dispose the computed\n                    // until the DOM node is *removed* from the document (as opposed to never having been in the document),\n                    // we'll prevent disposal until \"disposeWhen\" first returns false.\n                    state.suppressDisposalUntilDisposeWhenReturnsFalse = true;\n\n                    // disposeWhenNodeIsRemoved: true can be used to opt into the \"only dispose after first false result\"\n                    // behaviour even if there's no specific node to watch. In that case, clear the option so we don't try\n                    // to watch for a non-node's disposal. This technique is intended for KO's internal use only and shouldn't\n                    // be documented or used by application code, as it's likely to change in a future version of KO.\n                    if (!state.disposeWhenNodeIsRemoved.nodeType) {\n                        state.disposeWhenNodeIsRemoved = null;\n                    }\n                }\n\n                // Evaluate, unless sleeping or deferEvaluation is true\n                if (!state.isSleeping && !options['deferEvaluation']) {\n                    computedObservable.evaluateImmediate();\n                }\n\n                // Attach a DOM node disposal callback so that the computed will be proactively disposed as soon as the node is\n                // removed using ko.removeNode. But skip if isActive is false (there will never be any dependencies to dispose).\n                if (state.disposeWhenNodeIsRemoved && computedObservable.isActive()) {\n                    ko.utils.domNodeDisposal.addDisposeCallback(state.disposeWhenNodeIsRemoved, state.domNodeDisposalCallback = function () {\n                        computedObservable.dispose();\n                    });\n                }\n\n                return computedObservable;\n            };\n\n            // Utility function that disposes a given dependencyTracking entry\n            function computedDisposeDependencyCallback(id, entryToDispose) {\n                if (entryToDispose !== null && entryToDispose.dispose) {\n                    entryToDispose.dispose();\n                }\n            }\n\n            // This function gets called each time a dependency is detected while evaluating a computed.\n            // It's factored out as a shared function to avoid creating unnecessary function instances during evaluation.\n            function computedBeginDependencyDetectionCallback(subscribable, id) {\n                var computedObservable = this.computedObservable,\n                    state = computedObservable[computedState];\n                if (!state.isDisposed) {\n                    if (this.disposalCount && this.disposalCandidates[id]) {\n                        // Don't want to dispose this subscription, as it's still being used\n                        computedObservable.addDependencyTracking(id, subscribable, this.disposalCandidates[id]);\n                        this.disposalCandidates[id] = null; // No need to actually delete the property - disposalCandidates is a transient object anyway\n                        --this.disposalCount;\n                    } else if (!state.dependencyTracking[id]) {\n                        // Brand new subscription - add it\n                        computedObservable.addDependencyTracking(id, subscribable, state.isSleeping ? { _target: subscribable } : computedObservable.subscribeToDependency(subscribable));\n                    }\n                }\n            }\n\n            var computedFn = {\n                \"equalityComparer\": valuesArePrimitiveAndEqual,\n                getDependenciesCount: function getDependenciesCount() {\n                    return this[computedState].dependenciesCount;\n                },\n                addDependencyTracking: function addDependencyTracking(id, target, trackingObj) {\n                    if (this[computedState].pure && target === this) {\n                        throw Error(\"A 'pure' computed must not be called recursively\");\n                    }\n\n                    this[computedState].dependencyTracking[id] = trackingObj;\n                    trackingObj._order = this[computedState].dependenciesCount++;\n                    trackingObj._version = target.getVersion();\n                },\n                haveDependenciesChanged: function haveDependenciesChanged() {\n                    var id,\n                        dependency,\n                        dependencyTracking = this[computedState].dependencyTracking;\n                    for (id in dependencyTracking) {\n                        if (dependencyTracking.hasOwnProperty(id)) {\n                            dependency = dependencyTracking[id];\n                            if (dependency._target.hasChanged(dependency._version)) {\n                                return true;\n                            }\n                        }\n                    }\n                },\n                markDirty: function markDirty() {\n                    // Process \"dirty\" events if we can handle delayed notifications\n                    if (this._evalDelayed && !this[computedState].isBeingEvaluated) {\n                        this._evalDelayed();\n                    }\n                },\n                isActive: function isActive() {\n                    return this[computedState].isStale || this[computedState].dependenciesCount > 0;\n                },\n                respondToChange: function respondToChange() {\n                    // Ignore \"change\" events if we've already scheduled a delayed notification\n                    if (!this._notificationIsPending) {\n                        this.evaluatePossiblyAsync();\n                    }\n                },\n                subscribeToDependency: function subscribeToDependency(target) {\n                    if (target._deferUpdates && !this[computedState].disposeWhenNodeIsRemoved) {\n                        var dirtySub = target.subscribe(this.markDirty, this, 'dirty'),\n                            changeSub = target.subscribe(this.respondToChange, this);\n                        return {\n                            _target: target,\n                            dispose: function dispose() {\n                                dirtySub.dispose();\n                                changeSub.dispose();\n                            }\n                        };\n                    } else {\n                        return target.subscribe(this.evaluatePossiblyAsync, this);\n                    }\n                },\n                evaluatePossiblyAsync: function evaluatePossiblyAsync() {\n                    var computedObservable = this,\n                        throttleEvaluationTimeout = computedObservable['throttleEvaluation'];\n                    if (throttleEvaluationTimeout && throttleEvaluationTimeout >= 0) {\n                        clearTimeout(this[computedState].evaluationTimeoutInstance);\n                        this[computedState].evaluationTimeoutInstance = ko.utils.setTimeout(function () {\n                            computedObservable.evaluateImmediate(true /*notifyChange*/);\n                        }, throttleEvaluationTimeout);\n                    } else if (computedObservable._evalDelayed) {\n                        computedObservable._evalDelayed();\n                    } else {\n                        computedObservable.evaluateImmediate(true /*notifyChange*/);\n                    }\n                },\n                evaluateImmediate: function evaluateImmediate(notifyChange) {\n                    var computedObservable = this,\n                        state = computedObservable[computedState],\n                        disposeWhen = state.disposeWhen;\n\n                    if (state.isBeingEvaluated) {\n                        // If the evaluation of a ko.computed causes side effects, it's possible that it will trigger its own re-evaluation.\n                        // This is not desirable (it's hard for a developer to realise a chain of dependencies might cause this, and they almost\n                        // certainly didn't intend infinite re-evaluations). So, for predictability, we simply prevent ko.computeds from causing\n                        // their own re-evaluation. Further discussion at https://github.com/SteveSanderson/knockout/pull/387\n                        return;\n                    }\n\n                    // Do not evaluate (and possibly capture new dependencies) if disposed\n                    if (state.isDisposed) {\n                        return;\n                    }\n\n                    if (state.disposeWhenNodeIsRemoved && !ko.utils.domNodeIsAttachedToDocument(state.disposeWhenNodeIsRemoved) || disposeWhen && disposeWhen()) {\n                        // See comment above about suppressDisposalUntilDisposeWhenReturnsFalse\n                        if (!state.suppressDisposalUntilDisposeWhenReturnsFalse) {\n                            computedObservable.dispose();\n                            return;\n                        }\n                    } else {\n                        // It just did return false, so we can stop suppressing now\n                        state.suppressDisposalUntilDisposeWhenReturnsFalse = false;\n                    }\n\n                    state.isBeingEvaluated = true;\n                    try {\n                        this.evaluateImmediate_CallReadWithDependencyDetection(notifyChange);\n                    } finally {\n                        state.isBeingEvaluated = false;\n                    }\n\n                    if (!state.dependenciesCount) {\n                        computedObservable.dispose();\n                    }\n                },\n                evaluateImmediate_CallReadWithDependencyDetection: function evaluateImmediate_CallReadWithDependencyDetection(notifyChange) {\n                    // This function is really just part of the evaluateImmediate logic. You would never call it from anywhere else.\n                    // Factoring it out into a separate function means it can be independent of the try/catch block in evaluateImmediate,\n                    // which contributes to saving about 40% off the CPU overhead of computed evaluation (on V8 at least).\n\n                    var computedObservable = this,\n                        state = computedObservable[computedState];\n\n                    // Initially, we assume that none of the subscriptions are still being used (i.e., all are candidates for disposal).\n                    // Then, during evaluation, we cross off any that are in fact still being used.\n                    var isInitial = state.pure ? undefined : !state.dependenciesCount,\n                        // If we're evaluating when there are no previous dependencies, it must be the first time\n                    dependencyDetectionContext = {\n                        computedObservable: computedObservable,\n                        disposalCandidates: state.dependencyTracking,\n                        disposalCount: state.dependenciesCount\n                    };\n\n                    ko.dependencyDetection.begin({\n                        callbackTarget: dependencyDetectionContext,\n                        callback: computedBeginDependencyDetectionCallback,\n                        computed: computedObservable,\n                        isInitial: isInitial\n                    });\n\n                    state.dependencyTracking = {};\n                    state.dependenciesCount = 0;\n\n                    var newValue = this.evaluateImmediate_CallReadThenEndDependencyDetection(state, dependencyDetectionContext);\n\n                    if (computedObservable.isDifferent(state.latestValue, newValue)) {\n                        if (!state.isSleeping) {\n                            computedObservable[\"notifySubscribers\"](state.latestValue, \"beforeChange\");\n                        }\n\n                        state.latestValue = newValue;\n\n                        if (state.isSleeping) {\n                            computedObservable.updateVersion();\n                        } else if (notifyChange) {\n                            computedObservable[\"notifySubscribers\"](state.latestValue);\n                        }\n                    }\n\n                    if (isInitial) {\n                        computedObservable[\"notifySubscribers\"](state.latestValue, \"awake\");\n                    }\n                },\n                evaluateImmediate_CallReadThenEndDependencyDetection: function evaluateImmediate_CallReadThenEndDependencyDetection(state, dependencyDetectionContext) {\n                    // This function is really part of the evaluateImmediate_CallReadWithDependencyDetection logic.\n                    // You'd never call it from anywhere else. Factoring it out means that evaluateImmediate_CallReadWithDependencyDetection\n                    // can be independent of try/finally blocks, which contributes to saving about 40% off the CPU\n                    // overhead of computed evaluation (on V8 at least).\n\n                    try {\n                        var readFunction = state.readFunction;\n                        return state.evaluatorFunctionTarget ? readFunction.call(state.evaluatorFunctionTarget) : readFunction();\n                    } finally {\n                        ko.dependencyDetection.end();\n\n                        // For each subscription no longer being used, remove it from the active subscriptions list and dispose it\n                        if (dependencyDetectionContext.disposalCount && !state.isSleeping) {\n                            ko.utils.objectForEach(dependencyDetectionContext.disposalCandidates, computedDisposeDependencyCallback);\n                        }\n\n                        state.isStale = false;\n                    }\n                },\n                peek: function peek() {\n                    // Peek won't re-evaluate, except while the computed is sleeping or to get the initial value when \"deferEvaluation\" is set.\n                    var state = this[computedState];\n                    if (state.isStale && !state.dependenciesCount || state.isSleeping && this.haveDependenciesChanged()) {\n                        this.evaluateImmediate();\n                    }\n                    return state.latestValue;\n                },\n                limit: function limit(limitFunction) {\n                    // Override the limit function with one that delays evaluation as well\n                    ko.subscribable['fn'].limit.call(this, limitFunction);\n                    this._evalDelayed = function () {\n                        this._limitBeforeChange(this[computedState].latestValue);\n\n                        this[computedState].isStale = true; // Mark as dirty\n\n                        // Pass the observable to the \"limit\" code, which will access it when\n                        // it's time to do the notification.\n                        this._limitChange(this);\n                    };\n                },\n                dispose: function dispose() {\n                    var state = this[computedState];\n                    if (!state.isSleeping && state.dependencyTracking) {\n                        ko.utils.objectForEach(state.dependencyTracking, function (id, dependency) {\n                            if (dependency.dispose) dependency.dispose();\n                        });\n                    }\n                    if (state.disposeWhenNodeIsRemoved && state.domNodeDisposalCallback) {\n                        ko.utils.domNodeDisposal.removeDisposeCallback(state.disposeWhenNodeIsRemoved, state.domNodeDisposalCallback);\n                    }\n                    state.dependencyTracking = null;\n                    state.dependenciesCount = 0;\n                    state.isDisposed = true;\n                    state.isStale = false;\n                    state.isSleeping = false;\n                    state.disposeWhenNodeIsRemoved = null;\n                }\n            };\n\n            var pureComputedOverrides = {\n                beforeSubscriptionAdd: function beforeSubscriptionAdd(event) {\n                    // If asleep, wake up the computed by subscribing to any dependencies.\n                    var computedObservable = this,\n                        state = computedObservable[computedState];\n                    if (!state.isDisposed && state.isSleeping && event == 'change') {\n                        state.isSleeping = false;\n                        if (state.isStale || computedObservable.haveDependenciesChanged()) {\n                            state.dependencyTracking = null;\n                            state.dependenciesCount = 0;\n                            state.isStale = true;\n                            computedObservable.evaluateImmediate();\n                        } else {\n                            // First put the dependencies in order\n                            var dependeciesOrder = [];\n                            ko.utils.objectForEach(state.dependencyTracking, function (id, dependency) {\n                                dependeciesOrder[dependency._order] = id;\n                            });\n                            // Next, subscribe to each one\n                            ko.utils.arrayForEach(dependeciesOrder, function (id, order) {\n                                var dependency = state.dependencyTracking[id],\n                                    subscription = computedObservable.subscribeToDependency(dependency._target);\n                                subscription._order = order;\n                                subscription._version = dependency._version;\n                                state.dependencyTracking[id] = subscription;\n                            });\n                        }\n                        if (!state.isDisposed) {\n                            // test since evaluating could trigger disposal\n                            computedObservable[\"notifySubscribers\"](state.latestValue, \"awake\");\n                        }\n                    }\n                },\n                afterSubscriptionRemove: function afterSubscriptionRemove(event) {\n                    var state = this[computedState];\n                    if (!state.isDisposed && event == 'change' && !this.hasSubscriptionsForEvent('change')) {\n                        ko.utils.objectForEach(state.dependencyTracking, function (id, dependency) {\n                            if (dependency.dispose) {\n                                state.dependencyTracking[id] = {\n                                    _target: dependency._target,\n                                    _order: dependency._order,\n                                    _version: dependency._version\n                                };\n                                dependency.dispose();\n                            }\n                        });\n                        state.isSleeping = true;\n                        this[\"notifySubscribers\"](undefined, \"asleep\");\n                    }\n                },\n                getVersion: function getVersion() {\n                    // Because a pure computed is not automatically updated while it is sleeping, we can't\n                    // simply return the version number. Instead, we check if any of the dependencies have\n                    // changed and conditionally re-evaluate the computed observable.\n                    var state = this[computedState];\n                    if (state.isSleeping && (state.isStale || this.haveDependenciesChanged())) {\n                        this.evaluateImmediate();\n                    }\n                    return ko.subscribable['fn'].getVersion.call(this);\n                }\n            };\n\n            var deferEvaluationOverrides = {\n                beforeSubscriptionAdd: function beforeSubscriptionAdd(event) {\n                    // This will force a computed with deferEvaluation to evaluate when the first subscription is registered.\n                    if (event == 'change' || event == 'beforeChange') {\n                        this.peek();\n                    }\n                }\n            };\n\n            // Note that for browsers that don't support proto assignment, the\n            // inheritance chain is created manually in the ko.computed constructor\n            if (ko.utils.canSetPrototype) {\n                ko.utils.setPrototypeOf(computedFn, ko.subscribable['fn']);\n            }\n\n            // Set the proto chain values for ko.hasPrototype\n            var protoProp = ko.observable.protoProperty; // == \"__ko_proto__\"\n            ko.computed[protoProp] = ko.observable;\n            computedFn[protoProp] = ko.computed;\n\n            ko.isComputed = function (instance) {\n                return ko.hasPrototype(instance, ko.computed);\n            };\n\n            ko.isPureComputed = function (instance) {\n                return ko.hasPrototype(instance, ko.computed) && instance[computedState] && instance[computedState].pure;\n            };\n\n            ko.exportSymbol('computed', ko.computed);\n            ko.exportSymbol('dependentObservable', ko.computed); // export ko.dependentObservable for backwards compatibility (1.x)\n            ko.exportSymbol('isComputed', ko.isComputed);\n            ko.exportSymbol('isPureComputed', ko.isPureComputed);\n            ko.exportSymbol('computed.fn', computedFn);\n            ko.exportProperty(computedFn, 'peek', computedFn.peek);\n            ko.exportProperty(computedFn, 'dispose', computedFn.dispose);\n            ko.exportProperty(computedFn, 'isActive', computedFn.isActive);\n            ko.exportProperty(computedFn, 'getDependenciesCount', computedFn.getDependenciesCount);\n\n            ko.pureComputed = function (evaluatorFunctionOrOptions, evaluatorFunctionTarget) {\n                if (typeof evaluatorFunctionOrOptions === 'function') {\n                    return ko.computed(evaluatorFunctionOrOptions, evaluatorFunctionTarget, { 'pure': true });\n                } else {\n                    evaluatorFunctionOrOptions = ko.utils.extend({}, evaluatorFunctionOrOptions); // make a copy of the parameter object\n                    evaluatorFunctionOrOptions['pure'] = true;\n                    return ko.computed(evaluatorFunctionOrOptions, evaluatorFunctionTarget);\n                }\n            };\n            ko.exportSymbol('pureComputed', ko.pureComputed);\n\n            (function () {\n                var maxNestedObservableDepth = 10; // Escape the (unlikely) pathalogical case where an observable's current value is itself (or similar reference cycle)\n\n                ko.toJS = function (rootObject) {\n                    if (arguments.length == 0) throw new Error(\"When calling ko.toJS, pass the object you want to convert.\");\n\n                    // We just unwrap everything at every level in the object graph\n                    return mapJsObjectGraph(rootObject, function (valueToMap) {\n                        // Loop because an observable's value might in turn be another observable wrapper\n                        for (var i = 0; ko.isObservable(valueToMap) && i < maxNestedObservableDepth; i++) {\n                            valueToMap = valueToMap();\n                        }return valueToMap;\n                    });\n                };\n\n                ko.toJSON = function (rootObject, replacer, space) {\n                    // replacer and space are optional\n                    var plainJavaScriptObject = ko.toJS(rootObject);\n                    return ko.utils.stringifyJson(plainJavaScriptObject, replacer, space);\n                };\n\n                function mapJsObjectGraph(rootObject, mapInputCallback, visitedObjects) {\n                    visitedObjects = visitedObjects || new objectLookup();\n\n                    rootObject = mapInputCallback(rootObject);\n                    var canHaveProperties = (typeof rootObject === 'undefined' ? 'undefined' : _typeof(rootObject)) == \"object\" && rootObject !== null && rootObject !== undefined && !(rootObject instanceof RegExp) && !(rootObject instanceof Date) && !(rootObject instanceof String) && !(rootObject instanceof Number) && !(rootObject instanceof Boolean);\n                    if (!canHaveProperties) return rootObject;\n\n                    var outputProperties = rootObject instanceof Array ? [] : {};\n                    visitedObjects.save(rootObject, outputProperties);\n\n                    visitPropertiesOrArrayEntries(rootObject, function (indexer) {\n                        var propertyValue = mapInputCallback(rootObject[indexer]);\n\n                        switch (typeof propertyValue === 'undefined' ? 'undefined' : _typeof(propertyValue)) {\n                            case \"boolean\":\n                            case \"number\":\n                            case \"string\":\n                            case \"function\":\n                                outputProperties[indexer] = propertyValue;\n                                break;\n                            case \"object\":\n                            case \"undefined\":\n                                var previouslyMappedValue = visitedObjects.get(propertyValue);\n                                outputProperties[indexer] = previouslyMappedValue !== undefined ? previouslyMappedValue : mapJsObjectGraph(propertyValue, mapInputCallback, visitedObjects);\n                                break;\n                        }\n                    });\n\n                    return outputProperties;\n                }\n\n                function visitPropertiesOrArrayEntries(rootObject, visitorCallback) {\n                    if (rootObject instanceof Array) {\n                        for (var i = 0; i < rootObject.length; i++) {\n                            visitorCallback(i);\n                        } // For arrays, also respect toJSON property for custom mappings (fixes #278)\n                        if (typeof rootObject['toJSON'] == 'function') visitorCallback('toJSON');\n                    } else {\n                        for (var propertyName in rootObject) {\n                            visitorCallback(propertyName);\n                        }\n                    }\n                };\n\n                function objectLookup() {\n                    this.keys = [];\n                    this.values = [];\n                };\n\n                objectLookup.prototype = {\n                    constructor: objectLookup,\n                    save: function save(key, value) {\n                        var existingIndex = ko.utils.arrayIndexOf(this.keys, key);\n                        if (existingIndex >= 0) this.values[existingIndex] = value;else {\n                            this.keys.push(key);\n                            this.values.push(value);\n                        }\n                    },\n                    get: function get(key) {\n                        var existingIndex = ko.utils.arrayIndexOf(this.keys, key);\n                        return existingIndex >= 0 ? this.values[existingIndex] : undefined;\n                    }\n                };\n            })();\n\n            ko.exportSymbol('toJS', ko.toJS);\n            ko.exportSymbol('toJSON', ko.toJSON);\n            (function () {\n                var hasDomDataExpandoProperty = '__ko__hasDomDataOptionValue__';\n\n                // Normally, SELECT elements and their OPTIONs can only take value of type 'string' (because the values\n                // are stored on DOM attributes). ko.selectExtensions provides a way for SELECTs/OPTIONs to have values\n                // that are arbitrary objects. This is very convenient when implementing things like cascading dropdowns.\n                ko.selectExtensions = {\n                    readValue: function readValue(element) {\n                        switch (ko.utils.tagNameLower(element)) {\n                            case 'option':\n                                if (element[hasDomDataExpandoProperty] === true) return ko.utils.domData.get(element, ko.bindingHandlers.options.optionValueDomDataKey);\n                                return ko.utils.ieVersion <= 7 ? element.getAttributeNode('value') && element.getAttributeNode('value').specified ? element.value : element.text : element.value;\n                            case 'select':\n                                return element.selectedIndex >= 0 ? ko.selectExtensions.readValue(element.options[element.selectedIndex]) : undefined;\n                            default:\n                                return element.value;\n                        }\n                    },\n\n                    writeValue: function writeValue(element, value, allowUnset) {\n                        switch (ko.utils.tagNameLower(element)) {\n                            case 'option':\n                                switch (typeof value === 'undefined' ? 'undefined' : _typeof(value)) {\n                                    case \"string\":\n                                        ko.utils.domData.set(element, ko.bindingHandlers.options.optionValueDomDataKey, undefined);\n                                        if (hasDomDataExpandoProperty in element) {\n                                            // IE <= 8 throws errors if you delete non-existent properties from a DOM node\n                                            delete element[hasDomDataExpandoProperty];\n                                        }\n                                        element.value = value;\n                                        break;\n                                    default:\n                                        // Store arbitrary object using DomData\n                                        ko.utils.domData.set(element, ko.bindingHandlers.options.optionValueDomDataKey, value);\n                                        element[hasDomDataExpandoProperty] = true;\n\n                                        // Special treatment of numbers is just for backward compatibility. KO 1.2.1 wrote numerical values to element.value.\n                                        element.value = typeof value === \"number\" ? value : \"\";\n                                        break;\n                                }\n                                break;\n                            case 'select':\n                                if (value === \"\" || value === null) // A blank string or null value will select the caption\n                                    value = undefined;\n                                var selection = -1;\n                                for (var i = 0, n = element.options.length, optionValue; i < n; ++i) {\n                                    optionValue = ko.selectExtensions.readValue(element.options[i]);\n                                    // Include special check to handle selecting a caption with a blank string value\n                                    if (optionValue == value || optionValue == \"\" && value === undefined) {\n                                        selection = i;\n                                        break;\n                                    }\n                                }\n                                if (allowUnset || selection >= 0 || value === undefined && element.size > 1) {\n                                    element.selectedIndex = selection;\n                                }\n                                break;\n                            default:\n                                if (value === null || value === undefined) value = \"\";\n                                element.value = value;\n                                break;\n                        }\n                    }\n                };\n            })();\n\n            ko.exportSymbol('selectExtensions', ko.selectExtensions);\n            ko.exportSymbol('selectExtensions.readValue', ko.selectExtensions.readValue);\n            ko.exportSymbol('selectExtensions.writeValue', ko.selectExtensions.writeValue);\n            ko.expressionRewriting = function () {\n                var javaScriptReservedWords = [\"true\", \"false\", \"null\", \"undefined\"];\n\n                // Matches something that can be assigned to--either an isolated identifier or something ending with a property accessor\n                // This is designed to be simple and avoid false negatives, but could produce false positives (e.g., a+b.c).\n                // This also will not properly handle nested brackets (e.g., obj1[obj2['prop']]; see #911).\n                var javaScriptAssignmentTarget = /^(?:[$_a-z][$\\w]*|(.+)(\\.\\s*[$_a-z][$\\w]*|\\[.+\\]))$/i;\n\n                function getWriteableValue(expression) {\n                    if (ko.utils.arrayIndexOf(javaScriptReservedWords, expression) >= 0) return false;\n                    var match = expression.match(javaScriptAssignmentTarget);\n                    return match === null ? false : match[1] ? 'Object(' + match[1] + ')' + match[2] : expression;\n                }\n\n                // The following regular expressions will be used to split an object-literal string into tokens\n\n                // These two match strings, either with double quotes or single quotes\n                var stringDouble = '\"(?:[^\"\\\\\\\\]|\\\\\\\\.)*\"',\n                    stringSingle = \"'(?:[^'\\\\\\\\]|\\\\\\\\.)*'\",\n\n                // Matches a regular expression (text enclosed by slashes), but will also match sets of divisions\n                // as a regular expression (this is handled by the parsing loop below).\n                stringRegexp = '/(?:[^/\\\\\\\\]|\\\\\\\\.)*/\\w*',\n\n                // These characters have special meaning to the parser and must not appear in the middle of a\n                // token, except as part of a string.\n                specials = ',\"\\'{}()/:[\\\\]',\n\n                // Match text (at least two characters) that does not contain any of the above special characters,\n                // although some of the special characters are allowed to start it (all but the colon and comma).\n                // The text can contain spaces, but leading or trailing spaces are skipped.\n                everyThingElse = '[^\\\\s:,/][^' + specials + ']*[^\\\\s' + specials + ']',\n\n                // Match any non-space character not matched already. This will match colons and commas, since they're\n                // not matched by \"everyThingElse\", but will also match any other single character that wasn't already\n                // matched (for example: in \"a: 1, b: 2\", each of the non-space characters will be matched by oneNotSpace).\n                oneNotSpace = '[^\\\\s]',\n\n\n                // Create the actual regular expression by or-ing the above strings. The order is important.\n                bindingToken = RegExp(stringDouble + '|' + stringSingle + '|' + stringRegexp + '|' + everyThingElse + '|' + oneNotSpace, 'g'),\n\n\n                // Match end of previous token to determine whether a slash is a division or regex.\n                divisionLookBehind = /[\\])\"'A-Za-z0-9_$]+$/,\n                    keywordRegexLookBehind = { 'in': 1, 'return': 1, 'typeof': 1 };\n\n                function parseObjectLiteral(objectLiteralString) {\n                    // Trim leading and trailing spaces from the string\n                    var str = ko.utils.stringTrim(objectLiteralString);\n\n                    // Trim braces '{' surrounding the whole object literal\n                    if (str.charCodeAt(0) === 123) str = str.slice(1, -1);\n\n                    // Split into tokens\n                    var result = [],\n                        toks = str.match(bindingToken),\n                        key,\n                        values = [],\n                        depth = 0;\n\n                    if (toks) {\n                        // Append a comma so that we don't need a separate code block to deal with the last item\n                        toks.push(',');\n\n                        for (var i = 0, tok; tok = toks[i]; ++i) {\n                            var c = tok.charCodeAt(0);\n                            // A comma signals the end of a key/value pair if depth is zero\n                            if (c === 44) {\n                                // \",\"\n                                if (depth <= 0) {\n                                    result.push(key && values.length ? { key: key, value: values.join('') } : { 'unknown': key || values.join('') });\n                                    key = depth = 0;\n                                    values = [];\n                                    continue;\n                                }\n                                // Simply skip the colon that separates the name and value\n                            } else if (c === 58) {\n                                // \":\"\n                                if (!depth && !key && values.length === 1) {\n                                    key = values.pop();\n                                    continue;\n                                }\n                                // A set of slashes is initially matched as a regular expression, but could be division\n                            } else if (c === 47 && i && tok.length > 1) {\n                                // \"/\"\n                                // Look at the end of the previous token to determine if the slash is actually division\n                                var match = toks[i - 1].match(divisionLookBehind);\n                                if (match && !keywordRegexLookBehind[match[0]]) {\n                                    // The slash is actually a division punctuator; re-parse the remainder of the string (not including the slash)\n                                    str = str.substr(str.indexOf(tok) + 1);\n                                    toks = str.match(bindingToken);\n                                    toks.push(',');\n                                    i = -1;\n                                    // Continue with just the slash\n                                    tok = '/';\n                                }\n                                // Increment depth for parentheses, braces, and brackets so that interior commas are ignored\n                            } else if (c === 40 || c === 123 || c === 91) {\n                                // '(', '{', '['\n                                ++depth;\n                            } else if (c === 41 || c === 125 || c === 93) {\n                                // ')', '}', ']'\n                                --depth;\n                                // The key will be the first token; if it's a string, trim the quotes\n                            } else if (!key && !values.length && (c === 34 || c === 39)) {\n                                // '\"', \"'\"\n                                tok = tok.slice(1, -1);\n                            }\n                            values.push(tok);\n                        }\n                    }\n                    return result;\n                }\n\n                // Two-way bindings include a write function that allow the handler to update the value even if it's not an observable.\n                var twoWayBindings = {};\n\n                function preProcessBindings(bindingsStringOrKeyValueArray, bindingOptions) {\n                    bindingOptions = bindingOptions || {};\n\n                    function processKeyValue(key, val) {\n                        var writableVal;\n                        function callPreprocessHook(obj) {\n                            return obj && obj['preprocess'] ? val = obj['preprocess'](val, key, processKeyValue) : true;\n                        }\n                        if (!bindingParams) {\n                            if (!callPreprocessHook(ko['getBindingHandler'](key))) return;\n\n                            if (twoWayBindings[key] && (writableVal = getWriteableValue(val))) {\n                                // For two-way bindings, provide a write method in case the value\n                                // isn't a writable observable.\n                                propertyAccessorResultStrings.push(\"'\" + key + \"':function(_z){\" + writableVal + \"=_z}\");\n                            }\n                        }\n                        // Values are wrapped in a function so that each value can be accessed independently\n                        if (makeValueAccessors) {\n                            val = 'function(){return ' + val + ' }';\n                        }\n                        resultStrings.push(\"'\" + key + \"':\" + val);\n                    }\n\n                    var resultStrings = [],\n                        propertyAccessorResultStrings = [],\n                        makeValueAccessors = bindingOptions['valueAccessors'],\n                        bindingParams = bindingOptions['bindingParams'],\n                        keyValueArray = typeof bindingsStringOrKeyValueArray === \"string\" ? parseObjectLiteral(bindingsStringOrKeyValueArray) : bindingsStringOrKeyValueArray;\n\n                    ko.utils.arrayForEach(keyValueArray, function (keyValue) {\n                        processKeyValue(keyValue.key || keyValue['unknown'], keyValue.value);\n                    });\n\n                    if (propertyAccessorResultStrings.length) processKeyValue('_ko_property_writers', \"{\" + propertyAccessorResultStrings.join(\",\") + \" }\");\n\n                    return resultStrings.join(\",\");\n                }\n\n                return {\n                    bindingRewriteValidators: [],\n\n                    twoWayBindings: twoWayBindings,\n\n                    parseObjectLiteral: parseObjectLiteral,\n\n                    preProcessBindings: preProcessBindings,\n\n                    keyValueArrayContainsKey: function keyValueArrayContainsKey(keyValueArray, key) {\n                        for (var i = 0; i < keyValueArray.length; i++) {\n                            if (keyValueArray[i]['key'] == key) return true;\n                        }return false;\n                    },\n\n                    // Internal, private KO utility for updating model properties from within bindings\n                    // property:            If the property being updated is (or might be) an observable, pass it here\n                    //                      If it turns out to be a writable observable, it will be written to directly\n                    // allBindings:         An object with a get method to retrieve bindings in the current execution context.\n                    //                      This will be searched for a '_ko_property_writers' property in case you're writing to a non-observable\n                    // key:                 The key identifying the property to be written. Example: for { hasFocus: myValue }, write to 'myValue' by specifying the key 'hasFocus'\n                    // value:               The value to be written\n                    // checkIfDifferent:    If true, and if the property being written is a writable observable, the value will only be written if\n                    //                      it is !== existing value on that writable observable\n                    writeValueToProperty: function writeValueToProperty(property, allBindings, key, value, checkIfDifferent) {\n                        if (!property || !ko.isObservable(property)) {\n                            var propWriters = allBindings.get('_ko_property_writers');\n                            if (propWriters && propWriters[key]) propWriters[key](value);\n                        } else if (ko.isWriteableObservable(property) && (!checkIfDifferent || property.peek() !== value)) {\n                            property(value);\n                        }\n                    }\n                };\n            }();\n\n            ko.exportSymbol('expressionRewriting', ko.expressionRewriting);\n            ko.exportSymbol('expressionRewriting.bindingRewriteValidators', ko.expressionRewriting.bindingRewriteValidators);\n            ko.exportSymbol('expressionRewriting.parseObjectLiteral', ko.expressionRewriting.parseObjectLiteral);\n            ko.exportSymbol('expressionRewriting.preProcessBindings', ko.expressionRewriting.preProcessBindings);\n\n            // Making bindings explicitly declare themselves as \"two way\" isn't ideal in the long term (it would be better if\n            // all bindings could use an official 'property writer' API without needing to declare that they might). However,\n            // since this is not, and has never been, a public API (_ko_property_writers was never documented), it's acceptable\n            // as an internal implementation detail in the short term.\n            // For those developers who rely on _ko_property_writers in their custom bindings, we expose _twoWayBindings as an\n            // undocumented feature that makes it relatively easy to upgrade to KO 3.0. However, this is still not an official\n            // public API, and we reserve the right to remove it at any time if we create a real public property writers API.\n            ko.exportSymbol('expressionRewriting._twoWayBindings', ko.expressionRewriting.twoWayBindings);\n\n            // For backward compatibility, define the following aliases. (Previously, these function names were misleading because\n            // they referred to JSON specifically, even though they actually work with arbitrary JavaScript object literal expressions.)\n            ko.exportSymbol('jsonExpressionRewriting', ko.expressionRewriting);\n            ko.exportSymbol('jsonExpressionRewriting.insertPropertyAccessorsIntoJson', ko.expressionRewriting.preProcessBindings);\n            (function () {\n                // \"Virtual elements\" is an abstraction on top of the usual DOM API which understands the notion that comment nodes\n                // may be used to represent hierarchy (in addition to the DOM's natural hierarchy).\n                // If you call the DOM-manipulating functions on ko.virtualElements, you will be able to read and write the state\n                // of that virtual hierarchy\n                //\n                // The point of all this is to support containerless templates (e.g., <!-- ko foreach:someCollection -->blah<!-- /ko -->)\n                // without having to scatter special cases all over the binding and templating code.\n\n                // IE 9 cannot reliably read the \"nodeValue\" property of a comment node (see https://github.com/SteveSanderson/knockout/issues/186)\n                // but it does give them a nonstandard alternative property called \"text\" that it can read reliably. Other browsers don't have that property.\n                // So, use node.text where available, and node.nodeValue elsewhere\n                var commentNodesHaveTextProperty = document && document.createComment(\"test\").text === \"<!--test-->\";\n\n                var startCommentRegex = commentNodesHaveTextProperty ? /^<!--\\s*ko(?:\\s+([\\s\\S]+))?\\s*-->$/ : /^\\s*ko(?:\\s+([\\s\\S]+))?\\s*$/;\n                var endCommentRegex = commentNodesHaveTextProperty ? /^<!--\\s*\\/ko\\s*-->$/ : /^\\s*\\/ko\\s*$/;\n                var htmlTagsWithOptionallyClosingChildren = { 'ul': true, 'ol': true };\n\n                function isStartComment(node) {\n                    return node.nodeType == 8 && startCommentRegex.test(commentNodesHaveTextProperty ? node.text : node.nodeValue);\n                }\n\n                function isEndComment(node) {\n                    return node.nodeType == 8 && endCommentRegex.test(commentNodesHaveTextProperty ? node.text : node.nodeValue);\n                }\n\n                function getVirtualChildren(startComment, allowUnbalanced) {\n                    var currentNode = startComment;\n                    var depth = 1;\n                    var children = [];\n                    while (currentNode = currentNode.nextSibling) {\n                        if (isEndComment(currentNode)) {\n                            depth--;\n                            if (depth === 0) return children;\n                        }\n\n                        children.push(currentNode);\n\n                        if (isStartComment(currentNode)) depth++;\n                    }\n                    if (!allowUnbalanced) throw new Error(\"Cannot find closing comment tag to match: \" + startComment.nodeValue);\n                    return null;\n                }\n\n                function getMatchingEndComment(startComment, allowUnbalanced) {\n                    var allVirtualChildren = getVirtualChildren(startComment, allowUnbalanced);\n                    if (allVirtualChildren) {\n                        if (allVirtualChildren.length > 0) return allVirtualChildren[allVirtualChildren.length - 1].nextSibling;\n                        return startComment.nextSibling;\n                    } else return null; // Must have no matching end comment, and allowUnbalanced is true\n                }\n\n                function getUnbalancedChildTags(node) {\n                    // e.g., from <div>OK</div><!-- ko blah --><span>Another</span>, returns: <!-- ko blah --><span>Another</span>\n                    //       from <div>OK</div><!-- /ko --><!-- /ko -->,             returns: <!-- /ko --><!-- /ko -->\n                    var childNode = node.firstChild,\n                        captureRemaining = null;\n                    if (childNode) {\n                        do {\n                            if (captureRemaining) // We already hit an unbalanced node and are now just scooping up all subsequent nodes\n                                captureRemaining.push(childNode);else if (isStartComment(childNode)) {\n                                var matchingEndComment = getMatchingEndComment(childNode, /* allowUnbalanced: */true);\n                                if (matchingEndComment) // It's a balanced tag, so skip immediately to the end of this virtual set\n                                    childNode = matchingEndComment;else captureRemaining = [childNode]; // It's unbalanced, so start capturing from this point\n                            } else if (isEndComment(childNode)) {\n                                captureRemaining = [childNode]; // It's unbalanced (if it wasn't, we'd have skipped over it already), so start capturing\n                            }\n                        } while (childNode = childNode.nextSibling);\n                    }\n                    return captureRemaining;\n                }\n\n                ko.virtualElements = {\n                    allowedBindings: {},\n\n                    childNodes: function childNodes(node) {\n                        return isStartComment(node) ? getVirtualChildren(node) : node.childNodes;\n                    },\n\n                    emptyNode: function emptyNode(node) {\n                        if (!isStartComment(node)) ko.utils.emptyDomNode(node);else {\n                            var virtualChildren = ko.virtualElements.childNodes(node);\n                            for (var i = 0, j = virtualChildren.length; i < j; i++) {\n                                ko.removeNode(virtualChildren[i]);\n                            }\n                        }\n                    },\n\n                    setDomNodeChildren: function setDomNodeChildren(node, childNodes) {\n                        if (!isStartComment(node)) ko.utils.setDomNodeChildren(node, childNodes);else {\n                            ko.virtualElements.emptyNode(node);\n                            var endCommentNode = node.nextSibling; // Must be the next sibling, as we just emptied the children\n                            for (var i = 0, j = childNodes.length; i < j; i++) {\n                                endCommentNode.parentNode.insertBefore(childNodes[i], endCommentNode);\n                            }\n                        }\n                    },\n\n                    prepend: function prepend(containerNode, nodeToPrepend) {\n                        if (!isStartComment(containerNode)) {\n                            if (containerNode.firstChild) containerNode.insertBefore(nodeToPrepend, containerNode.firstChild);else containerNode.appendChild(nodeToPrepend);\n                        } else {\n                            // Start comments must always have a parent and at least one following sibling (the end comment)\n                            containerNode.parentNode.insertBefore(nodeToPrepend, containerNode.nextSibling);\n                        }\n                    },\n\n                    insertAfter: function insertAfter(containerNode, nodeToInsert, insertAfterNode) {\n                        if (!insertAfterNode) {\n                            ko.virtualElements.prepend(containerNode, nodeToInsert);\n                        } else if (!isStartComment(containerNode)) {\n                            // Insert after insertion point\n                            if (insertAfterNode.nextSibling) containerNode.insertBefore(nodeToInsert, insertAfterNode.nextSibling);else containerNode.appendChild(nodeToInsert);\n                        } else {\n                            // Children of start comments must always have a parent and at least one following sibling (the end comment)\n                            containerNode.parentNode.insertBefore(nodeToInsert, insertAfterNode.nextSibling);\n                        }\n                    },\n\n                    firstChild: function firstChild(node) {\n                        if (!isStartComment(node)) return node.firstChild;\n                        if (!node.nextSibling || isEndComment(node.nextSibling)) return null;\n                        return node.nextSibling;\n                    },\n\n                    nextSibling: function nextSibling(node) {\n                        if (isStartComment(node)) node = getMatchingEndComment(node);\n                        if (node.nextSibling && isEndComment(node.nextSibling)) return null;\n                        return node.nextSibling;\n                    },\n\n                    hasBindingValue: isStartComment,\n\n                    virtualNodeBindingValue: function virtualNodeBindingValue(node) {\n                        var regexMatch = (commentNodesHaveTextProperty ? node.text : node.nodeValue).match(startCommentRegex);\n                        return regexMatch ? regexMatch[1] : null;\n                    },\n\n                    normaliseVirtualElementDomStructure: function normaliseVirtualElementDomStructure(elementVerified) {\n                        // Workaround for https://github.com/SteveSanderson/knockout/issues/155\n                        // (IE <= 8 or IE 9 quirks mode parses your HTML weirdly, treating closing </li> tags as if they don't exist, thereby moving comment nodes\n                        // that are direct descendants of <ul> into the preceding <li>)\n                        if (!htmlTagsWithOptionallyClosingChildren[ko.utils.tagNameLower(elementVerified)]) return;\n\n                        // Scan immediate children to see if they contain unbalanced comment tags. If they do, those comment tags\n                        // must be intended to appear *after* that child, so move them there.\n                        var childNode = elementVerified.firstChild;\n                        if (childNode) {\n                            do {\n                                if (childNode.nodeType === 1) {\n                                    var unbalancedTags = getUnbalancedChildTags(childNode);\n                                    if (unbalancedTags) {\n                                        // Fix up the DOM by moving the unbalanced tags to where they most likely were intended to be placed - *after* the child\n                                        var nodeToInsertBefore = childNode.nextSibling;\n                                        for (var i = 0; i < unbalancedTags.length; i++) {\n                                            if (nodeToInsertBefore) elementVerified.insertBefore(unbalancedTags[i], nodeToInsertBefore);else elementVerified.appendChild(unbalancedTags[i]);\n                                        }\n                                    }\n                                }\n                            } while (childNode = childNode.nextSibling);\n                        }\n                    }\n                };\n            })();\n            ko.exportSymbol('virtualElements', ko.virtualElements);\n            ko.exportSymbol('virtualElements.allowedBindings', ko.virtualElements.allowedBindings);\n            ko.exportSymbol('virtualElements.emptyNode', ko.virtualElements.emptyNode);\n            //ko.exportSymbol('virtualElements.firstChild', ko.virtualElements.firstChild);     // firstChild is not minified\n            ko.exportSymbol('virtualElements.insertAfter', ko.virtualElements.insertAfter);\n            //ko.exportSymbol('virtualElements.nextSibling', ko.virtualElements.nextSibling);   // nextSibling is not minified\n            ko.exportSymbol('virtualElements.prepend', ko.virtualElements.prepend);\n            ko.exportSymbol('virtualElements.setDomNodeChildren', ko.virtualElements.setDomNodeChildren);\n            (function () {\n                var defaultBindingAttributeName = \"data-bind\";\n\n                ko.bindingProvider = function () {\n                    this.bindingCache = {};\n                };\n\n                ko.utils.extend(ko.bindingProvider.prototype, {\n                    'nodeHasBindings': function nodeHasBindings(node) {\n                        switch (node.nodeType) {\n                            case 1:\n                                // Element\n                                return node.getAttribute(defaultBindingAttributeName) != null || ko.components['getComponentNameForNode'](node);\n                            case 8:\n                                // Comment node\n                                return ko.virtualElements.hasBindingValue(node);\n                            default:\n                                return false;\n                        }\n                    },\n\n                    'getBindings': function getBindings(node, bindingContext) {\n                        var bindingsString = this['getBindingsString'](node, bindingContext),\n                            parsedBindings = bindingsString ? this['parseBindingsString'](bindingsString, bindingContext, node) : null;\n                        return ko.components.addBindingsForCustomElement(parsedBindings, node, bindingContext, /* valueAccessors */false);\n                    },\n\n                    'getBindingAccessors': function getBindingAccessors(node, bindingContext) {\n                        var bindingsString = this['getBindingsString'](node, bindingContext),\n                            parsedBindings = bindingsString ? this['parseBindingsString'](bindingsString, bindingContext, node, { 'valueAccessors': true }) : null;\n                        return ko.components.addBindingsForCustomElement(parsedBindings, node, bindingContext, /* valueAccessors */true);\n                    },\n\n                    // The following function is only used internally by this default provider.\n                    // It's not part of the interface definition for a general binding provider.\n                    'getBindingsString': function getBindingsString(node, bindingContext) {\n                        switch (node.nodeType) {\n                            case 1:\n                                return node.getAttribute(defaultBindingAttributeName); // Element\n                            case 8:\n                                return ko.virtualElements.virtualNodeBindingValue(node); // Comment node\n                            default:\n                                return null;\n                        }\n                    },\n\n                    // The following function is only used internally by this default provider.\n                    // It's not part of the interface definition for a general binding provider.\n                    'parseBindingsString': function parseBindingsString(bindingsString, bindingContext, node, options) {\n                        try {\n                            var bindingFunction = createBindingsStringEvaluatorViaCache(bindingsString, this.bindingCache, options);\n                            return bindingFunction(bindingContext, node);\n                        } catch (ex) {\n                            ex.message = \"Unable to parse bindings.\\nBindings value: \" + bindingsString + \"\\nMessage: \" + ex.message;\n                            throw ex;\n                        }\n                    }\n                });\n\n                ko.bindingProvider['instance'] = new ko.bindingProvider();\n\n                function createBindingsStringEvaluatorViaCache(bindingsString, cache, options) {\n                    var cacheKey = bindingsString + (options && options['valueAccessors'] || '');\n                    return cache[cacheKey] || (cache[cacheKey] = createBindingsStringEvaluator(bindingsString, options));\n                }\n\n                function createBindingsStringEvaluator(bindingsString, options) {\n                    // Build the source for a function that evaluates \"expression\"\n                    // For each scope variable, add an extra level of \"with\" nesting\n                    // Example result: with(sc1) { with(sc0) { return (expression) } }\n                    var rewrittenBindings = ko.expressionRewriting.preProcessBindings(bindingsString, options),\n                        functionBody = \"with($context){with($data||{}){return{\" + rewrittenBindings + \"}}}\";\n                    return new Function(\"$context\", \"$element\", functionBody);\n                }\n            })();\n\n            ko.exportSymbol('bindingProvider', ko.bindingProvider);\n            (function () {\n                ko.bindingHandlers = {};\n\n                // The following element types will not be recursed into during binding.\n                var bindingDoesNotRecurseIntoElementTypes = {\n                    // Don't want bindings that operate on text nodes to mutate <script> and <textarea> contents,\n                    // because it's unexpected and a potential XSS issue.\n                    // Also bindings should not operate on <template> elements since this breaks in Internet Explorer\n                    // and because such elements' contents are always intended to be bound in a different context\n                    // from where they appear in the document.\n                    'script': true,\n                    'textarea': true,\n                    'template': true\n                };\n\n                // Use an overridable method for retrieving binding handlers so that a plugins may support dynamically created handlers\n                ko['getBindingHandler'] = function (bindingKey) {\n                    return ko.bindingHandlers[bindingKey];\n                };\n\n                // The ko.bindingContext constructor is only called directly to create the root context. For child\n                // contexts, use bindingContext.createChildContext or bindingContext.extend.\n                ko.bindingContext = function (dataItemOrAccessor, parentContext, dataItemAlias, extendCallback) {\n\n                    // The binding context object includes static properties for the current, parent, and root view models.\n                    // If a view model is actually stored in an observable, the corresponding binding context object, and\n                    // any child contexts, must be updated when the view model is changed.\n                    function updateContext() {\n                        // Most of the time, the context will directly get a view model object, but if a function is given,\n                        // we call the function to retrieve the view model. If the function accesses any observables or returns\n                        // an observable, the dependency is tracked, and those observables can later cause the binding\n                        // context to be updated.\n                        var dataItemOrObservable = isFunc ? dataItemOrAccessor() : dataItemOrAccessor,\n                            dataItem = ko.utils.unwrapObservable(dataItemOrObservable);\n\n                        if (parentContext) {\n                            // When a \"parent\" context is given, register a dependency on the parent context. Thus whenever the\n                            // parent context is updated, this context will also be updated.\n                            if (parentContext._subscribable) parentContext._subscribable();\n\n                            // Copy $root and any custom properties from the parent context\n                            ko.utils.extend(self, parentContext);\n\n                            // Because the above copy overwrites our own properties, we need to reset them.\n                            // During the first execution, \"subscribable\" isn't set, so don't bother doing the update then.\n                            if (subscribable) {\n                                self._subscribable = subscribable;\n                            }\n                        } else {\n                            self['$parents'] = [];\n                            self['$root'] = dataItem;\n\n                            // Export 'ko' in the binding context so it will be available in bindings and templates\n                            // even if 'ko' isn't exported as a global, such as when using an AMD loader.\n                            // See https://github.com/SteveSanderson/knockout/issues/490\n                            self['ko'] = ko;\n                        }\n                        self['$rawData'] = dataItemOrObservable;\n                        self['$data'] = dataItem;\n                        if (dataItemAlias) self[dataItemAlias] = dataItem;\n\n                        // The extendCallback function is provided when creating a child context or extending a context.\n                        // It handles the specific actions needed to finish setting up the binding context. Actions in this\n                        // function could also add dependencies to this binding context.\n                        if (extendCallback) extendCallback(self, parentContext, dataItem);\n\n                        return self['$data'];\n                    }\n                    function disposeWhen() {\n                        return nodes && !ko.utils.anyDomNodeIsAttachedToDocument(nodes);\n                    }\n\n                    var self = this,\n                        isFunc = typeof dataItemOrAccessor == \"function\" && !ko.isObservable(dataItemOrAccessor),\n                        nodes,\n                        subscribable = ko.dependentObservable(updateContext, null, { disposeWhen: disposeWhen, disposeWhenNodeIsRemoved: true });\n\n                    // At this point, the binding context has been initialized, and the \"subscribable\" computed observable is\n                    // subscribed to any observables that were accessed in the process. If there is nothing to track, the\n                    // computed will be inactive, and we can safely throw it away. If it's active, the computed is stored in\n                    // the context object.\n                    if (subscribable.isActive()) {\n                        self._subscribable = subscribable;\n\n                        // Always notify because even if the model ($data) hasn't changed, other context properties might have changed\n                        subscribable['equalityComparer'] = null;\n\n                        // We need to be able to dispose of this computed observable when it's no longer needed. This would be\n                        // easy if we had a single node to watch, but binding contexts can be used by many different nodes, and\n                        // we cannot assume that those nodes have any relation to each other. So instead we track any node that\n                        // the context is attached to, and dispose the computed when all of those nodes have been cleaned.\n\n                        // Add properties to *subscribable* instead of *self* because any properties added to *self* may be overwritten on updates\n                        nodes = [];\n                        subscribable._addNode = function (node) {\n                            nodes.push(node);\n                            ko.utils.domNodeDisposal.addDisposeCallback(node, function (node) {\n                                ko.utils.arrayRemoveItem(nodes, node);\n                                if (!nodes.length) {\n                                    subscribable.dispose();\n                                    self._subscribable = subscribable = undefined;\n                                }\n                            });\n                        };\n                    }\n                };\n\n                // Extend the binding context hierarchy with a new view model object. If the parent context is watching\n                // any observables, the new child context will automatically get a dependency on the parent context.\n                // But this does not mean that the $data value of the child context will also get updated. If the child\n                // view model also depends on the parent view model, you must provide a function that returns the correct\n                // view model on each update.\n                ko.bindingContext.prototype['createChildContext'] = function (dataItemOrAccessor, dataItemAlias, extendCallback) {\n                    return new ko.bindingContext(dataItemOrAccessor, this, dataItemAlias, function (self, parentContext) {\n                        // Extend the context hierarchy by setting the appropriate pointers\n                        self['$parentContext'] = parentContext;\n                        self['$parent'] = parentContext['$data'];\n                        self['$parents'] = (parentContext['$parents'] || []).slice(0);\n                        self['$parents'].unshift(self['$parent']);\n                        if (extendCallback) extendCallback(self);\n                    });\n                };\n\n                // Extend the binding context with new custom properties. This doesn't change the context hierarchy.\n                // Similarly to \"child\" contexts, provide a function here to make sure that the correct values are set\n                // when an observable view model is updated.\n                ko.bindingContext.prototype['extend'] = function (properties) {\n                    // If the parent context references an observable view model, \"_subscribable\" will always be the\n                    // latest view model object. If not, \"_subscribable\" isn't set, and we can use the static \"$data\" value.\n                    return new ko.bindingContext(this._subscribable || this['$data'], this, null, function (self, parentContext) {\n                        // This \"child\" context doesn't directly track a parent observable view model,\n                        // so we need to manually set the $rawData value to match the parent.\n                        self['$rawData'] = parentContext['$rawData'];\n                        ko.utils.extend(self, typeof properties == \"function\" ? properties() : properties);\n                    });\n                };\n\n                // Returns the valueAccesor function for a binding value\n                function makeValueAccessor(value) {\n                    return function () {\n                        return value;\n                    };\n                }\n\n                // Returns the value of a valueAccessor function\n                function evaluateValueAccessor(valueAccessor) {\n                    return valueAccessor();\n                }\n\n                // Given a function that returns bindings, create and return a new object that contains\n                // binding value-accessors functions. Each accessor function calls the original function\n                // so that it always gets the latest value and all dependencies are captured. This is used\n                // by ko.applyBindingsToNode and getBindingsAndMakeAccessors.\n                function makeAccessorsFromFunction(callback) {\n                    return ko.utils.objectMap(ko.dependencyDetection.ignore(callback), function (value, key) {\n                        return function () {\n                            return callback()[key];\n                        };\n                    });\n                }\n\n                // Given a bindings function or object, create and return a new object that contains\n                // binding value-accessors functions. This is used by ko.applyBindingsToNode.\n                function makeBindingAccessors(bindings, context, node) {\n                    if (typeof bindings === 'function') {\n                        return makeAccessorsFromFunction(bindings.bind(null, context, node));\n                    } else {\n                        return ko.utils.objectMap(bindings, makeValueAccessor);\n                    }\n                }\n\n                // This function is used if the binding provider doesn't include a getBindingAccessors function.\n                // It must be called with 'this' set to the provider instance.\n                function getBindingsAndMakeAccessors(node, context) {\n                    return makeAccessorsFromFunction(this['getBindings'].bind(this, node, context));\n                }\n\n                function validateThatBindingIsAllowedForVirtualElements(bindingName) {\n                    var validator = ko.virtualElements.allowedBindings[bindingName];\n                    if (!validator) throw new Error(\"The binding '\" + bindingName + \"' cannot be used with virtual elements\");\n                }\n\n                function applyBindingsToDescendantsInternal(bindingContext, elementOrVirtualElement, bindingContextsMayDifferFromDomParentElement) {\n                    var currentChild,\n                        nextInQueue = ko.virtualElements.firstChild(elementOrVirtualElement),\n                        provider = ko.bindingProvider['instance'],\n                        preprocessNode = provider['preprocessNode'];\n\n                    // Preprocessing allows a binding provider to mutate a node before bindings are applied to it. For example it's\n                    // possible to insert new siblings after it, and/or replace the node with a different one. This can be used to\n                    // implement custom binding syntaxes, such as {{ value }} for string interpolation, or custom element types that\n                    // trigger insertion of <template> contents at that point in the document.\n                    if (preprocessNode) {\n                        while (currentChild = nextInQueue) {\n                            nextInQueue = ko.virtualElements.nextSibling(currentChild);\n                            preprocessNode.call(provider, currentChild);\n                        }\n                        // Reset nextInQueue for the next loop\n                        nextInQueue = ko.virtualElements.firstChild(elementOrVirtualElement);\n                    }\n\n                    while (currentChild = nextInQueue) {\n                        // Keep a record of the next child *before* applying bindings, in case the binding removes the current child from its position\n                        nextInQueue = ko.virtualElements.nextSibling(currentChild);\n                        applyBindingsToNodeAndDescendantsInternal(bindingContext, currentChild, bindingContextsMayDifferFromDomParentElement);\n                    }\n                }\n\n                function applyBindingsToNodeAndDescendantsInternal(bindingContext, nodeVerified, bindingContextMayDifferFromDomParentElement) {\n                    var shouldBindDescendants = true;\n\n                    // Perf optimisation: Apply bindings only if...\n                    // (1) We need to store the binding context on this node (because it may differ from the DOM parent node's binding context)\n                    //     Note that we can't store binding contexts on non-elements (e.g., text nodes), as IE doesn't allow expando properties for those\n                    // (2) It might have bindings (e.g., it has a data-bind attribute, or it's a marker for a containerless template)\n                    var isElement = nodeVerified.nodeType === 1;\n                    if (isElement) // Workaround IE <= 8 HTML parsing weirdness\n                        ko.virtualElements.normaliseVirtualElementDomStructure(nodeVerified);\n\n                    var shouldApplyBindings = isElement && bindingContextMayDifferFromDomParentElement || // Case (1)\n                    ko.bindingProvider['instance']['nodeHasBindings'](nodeVerified); // Case (2)\n                    if (shouldApplyBindings) shouldBindDescendants = applyBindingsToNodeInternal(nodeVerified, null, bindingContext, bindingContextMayDifferFromDomParentElement)['shouldBindDescendants'];\n\n                    if (shouldBindDescendants && !bindingDoesNotRecurseIntoElementTypes[ko.utils.tagNameLower(nodeVerified)]) {\n                        // We're recursing automatically into (real or virtual) child nodes without changing binding contexts. So,\n                        //  * For children of a *real* element, the binding context is certainly the same as on their DOM .parentNode,\n                        //    hence bindingContextsMayDifferFromDomParentElement is false\n                        //  * For children of a *virtual* element, we can't be sure. Evaluating .parentNode on those children may\n                        //    skip over any number of intermediate virtual elements, any of which might define a custom binding context,\n                        //    hence bindingContextsMayDifferFromDomParentElement is true\n                        applyBindingsToDescendantsInternal(bindingContext, nodeVerified, /* bindingContextsMayDifferFromDomParentElement: */!isElement);\n                    }\n                }\n\n                var boundElementDomDataKey = ko.utils.domData.nextKey();\n\n                function topologicalSortBindings(bindings) {\n                    // Depth-first sort\n                    var result = [],\n                        // The list of key/handler pairs that we will return\n                    bindingsConsidered = {},\n                        // A temporary record of which bindings are already in 'result'\n                    cyclicDependencyStack = []; // Keeps track of a depth-search so that, if there's a cycle, we know which bindings caused it\n                    ko.utils.objectForEach(bindings, function pushBinding(bindingKey) {\n                        if (!bindingsConsidered[bindingKey]) {\n                            var binding = ko['getBindingHandler'](bindingKey);\n                            if (binding) {\n                                // First add dependencies (if any) of the current binding\n                                if (binding['after']) {\n                                    cyclicDependencyStack.push(bindingKey);\n                                    ko.utils.arrayForEach(binding['after'], function (bindingDependencyKey) {\n                                        if (bindings[bindingDependencyKey]) {\n                                            if (ko.utils.arrayIndexOf(cyclicDependencyStack, bindingDependencyKey) !== -1) {\n                                                throw Error(\"Cannot combine the following bindings, because they have a cyclic dependency: \" + cyclicDependencyStack.join(\", \"));\n                                            } else {\n                                                pushBinding(bindingDependencyKey);\n                                            }\n                                        }\n                                    });\n                                    cyclicDependencyStack.length--;\n                                }\n                                // Next add the current binding\n                                result.push({ key: bindingKey, handler: binding });\n                            }\n                            bindingsConsidered[bindingKey] = true;\n                        }\n                    });\n\n                    return result;\n                }\n\n                function applyBindingsToNodeInternal(node, sourceBindings, bindingContext, bindingContextMayDifferFromDomParentElement) {\n                    // Prevent multiple applyBindings calls for the same node, except when a binding value is specified\n                    var alreadyBound = ko.utils.domData.get(node, boundElementDomDataKey);\n                    if (!sourceBindings) {\n                        if (alreadyBound) {\n                            throw Error(\"You cannot apply bindings multiple times to the same element.\");\n                        }\n                        ko.utils.domData.set(node, boundElementDomDataKey, true);\n                    }\n\n                    // Optimization: Don't store the binding context on this node if it's definitely the same as on node.parentNode, because\n                    // we can easily recover it just by scanning up the node's ancestors in the DOM\n                    // (note: here, parent node means \"real DOM parent\" not \"virtual parent\", as there's no O(1) way to find the virtual parent)\n                    if (!alreadyBound && bindingContextMayDifferFromDomParentElement) ko.storedBindingContextForNode(node, bindingContext);\n\n                    // Use bindings if given, otherwise fall back on asking the bindings provider to give us some bindings\n                    var bindings;\n                    if (sourceBindings && typeof sourceBindings !== 'function') {\n                        bindings = sourceBindings;\n                    } else {\n                        var provider = ko.bindingProvider['instance'],\n                            getBindings = provider['getBindingAccessors'] || getBindingsAndMakeAccessors;\n\n                        // Get the binding from the provider within a computed observable so that we can update the bindings whenever\n                        // the binding context is updated or if the binding provider accesses observables.\n                        var bindingsUpdater = ko.dependentObservable(function () {\n                            bindings = sourceBindings ? sourceBindings(bindingContext, node) : getBindings.call(provider, node, bindingContext);\n                            // Register a dependency on the binding context to support observable view models.\n                            if (bindings && bindingContext._subscribable) bindingContext._subscribable();\n                            return bindings;\n                        }, null, { disposeWhenNodeIsRemoved: node });\n\n                        if (!bindings || !bindingsUpdater.isActive()) bindingsUpdater = null;\n                    }\n\n                    var bindingHandlerThatControlsDescendantBindings;\n                    if (bindings) {\n                        var getValueAccessor;\n                        var orderedBindings;\n\n                        (function () {\n\n                            // Use of allBindings as a function is maintained for backwards compatibility, but its use is deprecated\n                            var allBindings = function allBindings() {\n                                return ko.utils.objectMap(bindingsUpdater ? bindingsUpdater() : bindings, evaluateValueAccessor);\n                            };\n                            // The following is the 3.x allBindings API\n\n\n                            // Return the value accessor for a given binding. When bindings are static (won't be updated because of a binding\n                            // context update), just return the value accessor from the binding. Otherwise, return a function that always gets\n                            // the latest binding value and registers a dependency on the binding updater.\n                            getValueAccessor = bindingsUpdater ? function (bindingKey) {\n                                return function () {\n                                    return evaluateValueAccessor(bindingsUpdater()[bindingKey]);\n                                };\n                            } : function (bindingKey) {\n                                return bindings[bindingKey];\n                            };\n                            allBindings['get'] = function (key) {\n                                return bindings[key] && evaluateValueAccessor(getValueAccessor(key));\n                            };\n                            allBindings['has'] = function (key) {\n                                return key in bindings;\n                            };\n\n                            // First put the bindings into the right order\n                            orderedBindings = topologicalSortBindings(bindings);\n\n                            // Go through the sorted bindings, calling init and update for each\n\n                            ko.utils.arrayForEach(orderedBindings, function (bindingKeyAndHandler) {\n                                // Note that topologicalSortBindings has already filtered out any nonexistent binding handlers,\n                                // so bindingKeyAndHandler.handler will always be nonnull.\n                                var handlerInitFn = bindingKeyAndHandler.handler[\"init\"],\n                                    handlerUpdateFn = bindingKeyAndHandler.handler[\"update\"],\n                                    bindingKey = bindingKeyAndHandler.key;\n\n                                if (node.nodeType === 8) {\n                                    validateThatBindingIsAllowedForVirtualElements(bindingKey);\n                                }\n\n                                try {\n                                    // Run init, ignoring any dependencies\n                                    if (typeof handlerInitFn == \"function\") {\n                                        ko.dependencyDetection.ignore(function () {\n                                            var initResult = handlerInitFn(node, getValueAccessor(bindingKey), allBindings, bindingContext['$data'], bindingContext);\n\n                                            // If this binding handler claims to control descendant bindings, make a note of this\n                                            if (initResult && initResult['controlsDescendantBindings']) {\n                                                if (bindingHandlerThatControlsDescendantBindings !== undefined) throw new Error(\"Multiple bindings (\" + bindingHandlerThatControlsDescendantBindings + \" and \" + bindingKey + \") are trying to control descendant bindings of the same element. You cannot use these bindings together on the same element.\");\n                                                bindingHandlerThatControlsDescendantBindings = bindingKey;\n                                            }\n                                        });\n                                    }\n\n                                    // Run update in its own computed wrapper\n                                    if (typeof handlerUpdateFn == \"function\") {\n                                        ko.dependentObservable(function () {\n                                            handlerUpdateFn(node, getValueAccessor(bindingKey), allBindings, bindingContext['$data'], bindingContext);\n                                        }, null, { disposeWhenNodeIsRemoved: node });\n                                    }\n                                } catch (ex) {\n                                    ex.message = \"Unable to process binding \\\"\" + bindingKey + \": \" + bindings[bindingKey] + \"\\\"\\nMessage: \" + ex.message;\n                                    throw ex;\n                                }\n                            });\n                        })();\n                    }\n\n                    return {\n                        'shouldBindDescendants': bindingHandlerThatControlsDescendantBindings === undefined\n                    };\n                };\n\n                var storedBindingContextDomDataKey = ko.utils.domData.nextKey();\n                ko.storedBindingContextForNode = function (node, bindingContext) {\n                    if (arguments.length == 2) {\n                        ko.utils.domData.set(node, storedBindingContextDomDataKey, bindingContext);\n                        if (bindingContext._subscribable) bindingContext._subscribable._addNode(node);\n                    } else {\n                        return ko.utils.domData.get(node, storedBindingContextDomDataKey);\n                    }\n                };\n\n                function getBindingContext(viewModelOrBindingContext) {\n                    return viewModelOrBindingContext && viewModelOrBindingContext instanceof ko.bindingContext ? viewModelOrBindingContext : new ko.bindingContext(viewModelOrBindingContext);\n                }\n\n                ko.applyBindingAccessorsToNode = function (node, bindings, viewModelOrBindingContext) {\n                    if (node.nodeType === 1) // If it's an element, workaround IE <= 8 HTML parsing weirdness\n                        ko.virtualElements.normaliseVirtualElementDomStructure(node);\n                    return applyBindingsToNodeInternal(node, bindings, getBindingContext(viewModelOrBindingContext), true);\n                };\n\n                ko.applyBindingsToNode = function (node, bindings, viewModelOrBindingContext) {\n                    var context = getBindingContext(viewModelOrBindingContext);\n                    return ko.applyBindingAccessorsToNode(node, makeBindingAccessors(bindings, context, node), context);\n                };\n\n                ko.applyBindingsToDescendants = function (viewModelOrBindingContext, rootNode) {\n                    if (rootNode.nodeType === 1 || rootNode.nodeType === 8) applyBindingsToDescendantsInternal(getBindingContext(viewModelOrBindingContext), rootNode, true);\n                };\n\n                ko.applyBindings = function (viewModelOrBindingContext, rootNode) {\n                    // If jQuery is loaded after Knockout, we won't initially have access to it. So save it here.\n                    if (!jQueryInstance && window['jQuery']) {\n                        jQueryInstance = window['jQuery'];\n                    }\n\n                    if (rootNode && rootNode.nodeType !== 1 && rootNode.nodeType !== 8) throw new Error(\"ko.applyBindings: first parameter should be your view model; second parameter should be a DOM node\");\n                    rootNode = rootNode || window.document.body; // Make \"rootNode\" parameter optional\n\n                    applyBindingsToNodeAndDescendantsInternal(getBindingContext(viewModelOrBindingContext), rootNode, true);\n                };\n\n                // Retrieving binding context from arbitrary nodes\n                ko.contextFor = function (node) {\n                    // We can only do something meaningful for elements and comment nodes (in particular, not text nodes, as IE can't store domdata for them)\n                    switch (node.nodeType) {\n                        case 1:\n                        case 8:\n                            var context = ko.storedBindingContextForNode(node);\n                            if (context) return context;\n                            if (node.parentNode) return ko.contextFor(node.parentNode);\n                            break;\n                    }\n                    return undefined;\n                };\n                ko.dataFor = function (node) {\n                    var context = ko.contextFor(node);\n                    return context ? context['$data'] : undefined;\n                };\n\n                ko.exportSymbol('bindingHandlers', ko.bindingHandlers);\n                ko.exportSymbol('applyBindings', ko.applyBindings);\n                ko.exportSymbol('applyBindingsToDescendants', ko.applyBindingsToDescendants);\n                ko.exportSymbol('applyBindingAccessorsToNode', ko.applyBindingAccessorsToNode);\n                ko.exportSymbol('applyBindingsToNode', ko.applyBindingsToNode);\n                ko.exportSymbol('contextFor', ko.contextFor);\n                ko.exportSymbol('dataFor', ko.dataFor);\n            })();\n            (function (undefined) {\n                var loadingSubscribablesCache = {},\n                    // Tracks component loads that are currently in flight\n                loadedDefinitionsCache = {}; // Tracks component loads that have already completed\n\n                ko.components = {\n                    get: function get(componentName, callback) {\n                        var cachedDefinition = getObjectOwnProperty(loadedDefinitionsCache, componentName);\n                        if (cachedDefinition) {\n                            // It's already loaded and cached. Reuse the same definition object.\n                            // Note that for API consistency, even cache hits complete asynchronously by default.\n                            // You can bypass this by putting synchronous:true on your component config.\n                            if (cachedDefinition.isSynchronousComponent) {\n                                ko.dependencyDetection.ignore(function () {\n                                    // See comment in loaderRegistryBehaviors.js for reasoning\n                                    callback(cachedDefinition.definition);\n                                });\n                            } else {\n                                ko.tasks.schedule(function () {\n                                    callback(cachedDefinition.definition);\n                                });\n                            }\n                        } else {\n                            // Join the loading process that is already underway, or start a new one.\n                            loadComponentAndNotify(componentName, callback);\n                        }\n                    },\n\n                    clearCachedDefinition: function clearCachedDefinition(componentName) {\n                        delete loadedDefinitionsCache[componentName];\n                    },\n\n                    _getFirstResultFromLoaders: getFirstResultFromLoaders\n                };\n\n                function getObjectOwnProperty(obj, propName) {\n                    return obj.hasOwnProperty(propName) ? obj[propName] : undefined;\n                }\n\n                function loadComponentAndNotify(componentName, callback) {\n                    var subscribable = getObjectOwnProperty(loadingSubscribablesCache, componentName),\n                        completedAsync;\n                    if (!subscribable) {\n                        // It's not started loading yet. Start loading, and when it's done, move it to loadedDefinitionsCache.\n                        subscribable = loadingSubscribablesCache[componentName] = new ko.subscribable();\n                        subscribable.subscribe(callback);\n\n                        beginLoadingComponent(componentName, function (definition, config) {\n                            var isSynchronousComponent = !!(config && config['synchronous']);\n                            loadedDefinitionsCache[componentName] = { definition: definition, isSynchronousComponent: isSynchronousComponent };\n                            delete loadingSubscribablesCache[componentName];\n\n                            // For API consistency, all loads complete asynchronously. However we want to avoid\n                            // adding an extra task schedule if it's unnecessary (i.e., the completion is already\n                            // async).\n                            //\n                            // You can bypass the 'always asynchronous' feature by putting the synchronous:true\n                            // flag on your component configuration when you register it.\n                            if (completedAsync || isSynchronousComponent) {\n                                // Note that notifySubscribers ignores any dependencies read within the callback.\n                                // See comment in loaderRegistryBehaviors.js for reasoning\n                                subscribable['notifySubscribers'](definition);\n                            } else {\n                                ko.tasks.schedule(function () {\n                                    subscribable['notifySubscribers'](definition);\n                                });\n                            }\n                        });\n                        completedAsync = true;\n                    } else {\n                        subscribable.subscribe(callback);\n                    }\n                }\n\n                function beginLoadingComponent(componentName, callback) {\n                    getFirstResultFromLoaders('getConfig', [componentName], function (config) {\n                        if (config) {\n                            // We have a config, so now load its definition\n                            getFirstResultFromLoaders('loadComponent', [componentName, config], function (definition) {\n                                callback(definition, config);\n                            });\n                        } else {\n                            // The component has no config - it's unknown to all the loaders.\n                            // Note that this is not an error (e.g., a module loading error) - that would abort the\n                            // process and this callback would not run. For this callback to run, all loaders must\n                            // have confirmed they don't know about this component.\n                            callback(null, null);\n                        }\n                    });\n                }\n\n                function getFirstResultFromLoaders(methodName, argsExceptCallback, callback, candidateLoaders) {\n                    // On the first call in the stack, start with the full set of loaders\n                    if (!candidateLoaders) {\n                        candidateLoaders = ko.components['loaders'].slice(0); // Use a copy, because we'll be mutating this array\n                    }\n\n                    // Try the next candidate\n                    var currentCandidateLoader = candidateLoaders.shift();\n                    if (currentCandidateLoader) {\n                        var methodInstance = currentCandidateLoader[methodName];\n                        if (methodInstance) {\n                            var wasAborted = false,\n                                synchronousReturnValue = methodInstance.apply(currentCandidateLoader, argsExceptCallback.concat(function (result) {\n                                if (wasAborted) {\n                                    callback(null);\n                                } else if (result !== null) {\n                                    // This candidate returned a value. Use it.\n                                    callback(result);\n                                } else {\n                                    // Try the next candidate\n                                    getFirstResultFromLoaders(methodName, argsExceptCallback, callback, candidateLoaders);\n                                }\n                            }));\n\n                            // Currently, loaders may not return anything synchronously. This leaves open the possibility\n                            // that we'll extend the API to support synchronous return values in the future. It won't be\n                            // a breaking change, because currently no loader is allowed to return anything except undefined.\n                            if (synchronousReturnValue !== undefined) {\n                                wasAborted = true;\n\n                                // Method to suppress exceptions will remain undocumented. This is only to keep\n                                // KO's specs running tidily, since we can observe the loading got aborted without\n                                // having exceptions cluttering up the console too.\n                                if (!currentCandidateLoader['suppressLoaderExceptions']) {\n                                    throw new Error('Component loaders must supply values by invoking the callback, not by returning values synchronously.');\n                                }\n                            }\n                        } else {\n                            // This candidate doesn't have the relevant handler. Synchronously move on to the next one.\n                            getFirstResultFromLoaders(methodName, argsExceptCallback, callback, candidateLoaders);\n                        }\n                    } else {\n                        // No candidates returned a value\n                        callback(null);\n                    }\n                }\n\n                // Reference the loaders via string name so it's possible for developers\n                // to replace the whole array by assigning to ko.components.loaders\n                ko.components['loaders'] = [];\n\n                ko.exportSymbol('components', ko.components);\n                ko.exportSymbol('components.get', ko.components.get);\n                ko.exportSymbol('components.clearCachedDefinition', ko.components.clearCachedDefinition);\n            })();\n            (function (undefined) {\n\n                // The default loader is responsible for two things:\n                // 1. Maintaining the default in-memory registry of component configuration objects\n                //    (i.e., the thing you're writing to when you call ko.components.register(someName, ...))\n                // 2. Answering requests for components by fetching configuration objects\n                //    from that default in-memory registry and resolving them into standard\n                //    component definition objects (of the form { createViewModel: ..., template: ... })\n                // Custom loaders may override either of these facilities, i.e.,\n                // 1. To supply configuration objects from some other source (e.g., conventions)\n                // 2. Or, to resolve configuration objects by loading viewmodels/templates via arbitrary logic.\n\n                var defaultConfigRegistry = {};\n\n                ko.components.register = function (componentName, config) {\n                    if (!config) {\n                        throw new Error('Invalid configuration for ' + componentName);\n                    }\n\n                    if (ko.components.isRegistered(componentName)) {\n                        throw new Error('Component ' + componentName + ' is already registered');\n                    }\n\n                    defaultConfigRegistry[componentName] = config;\n                };\n\n                ko.components.isRegistered = function (componentName) {\n                    return defaultConfigRegistry.hasOwnProperty(componentName);\n                };\n\n                ko.components.unregister = function (componentName) {\n                    delete defaultConfigRegistry[componentName];\n                    ko.components.clearCachedDefinition(componentName);\n                };\n\n                ko.components.defaultLoader = {\n                    'getConfig': function getConfig(componentName, callback) {\n                        var result = defaultConfigRegistry.hasOwnProperty(componentName) ? defaultConfigRegistry[componentName] : null;\n                        callback(result);\n                    },\n\n                    'loadComponent': function loadComponent(componentName, config, callback) {\n                        var errorCallback = makeErrorCallback(componentName);\n                        possiblyGetConfigFromAmd(errorCallback, config, function (loadedConfig) {\n                            resolveConfig(componentName, errorCallback, loadedConfig, callback);\n                        });\n                    },\n\n                    'loadTemplate': function loadTemplate(componentName, templateConfig, callback) {\n                        resolveTemplate(makeErrorCallback(componentName), templateConfig, callback);\n                    },\n\n                    'loadViewModel': function loadViewModel(componentName, viewModelConfig, callback) {\n                        resolveViewModel(makeErrorCallback(componentName), viewModelConfig, callback);\n                    }\n                };\n\n                var createViewModelKey = 'createViewModel';\n\n                // Takes a config object of the form { template: ..., viewModel: ... }, and asynchronously convert it\n                // into the standard component definition format:\n                //    { template: <ArrayOfDomNodes>, createViewModel: function(params, componentInfo) { ... } }.\n                // Since both template and viewModel may need to be resolved asynchronously, both tasks are performed\n                // in parallel, and the results joined when both are ready. We don't depend on any promises infrastructure,\n                // so this is implemented manually below.\n                function resolveConfig(componentName, errorCallback, config, callback) {\n                    var result = {},\n                        makeCallBackWhenZero = 2,\n                        tryIssueCallback = function tryIssueCallback() {\n                        if (--makeCallBackWhenZero === 0) {\n                            callback(result);\n                        }\n                    },\n                        templateConfig = config['template'],\n                        viewModelConfig = config['viewModel'];\n\n                    if (templateConfig) {\n                        possiblyGetConfigFromAmd(errorCallback, templateConfig, function (loadedConfig) {\n                            ko.components._getFirstResultFromLoaders('loadTemplate', [componentName, loadedConfig], function (resolvedTemplate) {\n                                result['template'] = resolvedTemplate;\n                                tryIssueCallback();\n                            });\n                        });\n                    } else {\n                        tryIssueCallback();\n                    }\n\n                    if (viewModelConfig) {\n                        possiblyGetConfigFromAmd(errorCallback, viewModelConfig, function (loadedConfig) {\n                            ko.components._getFirstResultFromLoaders('loadViewModel', [componentName, loadedConfig], function (resolvedViewModel) {\n                                result[createViewModelKey] = resolvedViewModel;\n                                tryIssueCallback();\n                            });\n                        });\n                    } else {\n                        tryIssueCallback();\n                    }\n                }\n\n                function resolveTemplate(errorCallback, templateConfig, callback) {\n                    if (typeof templateConfig === 'string') {\n                        // Markup - parse it\n                        callback(ko.utils.parseHtmlFragment(templateConfig));\n                    } else if (templateConfig instanceof Array) {\n                        // Assume already an array of DOM nodes - pass through unchanged\n                        callback(templateConfig);\n                    } else if (isDocumentFragment(templateConfig)) {\n                        // Document fragment - use its child nodes\n                        callback(ko.utils.makeArray(templateConfig.childNodes));\n                    } else if (templateConfig['element']) {\n                        var element = templateConfig['element'];\n                        if (isDomElement(element)) {\n                            // Element instance - copy its child nodes\n                            callback(cloneNodesFromTemplateSourceElement(element));\n                        } else if (typeof element === 'string') {\n                            // Element ID - find it, then copy its child nodes\n                            var elemInstance = document.getElementById(element);\n                            if (elemInstance) {\n                                callback(cloneNodesFromTemplateSourceElement(elemInstance));\n                            } else {\n                                errorCallback('Cannot find element with ID ' + element);\n                            }\n                        } else {\n                            errorCallback('Unknown element type: ' + element);\n                        }\n                    } else {\n                        errorCallback('Unknown template value: ' + templateConfig);\n                    }\n                }\n\n                function resolveViewModel(errorCallback, viewModelConfig, callback) {\n                    if (typeof viewModelConfig === 'function') {\n                        // Constructor - convert to standard factory function format\n                        // By design, this does *not* supply componentInfo to the constructor, as the intent is that\n                        // componentInfo contains non-viewmodel data (e.g., the component's element) that should only\n                        // be used in factory functions, not viewmodel constructors.\n                        callback(function (params /*, componentInfo */) {\n                            return new viewModelConfig(params);\n                        });\n                    } else if (typeof viewModelConfig[createViewModelKey] === 'function') {\n                        // Already a factory function - use it as-is\n                        callback(viewModelConfig[createViewModelKey]);\n                    } else if ('instance' in viewModelConfig) {\n                        // Fixed object instance - promote to createViewModel format for API consistency\n                        var fixedInstance = viewModelConfig['instance'];\n                        callback(function (params, componentInfo) {\n                            return fixedInstance;\n                        });\n                    } else if ('viewModel' in viewModelConfig) {\n                        // Resolved AMD module whose value is of the form { viewModel: ... }\n                        resolveViewModel(errorCallback, viewModelConfig['viewModel'], callback);\n                    } else {\n                        errorCallback('Unknown viewModel value: ' + viewModelConfig);\n                    }\n                }\n\n                function cloneNodesFromTemplateSourceElement(elemInstance) {\n                    switch (ko.utils.tagNameLower(elemInstance)) {\n                        case 'script':\n                            return ko.utils.parseHtmlFragment(elemInstance.text);\n                        case 'textarea':\n                            return ko.utils.parseHtmlFragment(elemInstance.value);\n                        case 'template':\n                            // For browsers with proper <template> element support (i.e., where the .content property\n                            // gives a document fragment), use that document fragment.\n                            if (isDocumentFragment(elemInstance.content)) {\n                                return ko.utils.cloneNodes(elemInstance.content.childNodes);\n                            }\n                    }\n\n                    // Regular elements such as <div>, and <template> elements on old browsers that don't really\n                    // understand <template> and just treat it as a regular container\n                    return ko.utils.cloneNodes(elemInstance.childNodes);\n                }\n\n                function isDomElement(obj) {\n                    if (window['HTMLElement']) {\n                        return obj instanceof HTMLElement;\n                    } else {\n                        return obj && obj.tagName && obj.nodeType === 1;\n                    }\n                }\n\n                function isDocumentFragment(obj) {\n                    if (window['DocumentFragment']) {\n                        return obj instanceof DocumentFragment;\n                    } else {\n                        return obj && obj.nodeType === 11;\n                    }\n                }\n\n                function possiblyGetConfigFromAmd(errorCallback, config, callback) {\n                    if (typeof config['require'] === 'string') {\n                        // The config is the value of an AMD module\n                        if (amdRequire || window['require']) {\n                            (amdRequire || window['require'])([config['require']], callback);\n                        } else {\n                            errorCallback('Uses require, but no AMD loader is present');\n                        }\n                    } else {\n                        callback(config);\n                    }\n                }\n\n                function makeErrorCallback(componentName) {\n                    return function (message) {\n                        throw new Error('Component \\'' + componentName + '\\': ' + message);\n                    };\n                }\n\n                ko.exportSymbol('components.register', ko.components.register);\n                ko.exportSymbol('components.isRegistered', ko.components.isRegistered);\n                ko.exportSymbol('components.unregister', ko.components.unregister);\n\n                // Expose the default loader so that developers can directly ask it for configuration\n                // or to resolve configuration\n                ko.exportSymbol('components.defaultLoader', ko.components.defaultLoader);\n\n                // By default, the default loader is the only registered component loader\n                ko.components['loaders'].push(ko.components.defaultLoader);\n\n                // Privately expose the underlying config registry for use in old-IE shim\n                ko.components._allRegisteredComponents = defaultConfigRegistry;\n            })();\n            (function (undefined) {\n                // Overridable API for determining which component name applies to a given node. By overriding this,\n                // you can for example map specific tagNames to components that are not preregistered.\n                ko.components['getComponentNameForNode'] = function (node) {\n                    var tagNameLower = ko.utils.tagNameLower(node);\n                    if (ko.components.isRegistered(tagNameLower)) {\n                        // Try to determine that this node can be considered a *custom* element; see https://github.com/knockout/knockout/issues/1603\n                        if (tagNameLower.indexOf('-') != -1 || '' + node == \"[object HTMLUnknownElement]\" || ko.utils.ieVersion <= 8 && node.tagName === tagNameLower) {\n                            return tagNameLower;\n                        }\n                    }\n                };\n\n                ko.components.addBindingsForCustomElement = function (allBindings, node, bindingContext, valueAccessors) {\n                    // Determine if it's really a custom element matching a component\n                    if (node.nodeType === 1) {\n                        var componentName = ko.components['getComponentNameForNode'](node);\n                        if (componentName) {\n                            // It does represent a component, so add a component binding for it\n                            allBindings = allBindings || {};\n\n                            if (allBindings['component']) {\n                                // Avoid silently overwriting some other 'component' binding that may already be on the element\n                                throw new Error('Cannot use the \"component\" binding on a custom element matching a component');\n                            }\n\n                            var componentBindingValue = { 'name': componentName, 'params': getComponentParamsFromCustomElement(node, bindingContext) };\n\n                            allBindings['component'] = valueAccessors ? function () {\n                                return componentBindingValue;\n                            } : componentBindingValue;\n                        }\n                    }\n\n                    return allBindings;\n                };\n\n                var nativeBindingProviderInstance = new ko.bindingProvider();\n\n                function getComponentParamsFromCustomElement(elem, bindingContext) {\n                    var paramsAttribute = elem.getAttribute('params');\n\n                    if (paramsAttribute) {\n                        var params = nativeBindingProviderInstance['parseBindingsString'](paramsAttribute, bindingContext, elem, { 'valueAccessors': true, 'bindingParams': true }),\n                            rawParamComputedValues = ko.utils.objectMap(params, function (paramValue, paramName) {\n                            return ko.computed(paramValue, null, { disposeWhenNodeIsRemoved: elem });\n                        }),\n                            result = ko.utils.objectMap(rawParamComputedValues, function (paramValueComputed, paramName) {\n                            var paramValue = paramValueComputed.peek();\n                            // Does the evaluation of the parameter value unwrap any observables?\n                            if (!paramValueComputed.isActive()) {\n                                // No it doesn't, so there's no need for any computed wrapper. Just pass through the supplied value directly.\n                                // Example: \"someVal: firstName, age: 123\" (whether or not firstName is an observable/computed)\n                                return paramValue;\n                            } else {\n                                // Yes it does. Supply a computed property that unwraps both the outer (binding expression)\n                                // level of observability, and any inner (resulting model value) level of observability.\n                                // This means the component doesn't have to worry about multiple unwrapping. If the value is a\n                                // writable observable, the computed will also be writable and pass the value on to the observable.\n                                return ko.computed({\n                                    'read': function read() {\n                                        return ko.utils.unwrapObservable(paramValueComputed());\n                                    },\n                                    'write': ko.isWriteableObservable(paramValue) && function (value) {\n                                        paramValueComputed()(value);\n                                    },\n                                    disposeWhenNodeIsRemoved: elem\n                                });\n                            }\n                        });\n\n                        // Give access to the raw computeds, as long as that wouldn't overwrite any custom param also called '$raw'\n                        // This is in case the developer wants to react to outer (binding) observability separately from inner\n                        // (model value) observability, or in case the model value observable has subobservables.\n                        if (!result.hasOwnProperty('$raw')) {\n                            result['$raw'] = rawParamComputedValues;\n                        }\n\n                        return result;\n                    } else {\n                        // For consistency, absence of a \"params\" attribute is treated the same as the presence of\n                        // any empty one. Otherwise component viewmodels need special code to check whether or not\n                        // 'params' or 'params.$raw' is null/undefined before reading subproperties, which is annoying.\n                        return { '$raw': {} };\n                    }\n                }\n\n                // --------------------------------------------------------------------------------\n                // Compatibility code for older (pre-HTML5) IE browsers\n\n                if (ko.utils.ieVersion < 9) {\n                    // Whenever you preregister a component, enable it as a custom element in the current document\n                    ko.components['register'] = function (originalFunction) {\n                        return function (componentName) {\n                            document.createElement(componentName); // Allows IE<9 to parse markup containing the custom element\n                            return originalFunction.apply(this, arguments);\n                        };\n                    }(ko.components['register']);\n\n                    // Whenever you create a document fragment, enable all preregistered component names as custom elements\n                    // This is needed to make innerShiv/jQuery HTML parsing correctly handle the custom elements\n                    document.createDocumentFragment = function (originalFunction) {\n                        return function () {\n                            var newDocFrag = originalFunction(),\n                                allComponents = ko.components._allRegisteredComponents;\n                            for (var componentName in allComponents) {\n                                if (allComponents.hasOwnProperty(componentName)) {\n                                    newDocFrag.createElement(componentName);\n                                }\n                            }\n                            return newDocFrag;\n                        };\n                    }(document.createDocumentFragment);\n                }\n            })();(function (undefined) {\n\n                var componentLoadingOperationUniqueId = 0;\n\n                ko.bindingHandlers['component'] = {\n                    'init': function init(element, valueAccessor, ignored1, ignored2, bindingContext) {\n                        var currentViewModel,\n                            currentLoadingOperationId,\n                            disposeAssociatedComponentViewModel = function disposeAssociatedComponentViewModel() {\n                            var currentViewModelDispose = currentViewModel && currentViewModel['dispose'];\n                            if (typeof currentViewModelDispose === 'function') {\n                                currentViewModelDispose.call(currentViewModel);\n                            }\n                            currentViewModel = null;\n                            // Any in-flight loading operation is no longer relevant, so make sure we ignore its completion\n                            currentLoadingOperationId = null;\n                        },\n                            originalChildNodes = ko.utils.makeArray(ko.virtualElements.childNodes(element));\n\n                        ko.utils.domNodeDisposal.addDisposeCallback(element, disposeAssociatedComponentViewModel);\n\n                        ko.computed(function () {\n                            var value = ko.utils.unwrapObservable(valueAccessor()),\n                                componentName,\n                                componentParams;\n\n                            if (typeof value === 'string') {\n                                componentName = value;\n                            } else {\n                                componentName = ko.utils.unwrapObservable(value['name']);\n                                componentParams = ko.utils.unwrapObservable(value['params']);\n                            }\n\n                            if (!componentName) {\n                                throw new Error('No component name specified');\n                            }\n\n                            var loadingOperationId = currentLoadingOperationId = ++componentLoadingOperationUniqueId;\n                            ko.components.get(componentName, function (componentDefinition) {\n                                // If this is not the current load operation for this element, ignore it.\n                                if (currentLoadingOperationId !== loadingOperationId) {\n                                    return;\n                                }\n\n                                // Clean up previous state\n                                disposeAssociatedComponentViewModel();\n\n                                // Instantiate and bind new component. Implicitly this cleans any old DOM nodes.\n                                if (!componentDefinition) {\n                                    throw new Error('Unknown component \\'' + componentName + '\\'');\n                                }\n                                cloneTemplateIntoElement(componentName, componentDefinition, element);\n                                var componentViewModel = createViewModel(componentDefinition, element, originalChildNodes, componentParams),\n                                    childBindingContext = bindingContext['createChildContext'](componentViewModel, /* dataItemAlias */undefined, function (ctx) {\n                                    ctx['$component'] = componentViewModel;\n                                    ctx['$componentTemplateNodes'] = originalChildNodes;\n                                });\n                                currentViewModel = componentViewModel;\n                                ko.applyBindingsToDescendants(childBindingContext, element);\n                            });\n                        }, null, { disposeWhenNodeIsRemoved: element });\n\n                        return { 'controlsDescendantBindings': true };\n                    }\n                };\n\n                ko.virtualElements.allowedBindings['component'] = true;\n\n                function cloneTemplateIntoElement(componentName, componentDefinition, element) {\n                    var template = componentDefinition['template'];\n                    if (!template) {\n                        throw new Error('Component \\'' + componentName + '\\' has no template');\n                    }\n\n                    var clonedNodesArray = ko.utils.cloneNodes(template);\n                    ko.virtualElements.setDomNodeChildren(element, clonedNodesArray);\n                }\n\n                function createViewModel(componentDefinition, element, originalChildNodes, componentParams) {\n                    var componentViewModelFactory = componentDefinition['createViewModel'];\n                    return componentViewModelFactory ? componentViewModelFactory.call(componentDefinition, componentParams, { 'element': element, 'templateNodes': originalChildNodes }) : componentParams; // Template-only component\n                }\n            })();\n            var attrHtmlToJavascriptMap = { 'class': 'className', 'for': 'htmlFor' };\n            ko.bindingHandlers['attr'] = {\n                'update': function update(element, valueAccessor, allBindings) {\n                    var value = ko.utils.unwrapObservable(valueAccessor()) || {};\n                    ko.utils.objectForEach(value, function (attrName, attrValue) {\n                        attrValue = ko.utils.unwrapObservable(attrValue);\n\n                        // To cover cases like \"attr: { checked:someProp }\", we want to remove the attribute entirely\n                        // when someProp is a \"no value\"-like value (strictly null, false, or undefined)\n                        // (because the absence of the \"checked\" attr is how to mark an element as not checked, etc.)\n                        var toRemove = attrValue === false || attrValue === null || attrValue === undefined;\n                        if (toRemove) element.removeAttribute(attrName);\n\n                        // In IE <= 7 and IE8 Quirks Mode, you have to use the Javascript property name instead of the\n                        // HTML attribute name for certain attributes. IE8 Standards Mode supports the correct behavior,\n                        // but instead of figuring out the mode, we'll just set the attribute through the Javascript\n                        // property for IE <= 8.\n                        if (ko.utils.ieVersion <= 8 && attrName in attrHtmlToJavascriptMap) {\n                            attrName = attrHtmlToJavascriptMap[attrName];\n                            if (toRemove) element.removeAttribute(attrName);else element[attrName] = attrValue;\n                        } else if (!toRemove) {\n                            element.setAttribute(attrName, attrValue.toString());\n                        }\n\n                        // Treat \"name\" specially - although you can think of it as an attribute, it also needs\n                        // special handling on older versions of IE (https://github.com/SteveSanderson/knockout/pull/333)\n                        // Deliberately being case-sensitive here because XHTML would regard \"Name\" as a different thing\n                        // entirely, and there's no strong reason to allow for such casing in HTML.\n                        if (attrName === \"name\") {\n                            ko.utils.setElementName(element, toRemove ? \"\" : attrValue.toString());\n                        }\n                    });\n                }\n            };\n            (function () {\n\n                ko.bindingHandlers['checked'] = {\n                    'after': ['value', 'attr'],\n                    'init': function init(element, valueAccessor, allBindings) {\n                        var checkedValue = ko.pureComputed(function () {\n                            // Treat \"value\" like \"checkedValue\" when it is included with \"checked\" binding\n                            if (allBindings['has']('checkedValue')) {\n                                return ko.utils.unwrapObservable(allBindings.get('checkedValue'));\n                            } else if (allBindings['has']('value')) {\n                                return ko.utils.unwrapObservable(allBindings.get('value'));\n                            }\n\n                            return element.value;\n                        });\n\n                        function updateModel() {\n                            // This updates the model value from the view value.\n                            // It runs in response to DOM events (click) and changes in checkedValue.\n                            var isChecked = element.checked,\n                                elemValue = useCheckedValue ? checkedValue() : isChecked;\n\n                            // When we're first setting up this computed, don't change any model state.\n                            if (ko.computedContext.isInitial()) {\n                                return;\n                            }\n\n                            // We can ignore unchecked radio buttons, because some other radio\n                            // button will be getting checked, and that one can take care of updating state.\n                            if (isRadio && !isChecked) {\n                                return;\n                            }\n\n                            var modelValue = ko.dependencyDetection.ignore(valueAccessor);\n                            if (valueIsArray) {\n                                var writableValue = rawValueIsNonArrayObservable ? modelValue.peek() : modelValue;\n                                if (oldElemValue !== elemValue) {\n                                    // When we're responding to the checkedValue changing, and the element is\n                                    // currently checked, replace the old elem value with the new elem value\n                                    // in the model array.\n                                    if (isChecked) {\n                                        ko.utils.addOrRemoveItem(writableValue, elemValue, true);\n                                        ko.utils.addOrRemoveItem(writableValue, oldElemValue, false);\n                                    }\n\n                                    oldElemValue = elemValue;\n                                } else {\n                                    // When we're responding to the user having checked/unchecked a checkbox,\n                                    // add/remove the element value to the model array.\n                                    ko.utils.addOrRemoveItem(writableValue, elemValue, isChecked);\n                                }\n                                if (rawValueIsNonArrayObservable && ko.isWriteableObservable(modelValue)) {\n                                    modelValue(writableValue);\n                                }\n                            } else {\n                                ko.expressionRewriting.writeValueToProperty(modelValue, allBindings, 'checked', elemValue, true);\n                            }\n                        };\n\n                        function updateView() {\n                            // This updates the view value from the model value.\n                            // It runs in response to changes in the bound (checked) value.\n                            var modelValue = ko.utils.unwrapObservable(valueAccessor());\n\n                            if (valueIsArray) {\n                                // When a checkbox is bound to an array, being checked represents its value being present in that array\n                                element.checked = ko.utils.arrayIndexOf(modelValue, checkedValue()) >= 0;\n                            } else if (isCheckbox) {\n                                // When a checkbox is bound to any other value (not an array), being checked represents the value being trueish\n                                element.checked = modelValue;\n                            } else {\n                                // For radio buttons, being checked means that the radio button's value corresponds to the model value\n                                element.checked = checkedValue() === modelValue;\n                            }\n                        };\n\n                        var isCheckbox = element.type == \"checkbox\",\n                            isRadio = element.type == \"radio\";\n\n                        // Only bind to check boxes and radio buttons\n                        if (!isCheckbox && !isRadio) {\n                            return;\n                        }\n\n                        var rawValue = valueAccessor(),\n                            valueIsArray = isCheckbox && ko.utils.unwrapObservable(rawValue) instanceof Array,\n                            rawValueIsNonArrayObservable = !(valueIsArray && rawValue.push && rawValue.splice),\n                            oldElemValue = valueIsArray ? checkedValue() : undefined,\n                            useCheckedValue = isRadio || valueIsArray;\n\n                        // IE 6 won't allow radio buttons to be selected unless they have a name\n                        if (isRadio && !element.name) ko.bindingHandlers['uniqueName']['init'](element, function () {\n                            return true;\n                        });\n\n                        // Set up two computeds to update the binding:\n\n                        // The first responds to changes in the checkedValue value and to element clicks\n                        ko.computed(updateModel, null, { disposeWhenNodeIsRemoved: element });\n                        ko.utils.registerEventHandler(element, \"click\", updateModel);\n\n                        // The second responds to changes in the model value (the one associated with the checked binding)\n                        ko.computed(updateView, null, { disposeWhenNodeIsRemoved: element });\n\n                        rawValue = undefined;\n                    }\n                };\n                ko.expressionRewriting.twoWayBindings['checked'] = true;\n\n                ko.bindingHandlers['checkedValue'] = {\n                    'update': function update(element, valueAccessor) {\n                        element.value = ko.utils.unwrapObservable(valueAccessor());\n                    }\n                };\n            })();var classesWrittenByBindingKey = '__ko__cssValue';\n            ko.bindingHandlers['css'] = {\n                'update': function update(element, valueAccessor) {\n                    var value = ko.utils.unwrapObservable(valueAccessor());\n                    if (value !== null && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) == \"object\") {\n                        ko.utils.objectForEach(value, function (className, shouldHaveClass) {\n                            shouldHaveClass = ko.utils.unwrapObservable(shouldHaveClass);\n                            ko.utils.toggleDomNodeCssClass(element, className, shouldHaveClass);\n                        });\n                    } else {\n                        value = ko.utils.stringTrim(String(value || '')); // Make sure we don't try to store or set a non-string value\n                        ko.utils.toggleDomNodeCssClass(element, element[classesWrittenByBindingKey], false);\n                        element[classesWrittenByBindingKey] = value;\n                        ko.utils.toggleDomNodeCssClass(element, value, true);\n                    }\n                }\n            };\n            ko.bindingHandlers['enable'] = {\n                'update': function update(element, valueAccessor) {\n                    var value = ko.utils.unwrapObservable(valueAccessor());\n                    if (value && element.disabled) element.removeAttribute(\"disabled\");else if (!value && !element.disabled) element.disabled = true;\n                }\n            };\n\n            ko.bindingHandlers['disable'] = {\n                'update': function update(element, valueAccessor) {\n                    ko.bindingHandlers['enable']['update'](element, function () {\n                        return !ko.utils.unwrapObservable(valueAccessor());\n                    });\n                }\n            };\n            // For certain common events (currently just 'click'), allow a simplified data-binding syntax\n            // e.g. click:handler instead of the usual full-length event:{click:handler}\n            function makeEventHandlerShortcut(eventName) {\n                ko.bindingHandlers[eventName] = {\n                    'init': function init(element, valueAccessor, allBindings, viewModel, bindingContext) {\n                        var newValueAccessor = function newValueAccessor() {\n                            var result = {};\n                            result[eventName] = valueAccessor();\n                            return result;\n                        };\n                        return ko.bindingHandlers['event']['init'].call(this, element, newValueAccessor, allBindings, viewModel, bindingContext);\n                    }\n                };\n            }\n\n            ko.bindingHandlers['event'] = {\n                'init': function init(element, valueAccessor, allBindings, viewModel, bindingContext) {\n                    var eventsToHandle = valueAccessor() || {};\n                    ko.utils.objectForEach(eventsToHandle, function (eventName) {\n                        if (typeof eventName == \"string\") {\n                            ko.utils.registerEventHandler(element, eventName, function (event) {\n                                var handlerReturnValue;\n                                var handlerFunction = valueAccessor()[eventName];\n                                if (!handlerFunction) return;\n\n                                try {\n                                    // Take all the event args, and prefix with the viewmodel\n                                    var argsForHandler = ko.utils.makeArray(arguments);\n                                    viewModel = bindingContext['$data'];\n                                    argsForHandler.unshift(viewModel);\n                                    handlerReturnValue = handlerFunction.apply(viewModel, argsForHandler);\n                                } finally {\n                                    if (handlerReturnValue !== true) {\n                                        // Normally we want to prevent default action. Developer can override this be explicitly returning true.\n                                        if (event.preventDefault) event.preventDefault();else event.returnValue = false;\n                                    }\n                                }\n\n                                var bubble = allBindings.get(eventName + 'Bubble') !== false;\n                                if (!bubble) {\n                                    event.cancelBubble = true;\n                                    if (event.stopPropagation) event.stopPropagation();\n                                }\n                            });\n                        }\n                    });\n                }\n            };\n            // \"foreach: someExpression\" is equivalent to \"template: { foreach: someExpression }\"\n            // \"foreach: { data: someExpression, afterAdd: myfn }\" is equivalent to \"template: { foreach: someExpression, afterAdd: myfn }\"\n            ko.bindingHandlers['foreach'] = {\n                makeTemplateValueAccessor: function makeTemplateValueAccessor(valueAccessor) {\n                    return function () {\n                        var modelValue = valueAccessor(),\n                            unwrappedValue = ko.utils.peekObservable(modelValue); // Unwrap without setting a dependency here\n\n                        // If unwrappedValue is the array, pass in the wrapped value on its own\n                        // The value will be unwrapped and tracked within the template binding\n                        // (See https://github.com/SteveSanderson/knockout/issues/523)\n                        if (!unwrappedValue || typeof unwrappedValue.length == \"number\") return { 'foreach': modelValue, 'templateEngine': ko.nativeTemplateEngine.instance };\n\n                        // If unwrappedValue.data is the array, preserve all relevant options and unwrap again value so we get updates\n                        ko.utils.unwrapObservable(modelValue);\n                        return {\n                            'foreach': unwrappedValue['data'],\n                            'as': unwrappedValue['as'],\n                            'includeDestroyed': unwrappedValue['includeDestroyed'],\n                            'afterAdd': unwrappedValue['afterAdd'],\n                            'beforeRemove': unwrappedValue['beforeRemove'],\n                            'afterRender': unwrappedValue['afterRender'],\n                            'beforeMove': unwrappedValue['beforeMove'],\n                            'afterMove': unwrappedValue['afterMove'],\n                            'templateEngine': ko.nativeTemplateEngine.instance\n                        };\n                    };\n                },\n                'init': function init(element, valueAccessor, allBindings, viewModel, bindingContext) {\n                    return ko.bindingHandlers['template']['init'](element, ko.bindingHandlers['foreach'].makeTemplateValueAccessor(valueAccessor));\n                },\n                'update': function update(element, valueAccessor, allBindings, viewModel, bindingContext) {\n                    return ko.bindingHandlers['template']['update'](element, ko.bindingHandlers['foreach'].makeTemplateValueAccessor(valueAccessor), allBindings, viewModel, bindingContext);\n                }\n            };\n            ko.expressionRewriting.bindingRewriteValidators['foreach'] = false; // Can't rewrite control flow bindings\n            ko.virtualElements.allowedBindings['foreach'] = true;\n            var hasfocusUpdatingProperty = '__ko_hasfocusUpdating';\n            var hasfocusLastValue = '__ko_hasfocusLastValue';\n            ko.bindingHandlers['hasfocus'] = {\n                'init': function init(element, valueAccessor, allBindings) {\n                    var handleElementFocusChange = function handleElementFocusChange(isFocused) {\n                        // Where possible, ignore which event was raised and determine focus state using activeElement,\n                        // as this avoids phantom focus/blur events raised when changing tabs in modern browsers.\n                        // However, not all KO-targeted browsers (Firefox 2) support activeElement. For those browsers,\n                        // prevent a loss of focus when changing tabs/windows by setting a flag that prevents hasfocus\n                        // from calling 'blur()' on the element when it loses focus.\n                        // Discussion at https://github.com/SteveSanderson/knockout/pull/352\n                        element[hasfocusUpdatingProperty] = true;\n                        var ownerDoc = element.ownerDocument;\n                        if (\"activeElement\" in ownerDoc) {\n                            var active;\n                            try {\n                                active = ownerDoc.activeElement;\n                            } catch (e) {\n                                // IE9 throws if you access activeElement during page load (see issue #703)\n                                active = ownerDoc.body;\n                            }\n                            isFocused = active === element;\n                        }\n                        var modelValue = valueAccessor();\n                        ko.expressionRewriting.writeValueToProperty(modelValue, allBindings, 'hasfocus', isFocused, true);\n\n                        //cache the latest value, so we can avoid unnecessarily calling focus/blur in the update function\n                        element[hasfocusLastValue] = isFocused;\n                        element[hasfocusUpdatingProperty] = false;\n                    };\n                    var handleElementFocusIn = handleElementFocusChange.bind(null, true);\n                    var handleElementFocusOut = handleElementFocusChange.bind(null, false);\n\n                    ko.utils.registerEventHandler(element, \"focus\", handleElementFocusIn);\n                    ko.utils.registerEventHandler(element, \"focusin\", handleElementFocusIn); // For IE\n                    ko.utils.registerEventHandler(element, \"blur\", handleElementFocusOut);\n                    ko.utils.registerEventHandler(element, \"focusout\", handleElementFocusOut); // For IE\n                },\n                'update': function update(element, valueAccessor) {\n                    var value = !!ko.utils.unwrapObservable(valueAccessor());\n\n                    if (!element[hasfocusUpdatingProperty] && element[hasfocusLastValue] !== value) {\n                        value ? element.focus() : element.blur();\n\n                        // In IE, the blur method doesn't always cause the element to lose focus (for example, if the window is not in focus).\n                        // Setting focus to the body element does seem to be reliable in IE, but should only be used if we know that the current\n                        // element was focused already.\n                        if (!value && element[hasfocusLastValue]) {\n                            element.ownerDocument.body.focus();\n                        }\n\n                        // For IE, which doesn't reliably fire \"focus\" or \"blur\" events synchronously\n                        ko.dependencyDetection.ignore(ko.utils.triggerEvent, null, [element, value ? \"focusin\" : \"focusout\"]);\n                    }\n                }\n            };\n            ko.expressionRewriting.twoWayBindings['hasfocus'] = true;\n\n            ko.bindingHandlers['hasFocus'] = ko.bindingHandlers['hasfocus']; // Make \"hasFocus\" an alias\n            ko.expressionRewriting.twoWayBindings['hasFocus'] = true;\n            ko.bindingHandlers['html'] = {\n                'init': function init() {\n                    // Prevent binding on the dynamically-injected HTML (as developers are unlikely to expect that, and it has security implications)\n                    return { 'controlsDescendantBindings': true };\n                },\n                'update': function update(element, valueAccessor) {\n                    // setHtml will unwrap the value if needed\n                    ko.utils.setHtml(element, valueAccessor());\n                }\n            };\n            // Makes a binding like with or if\n            function makeWithIfBinding(bindingKey, isWith, isNot, makeContextCallback) {\n                ko.bindingHandlers[bindingKey] = {\n                    'init': function init(element, valueAccessor, allBindings, viewModel, bindingContext) {\n                        var didDisplayOnLastUpdate, savedNodes;\n                        ko.computed(function () {\n                            var dataValue = ko.utils.unwrapObservable(valueAccessor()),\n                                shouldDisplay = !isNot !== !dataValue,\n                                // equivalent to isNot ? !dataValue : !!dataValue\n                            isFirstRender = !savedNodes,\n                                needsRefresh = isFirstRender || isWith || shouldDisplay !== didDisplayOnLastUpdate;\n\n                            if (needsRefresh) {\n                                // Save a copy of the inner nodes on the initial update, but only if we have dependencies.\n                                if (isFirstRender && ko.computedContext.getDependenciesCount()) {\n                                    savedNodes = ko.utils.cloneNodes(ko.virtualElements.childNodes(element), true /* shouldCleanNodes */);\n                                }\n\n                                if (shouldDisplay) {\n                                    if (!isFirstRender) {\n                                        ko.virtualElements.setDomNodeChildren(element, ko.utils.cloneNodes(savedNodes));\n                                    }\n                                    ko.applyBindingsToDescendants(makeContextCallback ? makeContextCallback(bindingContext, dataValue) : bindingContext, element);\n                                } else {\n                                    ko.virtualElements.emptyNode(element);\n                                }\n\n                                didDisplayOnLastUpdate = shouldDisplay;\n                            }\n                        }, null, { disposeWhenNodeIsRemoved: element });\n                        return { 'controlsDescendantBindings': true };\n                    }\n                };\n                ko.expressionRewriting.bindingRewriteValidators[bindingKey] = false; // Can't rewrite control flow bindings\n                ko.virtualElements.allowedBindings[bindingKey] = true;\n            }\n\n            // Construct the actual binding handlers\n            makeWithIfBinding('if');\n            makeWithIfBinding('ifnot', false /* isWith */, true /* isNot */);\n            makeWithIfBinding('with', true /* isWith */, false /* isNot */\n            , function (bindingContext, dataValue) {\n                return bindingContext['createChildContext'](dataValue);\n            });\n            var captionPlaceholder = {};\n            ko.bindingHandlers['options'] = {\n                'init': function init(element) {\n                    if (ko.utils.tagNameLower(element) !== \"select\") throw new Error(\"options binding applies only to SELECT elements\");\n\n                    // Remove all existing <option>s.\n                    while (element.length > 0) {\n                        element.remove(0);\n                    }\n\n                    // Ensures that the binding processor doesn't try to bind the options\n                    return { 'controlsDescendantBindings': true };\n                },\n                'update': function update(element, valueAccessor, allBindings) {\n                    function selectedOptions() {\n                        return ko.utils.arrayFilter(element.options, function (node) {\n                            return node.selected;\n                        });\n                    }\n\n                    var selectWasPreviouslyEmpty = element.length == 0,\n                        multiple = element.multiple,\n                        previousScrollTop = !selectWasPreviouslyEmpty && multiple ? element.scrollTop : null,\n                        unwrappedArray = ko.utils.unwrapObservable(valueAccessor()),\n                        valueAllowUnset = allBindings.get('valueAllowUnset') && allBindings['has']('value'),\n                        includeDestroyed = allBindings.get('optionsIncludeDestroyed'),\n                        arrayToDomNodeChildrenOptions = {},\n                        captionValue,\n                        filteredArray,\n                        previousSelectedValues = [];\n\n                    if (!valueAllowUnset) {\n                        if (multiple) {\n                            previousSelectedValues = ko.utils.arrayMap(selectedOptions(), ko.selectExtensions.readValue);\n                        } else if (element.selectedIndex >= 0) {\n                            previousSelectedValues.push(ko.selectExtensions.readValue(element.options[element.selectedIndex]));\n                        }\n                    }\n\n                    if (unwrappedArray) {\n                        if (typeof unwrappedArray.length == \"undefined\") // Coerce single value into array\n                            unwrappedArray = [unwrappedArray];\n\n                        // Filter out any entries marked as destroyed\n                        filteredArray = ko.utils.arrayFilter(unwrappedArray, function (item) {\n                            return includeDestroyed || item === undefined || item === null || !ko.utils.unwrapObservable(item['_destroy']);\n                        });\n\n                        // If caption is included, add it to the array\n                        if (allBindings['has']('optionsCaption')) {\n                            captionValue = ko.utils.unwrapObservable(allBindings.get('optionsCaption'));\n                            // If caption value is null or undefined, don't show a caption\n                            if (captionValue !== null && captionValue !== undefined) {\n                                filteredArray.unshift(captionPlaceholder);\n                            }\n                        }\n                    } else {\n                        // If a falsy value is provided (e.g. null), we'll simply empty the select element\n                    }\n\n                    function applyToObject(object, predicate, defaultValue) {\n                        var predicateType = typeof predicate === 'undefined' ? 'undefined' : _typeof(predicate);\n                        if (predicateType == \"function\") // Given a function; run it against the data value\n                            return predicate(object);else if (predicateType == \"string\") // Given a string; treat it as a property name on the data value\n                            return object[predicate];else // Given no optionsText arg; use the data value itself\n                            return defaultValue;\n                    }\n\n                    // The following functions can run at two different times:\n                    // The first is when the whole array is being updated directly from this binding handler.\n                    // The second is when an observable value for a specific array entry is updated.\n                    // oldOptions will be empty in the first case, but will be filled with the previously generated option in the second.\n                    var itemUpdate = false;\n                    function optionForArrayItem(arrayEntry, index, oldOptions) {\n                        if (oldOptions.length) {\n                            previousSelectedValues = !valueAllowUnset && oldOptions[0].selected ? [ko.selectExtensions.readValue(oldOptions[0])] : [];\n                            itemUpdate = true;\n                        }\n                        var option = element.ownerDocument.createElement(\"option\");\n                        if (arrayEntry === captionPlaceholder) {\n                            ko.utils.setTextContent(option, allBindings.get('optionsCaption'));\n                            ko.selectExtensions.writeValue(option, undefined);\n                        } else {\n                            // Apply a value to the option element\n                            var optionValue = applyToObject(arrayEntry, allBindings.get('optionsValue'), arrayEntry);\n                            ko.selectExtensions.writeValue(option, ko.utils.unwrapObservable(optionValue));\n\n                            // Apply some text to the option element\n                            var optionText = applyToObject(arrayEntry, allBindings.get('optionsText'), optionValue);\n                            ko.utils.setTextContent(option, optionText);\n                        }\n                        return [option];\n                    }\n\n                    // By using a beforeRemove callback, we delay the removal until after new items are added. This fixes a selection\n                    // problem in IE<=8 and Firefox. See https://github.com/knockout/knockout/issues/1208\n                    arrayToDomNodeChildrenOptions['beforeRemove'] = function (option) {\n                        element.removeChild(option);\n                    };\n\n                    function setSelectionCallback(arrayEntry, newOptions) {\n                        if (itemUpdate && valueAllowUnset) {\n                            // The model value is authoritative, so make sure its value is the one selected\n                            // There is no need to use dependencyDetection.ignore since setDomNodeChildrenFromArrayMapping does so already.\n                            ko.selectExtensions.writeValue(element, ko.utils.unwrapObservable(allBindings.get('value')), true /* allowUnset */);\n                        } else if (previousSelectedValues.length) {\n                            // IE6 doesn't like us to assign selection to OPTION nodes before they're added to the document.\n                            // That's why we first added them without selection. Now it's time to set the selection.\n                            var isSelected = ko.utils.arrayIndexOf(previousSelectedValues, ko.selectExtensions.readValue(newOptions[0])) >= 0;\n                            ko.utils.setOptionNodeSelectionState(newOptions[0], isSelected);\n\n                            // If this option was changed from being selected during a single-item update, notify the change\n                            if (itemUpdate && !isSelected) {\n                                ko.dependencyDetection.ignore(ko.utils.triggerEvent, null, [element, \"change\"]);\n                            }\n                        }\n                    }\n\n                    var callback = setSelectionCallback;\n                    if (allBindings['has']('optionsAfterRender') && typeof allBindings.get('optionsAfterRender') == \"function\") {\n                        callback = function callback(arrayEntry, newOptions) {\n                            setSelectionCallback(arrayEntry, newOptions);\n                            ko.dependencyDetection.ignore(allBindings.get('optionsAfterRender'), null, [newOptions[0], arrayEntry !== captionPlaceholder ? arrayEntry : undefined]);\n                        };\n                    }\n\n                    ko.utils.setDomNodeChildrenFromArrayMapping(element, filteredArray, optionForArrayItem, arrayToDomNodeChildrenOptions, callback);\n\n                    ko.dependencyDetection.ignore(function () {\n                        if (valueAllowUnset) {\n                            // The model value is authoritative, so make sure its value is the one selected\n                            ko.selectExtensions.writeValue(element, ko.utils.unwrapObservable(allBindings.get('value')), true /* allowUnset */);\n                        } else {\n                            // Determine if the selection has changed as a result of updating the options list\n                            var selectionChanged;\n                            if (multiple) {\n                                // For a multiple-select box, compare the new selection count to the previous one\n                                // But if nothing was selected before, the selection can't have changed\n                                selectionChanged = previousSelectedValues.length && selectedOptions().length < previousSelectedValues.length;\n                            } else {\n                                // For a single-select box, compare the current value to the previous value\n                                // But if nothing was selected before or nothing is selected now, just look for a change in selection\n                                selectionChanged = previousSelectedValues.length && element.selectedIndex >= 0 ? ko.selectExtensions.readValue(element.options[element.selectedIndex]) !== previousSelectedValues[0] : previousSelectedValues.length || element.selectedIndex >= 0;\n                            }\n\n                            // Ensure consistency between model value and selected option.\n                            // If the dropdown was changed so that selection is no longer the same,\n                            // notify the value or selectedOptions binding.\n                            if (selectionChanged) {\n                                ko.utils.triggerEvent(element, \"change\");\n                            }\n                        }\n                    });\n\n                    // Workaround for IE bug\n                    ko.utils.ensureSelectElementIsRenderedCorrectly(element);\n\n                    if (previousScrollTop && Math.abs(previousScrollTop - element.scrollTop) > 20) element.scrollTop = previousScrollTop;\n                }\n            };\n            ko.bindingHandlers['options'].optionValueDomDataKey = ko.utils.domData.nextKey();\n            ko.bindingHandlers['selectedOptions'] = {\n                'after': ['options', 'foreach'],\n                'init': function init(element, valueAccessor, allBindings) {\n                    ko.utils.registerEventHandler(element, \"change\", function () {\n                        var value = valueAccessor(),\n                            valueToWrite = [];\n                        ko.utils.arrayForEach(element.getElementsByTagName(\"option\"), function (node) {\n                            if (node.selected) valueToWrite.push(ko.selectExtensions.readValue(node));\n                        });\n                        ko.expressionRewriting.writeValueToProperty(value, allBindings, 'selectedOptions', valueToWrite);\n                    });\n                },\n                'update': function update(element, valueAccessor) {\n                    if (ko.utils.tagNameLower(element) != \"select\") throw new Error(\"values binding applies only to SELECT elements\");\n\n                    var newValue = ko.utils.unwrapObservable(valueAccessor()),\n                        previousScrollTop = element.scrollTop;\n\n                    if (newValue && typeof newValue.length == \"number\") {\n                        ko.utils.arrayForEach(element.getElementsByTagName(\"option\"), function (node) {\n                            var isSelected = ko.utils.arrayIndexOf(newValue, ko.selectExtensions.readValue(node)) >= 0;\n                            if (node.selected != isSelected) {\n                                // This check prevents flashing of the select element in IE\n                                ko.utils.setOptionNodeSelectionState(node, isSelected);\n                            }\n                        });\n                    }\n\n                    element.scrollTop = previousScrollTop;\n                }\n            };\n            ko.expressionRewriting.twoWayBindings['selectedOptions'] = true;\n            ko.bindingHandlers['style'] = {\n                'update': function update(element, valueAccessor) {\n                    var value = ko.utils.unwrapObservable(valueAccessor() || {});\n                    ko.utils.objectForEach(value, function (styleName, styleValue) {\n                        styleValue = ko.utils.unwrapObservable(styleValue);\n\n                        if (styleValue === null || styleValue === undefined || styleValue === false) {\n                            // Empty string removes the value, whereas null/undefined have no effect\n                            styleValue = \"\";\n                        }\n\n                        element.style[styleName] = styleValue;\n                    });\n                }\n            };\n            ko.bindingHandlers['submit'] = {\n                'init': function init(element, valueAccessor, allBindings, viewModel, bindingContext) {\n                    if (typeof valueAccessor() != \"function\") throw new Error(\"The value for a submit binding must be a function\");\n                    ko.utils.registerEventHandler(element, \"submit\", function (event) {\n                        var handlerReturnValue;\n                        var value = valueAccessor();\n                        try {\n                            handlerReturnValue = value.call(bindingContext['$data'], element);\n                        } finally {\n                            if (handlerReturnValue !== true) {\n                                // Normally we want to prevent default action. Developer can override this be explicitly returning true.\n                                if (event.preventDefault) event.preventDefault();else event.returnValue = false;\n                            }\n                        }\n                    });\n                }\n            };\n            ko.bindingHandlers['text'] = {\n                'init': function init() {\n                    // Prevent binding on the dynamically-injected text node (as developers are unlikely to expect that, and it has security implications).\n                    // It should also make things faster, as we no longer have to consider whether the text node might be bindable.\n                    return { 'controlsDescendantBindings': true };\n                },\n                'update': function update(element, valueAccessor) {\n                    ko.utils.setTextContent(element, valueAccessor());\n                }\n            };\n            ko.virtualElements.allowedBindings['text'] = true;\n            (function () {\n\n                if (window && window.navigator) {\n                    var parseVersion = function parseVersion(matches) {\n                        if (matches) {\n                            return parseFloat(matches[1]);\n                        }\n                    };\n\n                    // Detect various browser versions because some old versions don't fully support the 'input' event\n                    var operaVersion = window.opera && window.opera.version && parseInt(window.opera.version()),\n                        userAgent = window.navigator.userAgent,\n                        safariVersion = parseVersion(userAgent.match(/^(?:(?!chrome).)*version\\/([^ ]*) safari/i)),\n                        firefoxVersion = parseVersion(userAgent.match(/Firefox\\/([^ ]*)/));\n                }\n\n                // IE 8 and 9 have bugs that prevent the normal events from firing when the value changes.\n                // But it does fire the 'selectionchange' event on many of those, presumably because the\n                // cursor is moving and that counts as the selection changing. The 'selectionchange' event is\n                // fired at the document level only and doesn't directly indicate which element changed. We\n                // set up just one event handler for the document and use 'activeElement' to determine which\n                // element was changed.\n                if (ko.utils.ieVersion < 10) {\n                    var selectionChangeRegisteredName = ko.utils.domData.nextKey(),\n                        selectionChangeHandlerName = ko.utils.domData.nextKey();\n                    var selectionChangeHandler = function selectionChangeHandler(event) {\n                        var target = this.activeElement,\n                            handler = target && ko.utils.domData.get(target, selectionChangeHandlerName);\n                        if (handler) {\n                            handler(event);\n                        }\n                    };\n                    var registerForSelectionChangeEvent = function registerForSelectionChangeEvent(element, handler) {\n                        var ownerDoc = element.ownerDocument;\n                        if (!ko.utils.domData.get(ownerDoc, selectionChangeRegisteredName)) {\n                            ko.utils.domData.set(ownerDoc, selectionChangeRegisteredName, true);\n                            ko.utils.registerEventHandler(ownerDoc, 'selectionchange', selectionChangeHandler);\n                        }\n                        ko.utils.domData.set(element, selectionChangeHandlerName, handler);\n                    };\n                }\n\n                ko.bindingHandlers['textInput'] = {\n                    'init': function init(element, valueAccessor, allBindings) {\n\n                        var previousElementValue = element.value,\n                            timeoutHandle,\n                            elementValueBeforeEvent;\n\n                        var updateModel = function updateModel(event) {\n                            clearTimeout(timeoutHandle);\n                            elementValueBeforeEvent = timeoutHandle = undefined;\n\n                            var elementValue = element.value;\n                            if (previousElementValue !== elementValue) {\n                                // Provide a way for tests to know exactly which event was processed\n                                if (DEBUG && event) element['_ko_textInputProcessedEvent'] = event.type;\n                                previousElementValue = elementValue;\n                                ko.expressionRewriting.writeValueToProperty(valueAccessor(), allBindings, 'textInput', elementValue);\n                            }\n                        };\n\n                        var deferUpdateModel = function deferUpdateModel(event) {\n                            if (!timeoutHandle) {\n                                // The elementValueBeforeEvent variable is set *only* during the brief gap between an\n                                // event firing and the updateModel function running. This allows us to ignore model\n                                // updates that are from the previous state of the element, usually due to techniques\n                                // such as rateLimit. Such updates, if not ignored, can cause keystrokes to be lost.\n                                elementValueBeforeEvent = element.value;\n                                var handler = DEBUG ? updateModel.bind(element, { type: event.type }) : updateModel;\n                                timeoutHandle = ko.utils.setTimeout(handler, 4);\n                            }\n                        };\n\n                        // IE9 will mess up the DOM if you handle events synchronously which results in DOM changes (such as other bindings);\n                        // so we'll make sure all updates are asynchronous\n                        var ieUpdateModel = ko.utils.ieVersion == 9 ? deferUpdateModel : updateModel;\n\n                        var updateView = function updateView() {\n                            var modelValue = ko.utils.unwrapObservable(valueAccessor());\n\n                            if (modelValue === null || modelValue === undefined) {\n                                modelValue = '';\n                            }\n\n                            if (elementValueBeforeEvent !== undefined && modelValue === elementValueBeforeEvent) {\n                                ko.utils.setTimeout(updateView, 4);\n                                return;\n                            }\n\n                            // Update the element only if the element and model are different. On some browsers, updating the value\n                            // will move the cursor to the end of the input, which would be bad while the user is typing.\n                            if (element.value !== modelValue) {\n                                previousElementValue = modelValue; // Make sure we ignore events (propertychange) that result from updating the value\n                                element.value = modelValue;\n                            }\n                        };\n\n                        var onEvent = function onEvent(event, handler) {\n                            ko.utils.registerEventHandler(element, event, handler);\n                        };\n\n                        if (DEBUG && ko.bindingHandlers['textInput']['_forceUpdateOn']) {\n                            // Provide a way for tests to specify exactly which events are bound\n                            ko.utils.arrayForEach(ko.bindingHandlers['textInput']['_forceUpdateOn'], function (eventName) {\n                                if (eventName.slice(0, 5) == 'after') {\n                                    onEvent(eventName.slice(5), deferUpdateModel);\n                                } else {\n                                    onEvent(eventName, updateModel);\n                                }\n                            });\n                        } else {\n                            if (ko.utils.ieVersion < 10) {\n                                // Internet Explorer <= 8 doesn't support the 'input' event, but does include 'propertychange' that fires whenever\n                                // any property of an element changes. Unlike 'input', it also fires if a property is changed from JavaScript code,\n                                // but that's an acceptable compromise for this binding. IE 9 does support 'input', but since it doesn't fire it\n                                // when using autocomplete, we'll use 'propertychange' for it also.\n                                onEvent('propertychange', function (event) {\n                                    if (event.propertyName === 'value') {\n                                        ieUpdateModel(event);\n                                    }\n                                });\n\n                                if (ko.utils.ieVersion == 8) {\n                                    // IE 8 has a bug where it fails to fire 'propertychange' on the first update following a value change from\n                                    // JavaScript code. It also doesn't fire if you clear the entire value. To fix this, we bind to the following\n                                    // events too.\n                                    onEvent('keyup', updateModel); // A single keystoke\n                                    onEvent('keydown', updateModel); // The first character when a key is held down\n                                }\n                                if (ko.utils.ieVersion >= 8) {\n                                    // Internet Explorer 9 doesn't fire the 'input' event when deleting text, including using\n                                    // the backspace, delete, or ctrl-x keys, clicking the 'x' to clear the input, dragging text\n                                    // out of the field, and cutting or deleting text using the context menu. 'selectionchange'\n                                    // can detect all of those except dragging text out of the field, for which we use 'dragend'.\n                                    // These are also needed in IE8 because of the bug described above.\n                                    registerForSelectionChangeEvent(element, ieUpdateModel); // 'selectionchange' covers cut, paste, drop, delete, etc.\n                                    onEvent('dragend', deferUpdateModel);\n                                }\n                            } else {\n                                // All other supported browsers support the 'input' event, which fires whenever the content of the element is changed\n                                // through the user interface.\n                                onEvent('input', updateModel);\n\n                                if (safariVersion < 5 && ko.utils.tagNameLower(element) === \"textarea\") {\n                                    // Safari <5 doesn't fire the 'input' event for <textarea> elements (it does fire 'textInput'\n                                    // but only when typing). So we'll just catch as much as we can with keydown, cut, and paste.\n                                    onEvent('keydown', deferUpdateModel);\n                                    onEvent('paste', deferUpdateModel);\n                                    onEvent('cut', deferUpdateModel);\n                                } else if (operaVersion < 11) {\n                                    // Opera 10 doesn't always fire the 'input' event for cut, paste, undo & drop operations.\n                                    // We can try to catch some of those using 'keydown'.\n                                    onEvent('keydown', deferUpdateModel);\n                                } else if (firefoxVersion < 4.0) {\n                                    // Firefox <= 3.6 doesn't fire the 'input' event when text is filled in through autocomplete\n                                    onEvent('DOMAutoComplete', updateModel);\n\n                                    // Firefox <=3.5 doesn't fire the 'input' event when text is dropped into the input.\n                                    onEvent('dragdrop', updateModel); // <3.5\n                                    onEvent('drop', updateModel); // 3.5\n                                }\n                            }\n                        }\n\n                        // Bind to the change event so that we can catch programmatic updates of the value that fire this event.\n                        onEvent('change', updateModel);\n\n                        ko.computed(updateView, null, { disposeWhenNodeIsRemoved: element });\n                    }\n                };\n                ko.expressionRewriting.twoWayBindings['textInput'] = true;\n\n                // textinput is an alias for textInput\n                ko.bindingHandlers['textinput'] = {\n                    // preprocess is the only way to set up a full alias\n                    'preprocess': function preprocess(value, name, addBinding) {\n                        addBinding('textInput', value);\n                    }\n                };\n            })();ko.bindingHandlers['uniqueName'] = {\n                'init': function init(element, valueAccessor) {\n                    if (valueAccessor()) {\n                        var name = \"ko_unique_\" + ++ko.bindingHandlers['uniqueName'].currentIndex;\n                        ko.utils.setElementName(element, name);\n                    }\n                }\n            };\n            ko.bindingHandlers['uniqueName'].currentIndex = 0;\n            ko.bindingHandlers['value'] = {\n                'after': ['options', 'foreach'],\n                'init': function init(element, valueAccessor, allBindings) {\n                    // If the value binding is placed on a radio/checkbox, then just pass through to checkedValue and quit\n                    if (element.tagName.toLowerCase() == \"input\" && (element.type == \"checkbox\" || element.type == \"radio\")) {\n                        ko.applyBindingAccessorsToNode(element, { 'checkedValue': valueAccessor });\n                        return;\n                    }\n\n                    // Always catch \"change\" event; possibly other events too if asked\n                    var eventsToCatch = [\"change\"];\n                    var requestedEventsToCatch = allBindings.get(\"valueUpdate\");\n                    var propertyChangedFired = false;\n                    var elementValueBeforeEvent = null;\n\n                    if (requestedEventsToCatch) {\n                        if (typeof requestedEventsToCatch == \"string\") // Allow both individual event names, and arrays of event names\n                            requestedEventsToCatch = [requestedEventsToCatch];\n                        ko.utils.arrayPushAll(eventsToCatch, requestedEventsToCatch);\n                        eventsToCatch = ko.utils.arrayGetDistinctValues(eventsToCatch);\n                    }\n\n                    var valueUpdateHandler = function valueUpdateHandler() {\n                        elementValueBeforeEvent = null;\n                        propertyChangedFired = false;\n                        var modelValue = valueAccessor();\n                        var elementValue = ko.selectExtensions.readValue(element);\n                        ko.expressionRewriting.writeValueToProperty(modelValue, allBindings, 'value', elementValue);\n                    };\n\n                    // Workaround for https://github.com/SteveSanderson/knockout/issues/122\n                    // IE doesn't fire \"change\" events on textboxes if the user selects a value from its autocomplete list\n                    var ieAutoCompleteHackNeeded = ko.utils.ieVersion && element.tagName.toLowerCase() == \"input\" && element.type == \"text\" && element.autocomplete != \"off\" && (!element.form || element.form.autocomplete != \"off\");\n                    if (ieAutoCompleteHackNeeded && ko.utils.arrayIndexOf(eventsToCatch, \"propertychange\") == -1) {\n                        ko.utils.registerEventHandler(element, \"propertychange\", function () {\n                            propertyChangedFired = true;\n                        });\n                        ko.utils.registerEventHandler(element, \"focus\", function () {\n                            propertyChangedFired = false;\n                        });\n                        ko.utils.registerEventHandler(element, \"blur\", function () {\n                            if (propertyChangedFired) {\n                                valueUpdateHandler();\n                            }\n                        });\n                    }\n\n                    ko.utils.arrayForEach(eventsToCatch, function (eventName) {\n                        // The syntax \"after<eventname>\" means \"run the handler asynchronously after the event\"\n                        // This is useful, for example, to catch \"keydown\" events after the browser has updated the control\n                        // (otherwise, ko.selectExtensions.readValue(this) will receive the control's value *before* the key event)\n                        var handler = valueUpdateHandler;\n                        if (ko.utils.stringStartsWith(eventName, \"after\")) {\n                            handler = function handler() {\n                                // The elementValueBeforeEvent variable is non-null *only* during the brief gap between\n                                // a keyX event firing and the valueUpdateHandler running, which is scheduled to happen\n                                // at the earliest asynchronous opportunity. We store this temporary information so that\n                                // if, between keyX and valueUpdateHandler, the underlying model value changes separately,\n                                // we can overwrite that model value change with the value the user just typed. Otherwise,\n                                // techniques like rateLimit can trigger model changes at critical moments that will\n                                // override the user's inputs, causing keystrokes to be lost.\n                                elementValueBeforeEvent = ko.selectExtensions.readValue(element);\n                                ko.utils.setTimeout(valueUpdateHandler, 0);\n                            };\n                            eventName = eventName.substring(\"after\".length);\n                        }\n                        ko.utils.registerEventHandler(element, eventName, handler);\n                    });\n\n                    var updateFromModel = function updateFromModel() {\n                        var newValue = ko.utils.unwrapObservable(valueAccessor());\n                        var elementValue = ko.selectExtensions.readValue(element);\n\n                        if (elementValueBeforeEvent !== null && newValue === elementValueBeforeEvent) {\n                            ko.utils.setTimeout(updateFromModel, 0);\n                            return;\n                        }\n\n                        var valueHasChanged = newValue !== elementValue;\n\n                        if (valueHasChanged) {\n                            if (ko.utils.tagNameLower(element) === \"select\") {\n                                var allowUnset = allBindings.get('valueAllowUnset');\n                                var applyValueAction = function applyValueAction() {\n                                    ko.selectExtensions.writeValue(element, newValue, allowUnset);\n                                };\n                                applyValueAction();\n\n                                if (!allowUnset && newValue !== ko.selectExtensions.readValue(element)) {\n                                    // If you try to set a model value that can't be represented in an already-populated dropdown, reject that change,\n                                    // because you're not allowed to have a model value that disagrees with a visible UI selection.\n                                    ko.dependencyDetection.ignore(ko.utils.triggerEvent, null, [element, \"change\"]);\n                                } else {\n                                    // Workaround for IE6 bug: It won't reliably apply values to SELECT nodes during the same execution thread\n                                    // right after you've changed the set of OPTION nodes on it. So for that node type, we'll schedule a second thread\n                                    // to apply the value as well.\n                                    ko.utils.setTimeout(applyValueAction, 0);\n                                }\n                            } else {\n                                ko.selectExtensions.writeValue(element, newValue);\n                            }\n                        }\n                    };\n\n                    ko.computed(updateFromModel, null, { disposeWhenNodeIsRemoved: element });\n                },\n                'update': function update() {} // Keep for backwards compatibility with code that may have wrapped value binding\n            };\n            ko.expressionRewriting.twoWayBindings['value'] = true;\n            ko.bindingHandlers['visible'] = {\n                'update': function update(element, valueAccessor) {\n                    var value = ko.utils.unwrapObservable(valueAccessor());\n                    var isCurrentlyVisible = !(element.style.display == \"none\");\n                    if (value && !isCurrentlyVisible) element.style.display = \"\";else if (!value && isCurrentlyVisible) element.style.display = \"none\";\n                }\n            };\n            // 'click' is just a shorthand for the usual full-length event:{click:handler}\n            makeEventHandlerShortcut('click');\n            // If you want to make a custom template engine,\n            //\n            // [1] Inherit from this class (like ko.nativeTemplateEngine does)\n            // [2] Override 'renderTemplateSource', supplying a function with this signature:\n            //\n            //        function (templateSource, bindingContext, options) {\n            //            // - templateSource.text() is the text of the template you should render\n            //            // - bindingContext.$data is the data you should pass into the template\n            //            //   - you might also want to make bindingContext.$parent, bindingContext.$parents,\n            //            //     and bindingContext.$root available in the template too\n            //            // - options gives you access to any other properties set on \"data-bind: { template: options }\"\n            //            // - templateDocument is the document object of the template\n            //            //\n            //            // Return value: an array of DOM nodes\n            //        }\n            //\n            // [3] Override 'createJavaScriptEvaluatorBlock', supplying a function with this signature:\n            //\n            //        function (script) {\n            //            // Return value: Whatever syntax means \"Evaluate the JavaScript statement 'script' and output the result\"\n            //            //               For example, the jquery.tmpl template engine converts 'someScript' to '${ someScript }'\n            //        }\n            //\n            //     This is only necessary if you want to allow data-bind attributes to reference arbitrary template variables.\n            //     If you don't want to allow that, you can set the property 'allowTemplateRewriting' to false (like ko.nativeTemplateEngine does)\n            //     and then you don't need to override 'createJavaScriptEvaluatorBlock'.\n\n            ko.templateEngine = function () {};\n\n            ko.templateEngine.prototype['renderTemplateSource'] = function (templateSource, bindingContext, options, templateDocument) {\n                throw new Error(\"Override renderTemplateSource\");\n            };\n\n            ko.templateEngine.prototype['createJavaScriptEvaluatorBlock'] = function (script) {\n                throw new Error(\"Override createJavaScriptEvaluatorBlock\");\n            };\n\n            ko.templateEngine.prototype['makeTemplateSource'] = function (template, templateDocument) {\n                // Named template\n                if (typeof template == \"string\") {\n                    templateDocument = templateDocument || document;\n                    var elem = templateDocument.getElementById(template);\n                    if (!elem) throw new Error(\"Cannot find template with ID \" + template);\n                    return new ko.templateSources.domElement(elem);\n                } else if (template.nodeType == 1 || template.nodeType == 8) {\n                    // Anonymous template\n                    return new ko.templateSources.anonymousTemplate(template);\n                } else throw new Error(\"Unknown template type: \" + template);\n            };\n\n            ko.templateEngine.prototype['renderTemplate'] = function (template, bindingContext, options, templateDocument) {\n                var templateSource = this['makeTemplateSource'](template, templateDocument);\n                return this['renderTemplateSource'](templateSource, bindingContext, options, templateDocument);\n            };\n\n            ko.templateEngine.prototype['isTemplateRewritten'] = function (template, templateDocument) {\n                // Skip rewriting if requested\n                if (this['allowTemplateRewriting'] === false) return true;\n                return this['makeTemplateSource'](template, templateDocument)['data'](\"isRewritten\");\n            };\n\n            ko.templateEngine.prototype['rewriteTemplate'] = function (template, rewriterCallback, templateDocument) {\n                var templateSource = this['makeTemplateSource'](template, templateDocument);\n                var rewritten = rewriterCallback(templateSource['text']());\n                templateSource['text'](rewritten);\n                templateSource['data'](\"isRewritten\", true);\n            };\n\n            ko.exportSymbol('templateEngine', ko.templateEngine);\n\n            ko.templateRewriting = function () {\n                var memoizeDataBindingAttributeSyntaxRegex = /(<([a-z]+\\d*)(?:\\s+(?!data-bind\\s*=\\s*)[a-z0-9\\-]+(?:=(?:\\\"[^\\\"]*\\\"|\\'[^\\']*\\'|[^>]*))?)*\\s+)data-bind\\s*=\\s*([\"'])([\\s\\S]*?)\\3/gi;\n                var memoizeVirtualContainerBindingSyntaxRegex = /<!--\\s*ko\\b\\s*([\\s\\S]*?)\\s*-->/g;\n\n                function validateDataBindValuesForRewriting(keyValueArray) {\n                    var allValidators = ko.expressionRewriting.bindingRewriteValidators;\n                    for (var i = 0; i < keyValueArray.length; i++) {\n                        var key = keyValueArray[i]['key'];\n                        if (allValidators.hasOwnProperty(key)) {\n                            var validator = allValidators[key];\n\n                            if (typeof validator === \"function\") {\n                                var possibleErrorMessage = validator(keyValueArray[i]['value']);\n                                if (possibleErrorMessage) throw new Error(possibleErrorMessage);\n                            } else if (!validator) {\n                                throw new Error(\"This template engine does not support the '\" + key + \"' binding within its templates\");\n                            }\n                        }\n                    }\n                }\n\n                function constructMemoizedTagReplacement(dataBindAttributeValue, tagToRetain, nodeName, templateEngine) {\n                    var dataBindKeyValueArray = ko.expressionRewriting.parseObjectLiteral(dataBindAttributeValue);\n                    validateDataBindValuesForRewriting(dataBindKeyValueArray);\n                    var rewrittenDataBindAttributeValue = ko.expressionRewriting.preProcessBindings(dataBindKeyValueArray, { 'valueAccessors': true });\n\n                    // For no obvious reason, Opera fails to evaluate rewrittenDataBindAttributeValue unless it's wrapped in an additional\n                    // anonymous function, even though Opera's built-in debugger can evaluate it anyway. No other browser requires this\n                    // extra indirection.\n                    var applyBindingsToNextSiblingScript = \"ko.__tr_ambtns(function($context,$element){return(function(){return{ \" + rewrittenDataBindAttributeValue + \" } })()},'\" + nodeName.toLowerCase() + \"')\";\n                    return templateEngine['createJavaScriptEvaluatorBlock'](applyBindingsToNextSiblingScript) + tagToRetain;\n                }\n\n                return {\n                    ensureTemplateIsRewritten: function ensureTemplateIsRewritten(template, templateEngine, templateDocument) {\n                        if (!templateEngine['isTemplateRewritten'](template, templateDocument)) templateEngine['rewriteTemplate'](template, function (htmlString) {\n                            return ko.templateRewriting.memoizeBindingAttributeSyntax(htmlString, templateEngine);\n                        }, templateDocument);\n                    },\n\n                    memoizeBindingAttributeSyntax: function memoizeBindingAttributeSyntax(htmlString, templateEngine) {\n                        return htmlString.replace(memoizeDataBindingAttributeSyntaxRegex, function () {\n                            return constructMemoizedTagReplacement( /* dataBindAttributeValue: */arguments[4], /* tagToRetain: */arguments[1], /* nodeName: */arguments[2], templateEngine);\n                        }).replace(memoizeVirtualContainerBindingSyntaxRegex, function () {\n                            return constructMemoizedTagReplacement( /* dataBindAttributeValue: */arguments[1], /* tagToRetain: */\"<!-- ko -->\", /* nodeName: */\"#comment\", templateEngine);\n                        });\n                    },\n\n                    applyMemoizedBindingsToNextSibling: function applyMemoizedBindingsToNextSibling(bindings, nodeName) {\n                        return ko.memoization.memoize(function (domNode, bindingContext) {\n                            var nodeToBind = domNode.nextSibling;\n                            if (nodeToBind && nodeToBind.nodeName.toLowerCase() === nodeName) {\n                                ko.applyBindingAccessorsToNode(nodeToBind, bindings, bindingContext);\n                            }\n                        });\n                    }\n                };\n            }();\n\n            // Exported only because it has to be referenced by string lookup from within rewritten template\n            ko.exportSymbol('__tr_ambtns', ko.templateRewriting.applyMemoizedBindingsToNextSibling);\n            (function () {\n                // A template source represents a read/write way of accessing a template. This is to eliminate the need for template loading/saving\n                // logic to be duplicated in every template engine (and means they can all work with anonymous templates, etc.)\n                //\n                // Two are provided by default:\n                //  1. ko.templateSources.domElement       - reads/writes the text content of an arbitrary DOM element\n                //  2. ko.templateSources.anonymousElement - uses ko.utils.domData to read/write text *associated* with the DOM element, but\n                //                                           without reading/writing the actual element text content, since it will be overwritten\n                //                                           with the rendered template output.\n                // You can implement your own template source if you want to fetch/store templates somewhere other than in DOM elements.\n                // Template sources need to have the following functions:\n                //   text() \t\t\t- returns the template text from your storage location\n                //   text(value)\t\t- writes the supplied template text to your storage location\n                //   data(key)\t\t\t- reads values stored using data(key, value) - see below\n                //   data(key, value)\t- associates \"value\" with this template and the key \"key\". Is used to store information like \"isRewritten\".\n                //\n                // Optionally, template sources can also have the following functions:\n                //   nodes()            - returns a DOM element containing the nodes of this template, where available\n                //   nodes(value)       - writes the given DOM element to your storage location\n                // If a DOM element is available for a given template source, template engines are encouraged to use it in preference over text()\n                // for improved speed. However, all templateSources must supply text() even if they don't supply nodes().\n                //\n                // Once you've implemented a templateSource, make your template engine use it by subclassing whatever template engine you were\n                // using and overriding \"makeTemplateSource\" to return an instance of your custom template source.\n\n                ko.templateSources = {};\n\n                // ---- ko.templateSources.domElement -----\n\n                // template types\n                var templateScript = 1,\n                    templateTextArea = 2,\n                    templateTemplate = 3,\n                    templateElement = 4;\n\n                ko.templateSources.domElement = function (element) {\n                    this.domElement = element;\n\n                    if (element) {\n                        var tagNameLower = ko.utils.tagNameLower(element);\n                        this.templateType = tagNameLower === \"script\" ? templateScript : tagNameLower === \"textarea\" ? templateTextArea :\n                        // For browsers with proper <template> element support, where the .content property gives a document fragment\n                        tagNameLower == \"template\" && element.content && element.content.nodeType === 11 ? templateTemplate : templateElement;\n                    }\n                };\n\n                ko.templateSources.domElement.prototype['text'] = function () /* valueToWrite */{\n                    var elemContentsProperty = this.templateType === templateScript ? \"text\" : this.templateType === templateTextArea ? \"value\" : \"innerHTML\";\n\n                    if (arguments.length == 0) {\n                        return this.domElement[elemContentsProperty];\n                    } else {\n                        var valueToWrite = arguments[0];\n                        if (elemContentsProperty === \"innerHTML\") ko.utils.setHtml(this.domElement, valueToWrite);else this.domElement[elemContentsProperty] = valueToWrite;\n                    }\n                };\n\n                var dataDomDataPrefix = ko.utils.domData.nextKey() + \"_\";\n                ko.templateSources.domElement.prototype['data'] = function (key /*, valueToWrite */) {\n                    if (arguments.length === 1) {\n                        return ko.utils.domData.get(this.domElement, dataDomDataPrefix + key);\n                    } else {\n                        ko.utils.domData.set(this.domElement, dataDomDataPrefix + key, arguments[1]);\n                    }\n                };\n\n                var templatesDomDataKey = ko.utils.domData.nextKey();\n                function getTemplateDomData(element) {\n                    return ko.utils.domData.get(element, templatesDomDataKey) || {};\n                }\n                function setTemplateDomData(element, data) {\n                    ko.utils.domData.set(element, templatesDomDataKey, data);\n                }\n\n                ko.templateSources.domElement.prototype['nodes'] = function () /* valueToWrite */{\n                    var element = this.domElement;\n                    if (arguments.length == 0) {\n                        var templateData = getTemplateDomData(element),\n                            containerData = templateData.containerData;\n                        return containerData || (this.templateType === templateTemplate ? element.content : this.templateType === templateElement ? element : undefined);\n                    } else {\n                        var valueToWrite = arguments[0];\n                        setTemplateDomData(element, { containerData: valueToWrite });\n                    }\n                };\n\n                // ---- ko.templateSources.anonymousTemplate -----\n                // Anonymous templates are normally saved/retrieved as DOM nodes through \"nodes\".\n                // For compatibility, you can also read \"text\"; it will be serialized from the nodes on demand.\n                // Writing to \"text\" is still supported, but then the template data will not be available as DOM nodes.\n\n                ko.templateSources.anonymousTemplate = function (element) {\n                    this.domElement = element;\n                };\n                ko.templateSources.anonymousTemplate.prototype = new ko.templateSources.domElement();\n                ko.templateSources.anonymousTemplate.prototype.constructor = ko.templateSources.anonymousTemplate;\n                ko.templateSources.anonymousTemplate.prototype['text'] = function () /* valueToWrite */{\n                    if (arguments.length == 0) {\n                        var templateData = getTemplateDomData(this.domElement);\n                        if (templateData.textData === undefined && templateData.containerData) templateData.textData = templateData.containerData.innerHTML;\n                        return templateData.textData;\n                    } else {\n                        var valueToWrite = arguments[0];\n                        setTemplateDomData(this.domElement, { textData: valueToWrite });\n                    }\n                };\n\n                ko.exportSymbol('templateSources', ko.templateSources);\n                ko.exportSymbol('templateSources.domElement', ko.templateSources.domElement);\n                ko.exportSymbol('templateSources.anonymousTemplate', ko.templateSources.anonymousTemplate);\n            })();\n            (function () {\n                var _templateEngine;\n                ko.setTemplateEngine = function (templateEngine) {\n                    if (templateEngine != undefined && !(templateEngine instanceof ko.templateEngine)) throw new Error(\"templateEngine must inherit from ko.templateEngine\");\n                    _templateEngine = templateEngine;\n                };\n\n                function invokeForEachNodeInContinuousRange(firstNode, lastNode, action) {\n                    var node,\n                        nextInQueue = firstNode,\n                        firstOutOfRangeNode = ko.virtualElements.nextSibling(lastNode);\n                    while (nextInQueue && (node = nextInQueue) !== firstOutOfRangeNode) {\n                        nextInQueue = ko.virtualElements.nextSibling(node);\n                        action(node, nextInQueue);\n                    }\n                }\n\n                function activateBindingsOnContinuousNodeArray(continuousNodeArray, bindingContext) {\n                    // To be used on any nodes that have been rendered by a template and have been inserted into some parent element\n                    // Walks through continuousNodeArray (which *must* be continuous, i.e., an uninterrupted sequence of sibling nodes, because\n                    // the algorithm for walking them relies on this), and for each top-level item in the virtual-element sense,\n                    // (1) Does a regular \"applyBindings\" to associate bindingContext with this node and to activate any non-memoized bindings\n                    // (2) Unmemoizes any memos in the DOM subtree (e.g., to activate bindings that had been memoized during template rewriting)\n\n                    if (continuousNodeArray.length) {\n                        var firstNode = continuousNodeArray[0],\n                            lastNode = continuousNodeArray[continuousNodeArray.length - 1],\n                            parentNode = firstNode.parentNode,\n                            provider = ko.bindingProvider['instance'],\n                            preprocessNode = provider['preprocessNode'];\n\n                        if (preprocessNode) {\n                            invokeForEachNodeInContinuousRange(firstNode, lastNode, function (node, nextNodeInRange) {\n                                var nodePreviousSibling = node.previousSibling;\n                                var newNodes = preprocessNode.call(provider, node);\n                                if (newNodes) {\n                                    if (node === firstNode) firstNode = newNodes[0] || nextNodeInRange;\n                                    if (node === lastNode) lastNode = newNodes[newNodes.length - 1] || nodePreviousSibling;\n                                }\n                            });\n\n                            // Because preprocessNode can change the nodes, including the first and last nodes, update continuousNodeArray to match.\n                            // We need the full set, including inner nodes, because the unmemoize step might remove the first node (and so the real\n                            // first node needs to be in the array).\n                            continuousNodeArray.length = 0;\n                            if (!firstNode) {\n                                // preprocessNode might have removed all the nodes, in which case there's nothing left to do\n                                return;\n                            }\n                            if (firstNode === lastNode) {\n                                continuousNodeArray.push(firstNode);\n                            } else {\n                                continuousNodeArray.push(firstNode, lastNode);\n                                ko.utils.fixUpContinuousNodeArray(continuousNodeArray, parentNode);\n                            }\n                        }\n\n                        // Need to applyBindings *before* unmemoziation, because unmemoization might introduce extra nodes (that we don't want to re-bind)\n                        // whereas a regular applyBindings won't introduce new memoized nodes\n                        invokeForEachNodeInContinuousRange(firstNode, lastNode, function (node) {\n                            if (node.nodeType === 1 || node.nodeType === 8) ko.applyBindings(bindingContext, node);\n                        });\n                        invokeForEachNodeInContinuousRange(firstNode, lastNode, function (node) {\n                            if (node.nodeType === 1 || node.nodeType === 8) ko.memoization.unmemoizeDomNodeAndDescendants(node, [bindingContext]);\n                        });\n\n                        // Make sure any changes done by applyBindings or unmemoize are reflected in the array\n                        ko.utils.fixUpContinuousNodeArray(continuousNodeArray, parentNode);\n                    }\n                }\n\n                function getFirstNodeFromPossibleArray(nodeOrNodeArray) {\n                    return nodeOrNodeArray.nodeType ? nodeOrNodeArray : nodeOrNodeArray.length > 0 ? nodeOrNodeArray[0] : null;\n                }\n\n                function executeTemplate(targetNodeOrNodeArray, renderMode, template, bindingContext, options) {\n                    options = options || {};\n                    var firstTargetNode = targetNodeOrNodeArray && getFirstNodeFromPossibleArray(targetNodeOrNodeArray);\n                    var templateDocument = (firstTargetNode || template || {}).ownerDocument;\n                    var templateEngineToUse = options['templateEngine'] || _templateEngine;\n                    ko.templateRewriting.ensureTemplateIsRewritten(template, templateEngineToUse, templateDocument);\n                    var renderedNodesArray = templateEngineToUse['renderTemplate'](template, bindingContext, options, templateDocument);\n\n                    // Loosely check result is an array of DOM nodes\n                    if (typeof renderedNodesArray.length != \"number\" || renderedNodesArray.length > 0 && typeof renderedNodesArray[0].nodeType != \"number\") throw new Error(\"Template engine must return an array of DOM nodes\");\n\n                    var haveAddedNodesToParent = false;\n                    switch (renderMode) {\n                        case \"replaceChildren\":\n                            ko.virtualElements.setDomNodeChildren(targetNodeOrNodeArray, renderedNodesArray);\n                            haveAddedNodesToParent = true;\n                            break;\n                        case \"replaceNode\":\n                            ko.utils.replaceDomNodes(targetNodeOrNodeArray, renderedNodesArray);\n                            haveAddedNodesToParent = true;\n                            break;\n                        case \"ignoreTargetNode\":\n                            break;\n                        default:\n                            throw new Error(\"Unknown renderMode: \" + renderMode);\n                    }\n\n                    if (haveAddedNodesToParent) {\n                        activateBindingsOnContinuousNodeArray(renderedNodesArray, bindingContext);\n                        if (options['afterRender']) ko.dependencyDetection.ignore(options['afterRender'], null, [renderedNodesArray, bindingContext['$data']]);\n                    }\n\n                    return renderedNodesArray;\n                }\n\n                function resolveTemplateName(template, data, context) {\n                    // The template can be specified as:\n                    if (ko.isObservable(template)) {\n                        // 1. An observable, with string value\n                        return template();\n                    } else if (typeof template === 'function') {\n                        // 2. A function of (data, context) returning a string\n                        return template(data, context);\n                    } else {\n                        // 3. A string\n                        return template;\n                    }\n                }\n\n                ko.renderTemplate = function (template, dataOrBindingContext, options, targetNodeOrNodeArray, renderMode) {\n                    options = options || {};\n                    if ((options['templateEngine'] || _templateEngine) == undefined) throw new Error(\"Set a template engine before calling renderTemplate\");\n                    renderMode = renderMode || \"replaceChildren\";\n\n                    if (targetNodeOrNodeArray) {\n                        var firstTargetNode = getFirstNodeFromPossibleArray(targetNodeOrNodeArray);\n\n                        var whenToDispose = function whenToDispose() {\n                            return !firstTargetNode || !ko.utils.domNodeIsAttachedToDocument(firstTargetNode);\n                        }; // Passive disposal (on next evaluation)\n                        var activelyDisposeWhenNodeIsRemoved = firstTargetNode && renderMode == \"replaceNode\" ? firstTargetNode.parentNode : firstTargetNode;\n\n                        return ko.dependentObservable( // So the DOM is automatically updated when any dependency changes\n                        function () {\n                            // Ensure we've got a proper binding context to work with\n                            var bindingContext = dataOrBindingContext && dataOrBindingContext instanceof ko.bindingContext ? dataOrBindingContext : new ko.bindingContext(ko.utils.unwrapObservable(dataOrBindingContext));\n\n                            var templateName = resolveTemplateName(template, bindingContext['$data'], bindingContext),\n                                renderedNodesArray = executeTemplate(targetNodeOrNodeArray, renderMode, templateName, bindingContext, options);\n\n                            if (renderMode == \"replaceNode\") {\n                                targetNodeOrNodeArray = renderedNodesArray;\n                                firstTargetNode = getFirstNodeFromPossibleArray(targetNodeOrNodeArray);\n                            }\n                        }, null, { disposeWhen: whenToDispose, disposeWhenNodeIsRemoved: activelyDisposeWhenNodeIsRemoved });\n                    } else {\n                        // We don't yet have a DOM node to evaluate, so use a memo and render the template later when there is a DOM node\n                        return ko.memoization.memoize(function (domNode) {\n                            ko.renderTemplate(template, dataOrBindingContext, options, domNode, \"replaceNode\");\n                        });\n                    }\n                };\n\n                ko.renderTemplateForEach = function (template, arrayOrObservableArray, options, targetNode, parentBindingContext) {\n                    // Since setDomNodeChildrenFromArrayMapping always calls executeTemplateForArrayItem and then\n                    // activateBindingsCallback for added items, we can store the binding context in the former to use in the latter.\n                    var arrayItemContext;\n\n                    // This will be called by setDomNodeChildrenFromArrayMapping to get the nodes to add to targetNode\n                    var executeTemplateForArrayItem = function executeTemplateForArrayItem(arrayValue, index) {\n                        // Support selecting template as a function of the data being rendered\n                        arrayItemContext = parentBindingContext['createChildContext'](arrayValue, options['as'], function (context) {\n                            context['$index'] = index;\n                        });\n\n                        var templateName = resolveTemplateName(template, arrayValue, arrayItemContext);\n                        return executeTemplate(null, \"ignoreTargetNode\", templateName, arrayItemContext, options);\n                    };\n\n                    // This will be called whenever setDomNodeChildrenFromArrayMapping has added nodes to targetNode\n                    var activateBindingsCallback = function activateBindingsCallback(arrayValue, addedNodesArray, index) {\n                        activateBindingsOnContinuousNodeArray(addedNodesArray, arrayItemContext);\n                        if (options['afterRender']) options['afterRender'](addedNodesArray, arrayValue);\n\n                        // release the \"cache\" variable, so that it can be collected by\n                        // the GC when its value isn't used from within the bindings anymore.\n                        arrayItemContext = null;\n                    };\n\n                    return ko.dependentObservable(function () {\n                        var unwrappedArray = ko.utils.unwrapObservable(arrayOrObservableArray) || [];\n                        if (typeof unwrappedArray.length == \"undefined\") // Coerce single value into array\n                            unwrappedArray = [unwrappedArray];\n\n                        // Filter out any entries marked as destroyed\n                        var filteredArray = ko.utils.arrayFilter(unwrappedArray, function (item) {\n                            return options['includeDestroyed'] || item === undefined || item === null || !ko.utils.unwrapObservable(item['_destroy']);\n                        });\n\n                        // Call setDomNodeChildrenFromArrayMapping, ignoring any observables unwrapped within (most likely from a callback function).\n                        // If the array items are observables, though, they will be unwrapped in executeTemplateForArrayItem and managed within setDomNodeChildrenFromArrayMapping.\n                        ko.dependencyDetection.ignore(ko.utils.setDomNodeChildrenFromArrayMapping, null, [targetNode, filteredArray, executeTemplateForArrayItem, options, activateBindingsCallback]);\n                    }, null, { disposeWhenNodeIsRemoved: targetNode });\n                };\n\n                var templateComputedDomDataKey = ko.utils.domData.nextKey();\n                function disposeOldComputedAndStoreNewOne(element, newComputed) {\n                    var oldComputed = ko.utils.domData.get(element, templateComputedDomDataKey);\n                    if (oldComputed && typeof oldComputed.dispose == 'function') oldComputed.dispose();\n                    ko.utils.domData.set(element, templateComputedDomDataKey, newComputed && newComputed.isActive() ? newComputed : undefined);\n                }\n\n                ko.bindingHandlers['template'] = {\n                    'init': function init(element, valueAccessor) {\n                        // Support anonymous templates\n                        var bindingValue = ko.utils.unwrapObservable(valueAccessor());\n                        if (typeof bindingValue == \"string\" || bindingValue['name']) {\n                            // It's a named template - clear the element\n                            ko.virtualElements.emptyNode(element);\n                        } else if ('nodes' in bindingValue) {\n                            // We've been given an array of DOM nodes. Save them as the template source.\n                            // There is no known use case for the node array being an observable array (if the output\n                            // varies, put that behavior *into* your template - that's what templates are for), and\n                            // the implementation would be a mess, so assert that it's not observable.\n                            var nodes = bindingValue['nodes'] || [];\n                            if (ko.isObservable(nodes)) {\n                                throw new Error('The \"nodes\" option must be a plain, non-observable array.');\n                            }\n                            var container = ko.utils.moveCleanedNodesToContainerElement(nodes); // This also removes the nodes from their current parent\n                            new ko.templateSources.anonymousTemplate(element)['nodes'](container);\n                        } else {\n                            // It's an anonymous template - store the element contents, then clear the element\n                            var templateNodes = ko.virtualElements.childNodes(element),\n                                container = ko.utils.moveCleanedNodesToContainerElement(templateNodes); // This also removes the nodes from their current parent\n                            new ko.templateSources.anonymousTemplate(element)['nodes'](container);\n                        }\n                        return { 'controlsDescendantBindings': true };\n                    },\n                    'update': function update(element, valueAccessor, allBindings, viewModel, bindingContext) {\n                        var value = valueAccessor(),\n                            dataValue,\n                            options = ko.utils.unwrapObservable(value),\n                            shouldDisplay = true,\n                            templateComputed = null,\n                            templateName;\n\n                        if (typeof options == \"string\") {\n                            templateName = value;\n                            options = {};\n                        } else {\n                            templateName = options['name'];\n\n                            // Support \"if\"/\"ifnot\" conditions\n                            if ('if' in options) shouldDisplay = ko.utils.unwrapObservable(options['if']);\n                            if (shouldDisplay && 'ifnot' in options) shouldDisplay = !ko.utils.unwrapObservable(options['ifnot']);\n\n                            dataValue = ko.utils.unwrapObservable(options['data']);\n                        }\n\n                        if ('foreach' in options) {\n                            // Render once for each data point (treating data set as empty if shouldDisplay==false)\n                            var dataArray = shouldDisplay && options['foreach'] || [];\n                            templateComputed = ko.renderTemplateForEach(templateName || element, dataArray, options, element, bindingContext);\n                        } else if (!shouldDisplay) {\n                            ko.virtualElements.emptyNode(element);\n                        } else {\n                            // Render once for this single data point (or use the viewModel if no data was provided)\n                            var innerBindingContext = 'data' in options ? bindingContext['createChildContext'](dataValue, options['as']) : // Given an explitit 'data' value, we create a child binding context for it\n                            bindingContext; // Given no explicit 'data' value, we retain the same binding context\n                            templateComputed = ko.renderTemplate(templateName || element, innerBindingContext, options, element);\n                        }\n\n                        // It only makes sense to have a single template computed per element (otherwise which one should have its output displayed?)\n                        disposeOldComputedAndStoreNewOne(element, templateComputed);\n                    }\n                };\n\n                // Anonymous templates can't be rewritten. Give a nice error message if you try to do it.\n                ko.expressionRewriting.bindingRewriteValidators['template'] = function (bindingValue) {\n                    var parsedBindingValue = ko.expressionRewriting.parseObjectLiteral(bindingValue);\n\n                    if (parsedBindingValue.length == 1 && parsedBindingValue[0]['unknown']) return null; // It looks like a string literal, not an object literal, so treat it as a named template (which is allowed for rewriting)\n\n                    if (ko.expressionRewriting.keyValueArrayContainsKey(parsedBindingValue, \"name\")) return null; // Named templates can be rewritten, so return \"no error\"\n                    return \"This template engine does not support anonymous templates nested within its templates\";\n                };\n\n                ko.virtualElements.allowedBindings['template'] = true;\n            })();\n\n            ko.exportSymbol('setTemplateEngine', ko.setTemplateEngine);\n            ko.exportSymbol('renderTemplate', ko.renderTemplate);\n            // Go through the items that have been added and deleted and try to find matches between them.\n            ko.utils.findMovesInArrayComparison = function (left, right, limitFailedCompares) {\n                if (left.length && right.length) {\n                    var failedCompares, l, r, leftItem, rightItem;\n                    for (failedCompares = l = 0; (!limitFailedCompares || failedCompares < limitFailedCompares) && (leftItem = left[l]); ++l) {\n                        for (r = 0; rightItem = right[r]; ++r) {\n                            if (leftItem['value'] === rightItem['value']) {\n                                leftItem['moved'] = rightItem['index'];\n                                rightItem['moved'] = leftItem['index'];\n                                right.splice(r, 1); // This item is marked as moved; so remove it from right list\n                                failedCompares = r = 0; // Reset failed compares count because we're checking for consecutive failures\n                                break;\n                            }\n                        }\n                        failedCompares += r;\n                    }\n                }\n            };\n\n            ko.utils.compareArrays = function () {\n                var statusNotInOld = 'added',\n                    statusNotInNew = 'deleted';\n\n                // Simple calculation based on Levenshtein distance.\n                function compareArrays(oldArray, newArray, options) {\n                    // For backward compatibility, if the third arg is actually a bool, interpret\n                    // it as the old parameter 'dontLimitMoves'. Newer code should use { dontLimitMoves: true }.\n                    options = typeof options === 'boolean' ? { 'dontLimitMoves': options } : options || {};\n                    oldArray = oldArray || [];\n                    newArray = newArray || [];\n\n                    if (oldArray.length < newArray.length) return compareSmallArrayToBigArray(oldArray, newArray, statusNotInOld, statusNotInNew, options);else return compareSmallArrayToBigArray(newArray, oldArray, statusNotInNew, statusNotInOld, options);\n                }\n\n                function compareSmallArrayToBigArray(smlArray, bigArray, statusNotInSml, statusNotInBig, options) {\n                    var myMin = Math.min,\n                        myMax = Math.max,\n                        editDistanceMatrix = [],\n                        smlIndex,\n                        smlIndexMax = smlArray.length,\n                        bigIndex,\n                        bigIndexMax = bigArray.length,\n                        compareRange = bigIndexMax - smlIndexMax || 1,\n                        maxDistance = smlIndexMax + bigIndexMax + 1,\n                        thisRow,\n                        lastRow,\n                        bigIndexMaxForRow,\n                        bigIndexMinForRow;\n\n                    for (smlIndex = 0; smlIndex <= smlIndexMax; smlIndex++) {\n                        lastRow = thisRow;\n                        editDistanceMatrix.push(thisRow = []);\n                        bigIndexMaxForRow = myMin(bigIndexMax, smlIndex + compareRange);\n                        bigIndexMinForRow = myMax(0, smlIndex - 1);\n                        for (bigIndex = bigIndexMinForRow; bigIndex <= bigIndexMaxForRow; bigIndex++) {\n                            if (!bigIndex) thisRow[bigIndex] = smlIndex + 1;else if (!smlIndex) // Top row - transform empty array into new array via additions\n                                thisRow[bigIndex] = bigIndex + 1;else if (smlArray[smlIndex - 1] === bigArray[bigIndex - 1]) thisRow[bigIndex] = lastRow[bigIndex - 1]; // copy value (no edit)\n                            else {\n                                    var northDistance = lastRow[bigIndex] || maxDistance; // not in big (deletion)\n                                    var westDistance = thisRow[bigIndex - 1] || maxDistance; // not in small (addition)\n                                    thisRow[bigIndex] = myMin(northDistance, westDistance) + 1;\n                                }\n                        }\n                    }\n\n                    var editScript = [],\n                        meMinusOne,\n                        notInSml = [],\n                        notInBig = [];\n                    for (smlIndex = smlIndexMax, bigIndex = bigIndexMax; smlIndex || bigIndex;) {\n                        meMinusOne = editDistanceMatrix[smlIndex][bigIndex] - 1;\n                        if (bigIndex && meMinusOne === editDistanceMatrix[smlIndex][bigIndex - 1]) {\n                            notInSml.push(editScript[editScript.length] = { // added\n                                'status': statusNotInSml,\n                                'value': bigArray[--bigIndex],\n                                'index': bigIndex });\n                        } else if (smlIndex && meMinusOne === editDistanceMatrix[smlIndex - 1][bigIndex]) {\n                            notInBig.push(editScript[editScript.length] = { // deleted\n                                'status': statusNotInBig,\n                                'value': smlArray[--smlIndex],\n                                'index': smlIndex });\n                        } else {\n                            --bigIndex;\n                            --smlIndex;\n                            if (!options['sparse']) {\n                                editScript.push({\n                                    'status': \"retained\",\n                                    'value': bigArray[bigIndex] });\n                            }\n                        }\n                    }\n\n                    // Set a limit on the number of consecutive non-matching comparisons; having it a multiple of\n                    // smlIndexMax keeps the time complexity of this algorithm linear.\n                    ko.utils.findMovesInArrayComparison(notInBig, notInSml, !options['dontLimitMoves'] && smlIndexMax * 10);\n\n                    return editScript.reverse();\n                }\n\n                return compareArrays;\n            }();\n\n            ko.exportSymbol('utils.compareArrays', ko.utils.compareArrays);\n            (function () {\n                // Objective:\n                // * Given an input array, a container DOM node, and a function from array elements to arrays of DOM nodes,\n                //   map the array elements to arrays of DOM nodes, concatenate together all these arrays, and use them to populate the container DOM node\n                // * Next time we're given the same combination of things (with the array possibly having mutated), update the container DOM node\n                //   so that its children is again the concatenation of the mappings of the array elements, but don't re-map any array elements that we\n                //   previously mapped - retain those nodes, and just insert/delete other ones\n\n                // \"callbackAfterAddingNodes\" will be invoked after any \"mapping\"-generated nodes are inserted into the container node\n                // You can use this, for example, to activate bindings on those nodes.\n\n                function mapNodeAndRefreshWhenChanged(containerNode, mapping, valueToMap, callbackAfterAddingNodes, index) {\n                    // Map this array value inside a dependentObservable so we re-map when any dependency changes\n                    var mappedNodes = [];\n                    var dependentObservable = ko.dependentObservable(function () {\n                        var newMappedNodes = mapping(valueToMap, index, ko.utils.fixUpContinuousNodeArray(mappedNodes, containerNode)) || [];\n\n                        // On subsequent evaluations, just replace the previously-inserted DOM nodes\n                        if (mappedNodes.length > 0) {\n                            ko.utils.replaceDomNodes(mappedNodes, newMappedNodes);\n                            if (callbackAfterAddingNodes) ko.dependencyDetection.ignore(callbackAfterAddingNodes, null, [valueToMap, newMappedNodes, index]);\n                        }\n\n                        // Replace the contents of the mappedNodes array, thereby updating the record\n                        // of which nodes would be deleted if valueToMap was itself later removed\n                        mappedNodes.length = 0;\n                        ko.utils.arrayPushAll(mappedNodes, newMappedNodes);\n                    }, null, { disposeWhenNodeIsRemoved: containerNode, disposeWhen: function disposeWhen() {\n                            return !ko.utils.anyDomNodeIsAttachedToDocument(mappedNodes);\n                        } });\n                    return { mappedNodes: mappedNodes, dependentObservable: dependentObservable.isActive() ? dependentObservable : undefined };\n                }\n\n                var lastMappingResultDomDataKey = ko.utils.domData.nextKey(),\n                    deletedItemDummyValue = ko.utils.domData.nextKey();\n\n                ko.utils.setDomNodeChildrenFromArrayMapping = function (domNode, array, mapping, options, callbackAfterAddingNodes) {\n                    // Compare the provided array against the previous one\n                    array = array || [];\n                    options = options || {};\n                    var isFirstExecution = ko.utils.domData.get(domNode, lastMappingResultDomDataKey) === undefined;\n                    var lastMappingResult = ko.utils.domData.get(domNode, lastMappingResultDomDataKey) || [];\n                    var lastArray = ko.utils.arrayMap(lastMappingResult, function (x) {\n                        return x.arrayEntry;\n                    });\n                    var editScript = ko.utils.compareArrays(lastArray, array, options['dontLimitMoves']);\n\n                    // Build the new mapping result\n                    var newMappingResult = [];\n                    var lastMappingResultIndex = 0;\n                    var newMappingResultIndex = 0;\n\n                    var nodesToDelete = [];\n                    var itemsToProcess = [];\n                    var itemsForBeforeRemoveCallbacks = [];\n                    var itemsForMoveCallbacks = [];\n                    var itemsForAfterAddCallbacks = [];\n                    var mapData;\n\n                    function itemMovedOrRetained(editScriptIndex, oldPosition) {\n                        mapData = lastMappingResult[oldPosition];\n                        if (newMappingResultIndex !== oldPosition) itemsForMoveCallbacks[editScriptIndex] = mapData;\n                        // Since updating the index might change the nodes, do so before calling fixUpContinuousNodeArray\n                        mapData.indexObservable(newMappingResultIndex++);\n                        ko.utils.fixUpContinuousNodeArray(mapData.mappedNodes, domNode);\n                        newMappingResult.push(mapData);\n                        itemsToProcess.push(mapData);\n                    }\n\n                    function callCallback(callback, items) {\n                        if (callback) {\n                            for (var i = 0, n = items.length; i < n; i++) {\n                                if (items[i]) {\n                                    ko.utils.arrayForEach(items[i].mappedNodes, function (node) {\n                                        callback(node, i, items[i].arrayEntry);\n                                    });\n                                }\n                            }\n                        }\n                    }\n\n                    for (var i = 0, editScriptItem, movedIndex; editScriptItem = editScript[i]; i++) {\n                        movedIndex = editScriptItem['moved'];\n                        switch (editScriptItem['status']) {\n                            case \"deleted\":\n                                if (movedIndex === undefined) {\n                                    mapData = lastMappingResult[lastMappingResultIndex];\n\n                                    // Stop tracking changes to the mapping for these nodes\n                                    if (mapData.dependentObservable) {\n                                        mapData.dependentObservable.dispose();\n                                        mapData.dependentObservable = undefined;\n                                    }\n\n                                    // Queue these nodes for later removal\n                                    if (ko.utils.fixUpContinuousNodeArray(mapData.mappedNodes, domNode).length) {\n                                        if (options['beforeRemove']) {\n                                            newMappingResult.push(mapData);\n                                            itemsToProcess.push(mapData);\n                                            if (mapData.arrayEntry === deletedItemDummyValue) {\n                                                mapData = null;\n                                            } else {\n                                                itemsForBeforeRemoveCallbacks[i] = mapData;\n                                            }\n                                        }\n                                        if (mapData) {\n                                            nodesToDelete.push.apply(nodesToDelete, mapData.mappedNodes);\n                                        }\n                                    }\n                                }\n                                lastMappingResultIndex++;\n                                break;\n\n                            case \"retained\":\n                                itemMovedOrRetained(i, lastMappingResultIndex++);\n                                break;\n\n                            case \"added\":\n                                if (movedIndex !== undefined) {\n                                    itemMovedOrRetained(i, movedIndex);\n                                } else {\n                                    mapData = { arrayEntry: editScriptItem['value'], indexObservable: ko.observable(newMappingResultIndex++) };\n                                    newMappingResult.push(mapData);\n                                    itemsToProcess.push(mapData);\n                                    if (!isFirstExecution) itemsForAfterAddCallbacks[i] = mapData;\n                                }\n                                break;\n                        }\n                    }\n\n                    // Store a copy of the array items we just considered so we can difference it next time\n                    ko.utils.domData.set(domNode, lastMappingResultDomDataKey, newMappingResult);\n\n                    // Call beforeMove first before any changes have been made to the DOM\n                    callCallback(options['beforeMove'], itemsForMoveCallbacks);\n\n                    // Next remove nodes for deleted items (or just clean if there's a beforeRemove callback)\n                    ko.utils.arrayForEach(nodesToDelete, options['beforeRemove'] ? ko.cleanNode : ko.removeNode);\n\n                    // Next add/reorder the remaining items (will include deleted items if there's a beforeRemove callback)\n                    for (var i = 0, nextNode = ko.virtualElements.firstChild(domNode), lastNode, node; mapData = itemsToProcess[i]; i++) {\n                        // Get nodes for newly added items\n                        if (!mapData.mappedNodes) ko.utils.extend(mapData, mapNodeAndRefreshWhenChanged(domNode, mapping, mapData.arrayEntry, callbackAfterAddingNodes, mapData.indexObservable));\n\n                        // Put nodes in the right place if they aren't there already\n                        for (var j = 0; node = mapData.mappedNodes[j]; nextNode = node.nextSibling, lastNode = node, j++) {\n                            if (node !== nextNode) ko.virtualElements.insertAfter(domNode, node, lastNode);\n                        }\n\n                        // Run the callbacks for newly added nodes (for example, to apply bindings, etc.)\n                        if (!mapData.initialized && callbackAfterAddingNodes) {\n                            callbackAfterAddingNodes(mapData.arrayEntry, mapData.mappedNodes, mapData.indexObservable);\n                            mapData.initialized = true;\n                        }\n                    }\n\n                    // If there's a beforeRemove callback, call it after reordering.\n                    // Note that we assume that the beforeRemove callback will usually be used to remove the nodes using\n                    // some sort of animation, which is why we first reorder the nodes that will be removed. If the\n                    // callback instead removes the nodes right away, it would be more efficient to skip reordering them.\n                    // Perhaps we'll make that change in the future if this scenario becomes more common.\n                    callCallback(options['beforeRemove'], itemsForBeforeRemoveCallbacks);\n\n                    // Replace the stored values of deleted items with a dummy value. This provides two benefits: it marks this item\n                    // as already \"removed\" so we won't call beforeRemove for it again, and it ensures that the item won't match up\n                    // with an actual item in the array and appear as \"retained\" or \"moved\".\n                    for (i = 0; i < itemsForBeforeRemoveCallbacks.length; ++i) {\n                        if (itemsForBeforeRemoveCallbacks[i]) {\n                            itemsForBeforeRemoveCallbacks[i].arrayEntry = deletedItemDummyValue;\n                        }\n                    }\n\n                    // Finally call afterMove and afterAdd callbacks\n                    callCallback(options['afterMove'], itemsForMoveCallbacks);\n                    callCallback(options['afterAdd'], itemsForAfterAddCallbacks);\n                };\n            })();\n\n            ko.exportSymbol('utils.setDomNodeChildrenFromArrayMapping', ko.utils.setDomNodeChildrenFromArrayMapping);\n            ko.nativeTemplateEngine = function () {\n                this['allowTemplateRewriting'] = false;\n            };\n\n            ko.nativeTemplateEngine.prototype = new ko.templateEngine();\n            ko.nativeTemplateEngine.prototype.constructor = ko.nativeTemplateEngine;\n            ko.nativeTemplateEngine.prototype['renderTemplateSource'] = function (templateSource, bindingContext, options, templateDocument) {\n                var useNodesIfAvailable = !(ko.utils.ieVersion < 9),\n                    // IE<9 cloneNode doesn't work properly\n                templateNodesFunc = useNodesIfAvailable ? templateSource['nodes'] : null,\n                    templateNodes = templateNodesFunc ? templateSource['nodes']() : null;\n\n                if (templateNodes) {\n                    return ko.utils.makeArray(templateNodes.cloneNode(true).childNodes);\n                } else {\n                    var templateText = templateSource['text']();\n                    return ko.utils.parseHtmlFragment(templateText, templateDocument);\n                }\n            };\n\n            ko.nativeTemplateEngine.instance = new ko.nativeTemplateEngine();\n            ko.setTemplateEngine(ko.nativeTemplateEngine.instance);\n\n            ko.exportSymbol('nativeTemplateEngine', ko.nativeTemplateEngine);\n            (function () {\n                ko.jqueryTmplTemplateEngine = function () {\n                    // Detect which version of jquery-tmpl you're using. Unfortunately jquery-tmpl\n                    // doesn't expose a version number, so we have to infer it.\n                    // Note that as of Knockout 1.3, we only support jQuery.tmpl 1.0.0pre and later,\n                    // which KO internally refers to as version \"2\", so older versions are no longer detected.\n                    var jQueryTmplVersion = this.jQueryTmplVersion = function () {\n                        if (!jQueryInstance || !jQueryInstance['tmpl']) return 0;\n                        // Since it exposes no official version number, we use our own numbering system. To be updated as jquery-tmpl evolves.\n                        try {\n                            if (jQueryInstance['tmpl']['tag']['tmpl']['open'].toString().indexOf('__') >= 0) {\n                                // Since 1.0.0pre, custom tags should append markup to an array called \"__\"\n                                return 2; // Final version of jquery.tmpl\n                            }\n                        } catch (ex) {/* Apparently not the version we were looking for */}\n\n                        return 1; // Any older version that we don't support\n                    }();\n\n                    function ensureHasReferencedJQueryTemplates() {\n                        if (jQueryTmplVersion < 2) throw new Error(\"Your version of jQuery.tmpl is too old. Please upgrade to jQuery.tmpl 1.0.0pre or later.\");\n                    }\n\n                    function executeTemplate(compiledTemplate, data, jQueryTemplateOptions) {\n                        return jQueryInstance['tmpl'](compiledTemplate, data, jQueryTemplateOptions);\n                    }\n\n                    this['renderTemplateSource'] = function (templateSource, bindingContext, options, templateDocument) {\n                        templateDocument = templateDocument || document;\n                        options = options || {};\n                        ensureHasReferencedJQueryTemplates();\n\n                        // Ensure we have stored a precompiled version of this template (don't want to reparse on every render)\n                        var precompiled = templateSource['data']('precompiled');\n                        if (!precompiled) {\n                            var templateText = templateSource['text']() || \"\";\n                            // Wrap in \"with($whatever.koBindingContext) { ... }\"\n                            templateText = \"{{ko_with $item.koBindingContext}}\" + templateText + \"{{/ko_with}}\";\n\n                            precompiled = jQueryInstance['template'](null, templateText);\n                            templateSource['data']('precompiled', precompiled);\n                        }\n\n                        var data = [bindingContext['$data']]; // Prewrap the data in an array to stop jquery.tmpl from trying to unwrap any arrays\n                        var jQueryTemplateOptions = jQueryInstance['extend']({ 'koBindingContext': bindingContext }, options['templateOptions']);\n\n                        var resultNodes = executeTemplate(precompiled, data, jQueryTemplateOptions);\n                        resultNodes['appendTo'](templateDocument.createElement(\"div\")); // Using \"appendTo\" forces jQuery/jQuery.tmpl to perform necessary cleanup work\n\n                        jQueryInstance['fragments'] = {}; // Clear jQuery's fragment cache to avoid a memory leak after a large number of template renders\n                        return resultNodes;\n                    };\n\n                    this['createJavaScriptEvaluatorBlock'] = function (script) {\n                        return \"{{ko_code ((function() { return \" + script + \" })()) }}\";\n                    };\n\n                    this['addTemplate'] = function (templateName, templateMarkup) {\n                        document.write(\"<script type='text/html' id='\" + templateName + \"'>\" + templateMarkup + \"<\" + \"/script>\");\n                    };\n\n                    if (jQueryTmplVersion > 0) {\n                        jQueryInstance['tmpl']['tag']['ko_code'] = {\n                            open: \"__.push($1 || '');\"\n                        };\n                        jQueryInstance['tmpl']['tag']['ko_with'] = {\n                            open: \"with($1) {\",\n                            close: \"} \"\n                        };\n                    }\n                };\n\n                ko.jqueryTmplTemplateEngine.prototype = new ko.templateEngine();\n                ko.jqueryTmplTemplateEngine.prototype.constructor = ko.jqueryTmplTemplateEngine;\n\n                // Use this one by default *only if jquery.tmpl is referenced*\n                var jqueryTmplTemplateEngineInstance = new ko.jqueryTmplTemplateEngine();\n                if (jqueryTmplTemplateEngineInstance.jQueryTmplVersion > 0) ko.setTemplateEngine(jqueryTmplTemplateEngineInstance);\n\n                ko.exportSymbol('jqueryTmplTemplateEngine', ko.jqueryTmplTemplateEngine);\n            })();\n        });\n    })();\n})();\n//# sourceMappingURL=data:application/json;base64,","deps":{}},"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\node_modules\\jquery.nicescroll\\jquery.nicescroll.js":{"file":"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\node_modules\\jquery.nicescroll\\jquery.nicescroll.js","source":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\n/* jquery.nicescroll\n-- version 3.6.8\n-- copyright 2016-02-29 InuYaksa*2016\n-- licensed under the MIT\n--\n-- http://nicescroll.areaaperta.com/\n-- https://github.com/inuyaksa/jquery.nicescroll\n--\n*/\n\n(function (factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as anonymous module.\n    define(['jquery'], factory);\n  } else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {\n    // Node/CommonJS.\n    module.exports = factory(require('jquery'));\n  } else {\n    // Browser globals.\n    factory(jQuery);\n  }\n})(function (jQuery) {\n  \"use strict\";\n\n  // globals\n\n  var domfocus = false;\n  var mousefocus = false;\n  var tabindexcounter = 0;\n  var ascrailcounter = 2000;\n  var globalmaxzindex = 0;\n\n  var $ = jQuery; // sandbox\n\n  // http://stackoverflow.com/questions/2161159/get-script-path\n  function getScriptPath() {\n    var scripts = document.getElementsByTagName('script');\n    var path = scripts.length ? scripts[scripts.length - 1].src.split('?')[0] : '';\n    return path.split('/').length > 0 ? path.split('/').slice(0, -1).join('/') + '/' : '';\n  }\n\n  var vendors = ['webkit', 'ms', 'moz', 'o'];\n\n  var setAnimationFrame = window.requestAnimationFrame || false;\n  var clearAnimationFrame = window.cancelAnimationFrame || false;\n\n  if (!setAnimationFrame) {\n    // legacy detection\n    for (var vx in vendors) {\n      var v = vendors[vx];\n      setAnimationFrame = window[v + 'RequestAnimationFrame'];\n      if (setAnimationFrame) {\n        clearAnimationFrame = window[v + 'CancelAnimationFrame'] || window[v + 'CancelRequestAnimationFrame'];\n        break;\n      }\n    }\n  }\n\n  var ClsMutationObserver = window.MutationObserver || window.WebKitMutationObserver || false;\n\n  var _globaloptions = {\n    zindex: \"auto\",\n    cursoropacitymin: 0,\n    cursoropacitymax: 1,\n    cursorcolor: \"#424242\",\n    cursorwidth: \"6px\",\n    cursorborder: \"1px solid #fff\",\n    cursorborderradius: \"5px\",\n    scrollspeed: 60,\n    mousescrollstep: 8 * 3,\n    touchbehavior: false,\n    hwacceleration: true,\n    usetransition: true,\n    boxzoom: false,\n    dblclickzoom: true,\n    gesturezoom: true,\n    grabcursorenabled: true,\n    autohidemode: true,\n    background: \"\",\n    iframeautoresize: true,\n    cursorminheight: 32,\n    preservenativescrolling: true,\n    railoffset: false,\n    railhoffset: false,\n    bouncescroll: true,\n    spacebarenabled: true,\n    railpadding: {\n      top: 0,\n      right: 0,\n      left: 0,\n      bottom: 0\n    },\n    disableoutline: true,\n    horizrailenabled: true,\n    railalign: \"right\",\n    railvalign: \"bottom\",\n    enabletranslate3d: true,\n    enablemousewheel: true,\n    enablekeyboard: true,\n    smoothscroll: true,\n    sensitiverail: true,\n    enablemouselockapi: true,\n    //      cursormaxheight:false,\n    cursorfixedheight: false,\n    directionlockdeadzone: 6,\n    hidecursordelay: 400,\n    nativeparentscrolling: true,\n    enablescrollonselection: true,\n    overflowx: true,\n    overflowy: true,\n    cursordragspeed: 0.3,\n    rtlmode: \"auto\",\n    cursordragontouch: false,\n    oneaxismousemode: \"auto\",\n    scriptpath: getScriptPath(),\n    preventmultitouchscrolling: true,\n    disablemutationobserver: false\n  };\n\n  var browserdetected = false;\n\n  var getBrowserDetection = function getBrowserDetection() {\n\n    if (browserdetected) return browserdetected;\n\n    var _el = document.createElement('DIV'),\n        _style = _el.style,\n        _agent = navigator.userAgent,\n        _platform = navigator.platform,\n        d = {};\n\n    d.haspointerlock = \"pointerLockElement\" in document || \"webkitPointerLockElement\" in document || \"mozPointerLockElement\" in document;\n\n    d.isopera = \"opera\" in window; // 12-\n    d.isopera12 = d.isopera && \"getUserMedia\" in navigator;\n    d.isoperamini = Object.prototype.toString.call(window.operamini) === \"[object OperaMini]\";\n\n    d.isie = \"all\" in document && \"attachEvent\" in _el && !d.isopera; //IE10-\n    d.isieold = d.isie && !(\"msInterpolationMode\" in _style); // IE6 and older\n    d.isie7 = d.isie && !d.isieold && (!(\"documentMode\" in document) || document.documentMode == 7);\n    d.isie8 = d.isie && \"documentMode\" in document && document.documentMode == 8;\n    d.isie9 = d.isie && \"performance\" in window && document.documentMode == 9;\n    d.isie10 = d.isie && \"performance\" in window && document.documentMode == 10;\n    d.isie11 = \"msRequestFullscreen\" in _el && document.documentMode >= 11; // IE11+\n    d.isieedge12 = navigator.userAgent.match(/Edge\\/12\\./); // IE Edge 12\n    d.isieedge = \"msOverflowStyle\" in _el; // IE Edge\n    d.ismodernie = d.isie11 || d.isieedge;\n\n    d.isie9mobile = /iemobile.9/i.test(_agent); //wp 7.1 mango\n    if (d.isie9mobile) d.isie9 = false;\n    d.isie7mobile = !d.isie9mobile && d.isie7 && /iemobile/i.test(_agent); //wp 7.0\n\n    d.ismozilla = \"MozAppearance\" in _style;\n\n    d.iswebkit = \"WebkitAppearance\" in _style;\n\n    d.ischrome = \"chrome\" in window;\n    d.ischrome38 = d.ischrome && \"touchAction\" in _style; // behavior changed in touch emulation    \n    d.ischrome22 = !d.ischrome38 && d.ischrome && d.haspointerlock;\n    d.ischrome26 = !d.ischrome38 && d.ischrome && \"transition\" in _style; // issue with transform detection (maintain prefix)\n\n    d.cantouch = \"ontouchstart\" in document.documentElement || \"ontouchstart\" in window; // with detection for Chrome Touch Emulation    \n    d.hasw3ctouch = (window.PointerEvent || false) && (navigator.MaxTouchPoints > 0 || navigator.msMaxTouchPoints > 0); //IE11 pointer events, following W3C Pointer Events spec\n    d.hasmstouch = !d.hasw3ctouch && (window.MSPointerEvent || false); // IE10 pointer events\n\n    d.ismac = /^mac$/i.test(_platform);\n\n    d.isios = d.cantouch && /iphone|ipad|ipod/i.test(_platform);\n    d.isios4 = d.isios && !(\"seal\" in Object);\n    d.isios7 = d.isios && \"webkitHidden\" in document; //iOS 7+\n    d.isios8 = d.isios && \"hidden\" in document; //iOS 8+\n\n    d.isandroid = /android/i.test(_agent);\n\n    d.haseventlistener = \"addEventListener\" in _el;\n\n    d.trstyle = false;\n    d.hastransform = false;\n    d.hastranslate3d = false;\n    d.transitionstyle = false;\n    d.hastransition = false;\n    d.transitionend = false;\n\n    var a;\n    var check = ['transform', 'msTransform', 'webkitTransform', 'MozTransform', 'OTransform'];\n    for (a = 0; a < check.length; a++) {\n      if (_style[check[a]] !== undefined) {\n        d.trstyle = check[a];\n        break;\n      }\n    }\n    d.hastransform = !!d.trstyle;\n    if (d.hastransform) {\n      _style[d.trstyle] = \"translate3d(1px,2px,3px)\";\n      d.hastranslate3d = /translate3d/.test(_style[d.trstyle]);\n    }\n\n    d.transitionstyle = false;\n    d.prefixstyle = '';\n    d.transitionend = false;\n    check = ['transition', 'webkitTransition', 'msTransition', 'MozTransition', 'OTransition', 'OTransition', 'KhtmlTransition'];\n    var prefix = ['', '-webkit-', '-ms-', '-moz-', '-o-', '-o', '-khtml-'];\n    var evs = ['transitionend', 'webkitTransitionEnd', 'msTransitionEnd', 'transitionend', 'otransitionend', 'oTransitionEnd', 'KhtmlTransitionEnd'];\n    for (a = 0; a < check.length; a++) {\n      if (check[a] in _style) {\n        d.transitionstyle = check[a];\n        d.prefixstyle = prefix[a];\n        d.transitionend = evs[a];\n        break;\n      }\n    }\n    if (d.ischrome26) {\n      // always use prefix\n      d.prefixstyle = prefix[1];\n    }\n\n    d.hastransition = d.transitionstyle;\n\n    function detectCursorGrab() {\n      var lst = ['grab', '-webkit-grab', '-moz-grab'];\n      if (d.ischrome && !d.ischrome38 || d.isie) lst = []; // force setting for IE returns false positive and chrome cursor bug\n      for (var a = 0; a < lst.length; a++) {\n        var p = lst[a];\n        _style.cursor = p;\n        if (_style.cursor == p) return p;\n      }\n      return 'url(//patriciaportfolio.googlecode.com/files/openhand.cur),n-resize'; // thank you google for custom cursor!\n    }\n    d.cursorgrabvalue = detectCursorGrab();\n\n    d.hasmousecapture = \"setCapture\" in _el;\n\n    d.hasMutationObserver = ClsMutationObserver !== false;\n\n    _el = null; //memory released\n\n    browserdetected = d;\n\n    return d;\n  };\n\n  var NiceScrollClass = function NiceScrollClass(myopt, me) {\n\n    var self = this;\n\n    this.version = '3.6.8';\n    this.name = 'nicescroll';\n\n    this.me = me;\n\n    this.opt = {\n      doc: $(\"body\"),\n      win: false\n    };\n\n    $.extend(this.opt, _globaloptions); // clone opts\n\n    // Options for internal use\n    this.opt.snapbackspeed = 80;\n\n    if (myopt || false) {\n      for (var a in self.opt) {\n        if (myopt[a] !== undefined) self.opt[a] = myopt[a];\n      }\n    }\n\n    if (self.opt.disablemutationobserver) ClsMutationObserver = false;\n\n    this.doc = self.opt.doc;\n    this.iddoc = this.doc && this.doc[0] ? this.doc[0].id || '' : '';\n    this.ispage = /^BODY|HTML/.test(self.opt.win ? self.opt.win[0].nodeName : this.doc[0].nodeName);\n    this.haswrapper = self.opt.win !== false;\n    this.win = self.opt.win || (this.ispage ? $(window) : this.doc);\n    this.docscroll = this.ispage && !this.haswrapper ? $(window) : this.win;\n    this.body = $(\"body\");\n    this.viewport = false;\n\n    this.isfixed = false;\n\n    this.iframe = false;\n    this.isiframe = this.doc[0].nodeName == 'IFRAME' && this.win[0].nodeName == 'IFRAME';\n\n    this.istextarea = this.win[0].nodeName == 'TEXTAREA';\n\n    this.forcescreen = false; //force to use screen position on events\n\n    this.canshowonmouseevent = self.opt.autohidemode != \"scroll\";\n\n    // Events jump table    \n    this.onmousedown = false;\n    this.onmouseup = false;\n    this.onmousemove = false;\n    this.onmousewheel = false;\n    this.onkeypress = false;\n    this.ongesturezoom = false;\n    this.onclick = false;\n\n    // Nicescroll custom events\n    this.onscrollstart = false;\n    this.onscrollend = false;\n    this.onscrollcancel = false;\n\n    this.onzoomin = false;\n    this.onzoomout = false;\n\n    // Let's start!  \n    this.view = false;\n    this.page = false;\n\n    this.scroll = {\n      x: 0,\n      y: 0\n    };\n    this.scrollratio = {\n      x: 0,\n      y: 0\n    };\n    this.cursorheight = 20;\n    this.scrollvaluemax = 0;\n\n    // http://dev.w3.org/csswg/css-writing-modes-3/#logical-to-physical\n    // http://dev.w3.org/csswg/css-writing-modes-3/#svg-writing-mode\n    if (this.opt.rtlmode == \"auto\") {\n      var target = this.win[0] == window ? this.body : this.win;\n      var writingMode = target.css(\"writing-mode\") || target.css(\"-webkit-writing-mode\") || target.css(\"-ms-writing-mode\") || target.css(\"-moz-writing-mode\");\n\n      if (writingMode == \"horizontal-tb\" || writingMode == \"lr-tb\" || writingMode == \"\") {\n        this.isrtlmode = target.css(\"direction\") == \"rtl\";\n        this.isvertical = false;\n      } else {\n        this.isrtlmode = writingMode == \"vertical-rl\" || writingMode == \"tb\" || writingMode == \"tb-rl\" || writingMode == \"rl-tb\";\n        this.isvertical = writingMode == \"vertical-rl\" || writingMode == \"tb\" || writingMode == \"tb-rl\";\n      }\n    } else {\n      this.isrtlmode = this.opt.rtlmode === true;\n      this.isvertical = false;\n    }\n    //    this.checkrtlmode = false;\n\n    this.scrollrunning = false;\n\n    this.scrollmom = false;\n\n    this.observer = false; // observer div changes\n    this.observerremover = false; // observer on parent for remove detection\n    this.observerbody = false; // observer on body for position change\n\n    do {\n      this.id = \"ascrail\" + ascrailcounter++;\n    } while (document.getElementById(this.id));\n\n    this.rail = false;\n    this.cursor = false;\n    this.cursorfreezed = false;\n    this.selectiondrag = false;\n\n    this.zoom = false;\n    this.zoomactive = false;\n\n    this.hasfocus = false;\n    this.hasmousefocus = false;\n\n    this.visibility = true;\n    this.railslocked = false; // locked by resize\n    this.locked = false; // prevent lost of locked status sets by user\n    this.hidden = false; // rails always hidden\n    this.cursoractive = true; // user can interact with cursors\n\n    this.wheelprevented = false; //prevent mousewheel event\n\n    this.overflowx = self.opt.overflowx;\n    this.overflowy = self.opt.overflowy;\n\n    this.nativescrollingarea = false;\n    this.checkarea = 0;\n\n    this.events = []; // event list for unbind\n\n    this.saved = {}; // style saved\n\n    this.delaylist = {};\n    this.synclist = {};\n\n    this.lastdeltax = 0;\n    this.lastdeltay = 0;\n\n    this.detected = getBrowserDetection();\n\n    var cap = $.extend({}, this.detected);\n\n    this.canhwscroll = cap.hastransform && self.opt.hwacceleration;\n    this.ishwscroll = this.canhwscroll && self.haswrapper;\n\n    if (!this.isrtlmode) {\n      this.hasreversehr = false;\n    } else if (this.isvertical) {\n      // RTL mode with reverse horizontal axis\n      this.hasreversehr = !(cap.iswebkit || cap.isie || cap.isie11);\n    } else {\n      this.hasreversehr = !(cap.iswebkit || cap.isie && !cap.isie10 && !cap.isie11);\n    }\n\n    this.istouchcapable = false; // desktop devices with touch screen support\n\n    //## Check WebKit-based desktop with touch support\n    //## + Firefox 18 nightly build (desktop) false positive (or desktop with touch support)\n\n    if (!cap.cantouch && (cap.hasw3ctouch || cap.hasmstouch)) {\n      // desktop device with multiple input\n      this.istouchcapable = true;\n    } else if (cap.cantouch && !cap.isios && !cap.isandroid && (cap.iswebkit || cap.ismozilla)) {\n      this.istouchcapable = true;\n      //      cap.cantouch = false; // parse normal desktop events\n    }\n\n    //## disable MouseLock API on user request\n    if (!self.opt.enablemouselockapi) {\n      cap.hasmousecapture = false;\n      cap.haspointerlock = false;\n    }\n\n    /* deprecated\n        this.delayed = function(name, fn, tm, lazy) {\n        };\n    */\n\n    /*\n        this.debounced = function(name, fn, tm) {\n    \t\tif (!self) return;\n          var dd = self.delaylist[name];\n          self.delaylist[name] = fn;\n          if (!dd) {\n            self.debouncedelayed =  setTimeout(function() {\n    \t\t\t\t\tif (!self) return;\n              var fn = self.delaylist[name];\n              self.delaylist[name] = false;\n              fn.call(self);\n            }, tm);\n          }\n        };\n    */\n\n    this.debounced = function (name, fn, tm) {\n      if (!self) return;\n      var dd = self.delaylist[name] || false;\n      if (!dd) {\n        fn.call(self);\n        self.delaylist[name] = {\n          h: setAnimationFrame(function () {\n            self.delaylist[name].fn.call(self);\n            self.delaylist[name] = false;\n          }, tm)\n        };\n      }\n      self.delaylist[name].fn = fn;\n    };\n\n    var _onsync = false;\n\n    this.synched = function (name, fn) {\n\n      function requestSync() {\n        if (_onsync) return;\n        setAnimationFrame(function () {\n          if (!self) return;\n          _onsync = false;\n          for (var nn in self.synclist) {\n            var fn = self.synclist[nn];\n            if (fn) fn.call(self);\n            self.synclist[nn] = false;\n          }\n        });\n        _onsync = true;\n      }\n\n      self.synclist[name] = fn;\n      requestSync();\n      return name;\n    };\n\n    this.unsynched = function (name) {\n      if (self.synclist[name]) self.synclist[name] = false;\n    };\n\n    this.css = function (el, pars) {\n      // save & set\n      for (var n in pars) {\n        self.saved.css.push([el, n, el.css(n)]);\n        el.css(n, pars[n]);\n      }\n    };\n\n    this.scrollTop = function (val) {\n      return val === undefined ? self.getScrollTop() : self.setScrollTop(val);\n    };\n\n    this.scrollLeft = function (val) {\n      return val === undefined ? self.getScrollLeft() : self.setScrollLeft(val);\n    };\n\n    // derived by by Dan Pupius www.pupius.net\n    var BezierClass = function BezierClass(st, ed, spd, p1, p2, p3, p4) {\n\n      this.st = st;\n      this.ed = ed;\n      this.spd = spd;\n\n      this.p1 = p1 || 0;\n      this.p2 = p2 || 1;\n      this.p3 = p3 || 0;\n      this.p4 = p4 || 1;\n\n      this.ts = new Date().getTime();\n      this.df = this.ed - this.st;\n    };\n    BezierClass.prototype = {\n      B2: function B2(t) {\n        return 3 * t * t * (1 - t);\n      },\n      B3: function B3(t) {\n        return 3 * t * (1 - t) * (1 - t);\n      },\n      B4: function B4(t) {\n        return (1 - t) * (1 - t) * (1 - t);\n      },\n      getNow: function getNow() {\n        var nw = new Date().getTime();\n        var pc = 1 - (nw - this.ts) / this.spd;\n        var bz = this.B2(pc) + this.B3(pc) + this.B4(pc);\n        return pc < 0 ? this.ed : this.st + Math.round(this.df * bz);\n      },\n      update: function update(ed, spd) {\n        this.st = this.getNow();\n        this.ed = ed;\n        this.spd = spd;\n        this.ts = new Date().getTime();\n        this.df = this.ed - this.st;\n        return this;\n      }\n    };\n\n    //derived from http://stackoverflow.com/questions/11236090/\n    function getMatrixValues() {\n      var tr = self.doc.css(cap.trstyle);\n      if (tr && tr.substr(0, 6) == \"matrix\") {\n        return tr.replace(/^.*\\((.*)\\)$/g, \"$1\").replace(/px/g, '').split(/, +/);\n      }\n      return false;\n    }\n\n    if (this.ishwscroll) {\n      // hw accelerated scroll\n      this.doc.translate = {\n        x: 0,\n        y: 0,\n        tx: \"0px\",\n        ty: \"0px\"\n      };\n\n      //this one can help to enable hw accel on ios6 http://indiegamr.com/ios6-html-hardware-acceleration-changes-and-how-to-fix-them/\n      if (cap.hastranslate3d && cap.isios) this.doc.css(\"-webkit-backface-visibility\", \"hidden\"); // prevent flickering http://stackoverflow.com/questions/3461441/      \n\n      this.getScrollTop = function (last) {\n        if (!last) {\n          var mtx = getMatrixValues();\n          if (mtx) return mtx.length == 16 ? -mtx[13] : -mtx[5]; //matrix3d 16 on IE10\n          if (self.timerscroll && self.timerscroll.bz) return self.timerscroll.bz.getNow();\n        }\n        return self.doc.translate.y;\n      };\n\n      this.getScrollLeft = function (last) {\n        if (!last) {\n          var mtx = getMatrixValues();\n          if (mtx) return mtx.length == 16 ? -mtx[12] : -mtx[4]; //matrix3d 16 on IE10\n          if (self.timerscroll && self.timerscroll.bh) return self.timerscroll.bh.getNow();\n        }\n        return self.doc.translate.x;\n      };\n\n      this.notifyScrollEvent = function (el) {\n        var e = document.createEvent(\"UIEvents\");\n        e.initUIEvent(\"scroll\", false, true, window, 1);\n        e.niceevent = true;\n        el.dispatchEvent(e);\n      };\n\n      var cxscrollleft = this.isrtlmode ? 1 : -1;\n\n      if (cap.hastranslate3d && self.opt.enabletranslate3d) {\n        this.setScrollTop = function (val, silent) {\n          self.doc.translate.y = val;\n          self.doc.translate.ty = val * -1 + \"px\";\n          self.doc.css(cap.trstyle, \"translate3d(\" + self.doc.translate.tx + \",\" + self.doc.translate.ty + \",0px)\");\n          if (!silent) self.notifyScrollEvent(self.win[0]);\n        };\n        this.setScrollLeft = function (val, silent) {\n          self.doc.translate.x = val;\n          self.doc.translate.tx = val * cxscrollleft + \"px\";\n          self.doc.css(cap.trstyle, \"translate3d(\" + self.doc.translate.tx + \",\" + self.doc.translate.ty + \",0px)\");\n          if (!silent) self.notifyScrollEvent(self.win[0]);\n        };\n      } else {\n        this.setScrollTop = function (val, silent) {\n          self.doc.translate.y = val;\n          self.doc.translate.ty = val * -1 + \"px\";\n          self.doc.css(cap.trstyle, \"translate(\" + self.doc.translate.tx + \",\" + self.doc.translate.ty + \")\");\n          if (!silent) self.notifyScrollEvent(self.win[0]);\n        };\n        this.setScrollLeft = function (val, silent) {\n          self.doc.translate.x = val;\n          self.doc.translate.tx = val * cxscrollleft + \"px\";\n          self.doc.css(cap.trstyle, \"translate(\" + self.doc.translate.tx + \",\" + self.doc.translate.ty + \")\");\n          if (!silent) self.notifyScrollEvent(self.win[0]);\n        };\n      }\n    } else {\n      // native scroll\n      this.getScrollTop = function () {\n        return self.docscroll.scrollTop();\n      };\n      this.setScrollTop = function (val) {\n        return setTimeout(function () {\n          self && self.docscroll.scrollTop(val);\n        }, 1);\n      };\n      this.getScrollLeft = function () {\n        var val;\n        if (!self.hasreversehr) {\n          val = self.docscroll.scrollLeft();\n        } else if (self.detected.ismozilla) {\n          val = self.page.maxw - Math.abs(self.docscroll.scrollLeft());\n        } else {\n          val = self.page.maxw - self.docscroll.scrollLeft();\n        }\n        return val;\n      };\n      this.setScrollLeft = function (val) {\n        return setTimeout(function () {\n          if (!self) return;\n          if (self.hasreversehr) {\n            if (self.detected.ismozilla) {\n              val = -(self.page.maxw - val);\n            } else {\n              val = self.page.maxw - val;\n            }\n          }\n          return self.docscroll.scrollLeft(val);\n        }, 1);\n      };\n    }\n\n    this.getTarget = function (e) {\n      if (!e) return false;\n      if (e.target) return e.target;\n      if (e.srcElement) return e.srcElement;\n      return false;\n    };\n\n    this.hasParent = function (e, id) {\n      if (!e) return false;\n      var el = e.target || e.srcElement || e || false;\n      while (el && el.id != id) {\n        el = el.parentNode || false;\n      }\n      return el !== false;\n    };\n\n    function getZIndex() {\n      var dom = self.win;\n      if (\"zIndex\" in dom) return dom.zIndex(); // use jQuery UI method when available\n      while (dom.length > 0) {\n        if (dom[0].nodeType == 9) return false;\n        var zi = dom.css('zIndex');\n        if (!isNaN(zi) && zi != 0) return parseInt(zi);\n        dom = dom.parent();\n      }\n      return false;\n    }\n\n    //inspired by http://forum.jquery.com/topic/width-includes-border-width-when-set-to-thin-medium-thick-in-ie\n    var _convertBorderWidth = {\n      \"thin\": 1,\n      \"medium\": 3,\n      \"thick\": 5\n    };\n\n    function getWidthToPixel(dom, prop, chkheight) {\n      var wd = dom.css(prop);\n      var px = parseFloat(wd);\n      if (isNaN(px)) {\n        px = _convertBorderWidth[wd] || 0;\n        var brd = px == 3 ? chkheight ? self.win.outerHeight() - self.win.innerHeight() : self.win.outerWidth() - self.win.innerWidth() : 1; //DON'T TRUST CSS\n        if (self.isie8 && px) px += 1;\n        return brd ? px : 0;\n      }\n      return px;\n    }\n\n    this.getDocumentScrollOffset = function () {\n      return {\n        top: window.pageYOffset || document.documentElement.scrollTop,\n        left: window.pageXOffset || document.documentElement.scrollLeft\n      };\n    };\n\n    this.getOffset = function () {\n      if (self.isfixed) {\n        var ofs = self.win.offset(); // fix Chrome auto issue (when right/bottom props only)\n        var scrl = self.getDocumentScrollOffset();\n        ofs.top -= scrl.top;\n        ofs.left -= scrl.left;\n        return ofs;\n      }\n      var ww = self.win.offset();\n      if (!self.viewport) return ww;\n      var vp = self.viewport.offset();\n      return {\n        top: ww.top - vp.top, // + self.viewport.scrollTop(),\n        left: ww.left - vp.left // + self.viewport.scrollLeft()\n      };\n    };\n\n    this.updateScrollBar = function (len) {\n      var pos, off;\n      if (self.ishwscroll) {\n        self.rail.css({ //**\n          height: self.win.innerHeight() - (self.opt.railpadding.top + self.opt.railpadding.bottom)\n        });\n        if (self.railh) self.railh.css({ //**\n          width: self.win.innerWidth() - (self.opt.railpadding.left + self.opt.railpadding.right)\n        });\n      } else {\n        var wpos = self.getOffset();\n        pos = {\n          top: wpos.top,\n          left: wpos.left - (self.opt.railpadding.left + self.opt.railpadding.right)\n        };\n        pos.top += getWidthToPixel(self.win, 'border-top-width', true);\n        pos.left += self.rail.align ? self.win.outerWidth() - getWidthToPixel(self.win, 'border-right-width') - self.rail.width : getWidthToPixel(self.win, 'border-left-width');\n\n        off = self.opt.railoffset;\n        if (off) {\n          if (off.top) pos.top += off.top;\n          if (off.left) pos.left += off.left;\n        }\n\n        if (!self.railslocked) self.rail.css({\n          top: pos.top,\n          left: pos.left,\n          height: (len ? len.h : self.win.innerHeight()) - (self.opt.railpadding.top + self.opt.railpadding.bottom)\n        });\n\n        if (self.zoom) {\n          self.zoom.css({\n            top: pos.top + 1,\n            left: self.rail.align == 1 ? pos.left - 20 : pos.left + self.rail.width + 4\n          });\n        }\n\n        if (self.railh && !self.railslocked) {\n          pos = {\n            top: wpos.top,\n            left: wpos.left\n          };\n          off = self.opt.railhoffset;\n          if (off) {\n            if (off.top) pos.top += off.top;\n            if (off.left) pos.left += off.left;\n          }\n          var y = self.railh.align ? pos.top + getWidthToPixel(self.win, 'border-top-width', true) + self.win.innerHeight() - self.railh.height : pos.top + getWidthToPixel(self.win, 'border-top-width', true);\n          var x = pos.left + getWidthToPixel(self.win, 'border-left-width');\n          self.railh.css({\n            top: y - (self.opt.railpadding.top + self.opt.railpadding.bottom),\n            left: x,\n            width: self.railh.width\n          });\n        }\n      }\n    };\n\n    this.doRailClick = function (e, dbl, hr) {\n      var fn, pg, cur, pos;\n\n      if (self.railslocked) return;\n      self.cancelEvent(e);\n\n      if (dbl) {\n        fn = hr ? self.doScrollLeft : self.doScrollTop;\n        cur = hr ? (e.pageX - self.railh.offset().left - self.cursorwidth / 2) * self.scrollratio.x : (e.pageY - self.rail.offset().top - self.cursorheight / 2) * self.scrollratio.y;\n        fn(cur);\n      } else {\n        fn = hr ? self.doScrollLeftBy : self.doScrollBy;\n        cur = hr ? self.scroll.x : self.scroll.y;\n        pos = hr ? e.pageX - self.railh.offset().left : e.pageY - self.rail.offset().top;\n        pg = hr ? self.view.w : self.view.h;\n        fn(cur >= pos ? pg : -pg); //   (cur >= pos) ? fn(pg): fn(-pg);\n      }\n    };\n\n    self.hasanimationframe = setAnimationFrame;\n    self.hascancelanimationframe = clearAnimationFrame;\n\n    if (!self.hasanimationframe) {\n      setAnimationFrame = function setAnimationFrame(fn) {\n        return setTimeout(fn, 15 - Math.floor(+new Date() / 1000) % 16);\n      }; // 1000/60)};\n      clearAnimationFrame = clearTimeout;\n    } else if (!self.hascancelanimationframe) clearAnimationFrame = function clearAnimationFrame() {\n      self.cancelAnimationFrame = true;\n    };\n\n    this.init = function () {\n\n      self.saved.css = [];\n\n      if (cap.isie7mobile) return true; // SORRY, DO NOT WORK!\n      if (cap.isoperamini) return true; // SORRY, DO NOT WORK!\n\n      var _touchaction = cap.isie10 ? '-ms-touch-action' : 'touch-action';\n      if (cap.hasmstouch) self.css(self.ispage ? $(\"html\") : self.win, {\n        _touchaction: 'none'\n      });\n\n      var _scrollyhidden = cap.ismodernie || cap.isie10 ? { '-ms-overflow-style': 'none' } : { 'overflow-y': 'hidden' }; // IE is always a world apart!\n\n      self.zindex = \"auto\";\n      if (!self.ispage && self.opt.zindex == \"auto\") {\n        self.zindex = getZIndex() || \"auto\";\n      } else {\n        self.zindex = self.opt.zindex;\n      }\n\n      if (!self.ispage && self.zindex != \"auto\" && self.zindex > globalmaxzindex) {\n        globalmaxzindex = self.zindex;\n      }\n\n      if (self.isie && self.zindex == 0 && self.opt.zindex == \"auto\") {\n        // fix IE auto == 0\n        self.zindex = \"auto\";\n      }\n\n      if (!self.ispage || !cap.cantouch && !cap.isieold && !cap.isie9mobile) {\n\n        var cont = self.docscroll;\n        if (self.ispage) cont = self.haswrapper ? self.win : self.doc;\n\n        if (!cap.isie9mobile) self.css(cont, _scrollyhidden);\n\n        if (self.ispage && cap.isie7) {\n          if (self.doc[0].nodeName == 'BODY') self.css($(\"html\"), {\n            'overflow-y': 'hidden'\n          }); //IE7 double scrollbar issue\n          else if (self.doc[0].nodeName == 'HTML') self.css($(\"body\"), _scrollyhidden); //IE7 double scrollbar issue\n        }\n\n        if (cap.isios && !self.ispage && !self.haswrapper) self.css($(\"body\"), {\n          \"-webkit-overflow-scrolling\": \"touch\"\n        }); //force hw acceleration\n\n        var cursor = $(document.createElement('div'));\n        cursor.css({\n          position: \"relative\",\n          top: 0,\n          \"float\": \"right\",\n          width: self.opt.cursorwidth,\n          height: 0,\n          'background-color': self.opt.cursorcolor,\n          border: self.opt.cursorborder,\n          'background-clip': 'padding-box',\n          '-webkit-border-radius': self.opt.cursorborderradius,\n          '-moz-border-radius': self.opt.cursorborderradius,\n          'border-radius': self.opt.cursorborderradius\n        });\n\n        cursor.hborder = parseFloat(cursor.outerHeight() - cursor.innerHeight());\n\n        cursor.addClass('nicescroll-cursors');\n\n        self.cursor = cursor;\n\n        var rail = $(document.createElement('div'));\n        rail.attr('id', self.id);\n        rail.addClass('nicescroll-rails nicescroll-rails-vr');\n\n        var v,\n            a,\n            kp = [\"left\", \"right\", \"top\", \"bottom\"]; //**\n        for (var n in kp) {\n          a = kp[n];\n          v = self.opt.railpadding[a];\n          v ? rail.css(\"padding-\" + a, v + \"px\") : self.opt.railpadding[a] = 0;\n        }\n\n        rail.append(cursor);\n\n        rail.width = Math.max(parseFloat(self.opt.cursorwidth), cursor.outerWidth());\n        rail.css({\n          width: rail.width + \"px\",\n          zIndex: self.zindex,\n          background: self.opt.background,\n          cursor: \"default\"\n        });\n\n        rail.visibility = true;\n        rail.scrollable = true;\n\n        rail.align = self.opt.railalign == \"left\" ? 0 : 1;\n\n        self.rail = rail;\n\n        self.rail.drag = false;\n\n        var zoom = false;\n        if (self.opt.boxzoom && !self.ispage && !cap.isieold) {\n          zoom = document.createElement('div');\n\n          self.bind(zoom, \"click\", self.doZoom);\n          self.bind(zoom, \"mouseenter\", function () {\n            self.zoom.css('opacity', self.opt.cursoropacitymax);\n          });\n          self.bind(zoom, \"mouseleave\", function () {\n            self.zoom.css('opacity', self.opt.cursoropacitymin);\n          });\n\n          self.zoom = $(zoom);\n          self.zoom.css({\n            cursor: \"pointer\",\n            zIndex: self.zindex,\n            backgroundImage: 'url(' + self.opt.scriptpath + 'zoomico.png)',\n            height: 18,\n            width: 18,\n            backgroundPosition: '0px 0px'\n          });\n          if (self.opt.dblclickzoom) self.bind(self.win, \"dblclick\", self.doZoom);\n          if (cap.cantouch && self.opt.gesturezoom) {\n            self.ongesturezoom = function (e) {\n              if (e.scale > 1.5) self.doZoomIn(e);\n              if (e.scale < 0.8) self.doZoomOut(e);\n              return self.cancelEvent(e);\n            };\n            self.bind(self.win, \"gestureend\", self.ongesturezoom);\n          }\n        }\n\n        // init HORIZ\n\n        self.railh = false;\n        var railh;\n\n        if (self.opt.horizrailenabled) {\n\n          self.css(cont, {\n            overflowX: 'hidden'\n          });\n\n          var cursor = $(document.createElement('div'));\n          cursor.css({\n            position: \"absolute\",\n            top: 0,\n            height: self.opt.cursorwidth,\n            width: 0,\n            backgroundColor: self.opt.cursorcolor,\n            border: self.opt.cursorborder,\n            backgroundClip: 'padding-box',\n            '-webkit-border-radius': self.opt.cursorborderradius,\n            '-moz-border-radius': self.opt.cursorborderradius,\n            'border-radius': self.opt.cursorborderradius\n          });\n\n          if (cap.isieold) cursor.css('overflow', 'hidden'); //IE6 horiz scrollbar issue\n\n          cursor.wborder = parseFloat(cursor.outerWidth() - cursor.innerWidth());\n\n          cursor.addClass('nicescroll-cursors');\n\n          self.cursorh = cursor;\n\n          railh = $(document.createElement('div'));\n          railh.attr('id', self.id + '-hr');\n          railh.addClass('nicescroll-rails nicescroll-rails-hr');\n          railh.height = Math.max(parseFloat(self.opt.cursorwidth), cursor.outerHeight());\n          railh.css({\n            height: railh.height + \"px\",\n            'zIndex': self.zindex,\n            \"background\": self.opt.background\n          });\n\n          railh.append(cursor);\n\n          railh.visibility = true;\n          railh.scrollable = true;\n\n          railh.align = self.opt.railvalign == \"top\" ? 0 : 1;\n\n          self.railh = railh;\n\n          self.railh.drag = false;\n        }\n\n        //        \n\n        if (self.ispage) {\n          rail.css({\n            position: \"fixed\",\n            top: 0,\n            height: \"100%\"\n          });\n          rail.align ? rail.css({\n            right: 0\n          }) : rail.css({\n            left: 0\n          });\n          self.body.append(rail);\n          if (self.railh) {\n            railh.css({\n              position: \"fixed\",\n              left: 0,\n              width: \"100%\"\n            });\n            railh.align ? railh.css({\n              bottom: 0\n            }) : railh.css({\n              top: 0\n            });\n            self.body.append(railh);\n          }\n        } else {\n          if (self.ishwscroll) {\n            if (self.win.css('position') == 'static') self.css(self.win, {\n              'position': 'relative'\n            });\n            var bd = self.win[0].nodeName == 'HTML' ? self.body : self.win;\n            $(bd).scrollTop(0).scrollLeft(0); // fix rail position if content already scrolled\n            if (self.zoom) {\n              self.zoom.css({\n                position: \"absolute\",\n                top: 1,\n                right: 0,\n                \"margin-right\": rail.width + 4\n              });\n              bd.append(self.zoom);\n            }\n            rail.css({\n              position: \"absolute\",\n              top: 0\n            });\n            rail.align ? rail.css({\n              right: 0\n            }) : rail.css({\n              left: 0\n            });\n            bd.append(rail);\n            if (railh) {\n              railh.css({\n                position: \"absolute\",\n                left: 0,\n                bottom: 0\n              });\n              railh.align ? railh.css({\n                bottom: 0\n              }) : railh.css({\n                top: 0\n              });\n              bd.append(railh);\n            }\n          } else {\n            self.isfixed = self.win.css(\"position\") == \"fixed\";\n            var rlpos = self.isfixed ? \"fixed\" : \"absolute\";\n\n            if (!self.isfixed) self.viewport = self.getViewport(self.win[0]);\n            if (self.viewport) {\n              self.body = self.viewport;\n              if (/fixed|absolute/.test(self.viewport.css(\"position\")) == false) self.css(self.viewport, {\n                \"position\": \"relative\"\n              });\n            }\n\n            rail.css({\n              position: rlpos\n            });\n            if (self.zoom) self.zoom.css({\n              position: rlpos\n            });\n            self.updateScrollBar();\n            self.body.append(rail);\n            if (self.zoom) self.body.append(self.zoom);\n            if (self.railh) {\n              railh.css({\n                position: rlpos\n              });\n              self.body.append(railh);\n            }\n          }\n\n          if (cap.isios) self.css(self.win, {\n            '-webkit-tap-highlight-color': 'rgba(0,0,0,0)',\n            '-webkit-touch-callout': 'none'\n          }); // prevent grey layer on click\n\n          if (cap.isie && self.opt.disableoutline) self.win.attr(\"hideFocus\", \"true\"); // IE, prevent dotted rectangle on focused div\n          if (cap.iswebkit && self.opt.disableoutline) self.win.css('outline', 'none'); // Webkit outline\n          //if (cap.isopera&&self.opt.disableoutline) self.win.css({\"outline\":\"0\"});  // Opera 12- to test [TODO]\n        }\n\n        if (self.opt.autohidemode === false) {\n          self.autohidedom = false;\n          self.rail.css({\n            opacity: self.opt.cursoropacitymax\n          });\n          if (self.railh) self.railh.css({\n            opacity: self.opt.cursoropacitymax\n          });\n        } else if (self.opt.autohidemode === true || self.opt.autohidemode === \"leave\") {\n          self.autohidedom = $().add(self.rail);\n          if (cap.isie8) self.autohidedom = self.autohidedom.add(self.cursor);\n          if (self.railh) self.autohidedom = self.autohidedom.add(self.railh);\n          if (self.railh && cap.isie8) self.autohidedom = self.autohidedom.add(self.cursorh);\n        } else if (self.opt.autohidemode == \"scroll\") {\n          self.autohidedom = $().add(self.rail);\n          if (self.railh) self.autohidedom = self.autohidedom.add(self.railh);\n        } else if (self.opt.autohidemode == \"cursor\") {\n          self.autohidedom = $().add(self.cursor);\n          if (self.railh) self.autohidedom = self.autohidedom.add(self.cursorh);\n        } else if (self.opt.autohidemode == \"hidden\") {\n          self.autohidedom = false;\n          self.hide();\n          self.railslocked = false;\n        }\n\n        if (cap.isie9mobile) {\n\n          self.scrollmom = new ScrollMomentumClass2D(self);\n\n          self.onmangotouch = function () {\n            var py = self.getScrollTop();\n            var px = self.getScrollLeft();\n\n            if (py == self.scrollmom.lastscrolly && px == self.scrollmom.lastscrollx) return true;\n\n            var dfy = py - self.mangotouch.sy;\n            var dfx = px - self.mangotouch.sx;\n            var df = Math.round(Math.sqrt(Math.pow(dfx, 2) + Math.pow(dfy, 2)));\n            if (df == 0) return;\n\n            var dry = dfy < 0 ? -1 : 1;\n            var drx = dfx < 0 ? -1 : 1;\n\n            var tm = +new Date();\n            if (self.mangotouch.lazy) clearTimeout(self.mangotouch.lazy);\n\n            if (tm - self.mangotouch.tm > 80 || self.mangotouch.dry != dry || self.mangotouch.drx != drx) {\n              self.scrollmom.stop();\n              self.scrollmom.reset(px, py);\n              self.mangotouch.sy = py;\n              self.mangotouch.ly = py;\n              self.mangotouch.sx = px;\n              self.mangotouch.lx = px;\n              self.mangotouch.dry = dry;\n              self.mangotouch.drx = drx;\n              self.mangotouch.tm = tm;\n            } else {\n\n              self.scrollmom.stop();\n              self.scrollmom.update(self.mangotouch.sx - dfx, self.mangotouch.sy - dfy);\n              self.mangotouch.tm = tm;\n\n              var ds = Math.max(Math.abs(self.mangotouch.ly - py), Math.abs(self.mangotouch.lx - px));\n              self.mangotouch.ly = py;\n              self.mangotouch.lx = px;\n\n              if (ds > 2) {\n                self.mangotouch.lazy = setTimeout(function () {\n                  self.mangotouch.lazy = false;\n                  self.mangotouch.dry = 0;\n                  self.mangotouch.drx = 0;\n                  self.mangotouch.tm = 0;\n                  self.scrollmom.doMomentum(30);\n                }, 100);\n              }\n            }\n          };\n\n          var top = self.getScrollTop();\n          var lef = self.getScrollLeft();\n          self.mangotouch = {\n            sy: top,\n            ly: top,\n            dry: 0,\n            sx: lef,\n            lx: lef,\n            drx: 0,\n            lazy: false,\n            tm: 0\n          };\n\n          self.bind(self.docscroll, \"scroll\", self.onmangotouch);\n        } else {\n\n          if (cap.cantouch || self.istouchcapable || self.opt.touchbehavior || cap.hasmstouch) {\n\n            self.scrollmom = new ScrollMomentumClass2D(self);\n\n            self.ontouchstart = function (e) {\n              if (e.pointerType && e.pointerType != 2 && e.pointerType != \"touch\") return false;\n\n              self.hasmoving = false;\n\n              if (!self.railslocked) {\n                var tg;\n                if (cap.hasmstouch) {\n                  tg = e.target ? e.target : false;\n                  while (tg) {\n                    var nc = $(tg).getNiceScroll();\n                    if (nc.length > 0 && nc[0].me == self.me) break;\n                    if (nc.length > 0) return false;\n                    if (tg.nodeName == 'DIV' && tg.id == self.id) break;\n                    tg = tg.parentNode ? tg.parentNode : false;\n                  }\n                }\n\n                self.cancelScroll();\n\n                tg = self.getTarget(e);\n\n                if (tg) {\n                  var skp = /INPUT/i.test(tg.nodeName) && /range/i.test(tg.type);\n                  if (skp) return self.stopPropagation(e);\n                }\n\n                if (!(\"clientX\" in e) && \"changedTouches\" in e) {\n                  e.clientX = e.changedTouches[0].clientX;\n                  e.clientY = e.changedTouches[0].clientY;\n                }\n\n                if (self.forcescreen) {\n                  var le = e;\n                  e = {\n                    \"original\": e.original ? e.original : e\n                  };\n                  e.clientX = le.screenX;\n                  e.clientY = le.screenY;\n                }\n\n                self.rail.drag = {\n                  x: e.clientX,\n                  y: e.clientY,\n                  sx: self.scroll.x,\n                  sy: self.scroll.y,\n                  st: self.getScrollTop(),\n                  sl: self.getScrollLeft(),\n                  pt: 2,\n                  dl: false\n                };\n\n                if (self.ispage || !self.opt.directionlockdeadzone) {\n                  self.rail.drag.dl = \"f\";\n                } else {\n\n                  var view = {\n                    w: $(window).width(),\n                    h: $(window).height()\n                  };\n\n                  var page = {\n                    w: Math.max(document.body.scrollWidth, document.documentElement.scrollWidth),\n                    h: Math.max(document.body.scrollHeight, document.documentElement.scrollHeight)\n                  };\n\n                  var maxh = Math.max(0, page.h - view.h);\n                  var maxw = Math.max(0, page.w - view.w);\n\n                  if (!self.rail.scrollable && self.railh.scrollable) self.rail.drag.ck = maxh > 0 ? \"v\" : false;else if (self.rail.scrollable && !self.railh.scrollable) self.rail.drag.ck = maxw > 0 ? \"h\" : false;else self.rail.drag.ck = false;\n                  if (!self.rail.drag.ck) self.rail.drag.dl = \"f\";\n                }\n\n                if (self.opt.touchbehavior && self.isiframe && cap.isie) {\n                  var wp = self.win.position();\n                  self.rail.drag.x += wp.left;\n                  self.rail.drag.y += wp.top;\n                }\n\n                self.hasmoving = false;\n                self.lastmouseup = false;\n                self.scrollmom.reset(e.clientX, e.clientY);\n\n                if (!cap.cantouch && !this.istouchcapable && !e.pointerType) {\n\n                  var ip = tg ? /INPUT|SELECT|TEXTAREA/i.test(tg.nodeName) : false;\n                  if (!ip) {\n                    if (!self.ispage && cap.hasmousecapture) tg.setCapture();\n                    if (self.opt.touchbehavior) {\n                      if (tg.onclick && !(tg._onclick || false)) {\n                        // intercept DOM0 onclick event\n                        tg._onclick = tg.onclick;\n                        tg.onclick = function (e) {\n                          if (self.hasmoving) return false;\n                          tg._onclick.call(this, e);\n                        };\n                      }\n                      return self.cancelEvent(e);\n                    }\n                    return self.stopPropagation(e);\n                  }\n\n                  if (/SUBMIT|CANCEL|BUTTON/i.test($(tg).attr('type'))) {\n                    pc = {\n                      \"tg\": tg,\n                      \"click\": false\n                    };\n                    self.preventclick = pc;\n                  }\n                }\n              }\n            };\n\n            self.ontouchend = function (e) {\n              if (!self.rail.drag) return true;\n              if (self.rail.drag.pt == 2) {\n                if (e.pointerType && e.pointerType != 2 && e.pointerType != \"touch\") return false;\n\n                self.scrollmom.doMomentum();\n                self.rail.drag = false;\n                if (self.hasmoving) {\n                  self.lastmouseup = true;\n                  self.hideCursor();\n                  if (cap.hasmousecapture) document.releaseCapture();\n                  if (!cap.cantouch) return self.cancelEvent(e);\n                }\n              } else if (self.rail.drag.pt == 1) {\n                return self.onmouseup(e);\n              }\n            };\n\n            var moveneedoffset = self.opt.touchbehavior && self.isiframe && !cap.hasmousecapture;\n\n            self.ontouchmove = function (e, byiframe) {\n\n              if (!self.rail.drag) return false;\n\n              if (e.targetTouches && self.opt.preventmultitouchscrolling) {\n                if (e.targetTouches.length > 1) return false; // multitouch\n              }\n\n              if (e.pointerType && e.pointerType != 2 && e.pointerType != \"touch\") return false;\n\n              if (self.rail.drag.pt == 2) {\n                if (cap.cantouch && cap.isios && e.original === undefined) return true; // prevent ios \"ghost\" events by clickable elements\n\n                self.hasmoving = true;\n\n                if (self.preventclick && !self.preventclick.click) {\n                  self.preventclick.click = self.preventclick.tg.onclick || false;\n                  self.preventclick.tg.onclick = self.onpreventclick;\n                }\n\n                var ev = $.extend({\n                  \"original\": e\n                }, e);\n                e = ev;\n\n                if (\"changedTouches\" in e) {\n                  e.clientX = e.changedTouches[0].clientX;\n                  e.clientY = e.changedTouches[0].clientY;\n                }\n\n                if (self.forcescreen) {\n                  var le = e;\n                  e = {\n                    \"original\": e.original ? e.original : e\n                  };\n                  e.clientX = le.screenX;\n                  e.clientY = le.screenY;\n                }\n\n                var ofy, ofx;\n                ofx = ofy = 0;\n\n                if (moveneedoffset && !byiframe) {\n                  var wp = self.win.position();\n                  ofx = -wp.left;\n                  ofy = -wp.top;\n                }\n\n                var fy = e.clientY + ofy;\n                var my = fy - self.rail.drag.y;\n                var fx = e.clientX + ofx;\n                var mx = fx - self.rail.drag.x;\n\n                var ny = self.rail.drag.st - my;\n\n                if (self.ishwscroll && self.opt.bouncescroll) {\n                  if (ny < 0) {\n                    ny = Math.round(ny / 2);\n                    //                    fy = 0;\n                  } else if (ny > self.page.maxh) {\n                    ny = self.page.maxh + Math.round((ny - self.page.maxh) / 2);\n                    //                    fy = 0;\n                  }\n                } else {\n                  if (ny < 0) {\n                    ny = 0;\n                    fy = 0;\n                  }\n                  if (ny > self.page.maxh) {\n                    ny = self.page.maxh;\n                    fy = 0;\n                  }\n                }\n\n                var nx;\n                if (self.railh && self.railh.scrollable) {\n                  nx = self.isrtlmode ? mx - self.rail.drag.sl : self.rail.drag.sl - mx;\n\n                  if (self.ishwscroll && self.opt.bouncescroll) {\n                    if (nx < 0) {\n                      nx = Math.round(nx / 2);\n                      //                      fx = 0;\n                    } else if (nx > self.page.maxw) {\n                      nx = self.page.maxw + Math.round((nx - self.page.maxw) / 2);\n                      //                      fx = 0;\n                    }\n                  } else {\n                    if (nx < 0) {\n                      nx = 0;\n                      fx = 0;\n                    }\n                    if (nx > self.page.maxw) {\n                      nx = self.page.maxw;\n                      fx = 0;\n                    }\n                  }\n                }\n\n                var grabbed = false;\n                if (self.rail.drag.dl) {\n                  grabbed = true;\n                  if (self.rail.drag.dl == \"v\") nx = self.rail.drag.sl;else if (self.rail.drag.dl == \"h\") ny = self.rail.drag.st;\n                } else {\n                  var ay = Math.abs(my);\n                  var ax = Math.abs(mx);\n                  var dz = self.opt.directionlockdeadzone;\n                  if (self.rail.drag.ck == \"v\") {\n                    if (ay > dz && ax <= ay * 0.3) {\n                      self.rail.drag = false;\n                      return true;\n                    } else if (ax > dz) {\n                      self.rail.drag.dl = \"f\";\n                      $(\"body\").scrollTop($(\"body\").scrollTop()); // stop iOS native scrolling (when active javascript has blocked)\n                    }\n                  } else if (self.rail.drag.ck == \"h\") {\n                    if (ax > dz && ay <= ax * 0.3) {\n                      self.rail.drag = false;\n                      return true;\n                    } else if (ay > dz) {\n                      self.rail.drag.dl = \"f\";\n                      $(\"body\").scrollLeft($(\"body\").scrollLeft()); // stop iOS native scrolling (when active javascript has blocked)\n                    }\n                  }\n                }\n\n                self.synched(\"touchmove\", function () {\n                  if (self.rail.drag && self.rail.drag.pt == 2) {\n                    if (self.prepareTransition) self.prepareTransition(0);\n                    if (self.rail.scrollable) self.setScrollTop(ny);\n                    self.scrollmom.update(fx, fy);\n                    if (self.railh && self.railh.scrollable) {\n                      self.setScrollLeft(nx);\n                      self.showCursor(ny, nx);\n                    } else {\n                      self.showCursor(ny);\n                    }\n                    if (cap.isie10) document.selection.clear();\n                  }\n                });\n\n                if (cap.ischrome && self.istouchcapable) grabbed = false; //chrome touch emulation doesn't like!\n                if (grabbed) return self.cancelEvent(e);\n              } else if (self.rail.drag.pt == 1) {\n                // drag on cursor\n                return self.onmousemove(e);\n              }\n            };\n          }\n\n          self.onmousedown = function (e, hronly) {\n            if (self.rail.drag && self.rail.drag.pt != 1) return;\n            if (self.railslocked) return self.cancelEvent(e);\n            self.cancelScroll();\n            self.rail.drag = {\n              x: e.clientX,\n              y: e.clientY,\n              sx: self.scroll.x,\n              sy: self.scroll.y,\n              pt: 1,\n              hr: !!hronly\n            };\n            var tg = self.getTarget(e);\n            if (!self.ispage && cap.hasmousecapture) tg.setCapture();\n            if (self.isiframe && !cap.hasmousecapture) {\n              self.saved.csspointerevents = self.doc.css(\"pointer-events\");\n              self.css(self.doc, {\n                \"pointer-events\": \"none\"\n              });\n            }\n            self.hasmoving = false;\n            return self.cancelEvent(e);\n          };\n\n          self.onmouseup = function (e) {\n            if (self.rail.drag) {\n              if (self.rail.drag.pt != 1) return true;\n\n              if (cap.hasmousecapture) document.releaseCapture();\n              if (self.isiframe && !cap.hasmousecapture) self.doc.css(\"pointer-events\", self.saved.csspointerevents);\n              self.rail.drag = false;\n              //if (!self.rail.active) self.hideCursor();\n              if (self.hasmoving) self.triggerScrollEnd(); // TODO - check &&!self.scrollrunning\n              return self.cancelEvent(e);\n            }\n          };\n\n          self.onmousemove = function (e) {\n            if (self.rail.drag) {\n              if (self.rail.drag.pt != 1) return;\n\n              if (cap.ischrome && e.which == 0) return self.onmouseup(e);\n\n              self.cursorfreezed = true;\n              self.hasmoving = true;\n\n              if (self.rail.drag.hr) {\n                self.scroll.x = self.rail.drag.sx + (e.clientX - self.rail.drag.x);\n                if (self.scroll.x < 0) self.scroll.x = 0;\n                var mw = self.scrollvaluemaxw;\n                if (self.scroll.x > mw) self.scroll.x = mw;\n              } else {\n                self.scroll.y = self.rail.drag.sy + (e.clientY - self.rail.drag.y);\n                if (self.scroll.y < 0) self.scroll.y = 0;\n                var my = self.scrollvaluemax;\n                if (self.scroll.y > my) self.scroll.y = my;\n              }\n\n              self.synched('mousemove', function () {\n                if (self.rail.drag && self.rail.drag.pt == 1) {\n                  self.showCursor();\n                  if (self.rail.drag.hr) {\n                    if (self.hasreversehr) {\n                      self.doScrollLeft(self.scrollvaluemaxw - Math.round(self.scroll.x * self.scrollratio.x), self.opt.cursordragspeed);\n                    } else {\n                      self.doScrollLeft(Math.round(self.scroll.x * self.scrollratio.x), self.opt.cursordragspeed);\n                    }\n                  } else self.doScrollTop(Math.round(self.scroll.y * self.scrollratio.y), self.opt.cursordragspeed);\n                }\n              });\n\n              return self.cancelEvent(e);\n            } else {\n              self.checkarea = 0;\n            }\n          };\n\n          if (cap.cantouch || self.opt.touchbehavior) {\n\n            self.onpreventclick = function (e) {\n              if (self.preventclick) {\n                self.preventclick.tg.onclick = self.preventclick.click;\n                self.preventclick = false;\n                return self.cancelEvent(e);\n              }\n            };\n\n            self.bind(self.win, \"mousedown\", self.ontouchstart); // control content dragging\n\n            self.onclick = cap.isios ? false : function (e) {\n              // it needs to check IE11 ???\n              if (self.lastmouseup) {\n                self.lastmouseup = false;\n                return self.cancelEvent(e);\n              } else {\n                return true;\n              }\n            };\n\n            if (self.opt.grabcursorenabled && cap.cursorgrabvalue) {\n              self.css(self.ispage ? self.doc : self.win, {\n                'cursor': cap.cursorgrabvalue\n              });\n              self.css(self.rail, {\n                'cursor': cap.cursorgrabvalue\n              });\n            }\n          } else {\n\n            var checkSelectionScroll = function checkSelectionScroll(e) {\n              if (!self.selectiondrag) return;\n\n              if (e) {\n                var ww = self.win.outerHeight();\n                var df = e.pageY - self.selectiondrag.top;\n                if (df > 0 && df < ww) df = 0;\n                if (df >= ww) df -= ww;\n                self.selectiondrag.df = df;\n              }\n              if (self.selectiondrag.df == 0) return;\n\n              var rt = -Math.floor(self.selectiondrag.df / 6) * 2;\n              self.doScrollBy(rt);\n\n              self.debounced(\"doselectionscroll\", function () {\n                checkSelectionScroll();\n              }, 50);\n            };\n\n            if (\"getSelection\" in document) {\n              // A grade - Major browsers\n              self.hasTextSelected = function () {\n                return document.getSelection().rangeCount > 0;\n              };\n            } else if (\"selection\" in document) {\n              //IE9-\n              self.hasTextSelected = function () {\n                return document.selection.type != \"None\";\n              };\n            } else {\n              self.hasTextSelected = function () {\n                // no support\n                return false;\n              };\n            }\n\n            self.onselectionstart = function (e) {\n              /*  More testing - severe chrome issues            \n                            if (!self.haswrapper&&(e.which&&e.which==2)) {  // fool browser to manage middle button scrolling\n                              self.win.css({'overflow':'auto'});\n                              setTimeout(function(){\n                                self.win.css({'overflow':''});\n                              },10);                \n                              return true;\n                            }            \n              */\n              if (self.ispage) return;\n              self.selectiondrag = self.win.offset();\n            };\n\n            self.onselectionend = function (e) {\n              self.selectiondrag = false;\n            };\n            self.onselectiondrag = function (e) {\n              if (!self.selectiondrag) return;\n              if (self.hasTextSelected()) self.debounced(\"selectionscroll\", function () {\n                checkSelectionScroll(e);\n              }, 250);\n            };\n          }\n\n          if (cap.hasw3ctouch) {\n            //IE11+\n            self.css(self.rail, {\n              'touch-action': 'none'\n            });\n            self.css(self.cursor, {\n              'touch-action': 'none'\n            });\n            self.bind(self.win, \"pointerdown\", self.ontouchstart);\n            self.bind(document, \"pointerup\", self.ontouchend);\n            self.bind(document, \"pointermove\", self.ontouchmove);\n          } else if (cap.hasmstouch) {\n            //IE10\n            self.css(self.rail, {\n              '-ms-touch-action': 'none'\n            });\n            self.css(self.cursor, {\n              '-ms-touch-action': 'none'\n            });\n            self.bind(self.win, \"MSPointerDown\", self.ontouchstart);\n            self.bind(document, \"MSPointerUp\", self.ontouchend);\n            self.bind(document, \"MSPointerMove\", self.ontouchmove);\n            self.bind(self.cursor, \"MSGestureHold\", function (e) {\n              e.preventDefault();\n            });\n            self.bind(self.cursor, \"contextmenu\", function (e) {\n              e.preventDefault();\n            });\n          } else if (this.istouchcapable) {\n            //desktop with screen touch enabled\n            self.bind(self.win, \"touchstart\", self.ontouchstart);\n            self.bind(document, \"touchend\", self.ontouchend);\n            self.bind(document, \"touchcancel\", self.ontouchend);\n            self.bind(document, \"touchmove\", self.ontouchmove);\n          }\n\n          if (self.opt.cursordragontouch || !cap.cantouch && !self.opt.touchbehavior) {\n\n            self.rail.css({\n              cursor: \"default\"\n            });\n            self.railh && self.railh.css({\n              cursor: \"default\"\n            });\n\n            self.jqbind(self.rail, \"mouseenter\", function () {\n              if (!self.ispage && !self.win.is(\":visible\")) return false;\n              if (self.canshowonmouseevent) self.showCursor();\n              self.rail.active = true;\n            });\n            self.jqbind(self.rail, \"mouseleave\", function () {\n              self.rail.active = false;\n              if (!self.rail.drag) self.hideCursor();\n            });\n\n            if (self.opt.sensitiverail) {\n              self.bind(self.rail, \"click\", function (e) {\n                self.doRailClick(e, false, false);\n              });\n              self.bind(self.rail, \"dblclick\", function (e) {\n                self.doRailClick(e, true, false);\n              });\n              self.bind(self.cursor, \"click\", function (e) {\n                self.cancelEvent(e);\n              });\n              self.bind(self.cursor, \"dblclick\", function (e) {\n                self.cancelEvent(e);\n              });\n            }\n\n            if (self.railh) {\n              self.jqbind(self.railh, \"mouseenter\", function () {\n                if (!self.ispage && !self.win.is(\":visible\")) return false;\n                if (self.canshowonmouseevent) self.showCursor();\n                self.rail.active = true;\n              });\n              self.jqbind(self.railh, \"mouseleave\", function () {\n                self.rail.active = false;\n                if (!self.rail.drag) self.hideCursor();\n              });\n\n              if (self.opt.sensitiverail) {\n                self.bind(self.railh, \"click\", function (e) {\n                  self.doRailClick(e, false, true);\n                });\n                self.bind(self.railh, \"dblclick\", function (e) {\n                  self.doRailClick(e, true, true);\n                });\n                self.bind(self.cursorh, \"click\", function (e) {\n                  self.cancelEvent(e);\n                });\n                self.bind(self.cursorh, \"dblclick\", function (e) {\n                  self.cancelEvent(e);\n                });\n              }\n            }\n          }\n\n          if (!cap.cantouch && !self.opt.touchbehavior) {\n\n            self.bind(cap.hasmousecapture ? self.win : document, \"mouseup\", self.onmouseup);\n            self.bind(document, \"mousemove\", self.onmousemove);\n            if (self.onclick) self.bind(document, \"click\", self.onclick);\n\n            self.bind(self.cursor, \"mousedown\", self.onmousedown);\n            self.bind(self.cursor, \"mouseup\", self.onmouseup);\n\n            if (self.railh) {\n              self.bind(self.cursorh, \"mousedown\", function (e) {\n                self.onmousedown(e, true);\n              });\n              self.bind(self.cursorh, \"mouseup\", self.onmouseup);\n            }\n\n            if (!self.ispage && self.opt.enablescrollonselection) {\n              self.bind(self.win[0], \"mousedown\", self.onselectionstart);\n              self.bind(document, \"mouseup\", self.onselectionend);\n              self.bind(self.cursor, \"mouseup\", self.onselectionend);\n              if (self.cursorh) self.bind(self.cursorh, \"mouseup\", self.onselectionend);\n              self.bind(document, \"mousemove\", self.onselectiondrag);\n            }\n\n            if (self.zoom) {\n              self.jqbind(self.zoom, \"mouseenter\", function () {\n                if (self.canshowonmouseevent) self.showCursor();\n                self.rail.active = true;\n              });\n              self.jqbind(self.zoom, \"mouseleave\", function () {\n                self.rail.active = false;\n                if (!self.rail.drag) self.hideCursor();\n              });\n            }\n          } else {\n\n            self.bind(cap.hasmousecapture ? self.win : document, \"mouseup\", self.ontouchend);\n            self.bind(document, \"mousemove\", self.ontouchmove);\n            if (self.onclick) self.bind(document, \"click\", self.onclick);\n\n            if (self.opt.cursordragontouch) {\n              self.bind(self.cursor, \"mousedown\", self.onmousedown);\n              self.bind(self.cursor, \"mouseup\", self.onmouseup);\n              //self.bind(self.cursor, \"mousemove\", self.onmousemove);\n              self.cursorh && self.bind(self.cursorh, \"mousedown\", function (e) {\n                self.onmousedown(e, true);\n              });\n              //self.cursorh && self.bind(self.cursorh, \"mousemove\", self.onmousemove);\n              self.cursorh && self.bind(self.cursorh, \"mouseup\", self.onmouseup);\n            } else {\n              self.bind(self.rail, \"mousedown\", function (e) {\n                e.preventDefault();\n              }); // prevent text selection             \n              self.railh && self.bind(self.railh, \"mousedown\", function (e) {\n                e.preventDefault();\n              });\n            }\n          }\n\n          if (self.opt.enablemousewheel) {\n            if (!self.isiframe) self.mousewheel(cap.isie && self.ispage ? document : self.win, self.onmousewheel);\n            self.mousewheel(self.rail, self.onmousewheel);\n            if (self.railh) self.mousewheel(self.railh, self.onmousewheelhr);\n          }\n\n          if (!self.ispage && !cap.cantouch && !/HTML|^BODY/.test(self.win[0].nodeName)) {\n            if (!self.win.attr(\"tabindex\")) self.win.attr({\n              \"tabindex\": tabindexcounter++\n            });\n\n            self.jqbind(self.win, \"focus\", function (e) {\n              domfocus = self.getTarget(e).id || true;\n              self.hasfocus = true;\n              if (self.canshowonmouseevent) self.noticeCursor();\n            });\n            self.jqbind(self.win, \"blur\", function (e) {\n              domfocus = false;\n              self.hasfocus = false;\n            });\n\n            self.jqbind(self.win, \"mouseenter\", function (e) {\n              mousefocus = self.getTarget(e).id || true;\n              self.hasmousefocus = true;\n              if (self.canshowonmouseevent) self.noticeCursor();\n            });\n            self.jqbind(self.win, \"mouseleave\", function () {\n              mousefocus = false;\n              self.hasmousefocus = false;\n              if (!self.rail.drag) self.hideCursor();\n            });\n          }\n        } // !ie9mobile\n\n        //Thanks to http://www.quirksmode.org !!\n        self.onkeypress = function (e) {\n          if (self.railslocked && self.page.maxh == 0) return true;\n\n          e = e ? e : window.e;\n          var tg = self.getTarget(e);\n          if (tg && /INPUT|TEXTAREA|SELECT|OPTION/.test(tg.nodeName)) {\n            var tp = tg.getAttribute('type') || tg.type || false;\n            if (!tp || !/submit|button|cancel/i.tp) return true;\n          }\n\n          if ($(tg).attr('contenteditable')) return true;\n\n          if (self.hasfocus || self.hasmousefocus && !domfocus || self.ispage && !domfocus && !mousefocus) {\n            var key = e.keyCode;\n\n            if (self.railslocked && key != 27) return self.cancelEvent(e);\n\n            var ctrl = e.ctrlKey || false;\n            var shift = e.shiftKey || false;\n\n            var ret = false;\n            switch (key) {\n              case 38:\n              case 63233:\n                //safari\n                self.doScrollBy(24 * 3);\n                ret = true;\n                break;\n              case 40:\n              case 63235:\n                //safari\n                self.doScrollBy(-24 * 3);\n                ret = true;\n                break;\n              case 37:\n              case 63232:\n                //safari\n                if (self.railh) {\n                  ctrl ? self.doScrollLeft(0) : self.doScrollLeftBy(24 * 3);\n                  ret = true;\n                }\n                break;\n              case 39:\n              case 63234:\n                //safari\n                if (self.railh) {\n                  ctrl ? self.doScrollLeft(self.page.maxw) : self.doScrollLeftBy(-24 * 3);\n                  ret = true;\n                }\n                break;\n              case 33:\n              case 63276:\n                // safari\n                self.doScrollBy(self.view.h);\n                ret = true;\n                break;\n              case 34:\n              case 63277:\n                // safari\n                self.doScrollBy(-self.view.h);\n                ret = true;\n                break;\n              case 36:\n              case 63273:\n                // safari                \n                self.railh && ctrl ? self.doScrollPos(0, 0) : self.doScrollTo(0);\n                ret = true;\n                break;\n              case 35:\n              case 63275:\n                // safari\n                self.railh && ctrl ? self.doScrollPos(self.page.maxw, self.page.maxh) : self.doScrollTo(self.page.maxh);\n                ret = true;\n                break;\n              case 32:\n                if (self.opt.spacebarenabled) {\n                  shift ? self.doScrollBy(self.view.h) : self.doScrollBy(-self.view.h);\n                  ret = true;\n                }\n                break;\n              case 27:\n                // ESC\n                if (self.zoomactive) {\n                  self.doZoom();\n                  ret = true;\n                }\n                break;\n            }\n            if (ret) return self.cancelEvent(e);\n          }\n        };\n\n        if (self.opt.enablekeyboard) self.bind(document, cap.isopera && !cap.isopera12 ? \"keypress\" : \"keydown\", self.onkeypress);\n\n        self.bind(document, \"keydown\", function (e) {\n          var ctrl = e.ctrlKey || false;\n          if (ctrl) self.wheelprevented = true;\n        });\n        self.bind(document, \"keyup\", function (e) {\n          var ctrl = e.ctrlKey || false;\n          if (!ctrl) self.wheelprevented = false;\n        });\n        self.bind(window, \"blur\", function (e) {\n          self.wheelprevented = false;\n        });\n\n        self.bind(window, 'resize', self.lazyResize);\n        self.bind(window, 'orientationchange', self.lazyResize);\n\n        self.bind(window, \"load\", self.lazyResize);\n\n        if (cap.ischrome && !self.ispage && !self.haswrapper) {\n          //chrome void scrollbar bug - it persists in version 26\n          var tmp = self.win.attr(\"style\");\n          var ww = parseFloat(self.win.css(\"width\")) + 1;\n          self.win.css('width', ww);\n          self.synched(\"chromefix\", function () {\n            self.win.attr(\"style\", tmp);\n          });\n        }\n\n        // Trying a cross-browser implementation - good luck!\n\n        self.onAttributeChange = function (e) {\n          self.lazyResize(self.isieold ? 250 : 30);\n        };\n\n        if (!self.isie11 && ClsMutationObserver !== false) {\n          // IE11 crashes  #568\n          self.observerbody = new ClsMutationObserver(function (mutations) {\n            mutations.forEach(function (mut) {\n              if (mut.type == \"attributes\") {\n                return $(\"body\").hasClass(\"modal-open\") && $(\"body\").hasClass(\"modal-dialog\") && !$.contains($('.modal-dialog')[0], self.doc[0]) ? self.hide() : self.show(); // Support for Bootstrap modal; Added check if the nice scroll element is inside a modal\n              }\n            });\n            if (document.body.scrollHeight != self.page.maxh) return self.lazyResize(30);\n          });\n          self.observerbody.observe(document.body, {\n            childList: true,\n            subtree: true,\n            characterData: false,\n            attributes: true,\n            attributeFilter: ['class']\n          });\n        }\n\n        if (!self.ispage && !self.haswrapper) {\n          // redesigned MutationObserver for Chrome18+/Firefox14+/iOS6+ with support for: remove div, add/remove content\n          if (ClsMutationObserver !== false) {\n            self.observer = new ClsMutationObserver(function (mutations) {\n              mutations.forEach(self.onAttributeChange);\n            });\n            self.observer.observe(self.win[0], {\n              childList: true,\n              characterData: false,\n              attributes: true,\n              subtree: false\n            });\n            self.observerremover = new ClsMutationObserver(function (mutations) {\n              mutations.forEach(function (mo) {\n                if (mo.removedNodes.length > 0) {\n                  for (var dd in mo.removedNodes) {\n                    if (!!self && mo.removedNodes[dd] == self.win[0]) return self.remove();\n                  }\n                }\n              });\n            });\n            self.observerremover.observe(self.win[0].parentNode, {\n              childList: true,\n              characterData: false,\n              attributes: false,\n              subtree: false\n            });\n          } else {\n            self.bind(self.win, cap.isie && !cap.isie9 ? \"propertychange\" : \"DOMAttrModified\", self.onAttributeChange);\n            if (cap.isie9) self.win[0].attachEvent(\"onpropertychange\", self.onAttributeChange); //IE9 DOMAttrModified bug\n            self.bind(self.win, \"DOMNodeRemoved\", function (e) {\n              if (e.target == self.win[0]) self.remove();\n            });\n          }\n        }\n\n        //\n\n        if (!self.ispage && self.opt.boxzoom) self.bind(window, \"resize\", self.resizeZoom);\n        if (self.istextarea) {\n          self.bind(self.win, \"keydown\", self.lazyResize);\n          self.bind(self.win, \"mouseup\", self.lazyResize);\n        }\n\n        //        self.checkrtlmode = true;\n        self.lazyResize(30);\n      }\n\n      if (this.doc[0].nodeName == 'IFRAME') {\n        var oniframeload = function oniframeload() {\n          self.iframexd = false;\n          var doc;\n          try {\n            doc = 'contentDocument' in this ? this.contentDocument : this.contentWindow.document;\n            var a = doc.domain;\n          } catch (e) {\n            self.iframexd = true;\n            doc = false;\n          }\n\n          if (self.iframexd) {\n            if (\"console\" in window) console.log('NiceScroll error: policy restriced iframe');\n            return true; //cross-domain - I can't manage this        \n          }\n\n          self.forcescreen = true;\n\n          if (self.isiframe) {\n            self.iframe = {\n              \"doc\": $(doc),\n              \"html\": self.doc.contents().find('html')[0],\n              \"body\": self.doc.contents().find('body')[0]\n            };\n            self.getContentSize = function () {\n              return {\n                w: Math.max(self.iframe.html.scrollWidth, self.iframe.body.scrollWidth),\n                h: Math.max(self.iframe.html.scrollHeight, self.iframe.body.scrollHeight)\n              };\n            };\n            self.docscroll = $(self.iframe.body); //$(this.contentWindow);\n          }\n\n          if (!cap.isios && self.opt.iframeautoresize && !self.isiframe) {\n            self.win.scrollTop(0); // reset position\n            self.doc.height(\"\"); //reset height to fix browser bug\n            var hh = Math.max(doc.getElementsByTagName('html')[0].scrollHeight, doc.body.scrollHeight);\n            self.doc.height(hh);\n          }\n          self.lazyResize(30);\n\n          if (cap.isie7) self.css($(self.iframe.html), _scrollyhidden);\n          self.css($(self.iframe.body), _scrollyhidden);\n\n          if (cap.isios && self.haswrapper) {\n            self.css($(doc.body), {\n              '-webkit-transform': 'translate3d(0,0,0)'\n            }); // avoid iFrame content clipping - thanks to http://blog.derraab.com/2012/04/02/avoid-iframe-content-clipping-with-css-transform-on-ios/\n          }\n\n          if ('contentWindow' in this) {\n            self.bind(this.contentWindow, \"scroll\", self.onscroll); //IE8 & minor\n          } else {\n            self.bind(doc, \"scroll\", self.onscroll);\n          }\n\n          if (self.opt.enablemousewheel) {\n            self.mousewheel(doc, self.onmousewheel);\n          }\n\n          if (self.opt.enablekeyboard) self.bind(doc, cap.isopera ? \"keypress\" : \"keydown\", self.onkeypress);\n\n          if (cap.cantouch || self.opt.touchbehavior) {\n            self.bind(doc, \"mousedown\", self.ontouchstart);\n            self.bind(doc, \"mousemove\", function (e) {\n              return self.ontouchmove(e, true);\n            });\n            if (self.opt.grabcursorenabled && cap.cursorgrabvalue) self.css($(doc.body), {\n              'cursor': cap.cursorgrabvalue\n            });\n          }\n\n          self.bind(doc, \"mouseup\", self.ontouchend);\n\n          if (self.zoom) {\n            if (self.opt.dblclickzoom) self.bind(doc, 'dblclick', self.doZoom);\n            if (self.ongesturezoom) self.bind(doc, \"gestureend\", self.ongesturezoom);\n          }\n        };\n\n        if (this.doc[0].readyState && this.doc[0].readyState == \"complete\") {\n          setTimeout(function () {\n            oniframeload.call(self.doc[0], false);\n          }, 500);\n        }\n        self.bind(this.doc, \"load\", oniframeload);\n      }\n    };\n\n    this.showCursor = function (py, px) {\n      if (self.cursortimeout) {\n        clearTimeout(self.cursortimeout);\n        self.cursortimeout = 0;\n      }\n      if (!self.rail) return;\n      if (self.autohidedom) {\n        self.autohidedom.stop().css({\n          opacity: self.opt.cursoropacitymax\n        });\n        self.cursoractive = true;\n      }\n\n      if (!self.rail.drag || self.rail.drag.pt != 1) {\n        if (py !== undefined && py !== false) {\n          self.scroll.y = Math.round(py * 1 / self.scrollratio.y);\n        }\n        if (px !== undefined) {\n          self.scroll.x = Math.round(px * 1 / self.scrollratio.x);\n        }\n      }\n\n      self.cursor.css({\n        height: self.cursorheight,\n        top: self.scroll.y\n      });\n      if (self.cursorh) {\n        var lx = self.hasreversehr ? self.scrollvaluemaxw - self.scroll.x : self.scroll.x;\n        !self.rail.align && self.rail.visibility ? self.cursorh.css({\n          width: self.cursorwidth,\n          left: lx + self.rail.width\n        }) : self.cursorh.css({\n          width: self.cursorwidth,\n          left: lx\n        });\n        self.cursoractive = true;\n      }\n\n      if (self.zoom) self.zoom.stop().css({\n        opacity: self.opt.cursoropacitymax\n      });\n    };\n\n    this.hideCursor = function (tm) {\n      if (self.cursortimeout) return;\n      if (!self.rail) return;\n      if (!self.autohidedom) return;\n      if (self.hasmousefocus && self.opt.autohidemode == \"leave\") return;\n      self.cursortimeout = setTimeout(function () {\n        if (!self.rail.active || !self.showonmouseevent) {\n          self.autohidedom.stop().animate({\n            opacity: self.opt.cursoropacitymin\n          });\n          if (self.zoom) self.zoom.stop().animate({\n            opacity: self.opt.cursoropacitymin\n          });\n          self.cursoractive = false;\n        }\n        self.cursortimeout = 0;\n      }, tm || self.opt.hidecursordelay);\n    };\n\n    this.noticeCursor = function (tm, py, px) {\n      self.showCursor(py, px);\n      if (!self.rail.active) self.hideCursor(tm);\n    };\n\n    this.getContentSize = self.ispage ? function () {\n      return {\n        w: Math.max(document.body.scrollWidth, document.documentElement.scrollWidth),\n        h: Math.max(document.body.scrollHeight, document.documentElement.scrollHeight)\n      };\n    } : self.haswrapper ? function () {\n      return {\n        w: self.doc.outerWidth() + parseInt(self.win.css('paddingLeft')) + parseInt(self.win.css('paddingRight')),\n        h: self.doc.outerHeight() + parseInt(self.win.css('paddingTop')) + parseInt(self.win.css('paddingBottom'))\n      };\n    } : function () {\n      return {\n        w: self.docscroll[0].scrollWidth,\n        h: self.docscroll[0].scrollHeight\n      };\n    };\n\n    this.onResize = function (e, page) {\n\n      if (!self || !self.win) return false;\n\n      if (!self.haswrapper && !self.ispage) {\n        if (self.win.css('display') == 'none') {\n          if (self.visibility) self.hideRail().hideRailHr();\n          return false;\n        } else {\n          if (!self.hidden && !self.visibility) self.showRail().showRailHr();\n        }\n      }\n\n      var premaxh = self.page.maxh;\n      var premaxw = self.page.maxw;\n\n      var preview = {\n        h: self.view.h,\n        w: self.view.w\n      };\n\n      self.view = {\n        w: self.ispage ? self.win.width() : parseInt(self.win[0].clientWidth),\n        h: self.ispage ? self.win.height() : parseInt(self.win[0].clientHeight)\n      };\n\n      self.page = page ? page : self.getContentSize();\n\n      self.page.maxh = Math.max(0, self.page.h - self.view.h);\n      self.page.maxw = Math.max(0, self.page.w - self.view.w);\n\n      if (self.page.maxh == premaxh && self.page.maxw == premaxw && self.view.w == preview.w && self.view.h == preview.h) {\n        // test position        \n        if (!self.ispage) {\n          var pos = self.win.offset();\n          if (self.lastposition) {\n            var lst = self.lastposition;\n            if (lst.top == pos.top && lst.left == pos.left) return self; //nothing to do            \n          }\n          self.lastposition = pos;\n        } else {\n          return self; //nothing to do\n        }\n      }\n\n      if (self.page.maxh == 0) {\n        self.hideRail();\n        self.scrollvaluemax = 0;\n        self.scroll.y = 0;\n        self.scrollratio.y = 0;\n        self.cursorheight = 0;\n        self.setScrollTop(0);\n        if (self.rail) self.rail.scrollable = false;\n      } else {\n        self.page.maxh -= self.opt.railpadding.top + self.opt.railpadding.bottom; //**\n        self.rail.scrollable = true;\n      }\n\n      if (self.page.maxw == 0) {\n        self.hideRailHr();\n        self.scrollvaluemaxw = 0;\n        self.scroll.x = 0;\n        self.scrollratio.x = 0;\n        self.cursorwidth = 0;\n        self.setScrollLeft(0);\n        if (self.railh) {\n          self.railh.scrollable = false;\n        }\n      } else {\n        self.page.maxw -= self.opt.railpadding.left + self.opt.railpadding.right; //**\n        if (self.railh) self.railh.scrollable = self.opt.horizrailenabled;\n      }\n\n      self.railslocked = self.locked || self.page.maxh == 0 && self.page.maxw == 0;\n      if (self.railslocked) {\n        if (!self.ispage) self.updateScrollBar(self.view);\n        return false;\n      }\n\n      if (!self.hidden && !self.visibility) {\n        self.showRail().showRailHr();\n      } else if (self.railh && !self.hidden && !self.railh.visibility) self.showRailHr();\n\n      if (self.istextarea && self.win.css('resize') && self.win.css('resize') != 'none') self.view.h -= 20;\n\n      self.cursorheight = Math.min(self.view.h, Math.round(self.view.h * (self.view.h / self.page.h)));\n      self.cursorheight = self.opt.cursorfixedheight ? self.opt.cursorfixedheight : Math.max(self.opt.cursorminheight, self.cursorheight);\n\n      self.cursorwidth = Math.min(self.view.w, Math.round(self.view.w * (self.view.w / self.page.w)));\n      self.cursorwidth = self.opt.cursorfixedheight ? self.opt.cursorfixedheight : Math.max(self.opt.cursorminheight, self.cursorwidth);\n\n      self.scrollvaluemax = self.view.h - self.cursorheight - self.cursor.hborder - (self.opt.railpadding.top + self.opt.railpadding.bottom); //**\n\n      if (self.railh) {\n        self.railh.width = self.page.maxh > 0 ? self.view.w - self.rail.width : self.view.w;\n        self.scrollvaluemaxw = self.railh.width - self.cursorwidth - self.cursorh.wborder - (self.opt.railpadding.left + self.opt.railpadding.right); //**\n      }\n\n      /*\n      if (self.checkrtlmode&&self.railh) {\n        self.checkrtlmode = false;\n        if (self.opt.rtlmode&&self.scroll.x==0) self.setScrollLeft(self.page.maxw);\n      }\n      */\n\n      if (!self.ispage) self.updateScrollBar(self.view);\n\n      self.scrollratio = {\n        x: self.page.maxw / self.scrollvaluemaxw,\n        y: self.page.maxh / self.scrollvaluemax\n      };\n\n      var sy = self.getScrollTop();\n      if (sy > self.page.maxh) {\n        self.doScrollTop(self.page.maxh);\n      } else {\n        self.scroll.y = Math.round(self.getScrollTop() * (1 / self.scrollratio.y));\n        self.scroll.x = Math.round(self.getScrollLeft() * (1 / self.scrollratio.x));\n        if (self.cursoractive) self.noticeCursor();\n      }\n\n      if (self.scroll.y && self.getScrollTop() == 0) self.doScrollTo(Math.floor(self.scroll.y * self.scrollratio.y));\n\n      return self;\n    };\n\n    this.resize = self.onResize;\n\n    this.hlazyresize = 0;\n\n    this.lazyResize = function (tm) {\n      // event debounce\n      /*\t\t\n            tm = (isNaN(tm)) ? 30 : tm;\n            self.debounced('resize', self.resize, tm);\n      */\n\n      //\t\t\tif (!self.haswrapper&&self.opt.autohidemode!==false) self.hide();\t\n      if (!self.haswrapper) self.hide();\n      if (self.hlazyresize) clearTimeout(self.hlazyresize);\n      self.hlazyresize = setTimeout(function () {\n        self && self.show().resize();\n      }, 240);\n\n      return self;\n    };\n\n    // modified by MDN https://developer.mozilla.org/en-US/docs/DOM/Mozilla_event_reference/wheel\n    function _modernWheelEvent(dom, name, fn, bubble) {\n      self._bind(dom, name, function (e) {\n        var e = e ? e : window.event;\n        var event = {\n          original: e,\n          target: e.target || e.srcElement,\n          type: \"wheel\",\n          deltaMode: e.type == \"MozMousePixelScroll\" ? 0 : 1,\n          deltaX: 0,\n          deltaZ: 0,\n          preventDefault: function preventDefault() {\n            e.preventDefault ? e.preventDefault() : e.returnValue = false;\n            return false;\n          },\n          stopImmediatePropagation: function stopImmediatePropagation() {\n            e.stopImmediatePropagation ? e.stopImmediatePropagation() : e.cancelBubble = true;\n          }\n        };\n\n        if (name == \"mousewheel\") {\n          e.wheelDeltaX && (event.deltaX = -1 / 40 * e.wheelDeltaX);\n          e.wheelDeltaY && (event.deltaY = -1 / 40 * e.wheelDeltaY);\n          !event.deltaY && !event.deltaX && (event.deltaY = -1 / 40 * e.wheelDelta);\n        } else {\n          event.deltaY = e.detail;\n        }\n\n        return fn.call(dom, event);\n      }, bubble);\n    }\n\n    this.jqbind = function (dom, name, fn) {\n      // use jquery bind for non-native events (mouseenter/mouseleave)\n      self.events.push({\n        e: dom,\n        n: name,\n        f: fn,\n        q: true\n      });\n      $(dom).bind(name, fn);\n    };\n\n    this.mousewheel = function (dom, fn, bubble) {\n      // bind mousewheel\n      var el = \"jquery\" in dom ? dom[0] : dom;\n      if (\"onwheel\" in document.createElement(\"div\")) {\n        // Modern browsers support \"wheel\"\n        self._bind(el, \"wheel\", fn, bubble || false);\n      } else {\n        var wname = document.onmousewheel !== undefined ? \"mousewheel\" : \"DOMMouseScroll\"; // older Webkit+IE support or older Firefox          \n        _modernWheelEvent(el, wname, fn, bubble || false);\n        if (wname == \"DOMMouseScroll\") _modernWheelEvent(el, \"MozMousePixelScroll\", fn, bubble || false); // Firefox legacy\n      }\n    };\n\n    if (cap.haseventlistener) {\n      // W3C standard event model\n\n      this.bind = function (dom, name, fn, bubble) {\n        // W3C\n        var el = \"jquery\" in dom ? dom[0] : dom;\n        self._bind(el, name, fn, bubble || false);\n      };\n\n      this._bind = function (el, name, fn, bubble) {\n        // primitive bind\n        self.events.push({\n          e: el,\n          n: name,\n          f: fn,\n          b: bubble,\n          q: false\n        });\n        el.addEventListener(name, fn, bubble || false);\n      };\n      this.cancelEvent = function (e) {\n        if (!e) return false;\n        var e = e.original ? e.original : e;\n        if (e.cancelable) e.preventDefault();\n        e.stopPropagation();\n        if (e.preventManipulation) e.preventManipulation(); //IE10\n        return false;\n      };\n      this.stopPropagation = function (e) {\n        if (!e) return false;\n        var e = e.original ? e.original : e;\n        e.stopPropagation();\n        return false;\n      };\n      this._unbind = function (el, name, fn, bub) {\n        // primitive unbind\n        el.removeEventListener(name, fn, bub);\n      };\n    } else {\n      // old IE model\n\n      this.bind = function (dom, name, fn, bubble) {\n        // legacy IE\n        var el = \"jquery\" in dom ? dom[0] : dom;\n        self._bind(el, name, function (e) {\n          e = e || window.event || false;\n          if (e && e.srcElement) {\n            e.target = e.srcElement;\n          }\n          if (!(\"pageY\" in e)) {\n            e.pageX = e.clientX + document.documentElement.scrollLeft;\n            e.pageY = e.clientY + document.documentElement.scrollTop;\n          }\n          return fn.call(el, e) === false || bubble === false ? self.cancelEvent(e) : true;\n        });\n      };\n\n      this._bind = function (el, name, fn, bubble) {\n        // primitive bind\n        self.events.push({\n          e: el,\n          n: name,\n          f: fn,\n          b: bubble,\n          q: false\n        });\n        if (el.attachEvent) {\n          el.attachEvent(\"on\" + name, fn);\n        } else {\n          el[\"on\" + name] = fn;\n        }\n      };\n      // Thanks to http://www.switchonthecode.com !!\n      this.cancelEvent = function (e) {\n        var e = window.event || false;\n        if (!e) return false;\n        e.cancelBubble = true;\n        e.cancel = true;\n        e.returnValue = false;\n        return false;\n      };\n      this.stopPropagation = function (e) {\n        var e = window.event || false;\n        if (!e) return false;\n        e.cancelBubble = true;\n        return false;\n      };\n      this._unbind = function (el, name, fn, bub) {\n        // primitive unbind IE old\n        if (el.detachEvent) {\n          el.detachEvent('on' + name, fn);\n        } else {\n          el['on' + name] = false;\n        }\n      };\n    }\n\n    this.unbindAll = function () {\n      for (var a = 0; a < self.events.length; a++) {\n        var r = self.events[a];\n        r.q ? r.e.unbind(r.n, r.f) : self._unbind(r.e, r.n, r.f, r.b);\n      }\n    };\n\n    this.showRail = function () {\n      if (self.page.maxh != 0 && (self.ispage || self.win.css('display') != 'none')) {\n        self.visibility = true;\n        self.rail.visibility = true;\n        self.rail.css('display', 'block');\n      }\n      return self;\n    };\n\n    this.showRailHr = function () {\n      if (!self.railh) return self;\n      if (self.page.maxw != 0 && (self.ispage || self.win.css('display') != 'none')) {\n        self.railh.visibility = true;\n        self.railh.css('display', 'block');\n      }\n      return self;\n    };\n\n    this.hideRail = function () {\n      self.visibility = false;\n      self.rail.visibility = false;\n      self.rail.css('display', 'none');\n      return self;\n    };\n\n    this.hideRailHr = function () {\n      if (!self.railh) return self;\n      self.railh.visibility = false;\n      self.railh.css('display', 'none');\n      return self;\n    };\n\n    this.show = function () {\n      self.hidden = false;\n      self.railslocked = false;\n      return self.showRail().showRailHr();\n    };\n\n    this.hide = function () {\n      self.hidden = true;\n      self.railslocked = true;\n      return self.hideRail().hideRailHr();\n    };\n\n    this.toggle = function () {\n      return self.hidden ? self.show() : self.hide();\n    };\n\n    this.remove = function () {\n      self.stop();\n      if (self.cursortimeout) clearTimeout(self.cursortimeout);\n      //      if (self.debouncedelayed) clearTimeout(self.debouncedelayed);\n      for (var n in self.delaylist) {\n        if (self.delaylist[n]) clearAnimationFrame(self.delaylist[n].h);\n      }self.doZoomOut();\n      self.unbindAll();\n\n      if (cap.isie9) self.win[0].detachEvent(\"onpropertychange\", self.onAttributeChange); //IE9 DOMAttrModified bug\n\n      if (self.observer !== false) self.observer.disconnect();\n      if (self.observerremover !== false) self.observerremover.disconnect();\n      if (self.observerbody !== false) self.observerbody.disconnect();\n\n      self.events = null;\n\n      if (self.cursor) {\n        self.cursor.remove();\n      }\n      if (self.cursorh) {\n        self.cursorh.remove();\n      }\n      if (self.rail) {\n        self.rail.remove();\n      }\n      if (self.railh) {\n        self.railh.remove();\n      }\n      if (self.zoom) {\n        self.zoom.remove();\n      }\n      for (var a = 0; a < self.saved.css.length; a++) {\n        var d = self.saved.css[a];\n        d[0].css(d[1], d[2] === undefined ? '' : d[2]);\n      }\n      self.saved = false;\n      self.me.data('__nicescroll', ''); //erase all traces\n\n      // memory leak fixed by GianlucaGuarini - thanks a lot!\n      // remove the current nicescroll from the $.nicescroll array & normalize array\n      var lst = $.nicescroll;\n      lst.each(function (i) {\n        if (!this) return;\n        if (this.id === self.id) {\n          delete lst[i];\n          for (var b = ++i; b < lst.length; b++, i++) {\n            lst[i] = lst[b];\n          }lst.length--;\n          if (lst.length) delete lst[lst.length];\n        }\n      });\n\n      for (var i in self) {\n        self[i] = null;\n        delete self[i];\n      }\n\n      self = null;\n    };\n\n    this.scrollstart = function (fn) {\n      this.onscrollstart = fn;\n      return self;\n    };\n    this.scrollend = function (fn) {\n      this.onscrollend = fn;\n      return self;\n    };\n    this.scrollcancel = function (fn) {\n      this.onscrollcancel = fn;\n      return self;\n    };\n\n    this.zoomin = function (fn) {\n      this.onzoomin = fn;\n      return self;\n    };\n    this.zoomout = function (fn) {\n      this.onzoomout = fn;\n      return self;\n    };\n\n    this.isScrollable = function (e) {\n      var dom = e.target ? e.target : e;\n      if (dom.nodeName == 'OPTION') return true;\n      while (dom && dom.nodeType == 1 && !/^BODY|HTML/.test(dom.nodeName)) {\n        var dd = $(dom);\n        var ov = dd.css('overflowY') || dd.css('overflowX') || dd.css('overflow') || '';\n        if (/scroll|auto/.test(ov)) return dom.clientHeight != dom.scrollHeight;\n        dom = dom.parentNode ? dom.parentNode : false;\n      }\n      return false;\n    };\n\n    this.getViewport = function (me) {\n      var dom = me && me.parentNode ? me.parentNode : false;\n      while (dom && dom.nodeType == 1 && !/^BODY|HTML/.test(dom.nodeName)) {\n        var dd = $(dom);\n        if (/fixed|absolute/.test(dd.css(\"position\"))) return dd;\n        var ov = dd.css('overflowY') || dd.css('overflowX') || dd.css('overflow') || '';\n        if (/scroll|auto/.test(ov) && dom.clientHeight != dom.scrollHeight) return dd;\n        if (dd.getNiceScroll().length > 0) return dd;\n        dom = dom.parentNode ? dom.parentNode : false;\n      }\n      return false; //(dom) ? $(dom) : false;\n    };\n\n    this.triggerScrollEnd = function () {\n      if (!self.onscrollend) return;\n\n      var px = self.getScrollLeft();\n      var py = self.getScrollTop();\n\n      var info = {\n        type: \"scrollend\",\n        current: {\n          x: px,\n          y: py\n        },\n        end: {\n          x: px,\n          y: py\n        }\n      };\n      self.onscrollend.call(self, info);\n    };\n\n    function execScrollWheel(e, hr, chkscroll) {\n      var px, py;\n\n      if (e.deltaMode == 0) {\n        // PIXEL\n        px = -Math.floor(e.deltaX * (self.opt.mousescrollstep / (18 * 3)));\n        py = -Math.floor(e.deltaY * (self.opt.mousescrollstep / (18 * 3)));\n      } else if (e.deltaMode == 1) {\n        // LINE\n        px = -Math.floor(e.deltaX * self.opt.mousescrollstep);\n        py = -Math.floor(e.deltaY * self.opt.mousescrollstep);\n      }\n\n      if (hr && self.opt.oneaxismousemode && px == 0 && py) {\n        // classic vertical-only mousewheel + browser with x/y support \n        px = py;\n        py = 0;\n\n        if (chkscroll) {\n          var hrend = px < 0 ? self.getScrollLeft() >= self.page.maxw : self.getScrollLeft() <= 0;\n          if (hrend) {\n            // preserve vertical scrolling\n            py = px;\n            px = 0;\n          }\n        }\n      }\n\n      // invert horizontal direction for rtl mode\n      if (self.isrtlmode) px = -px;\n\n      if (px) {\n        if (self.scrollmom) {\n          self.scrollmom.stop();\n        }\n        self.lastdeltax += px;\n        self.debounced(\"mousewheelx\", function () {\n          var dt = self.lastdeltax;\n          self.lastdeltax = 0;\n          if (!self.rail.drag) {\n            self.doScrollLeftBy(dt);\n          }\n        }, 15);\n      }\n      if (py) {\n        if (self.opt.nativeparentscrolling && chkscroll && !self.ispage && !self.zoomactive) {\n          if (py < 0) {\n            if (self.getScrollTop() >= self.page.maxh) return true;\n          } else {\n            if (self.getScrollTop() <= 0) return true;\n          }\n        }\n        if (self.scrollmom) {\n          self.scrollmom.stop();\n        }\n        self.lastdeltay += py;\n        //        self.debounced(\"mousewheely\", function() {\n        self.synched(\"mousewheely\", function () {\n          var dt = self.lastdeltay;\n          self.lastdeltay = 0;\n          if (!self.rail.drag) {\n            self.doScrollBy(dt);\n          }\n        }, 15);\n      }\n\n      e.stopImmediatePropagation();\n      return e.preventDefault();\n    }\n\n    this.onmousewheel = function (e) {\n      if (self.wheelprevented) return;\n      if (self.railslocked) {\n        self.debounced(\"checkunlock\", self.resize, 250);\n        return true;\n      }\n      if (self.rail.drag) return self.cancelEvent(e);\n\n      if (self.opt.oneaxismousemode == \"auto\" && e.deltaX != 0) self.opt.oneaxismousemode = false; // check two-axis mouse support (not very elegant)\n\n      if (self.opt.oneaxismousemode && e.deltaX == 0) {\n        if (!self.rail.scrollable) {\n          if (self.railh && self.railh.scrollable) {\n            return self.onmousewheelhr(e);\n          } else {\n            return true;\n          }\n        }\n      }\n\n      var nw = +new Date();\n      var chk = false;\n      if (self.opt.preservenativescrolling && self.checkarea + 600 < nw) {\n        self.nativescrollingarea = self.isScrollable(e);\n        chk = true;\n      }\n      self.checkarea = nw;\n      if (self.nativescrollingarea) return true; // this isn't my business\n      var ret = execScrollWheel(e, false, chk);\n      if (ret) self.checkarea = 0;\n      return ret;\n    };\n\n    this.onmousewheelhr = function (e) {\n      if (self.wheelprevented) return;\n      if (self.railslocked || !self.railh.scrollable) return true;\n      if (self.rail.drag) return self.cancelEvent(e);\n\n      var nw = +new Date();\n      var chk = false;\n      if (self.opt.preservenativescrolling && self.checkarea + 600 < nw) {\n        self.nativescrollingarea = self.isScrollable(e);\n        chk = true;\n      }\n      self.checkarea = nw;\n      if (self.nativescrollingarea) return true; // this isn't my business\n      if (self.railslocked) return self.cancelEvent(e);\n\n      return execScrollWheel(e, true, chk);\n    };\n\n    this.stop = function () {\n      self.cancelScroll();\n      if (self.scrollmon) self.scrollmon.stop();\n      self.cursorfreezed = false;\n      self.scroll.y = Math.round(self.getScrollTop() * (1 / self.scrollratio.y));\n      self.noticeCursor();\n      return self;\n    };\n\n    this.getTransitionSpeed = function (dif) {\n      var sp = Math.round(self.opt.scrollspeed * 10);\n      var ex = Math.min(sp, Math.round(dif / 20 * self.opt.scrollspeed));\n      return ex > 20 ? ex : 0;\n    };\n\n    if (!self.opt.smoothscroll) {\n      this.doScrollLeft = function (x, spd) {\n        //direct\n        var y = self.getScrollTop();\n        self.doScrollPos(x, y, spd);\n      };\n      this.doScrollTop = function (y, spd) {\n        //direct\n        var x = self.getScrollLeft();\n        self.doScrollPos(x, y, spd);\n      };\n      this.doScrollPos = function (x, y, spd) {\n        //direct\n        var nx = x > self.page.maxw ? self.page.maxw : x;\n        if (nx < 0) nx = 0;\n        var ny = y > self.page.maxh ? self.page.maxh : y;\n        if (ny < 0) ny = 0;\n        self.synched('scroll', function () {\n          self.setScrollTop(ny);\n          self.setScrollLeft(nx);\n        });\n      };\n      this.cancelScroll = function () {}; // direct\n    } else if (self.ishwscroll && cap.hastransition && self.opt.usetransition && !!self.opt.smoothscroll) {\n      this.prepareTransition = function (dif, istime) {\n        var ex = istime ? dif > 20 ? dif : 0 : self.getTransitionSpeed(dif);\n        var trans = ex ? cap.prefixstyle + 'transform ' + ex + 'ms ease-out' : '';\n        if (!self.lasttransitionstyle || self.lasttransitionstyle != trans) {\n          self.lasttransitionstyle = trans;\n          self.doc.css(cap.transitionstyle, trans);\n        }\n        return ex;\n      };\n\n      this.doScrollLeft = function (x, spd) {\n        //trans\n        var y = self.scrollrunning ? self.newscrolly : self.getScrollTop();\n        self.doScrollPos(x, y, spd);\n      };\n\n      this.doScrollTop = function (y, spd) {\n        //trans\n        var x = self.scrollrunning ? self.newscrollx : self.getScrollLeft();\n        self.doScrollPos(x, y, spd);\n      };\n\n      this.doScrollPos = function (x, y, spd) {\n        //trans\n\n        var py = self.getScrollTop();\n        var px = self.getScrollLeft();\n\n        if ((self.newscrolly - py) * (y - py) < 0 || (self.newscrollx - px) * (x - px) < 0) self.cancelScroll(); //inverted movement detection      \n\n        if (self.opt.bouncescroll == false) {\n          if (y < 0) y = 0;else if (y > self.page.maxh) y = self.page.maxh;\n          if (x < 0) x = 0;else if (x > self.page.maxw) x = self.page.maxw;\n        }\n\n        if (self.scrollrunning && x == self.newscrollx && y == self.newscrolly) return false;\n\n        self.newscrolly = y;\n        self.newscrollx = x;\n\n        self.newscrollspeed = spd || false;\n\n        if (self.timer) return false;\n\n        self.timer = setTimeout(function () {\n\n          var top = self.getScrollTop();\n          var lft = self.getScrollLeft();\n\n          var dst = {};\n          dst.x = x - lft;\n          dst.y = y - top;\n          dst.px = lft;\n          dst.py = top;\n\n          var dd = Math.round(Math.sqrt(Math.pow(dst.x, 2) + Math.pow(dst.y, 2)));\n          var ms = self.newscrollspeed && self.newscrollspeed > 1 ? self.newscrollspeed : self.getTransitionSpeed(dd);\n          if (self.newscrollspeed && self.newscrollspeed <= 1) ms *= self.newscrollspeed;\n\n          self.prepareTransition(ms, true);\n\n          if (self.timerscroll && self.timerscroll.tm) clearInterval(self.timerscroll.tm);\n\n          if (ms > 0) {\n\n            if (!self.scrollrunning && self.onscrollstart) {\n              var info = {\n                \"type\": \"scrollstart\",\n                \"current\": {\n                  \"x\": lft,\n                  \"y\": top\n                },\n                \"request\": {\n                  \"x\": x,\n                  \"y\": y\n                },\n                \"end\": {\n                  \"x\": self.newscrollx,\n                  \"y\": self.newscrolly\n                },\n                \"speed\": ms\n              };\n              self.onscrollstart.call(self, info);\n            }\n\n            if (cap.transitionend) {\n              if (!self.scrollendtrapped) {\n                self.scrollendtrapped = true;\n                self.bind(self.doc, cap.transitionend, self.onScrollTransitionEnd, false); //I have got to do something usefull!!\n              }\n            } else {\n              if (self.scrollendtrapped) clearTimeout(self.scrollendtrapped);\n              self.scrollendtrapped = setTimeout(self.onScrollTransitionEnd, ms); // simulate transitionend event\n            }\n\n            var py = top;\n            var px = lft;\n            self.timerscroll = {\n              bz: new BezierClass(py, self.newscrolly, ms, 0, 0, 0.58, 1),\n              bh: new BezierClass(px, self.newscrollx, ms, 0, 0, 0.58, 1)\n            };\n            if (!self.cursorfreezed) self.timerscroll.tm = setInterval(function () {\n              self.showCursor(self.getScrollTop(), self.getScrollLeft());\n            }, 60);\n          }\n\n          self.synched(\"doScroll-set\", function () {\n            self.timer = 0;\n            if (self.scrollendtrapped) self.scrollrunning = true;\n            self.setScrollTop(self.newscrolly);\n            self.setScrollLeft(self.newscrollx);\n            if (!self.scrollendtrapped) self.onScrollTransitionEnd();\n          });\n        }, 50);\n      };\n\n      this.cancelScroll = function () {\n        if (!self.scrollendtrapped) return true;\n        var py = self.getScrollTop();\n        var px = self.getScrollLeft();\n        self.scrollrunning = false;\n        if (!cap.transitionend) clearTimeout(cap.transitionend);\n        self.scrollendtrapped = false;\n        self._unbind(self.doc[0], cap.transitionend, self.onScrollTransitionEnd);\n        self.prepareTransition(0);\n        self.setScrollTop(py); // fire event onscroll\n        if (self.railh) self.setScrollLeft(px);\n        if (self.timerscroll && self.timerscroll.tm) clearInterval(self.timerscroll.tm);\n        self.timerscroll = false;\n\n        self.cursorfreezed = false;\n\n        self.showCursor(py, px);\n        return self;\n      };\n      this.onScrollTransitionEnd = function () {\n        if (self.scrollendtrapped) self._unbind(self.doc[0], cap.transitionend, self.onScrollTransitionEnd);\n        self.scrollendtrapped = false;\n        self.prepareTransition(0);\n        if (self.timerscroll && self.timerscroll.tm) clearInterval(self.timerscroll.tm);\n        self.timerscroll = false;\n        var py = self.getScrollTop();\n        var px = self.getScrollLeft();\n        self.setScrollTop(py); // fire event onscroll        \n        if (self.railh) self.setScrollLeft(px); // fire event onscroll left\n\n        self.noticeCursor(false, py, px);\n\n        self.cursorfreezed = false;\n\n        if (py < 0) py = 0;else if (py > self.page.maxh) py = self.page.maxh;\n        if (px < 0) px = 0;else if (px > self.page.maxw) px = self.page.maxw;\n        if (py != self.newscrolly || px != self.newscrollx) return self.doScrollPos(px, py, self.opt.snapbackspeed);\n\n        if (self.onscrollend && self.scrollrunning) {\n          self.triggerScrollEnd();\n        }\n        self.scrollrunning = false;\n      };\n    } else {\n\n      this.doScrollLeft = function (x, spd) {\n        //no-trans\n        var y = self.scrollrunning ? self.newscrolly : self.getScrollTop();\n        self.doScrollPos(x, y, spd);\n      };\n\n      this.doScrollTop = function (y, spd) {\n        //no-trans\n        var x = self.scrollrunning ? self.newscrollx : self.getScrollLeft();\n        self.doScrollPos(x, y, spd);\n      };\n\n      this.doScrollPos = function (x, y, spd) {\n        //no-trans\n        var y = y === undefined || y === false ? self.getScrollTop(true) : y;\n\n        if (self.timer && self.newscrolly == y && self.newscrollx == x) return true;\n\n        if (self.timer) clearAnimationFrame(self.timer);\n        self.timer = 0;\n\n        var py = self.getScrollTop();\n        var px = self.getScrollLeft();\n\n        if ((self.newscrolly - py) * (y - py) < 0 || (self.newscrollx - px) * (x - px) < 0) self.cancelScroll(); //inverted movement detection\n\n        self.newscrolly = y;\n        self.newscrollx = x;\n\n        if (!self.bouncescroll || !self.rail.visibility) {\n          if (self.newscrolly < 0) {\n            self.newscrolly = 0;\n          } else if (self.newscrolly > self.page.maxh) {\n            self.newscrolly = self.page.maxh;\n          }\n        }\n        if (!self.bouncescroll || !self.railh.visibility) {\n          if (self.newscrollx < 0) {\n            self.newscrollx = 0;\n          } else if (self.newscrollx > self.page.maxw) {\n            self.newscrollx = self.page.maxw;\n          }\n        }\n\n        self.dst = {};\n        self.dst.x = x - px;\n        self.dst.y = y - py;\n        self.dst.px = px;\n        self.dst.py = py;\n\n        var dst = Math.round(Math.sqrt(Math.pow(self.dst.x, 2) + Math.pow(self.dst.y, 2)));\n\n        self.dst.ax = self.dst.x / dst;\n        self.dst.ay = self.dst.y / dst;\n\n        var pa = 0;\n        var pe = dst;\n\n        if (self.dst.x == 0) {\n          pa = py;\n          pe = y;\n          self.dst.ay = 1;\n          self.dst.py = 0;\n        } else if (self.dst.y == 0) {\n          pa = px;\n          pe = x;\n          self.dst.ax = 1;\n          self.dst.px = 0;\n        }\n\n        var ms = self.getTransitionSpeed(dst);\n        if (spd && spd <= 1) ms *= spd;\n        if (ms > 0) {\n          self.bzscroll = self.bzscroll ? self.bzscroll.update(pe, ms) : new BezierClass(pa, pe, ms, 0, 1, 0, 1);\n        } else {\n          self.bzscroll = false;\n        }\n\n        if (self.timer) return;\n\n        if (py == self.page.maxh && y >= self.page.maxh || px == self.page.maxw && x >= self.page.maxw) self.checkContentSize();\n\n        var sync = 1;\n\n        function scrolling() {\n          if (self.cancelAnimationFrame) return true;\n\n          self.scrollrunning = true;\n\n          sync = 1 - sync;\n          if (sync) return self.timer = setAnimationFrame(scrolling) || 1;\n\n          var done = 0;\n          var sx, sy;\n\n          var sc = sy = self.getScrollTop();\n          if (self.dst.ay) {\n            sc = self.bzscroll ? self.dst.py + self.bzscroll.getNow() * self.dst.ay : self.newscrolly;\n            var dr = sc - sy;\n            if (dr < 0 && sc < self.newscrolly || dr > 0 && sc > self.newscrolly) sc = self.newscrolly;\n            self.setScrollTop(sc);\n            if (sc == self.newscrolly) done = 1;\n          } else {\n            done = 1;\n          }\n\n          var scx = sx = self.getScrollLeft();\n          if (self.dst.ax) {\n            scx = self.bzscroll ? self.dst.px + self.bzscroll.getNow() * self.dst.ax : self.newscrollx;\n            var dr = scx - sx;\n            if (dr < 0 && scx < self.newscrollx || dr > 0 && scx > self.newscrollx) scx = self.newscrollx;\n            self.setScrollLeft(scx);\n            if (scx == self.newscrollx) done += 1;\n          } else {\n            done += 1;\n          }\n\n          if (done == 2) {\n            self.timer = 0;\n            self.cursorfreezed = false;\n            self.bzscroll = false;\n            self.scrollrunning = false;\n            if (sc < 0) sc = 0;else if (sc > self.page.maxh) sc = Math.max(0, self.page.maxh);\n            if (scx < 0) scx = 0;else if (scx > self.page.maxw) scx = self.page.maxw;\n            if (scx != self.newscrollx || sc != self.newscrolly) self.doScrollPos(scx, sc);else {\n              if (self.onscrollend) {\n                self.triggerScrollEnd();\n              }\n            }\n          } else {\n            self.timer = setAnimationFrame(scrolling) || 1;\n          }\n        }\n        self.cancelAnimationFrame = false;\n        self.timer = 1;\n\n        if (self.onscrollstart && !self.scrollrunning) {\n          var info = {\n            \"type\": \"scrollstart\",\n            \"current\": {\n              \"x\": px,\n              \"y\": py\n            },\n            \"request\": {\n              \"x\": x,\n              \"y\": y\n            },\n            \"end\": {\n              \"x\": self.newscrollx,\n              \"y\": self.newscrolly\n            },\n            \"speed\": ms\n          };\n          self.onscrollstart.call(self, info);\n        }\n\n        scrolling();\n\n        if (py == self.page.maxh && y >= py || px == self.page.maxw && x >= px) self.checkContentSize();\n\n        self.noticeCursor();\n      };\n\n      this.cancelScroll = function () {\n        if (self.timer) clearAnimationFrame(self.timer);\n        self.timer = 0;\n        self.bzscroll = false;\n        self.scrollrunning = false;\n        return self;\n      };\n    }\n\n    this.doScrollBy = function (stp, relative) {\n      var ny = 0;\n      if (relative) {\n        ny = Math.floor((self.scroll.y - stp) * self.scrollratio.y);\n      } else {\n        var sy = self.timer ? self.newscrolly : self.getScrollTop(true);\n        ny = sy - stp;\n      }\n      if (self.bouncescroll) {\n        var haf = Math.round(self.view.h / 2);\n        if (ny < -haf) ny = -haf;else if (ny > self.page.maxh + haf) ny = self.page.maxh + haf;\n      }\n      self.cursorfreezed = false;\n\n      var py = self.getScrollTop(true);\n      if (ny < 0 && py <= 0) return self.noticeCursor();else if (ny > self.page.maxh && py >= self.page.maxh) {\n        self.checkContentSize();\n        return self.noticeCursor();\n      }\n\n      self.doScrollTop(ny);\n    };\n\n    this.doScrollLeftBy = function (stp, relative) {\n      var nx = 0;\n      if (relative) {\n        nx = Math.floor((self.scroll.x - stp) * self.scrollratio.x);\n      } else {\n        var sx = self.timer ? self.newscrollx : self.getScrollLeft(true);\n        nx = sx - stp;\n      }\n      if (self.bouncescroll) {\n        var haf = Math.round(self.view.w / 2);\n        if (nx < -haf) nx = -haf;else if (nx > self.page.maxw + haf) nx = self.page.maxw + haf;\n      }\n      self.cursorfreezed = false;\n\n      var px = self.getScrollLeft(true);\n      if (nx < 0 && px <= 0) return self.noticeCursor();else if (nx > self.page.maxw && px >= self.page.maxw) return self.noticeCursor();\n\n      self.doScrollLeft(nx);\n    };\n\n    this.doScrollTo = function (pos, relative) {\n      var ny = relative ? Math.round(pos * self.scrollratio.y) : pos;\n      if (ny < 0) ny = 0;else if (ny > self.page.maxh) ny = self.page.maxh;\n      self.cursorfreezed = false;\n      self.doScrollTop(pos);\n    };\n\n    this.checkContentSize = function () {\n      var pg = self.getContentSize();\n      if (pg.h != self.page.h || pg.w != self.page.w) self.resize(false, pg);\n    };\n\n    self.onscroll = function (e) {\n      if (self.rail.drag) return;\n      if (!self.cursorfreezed) {\n        self.synched('scroll', function () {\n          self.scroll.y = Math.round(self.getScrollTop() * (1 / self.scrollratio.y));\n          if (self.railh) self.scroll.x = Math.round(self.getScrollLeft() * (1 / self.scrollratio.x));\n          self.noticeCursor();\n        });\n      }\n    };\n    self.bind(self.docscroll, \"scroll\", self.onscroll);\n\n    this.doZoomIn = function (e) {\n      if (self.zoomactive) return;\n      self.zoomactive = true;\n\n      self.zoomrestore = {\n        style: {}\n      };\n      var lst = ['position', 'top', 'left', 'zIndex', 'backgroundColor', 'marginTop', 'marginBottom', 'marginLeft', 'marginRight'];\n      var win = self.win[0].style;\n      for (var a in lst) {\n        var pp = lst[a];\n        self.zoomrestore.style[pp] = win[pp] !== undefined ? win[pp] : '';\n      }\n\n      self.zoomrestore.style.width = self.win.css('width');\n      self.zoomrestore.style.height = self.win.css('height');\n\n      self.zoomrestore.padding = {\n        w: self.win.outerWidth() - self.win.width(),\n        h: self.win.outerHeight() - self.win.height()\n      };\n\n      if (cap.isios4) {\n        self.zoomrestore.scrollTop = $(window).scrollTop();\n        $(window).scrollTop(0);\n      }\n\n      self.win.css({\n        position: cap.isios4 ? \"absolute\" : \"fixed\",\n        top: 0,\n        left: 0,\n        zIndex: globalmaxzindex + 100,\n        margin: 0\n      });\n      var bkg = self.win.css(\"backgroundColor\");\n      if (bkg == \"\" || /transparent|rgba\\(0, 0, 0, 0\\)|rgba\\(0,0,0,0\\)/.test(bkg)) self.win.css(\"backgroundColor\", \"#fff\");\n      self.rail.css({\n        zIndex: globalmaxzindex + 101\n      });\n      self.zoom.css({\n        zIndex: globalmaxzindex + 102\n      });\n      self.zoom.css('backgroundPosition', '0px -18px');\n      self.resizeZoom();\n\n      if (self.onzoomin) self.onzoomin.call(self);\n\n      return self.cancelEvent(e);\n    };\n\n    this.doZoomOut = function (e) {\n      if (!self.zoomactive) return;\n      self.zoomactive = false;\n\n      self.win.css(\"margin\", \"\");\n      self.win.css(self.zoomrestore.style);\n\n      if (cap.isios4) {\n        $(window).scrollTop(self.zoomrestore.scrollTop);\n      }\n\n      self.rail.css({\n        \"z-index\": self.zindex\n      });\n      self.zoom.css({\n        \"z-index\": self.zindex\n      });\n      self.zoomrestore = false;\n      self.zoom.css('backgroundPosition', '0px 0px');\n      self.onResize();\n\n      if (self.onzoomout) self.onzoomout.call(self);\n\n      return self.cancelEvent(e);\n    };\n\n    this.doZoom = function (e) {\n      return self.zoomactive ? self.doZoomOut(e) : self.doZoomIn(e);\n    };\n\n    this.resizeZoom = function () {\n      if (!self.zoomactive) return;\n\n      var py = self.getScrollTop(); //preserve scrolling position\n      self.win.css({\n        width: $(window).width() - self.zoomrestore.padding.w + \"px\",\n        height: $(window).height() - self.zoomrestore.padding.h + \"px\"\n      });\n      self.onResize();\n\n      self.setScrollTop(Math.min(self.page.maxh, py));\n    };\n\n    this.init();\n\n    $.nicescroll.push(this);\n  };\n\n  // Inspired by the work of Kin Blas\n  // http://webpro.host.adobe.com/people/jblas/momentum/includes/jquery.momentum.0.7.js  \n\n\n  var ScrollMomentumClass2D = function ScrollMomentumClass2D(nc) {\n    var self = this;\n    this.nc = nc;\n\n    this.lastx = 0;\n    this.lasty = 0;\n    this.speedx = 0;\n    this.speedy = 0;\n    this.lasttime = 0;\n    this.steptime = 0;\n    this.snapx = false;\n    this.snapy = false;\n    this.demulx = 0;\n    this.demuly = 0;\n\n    this.lastscrollx = -1;\n    this.lastscrolly = -1;\n\n    this.chkx = 0;\n    this.chky = 0;\n\n    this.timer = 0;\n\n    this.time = function () {\n      return +new Date(); //beautifull hack\n    };\n\n    this.reset = function (px, py) {\n      self.stop();\n      var now = self.time();\n      self.steptime = 0;\n      self.lasttime = now;\n      self.speedx = 0;\n      self.speedy = 0;\n      self.lastx = px;\n      self.lasty = py;\n      self.lastscrollx = -1;\n      self.lastscrolly = -1;\n    };\n\n    this.update = function (px, py) {\n      var now = self.time();\n      self.steptime = now - self.lasttime;\n      self.lasttime = now;\n      var dy = py - self.lasty;\n      var dx = px - self.lastx;\n      var sy = self.nc.getScrollTop();\n      var sx = self.nc.getScrollLeft();\n      var newy = sy + dy;\n      var newx = sx + dx;\n      self.snapx = newx < 0 || newx > self.nc.page.maxw;\n      self.snapy = newy < 0 || newy > self.nc.page.maxh;\n      self.speedx = dx;\n      self.speedy = dy;\n      self.lastx = px;\n      self.lasty = py;\n    };\n\n    this.stop = function () {\n      self.nc.unsynched(\"domomentum2d\");\n      if (self.timer) clearTimeout(self.timer);\n      self.timer = 0;\n      self.lastscrollx = -1;\n      self.lastscrolly = -1;\n    };\n\n    this.doSnapy = function (nx, ny) {\n      var snap = false;\n\n      if (ny < 0) {\n        ny = 0;\n        snap = true;\n      } else if (ny > self.nc.page.maxh) {\n        ny = self.nc.page.maxh;\n        snap = true;\n      }\n\n      if (nx < 0) {\n        nx = 0;\n        snap = true;\n      } else if (nx > self.nc.page.maxw) {\n        nx = self.nc.page.maxw;\n        snap = true;\n      }\n\n      snap ? self.nc.doScrollPos(nx, ny, self.nc.opt.snapbackspeed) : self.nc.triggerScrollEnd();\n    };\n\n    this.doMomentum = function (gp) {\n      var t = self.time();\n      var l = gp ? t + gp : self.lasttime;\n\n      var sl = self.nc.getScrollLeft();\n      var st = self.nc.getScrollTop();\n\n      var pageh = self.nc.page.maxh;\n      var pagew = self.nc.page.maxw;\n\n      self.speedx = pagew > 0 ? Math.min(60, self.speedx) : 0;\n      self.speedy = pageh > 0 ? Math.min(60, self.speedy) : 0;\n\n      var chk = l && t - l <= 60;\n\n      if (st < 0 || st > pageh || sl < 0 || sl > pagew) chk = false;\n\n      var sy = self.speedy && chk ? self.speedy : false;\n      var sx = self.speedx && chk ? self.speedx : false;\n\n      if (sy || sx) {\n        var tm = Math.max(16, self.steptime); //timeout granularity\n\n        if (tm > 50) {\n          // do smooth\n          var xm = tm / 50;\n          self.speedx *= xm;\n          self.speedy *= xm;\n          tm = 50;\n        }\n\n        self.demulxy = 0;\n\n        self.lastscrollx = self.nc.getScrollLeft();\n        self.chkx = self.lastscrollx;\n        self.lastscrolly = self.nc.getScrollTop();\n        self.chky = self.lastscrolly;\n\n        var nx = self.lastscrollx;\n        var ny = self.lastscrolly;\n\n        var onscroll = function onscroll() {\n          var df = self.time() - t > 600 ? 0.04 : 0.02;\n\n          if (self.speedx) {\n            nx = Math.floor(self.lastscrollx - self.speedx * (1 - self.demulxy));\n            self.lastscrollx = nx;\n            if (nx < 0 || nx > pagew) df = 0.10;\n          }\n\n          if (self.speedy) {\n            ny = Math.floor(self.lastscrolly - self.speedy * (1 - self.demulxy));\n            self.lastscrolly = ny;\n            if (ny < 0 || ny > pageh) df = 0.10;\n          }\n\n          self.demulxy = Math.min(1, self.demulxy + df);\n\n          self.nc.synched(\"domomentum2d\", function () {\n\n            if (self.speedx) {\n              var scx = self.nc.getScrollLeft();\n              //              if (scx != self.chkx) self.stop();\n              self.chkx = nx;\n              self.nc.setScrollLeft(nx);\n            }\n\n            if (self.speedy) {\n              var scy = self.nc.getScrollTop();\n              //              if (scy != self.chky) self.stop();\n              self.chky = ny;\n              self.nc.setScrollTop(ny);\n            }\n\n            if (!self.timer) {\n              self.nc.hideCursor();\n              self.doSnapy(nx, ny);\n            }\n          });\n\n          if (self.demulxy < 1) {\n            self.timer = setTimeout(onscroll, tm);\n          } else {\n            self.stop();\n            self.nc.hideCursor();\n            self.doSnapy(nx, ny);\n          }\n        };\n\n        onscroll();\n      } else {\n        self.doSnapy(self.nc.getScrollLeft(), self.nc.getScrollTop());\n      }\n    };\n  };\n\n  // override jQuery scrollTop\n\n  var _scrollTop = jQuery.fn.scrollTop; // preserve original function\n\n  jQuery.cssHooks.pageYOffset = {\n    get: function get(elem, computed, extra) {\n      var nice = $.data(elem, '__nicescroll') || false;\n      return nice && nice.ishwscroll ? nice.getScrollTop() : _scrollTop.call(elem);\n    },\n    set: function set(elem, value) {\n      var nice = $.data(elem, '__nicescroll') || false;\n      nice && nice.ishwscroll ? nice.setScrollTop(parseInt(value)) : _scrollTop.call(elem, value);\n      return this;\n    }\n  };\n\n  /*  \n  $.fx.step[\"scrollTop\"] = function(fx){    \n    $.cssHooks[\"scrollTop\"].set( fx.elem, fx.now + fx.unit );\n  };\n  */\n\n  jQuery.fn.scrollTop = function (value) {\n    if (value === undefined) {\n      var nice = this[0] ? $.data(this[0], '__nicescroll') || false : false;\n      return nice && nice.ishwscroll ? nice.getScrollTop() : _scrollTop.call(this);\n    } else {\n      return this.each(function () {\n        var nice = $.data(this, '__nicescroll') || false;\n        nice && nice.ishwscroll ? nice.setScrollTop(parseInt(value)) : _scrollTop.call($(this), value);\n      });\n    }\n  };\n\n  // override jQuery scrollLeft\n\n  var _scrollLeft = jQuery.fn.scrollLeft; // preserve original function\n\n  $.cssHooks.pageXOffset = {\n    get: function get(elem, computed, extra) {\n      var nice = $.data(elem, '__nicescroll') || false;\n      return nice && nice.ishwscroll ? nice.getScrollLeft() : _scrollLeft.call(elem);\n    },\n    set: function set(elem, value) {\n      var nice = $.data(elem, '__nicescroll') || false;\n      nice && nice.ishwscroll ? nice.setScrollLeft(parseInt(value)) : _scrollLeft.call(elem, value);\n      return this;\n    }\n  };\n\n  /*  \n  $.fx.step[\"scrollLeft\"] = function(fx){\n    $.cssHooks[\"scrollLeft\"].set( fx.elem, fx.now + fx.unit );\n  };  \n  */\n\n  jQuery.fn.scrollLeft = function (value) {\n    if (value === undefined) {\n      var nice = this[0] ? $.data(this[0], '__nicescroll') || false : false;\n      return nice && nice.ishwscroll ? nice.getScrollLeft() : _scrollLeft.call(this);\n    } else {\n      return this.each(function () {\n        var nice = $.data(this, '__nicescroll') || false;\n        nice && nice.ishwscroll ? nice.setScrollLeft(parseInt(value)) : _scrollLeft.call($(this), value);\n      });\n    }\n  };\n\n  var NiceScrollArray = function NiceScrollArray(doms) {\n    var self = this;\n    this.length = 0;\n    this.name = \"nicescrollarray\";\n\n    this.each = function (fn) {\n      $.each(self, fn);\n      return self;\n    };\n\n    this.push = function (nice) {\n      self[self.length] = nice;\n      self.length++;\n    };\n\n    this.eq = function (idx) {\n      return self[idx];\n    };\n\n    if (doms) {\n      for (var a = 0; a < doms.length; a++) {\n        var nice = $.data(doms[a], '__nicescroll') || false;\n        if (nice) {\n          this[this.length] = nice;\n          this.length++;\n        }\n      }\n    }\n\n    return this;\n  };\n\n  function mplex(el, lst, fn) {\n    for (var a = 0; a < lst.length; a++) {\n      fn(el, lst[a]);\n    }\n  }\n  mplex(NiceScrollArray.prototype, ['show', 'hide', 'toggle', 'onResize', 'resize', 'remove', 'stop', 'doScrollPos'], function (e, n) {\n    e[n] = function () {\n      var args = arguments;\n      return this.each(function () {\n        this[n].apply(this, args);\n      });\n    };\n  });\n\n  jQuery.fn.getNiceScroll = function (index) {\n    if (index === undefined) {\n      return new NiceScrollArray(this);\n    } else {\n      return this[index] && $.data(this[index], '__nicescroll') || false;\n    }\n  };\n\n  jQuery.expr[':'].nicescroll = function (a) {\n    return $.data(a, '__nicescroll') !== undefined;\n  };\n\n  $.fn.niceScroll = function (wrapper, opt) {\n    if (opt === undefined && (typeof wrapper === 'undefined' ? 'undefined' : _typeof(wrapper)) == \"object\" && !(\"jquery\" in wrapper)) {\n      opt = wrapper;\n      wrapper = false;\n    }\n    opt = $.extend({}, opt); // cloning\n    var ret = new NiceScrollArray();\n    if (opt === undefined) opt = {};\n\n    if (wrapper || false) {\n      opt.doc = $(wrapper);\n      opt.win = $(this);\n    }\n    var docundef = !(\"doc\" in opt);\n    if (!docundef && !(\"win\" in opt)) opt.win = $(this);\n\n    this.each(function () {\n      var nice = $(this).data('__nicescroll') || false;\n      if (!nice) {\n        opt.doc = docundef ? $(this) : opt.doc;\n        nice = new NiceScrollClass(opt, $(this));\n        $(this).data('__nicescroll', nice);\n      }\n      ret.push(nice);\n    });\n    return ret.length == 1 ? ret[0] : ret;\n  };\n\n  window.NiceScroll = {\n    getjQuery: function getjQuery() {\n      return jQuery;\n    }\n  };\n\n  if (!$.nicescroll) {\n    $.nicescroll = new NiceScrollArray();\n    $.nicescroll.options = _globaloptions;\n  }\n});\n//# sourceMappingURL=data:application/json;base64,","deps":{"jquery":"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\node_modules\\jquery\\dist\\jquery.js"}},"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\resources\\scripts\\components\\channel-list.js":{"file":"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\resources\\scripts\\components\\channel-list.js","source":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.ChannelListComponent = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**\r\nreated by Chad on 2016-09-12.\r\nn\nvar _knockout = require('knockout');\n\nvar _knockout2 = _interopRequireDefault(_knockout);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar ChannelListViewModel = function () {\n    function ChannelListViewModel(params) {\n        _classCallCheck(this, ChannelListViewModel);\n\n        this.channels = params.channels;\n        this.channel = params.channel;\n    }\n\n    _createClass(ChannelListViewModel, [{\n        key: 'switchChannel',\n        value: function switchChannel(newChannel) {\n            console.log('New Channel', newChannel);\n\n            this.channel().leave();\n\n            newChannel.join();\n            this.channel(newChannel);\n        }\n    }]);\n\n    return ChannelListViewModel;\n}();\n\nvar ChannelListComponent = exports.ChannelListComponent = {\n    viewModel: ChannelListViewModel,\n    template: \"<div class=\\\"channels\\\">\\r\\n    <div class=\\\"left-menu-header\\\">\\r\\n        CHANNELS\\r\\n        <form action=\\\"#\\\" class=\\\"input-group search\\\">\\r\\n            <input type=\\\"text\\\" placeholder=\\\"search...\\\"/>\\r\\n        </form>\\r\\n    </div>\\r\\n\\r\\n    <menu class=\\\"left-menu-body list-friends list-channels\\\" data-bind=\\\"foreach: channels\\\">\\r\\n        <li data-bind=\\\"click: $root.switchChannel.bind($root)\\\">\\r\\n            <img width=\\\"50\\\" height=\\\"50\\\" src=\\\"images/no-user-image.gif\\\">\\r\\n            <div class=\\\"info\\\">\\r\\n                <div class=\\\"user\\\" data-bind=\\\"text: display_name\\\"></div>\\r\\n                <div class=\\\"status on\\\"> 13 users</div>\\r\\n            </div>\\r\\n        </li>\\r\\n    </menu>\\r\\n</div>\"\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNoYW5uZWwtbGlzdC5qcyJdLCJuYW1lcyI6WyJDaGFubmVsTGlzdFZpZXdNb2RlbCIsInBhcmFtcyIsImNoYW5uZWxzIiwiY2hhbm5lbCIsIm5ld0NoYW5uZWwiLCJjb25zb2xlIiwibG9nIiwibGVhdmUiLCJqb2luIiwiQ2hhbm5lbExpc3RDb21wb25lbnQiLCJ2aWV3TW9kZWwiLCJ0ZW1wbGF0ZSIsInJlcXVpcmUiLCJyZWFkRmlsZVN5bmMiLCJfX2Rpcm5hbWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7cWpCQUFBOzs7O0FBSUE7Ozs7Ozs7O0lBRU1BLG9CO0FBQ0Ysa0NBQVlDLE1BQVosRUFBb0I7QUFBQTs7QUFDaEIsYUFBS0MsUUFBTCxHQUFnQkQsT0FBT0MsUUFBdkI7QUFDQSxhQUFLQyxPQUFMLEdBQWVGLE9BQU9FLE9BQXRCO0FBQ0g7Ozs7c0NBRWFDLFUsRUFBWTtBQUN0QkMsb0JBQVFDLEdBQVIsQ0FBWSxhQUFaLEVBQTJCRixVQUEzQjs7QUFFQSxpQkFBS0QsT0FBTCxHQUFlSSxLQUFmOztBQUVBSCx1QkFBV0ksSUFBWDtBQUNBLGlCQUFLTCxPQUFMLENBQWFDLFVBQWI7QUFDSDs7Ozs7O0FBR0UsSUFBSUssc0RBQXVCO0FBQzlCQyxlQUFXVixvQkFEbUI7QUFFOUJXLGNBQVVDLFFBQVEsSUFBUixFQUFjQyxZQUFkLENBQTJCQyxZQUFZLG9CQUF2QyxFQUE2RCxNQUE3RDtBQUZvQixDQUEzQiIsImZpbGUiOiJjaGFubmVsLWxpc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ3JlYXRlZCBieSBDaGFkIG9uIDIwMTYtMDktMTIuXHJcbiAqL1xyXG5cclxuaW1wb3J0IGtvIGZyb20gJ2tub2Nrb3V0JztcclxuXHJcbmNsYXNzIENoYW5uZWxMaXN0Vmlld01vZGVsIHtcclxuICAgIGNvbnN0cnVjdG9yKHBhcmFtcykge1xyXG4gICAgICAgIHRoaXMuY2hhbm5lbHMgPSBwYXJhbXMuY2hhbm5lbHM7XHJcbiAgICAgICAgdGhpcy5jaGFubmVsID0gcGFyYW1zLmNoYW5uZWw7XHJcbiAgICB9XHJcblxyXG4gICAgc3dpdGNoQ2hhbm5lbChuZXdDaGFubmVsKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ05ldyBDaGFubmVsJywgbmV3Q2hhbm5lbCk7XHJcblxyXG4gICAgICAgIHRoaXMuY2hhbm5lbCgpLmxlYXZlKCk7XHJcblxyXG4gICAgICAgIG5ld0NoYW5uZWwuam9pbigpO1xyXG4gICAgICAgIHRoaXMuY2hhbm5lbChuZXdDaGFubmVsKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGxldCBDaGFubmVsTGlzdENvbXBvbmVudCA9IHtcclxuICAgIHZpZXdNb2RlbDogQ2hhbm5lbExpc3RWaWV3TW9kZWwsXHJcbiAgICB0ZW1wbGF0ZTogcmVxdWlyZSgnZnMnKS5yZWFkRmlsZVN5bmMoX19kaXJuYW1lICsgJy9jaGFubmVsLWxpc3QuaHRtbCcsICd1dGY4JylcclxufTsiXX0=","deps":{"knockout":"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\node_modules\\knockout\\build\\output\\knockout-latest.debug.js"}},"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\resources\\scripts\\components\\user-list.js":{"file":"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\resources\\scripts\\components\\user-list.js","source":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.UserListComponent = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**\r\nreated by Chad on 2016-09-12.\r\nn\nvar _knockout = require('knockout');\n\nvar _knockout2 = _interopRequireDefault(_knockout);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar UserListViewModel = function () {\n    function UserListViewModel(params) {\n        var _this = this;\n\n        _classCallCheck(this, UserListViewModel);\n\n        this.channel = params.channel;\n        this.searchQuery = _knockout2.default.observable(\"\");\n        this.users = _knockout2.default.observableArray([]);\n\n        this.filteredUsers = _knockout2.default.computed(function () {\n            return _knockout2.default.utils.arrayFilter(_this.users(), function (user) {\n                return user.name.toLowerCase().indexOf(_this.searchQuery()) > -1;\n            });\n        });\n\n        this.channel.subscribe(function (channel) {\n            _this.users([]);\n\n            channel.onUserAdded(function (user) {\n                _this.add(user);\n            });\n\n            channel.onUserRemoved(function (user) {\n                _this.remove(user);\n            });\n        });\n    }\n\n    _createClass(UserListViewModel, [{\n        key: 'add',\n        value: function add(user) {\n            console.log('Add User', user);\n\n            var found = false;\n            this.users().forEach(function (item) {\n                if (!found) {\n                    found = item.id === user.id;\n                }\n            });\n\n            if (!found) {\n                this.users.push(user);\n            }\n        }\n    }, {\n        key: 'remove',\n        value: function remove(user) {\n            console.log('Remove User', user);\n\n            this.users.remove(function (item) {\n                return item.id === user.id;\n            });\n        }\n    }]);\n\n    return UserListViewModel;\n}();\n\nvar UserListComponent = exports.UserListComponent = {\n    viewModel: UserListViewModel,\n    template: \"<div class=\\\"users\\\">\\r\\n    <div class=\\\"left-menu-header\\\">\\r\\n        USERS\\r\\n        <form action=\\\"#\\\" class=\\\"input-group search\\\" data-bind=\\\"textInput: searchQuery\\\">\\r\\n            <input type=\\\"text\\\" placeholder=\\\"search...\\\"/>\\r\\n        </form>\\r\\n    </div>\\r\\n\\r\\n    <menu class=\\\"left-menu-body list-friends\\\" data-bind=\\\"foreach: filteredUsers()\\\">\\r\\n        <li>\\r\\n            <img width=\\\"50\\\" height=\\\"50\\\" src=\\\"images/no-user-image.gif\\\">\\r\\n            <div class=\\\"info\\\">\\r\\n                <div class=\\\"user\\\" data-bind=\\\"text: name\\\"></div>\\r\\n                <div class=\\\"status on\\\"> online</div>\\r\\n            </div>\\r\\n        </li>\\r\\n    </menu>\\r\\n</div>\"\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVzZXItbGlzdC5qcyJdLCJuYW1lcyI6WyJVc2VyTGlzdFZpZXdNb2RlbCIsInBhcmFtcyIsImNoYW5uZWwiLCJzZWFyY2hRdWVyeSIsIm9ic2VydmFibGUiLCJ1c2VycyIsIm9ic2VydmFibGVBcnJheSIsImZpbHRlcmVkVXNlcnMiLCJjb21wdXRlZCIsInV0aWxzIiwiYXJyYXlGaWx0ZXIiLCJ1c2VyIiwibmFtZSIsInRvTG93ZXJDYXNlIiwiaW5kZXhPZiIsInN1YnNjcmliZSIsIm9uVXNlckFkZGVkIiwiYWRkIiwib25Vc2VyUmVtb3ZlZCIsInJlbW92ZSIsImNvbnNvbGUiLCJsb2ciLCJmb3VuZCIsImZvckVhY2giLCJpdGVtIiwiaWQiLCJwdXNoIiwiVXNlckxpc3RDb21wb25lbnQiLCJ2aWV3TW9kZWwiLCJ0ZW1wbGF0ZSIsInJlcXVpcmUiLCJyZWFkRmlsZVN5bmMiLCJfX2Rpcm5hbWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7cWpCQUFBOzs7O0FBSUE7Ozs7Ozs7O0lBRU1BLGlCO0FBQ0YsK0JBQVlDLE1BQVosRUFBb0I7QUFBQTs7QUFBQTs7QUFDaEIsYUFBS0MsT0FBTCxHQUFlRCxPQUFPQyxPQUF0QjtBQUNBLGFBQUtDLFdBQUwsR0FBbUIsbUJBQUdDLFVBQUgsQ0FBYyxFQUFkLENBQW5CO0FBQ0EsYUFBS0MsS0FBTCxHQUFhLG1CQUFHQyxlQUFILENBQW1CLEVBQW5CLENBQWI7O0FBRUEsYUFBS0MsYUFBTCxHQUFxQixtQkFBR0MsUUFBSCxDQUFZLFlBQU07QUFDbkMsbUJBQU8sbUJBQUdDLEtBQUgsQ0FBU0MsV0FBVCxDQUFxQixNQUFLTCxLQUFMLEVBQXJCLEVBQW1DLFVBQUNNLElBQUQsRUFBVTtBQUNoRCx1QkFBT0EsS0FBS0MsSUFBTCxDQUFVQyxXQUFWLEdBQXdCQyxPQUF4QixDQUFnQyxNQUFLWCxXQUFMLEVBQWhDLElBQXNELENBQUMsQ0FBOUQ7QUFDSCxhQUZNLENBQVA7QUFHSCxTQUpvQixDQUFyQjs7QUFNQSxhQUFLRCxPQUFMLENBQWFhLFNBQWIsQ0FBdUIsVUFBQ2IsT0FBRCxFQUFhO0FBQ2hDLGtCQUFLRyxLQUFMLENBQVcsRUFBWDs7QUFFQUgsb0JBQVFjLFdBQVIsQ0FBb0IsVUFBQ0wsSUFBRCxFQUFVO0FBQzFCLHNCQUFLTSxHQUFMLENBQVNOLElBQVQ7QUFDSCxhQUZEOztBQUlBVCxvQkFBUWdCLGFBQVIsQ0FBc0IsVUFBQ1AsSUFBRCxFQUFVO0FBQzVCLHNCQUFLUSxNQUFMLENBQVlSLElBQVo7QUFDSCxhQUZEO0FBR0gsU0FWRDtBQVdIOzs7OzRCQUVHQSxJLEVBQU07QUFDTlMsb0JBQVFDLEdBQVIsQ0FBWSxVQUFaLEVBQXdCVixJQUF4Qjs7QUFFQSxnQkFBSVcsUUFBUSxLQUFaO0FBQ0EsaUJBQUtqQixLQUFMLEdBQWFrQixPQUFiLENBQXFCLFVBQUNDLElBQUQsRUFBVTtBQUMzQixvQkFBSSxDQUFDRixLQUFMLEVBQVk7QUFDUkEsNEJBQVFFLEtBQUtDLEVBQUwsS0FBWWQsS0FBS2MsRUFBekI7QUFDSDtBQUNKLGFBSkQ7O0FBTUEsZ0JBQUksQ0FBQ0gsS0FBTCxFQUFZO0FBQ1IscUJBQUtqQixLQUFMLENBQVdxQixJQUFYLENBQWdCZixJQUFoQjtBQUNIO0FBQ0o7OzsrQkFFTUEsSSxFQUFNO0FBQ1RTLG9CQUFRQyxHQUFSLENBQVksYUFBWixFQUEyQlYsSUFBM0I7O0FBRUEsaUJBQUtOLEtBQUwsQ0FBV2MsTUFBWCxDQUFrQixVQUFDSyxJQUFELEVBQVU7QUFDeEIsdUJBQU9BLEtBQUtDLEVBQUwsS0FBWWQsS0FBS2MsRUFBeEI7QUFDSCxhQUZEO0FBR0g7Ozs7OztBQUtFLElBQUlFLGdEQUFvQjtBQUMzQkMsZUFBVzVCLGlCQURnQjtBQUUzQjZCLGNBQVVDLFFBQVEsSUFBUixFQUFjQyxZQUFkLENBQTJCQyxZQUFZLGlCQUF2QyxFQUEwRCxNQUExRDtBQUZpQixDQUF4QiIsImZpbGUiOiJ1c2VyLWxpc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ3JlYXRlZCBieSBDaGFkIG9uIDIwMTYtMDktMTIuXHJcbiAqL1xyXG5cclxuaW1wb3J0IGtvIGZyb20gJ2tub2Nrb3V0JztcclxuXHJcbmNsYXNzIFVzZXJMaXN0Vmlld01vZGVsIHtcclxuICAgIGNvbnN0cnVjdG9yKHBhcmFtcykge1xyXG4gICAgICAgIHRoaXMuY2hhbm5lbCA9IHBhcmFtcy5jaGFubmVsO1xyXG4gICAgICAgIHRoaXMuc2VhcmNoUXVlcnkgPSBrby5vYnNlcnZhYmxlKFwiXCIpO1xyXG4gICAgICAgIHRoaXMudXNlcnMgPSBrby5vYnNlcnZhYmxlQXJyYXkoW10pO1xyXG5cclxuICAgICAgICB0aGlzLmZpbHRlcmVkVXNlcnMgPSBrby5jb21wdXRlZCgoKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBrby51dGlscy5hcnJheUZpbHRlcih0aGlzLnVzZXJzKCksICh1c2VyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdXNlci5uYW1lLnRvTG93ZXJDYXNlKCkuaW5kZXhPZih0aGlzLnNlYXJjaFF1ZXJ5KCkpID4gLTE7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLmNoYW5uZWwuc3Vic2NyaWJlKChjaGFubmVsKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMudXNlcnMoW10pO1xyXG5cclxuICAgICAgICAgICAgY2hhbm5lbC5vblVzZXJBZGRlZCgodXNlcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hZGQodXNlcik7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgY2hhbm5lbC5vblVzZXJSZW1vdmVkKCh1c2VyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZSh1c2VyKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkKHVzZXIpIHtcclxuICAgICAgICBjb25zb2xlLmxvZygnQWRkIFVzZXInLCB1c2VyKTtcclxuXHJcbiAgICAgICAgbGV0IGZvdW5kID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy51c2VycygpLmZvckVhY2goKGl0ZW0pID0+IHtcclxuICAgICAgICAgICAgaWYgKCFmb3VuZCkge1xyXG4gICAgICAgICAgICAgICAgZm91bmQgPSBpdGVtLmlkID09PSB1c2VyLmlkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGlmICghZm91bmQpIHtcclxuICAgICAgICAgICAgdGhpcy51c2Vycy5wdXNoKHVzZXIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZW1vdmUodXNlcikge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdSZW1vdmUgVXNlcicsIHVzZXIpO1xyXG5cclxuICAgICAgICB0aGlzLnVzZXJzLnJlbW92ZSgoaXRlbSkgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gaXRlbS5pZCA9PT0gdXNlci5pZDtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcblxyXG5leHBvcnQgbGV0IFVzZXJMaXN0Q29tcG9uZW50ID0ge1xyXG4gICAgdmlld01vZGVsOiBVc2VyTGlzdFZpZXdNb2RlbCxcclxuICAgIHRlbXBsYXRlOiByZXF1aXJlKCdmcycpLnJlYWRGaWxlU3luYyhfX2Rpcm5hbWUgKyAnL3VzZXItbGlzdC5odG1sJywgJ3V0ZjgnKVxyXG59OyJdfQ==","deps":{"knockout":"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\node_modules\\knockout\\build\\output\\knockout-latest.debug.js"}},"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\node_modules\\pusher-js\\dist\\web\\pusher.js":{"file":"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\node_modules\\pusher-js\\dist\\web\\pusher.js","source":"(function (global){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\n;jQuery = global.jQuery = require('C:\\\\Users\\\\koise\\\\Desktop\\\\git\\\\Chat-Backend\\\\node_modules\\\\jquery\\\\dist\\\\jquery');\n;var __browserify_shim_require__ = require;(function browserifyShim(module, define, require) {\n\t/*!\n  * Pusher JavaScript Library v3.2.0\n  * http://pusher.com/\n  *\n  * Copyright 2016, Pusher\n  * Released under the MIT licence.\n  */\n\n\t(function webpackUniversalModuleDefinition(root, factory) {\n\t\tif ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object' && (typeof module === 'undefined' ? 'undefined' : _typeof(module)) === 'object') module.exports = factory();else if (typeof define === 'function' && define.amd) define([], factory);else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') exports[\"Pusher\"] = factory();else root[\"Pusher\"] = factory();\n\t})(this, function () {\n\t\treturn (/******/function (modules) {\n\t\t\t\t// webpackBootstrap\n\t\t\t\t/******/ // The module cache\n\t\t\t\t/******/var installedModules = {};\n\n\t\t\t\t/******/ // The require function\n\t\t\t\t/******/function __webpack_require__(moduleId) {\n\n\t\t\t\t\t/******/ // Check if module is in cache\n\t\t\t\t\t/******/if (installedModules[moduleId])\n\t\t\t\t\t\t/******/return installedModules[moduleId].exports;\n\n\t\t\t\t\t/******/ // Create a new module (and put it into the cache)\n\t\t\t\t\t/******/var module = installedModules[moduleId] = {\n\t\t\t\t\t\t/******/exports: {},\n\t\t\t\t\t\t/******/id: moduleId,\n\t\t\t\t\t\t/******/loaded: false\n\t\t\t\t\t\t/******/ };\n\n\t\t\t\t\t/******/ // Execute the module function\n\t\t\t\t\t/******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t\t\t\t\t/******/ // Flag the module as loaded\n\t\t\t\t\t/******/module.loaded = true;\n\n\t\t\t\t\t/******/ // Return the exports of the module\n\t\t\t\t\t/******/return module.exports;\n\t\t\t\t\t/******/\n\t\t\t\t}\n\n\t\t\t\t/******/ // expose the modules object (__webpack_modules__)\n\t\t\t\t/******/__webpack_require__.m = modules;\n\n\t\t\t\t/******/ // expose the module cache\n\t\t\t\t/******/__webpack_require__.c = installedModules;\n\n\t\t\t\t/******/ // __webpack_public_path__\n\t\t\t\t/******/__webpack_require__.p = \"\";\n\n\t\t\t\t/******/ // Load entry module and return exports\n\t\t\t\t/******/return __webpack_require__(0);\n\t\t\t\t/******/\n\t\t\t}(\n\t\t\t/************************************************************************/\n\t\t\t/******/[\n\t\t\t/* 0 */\n\t\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\t\"use strict\";\n\n\t\t\t\tvar pusher_1 = __webpack_require__(1);\n\t\t\t\tmodule.exports = pusher_1[\"default\"];\n\n\t\t\t\t/***/\n\t\t\t},\n\t\t\t/* 1 */\n\t\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\t\"use strict\";\n\n\t\t\t\tvar runtime_1 = __webpack_require__(2);\n\t\t\t\tvar Collections = __webpack_require__(9);\n\t\t\t\tvar dispatcher_1 = __webpack_require__(23);\n\t\t\t\tvar timeline_1 = __webpack_require__(38);\n\t\t\t\tvar level_1 = __webpack_require__(39);\n\t\t\t\tvar StrategyBuilder = __webpack_require__(40);\n\t\t\t\tvar timers_1 = __webpack_require__(12);\n\t\t\t\tvar defaults_1 = __webpack_require__(5);\n\t\t\t\tvar DefaultConfig = __webpack_require__(62);\n\t\t\t\tvar logger_1 = __webpack_require__(8);\n\t\t\t\tvar factory_1 = __webpack_require__(42);\n\t\t\t\tvar Pusher = function () {\n\t\t\t\t\tfunction Pusher(app_key, options) {\n\t\t\t\t\t\tvar _this = this;\n\t\t\t\t\t\tcheckAppKey(app_key);\n\t\t\t\t\t\toptions = options || {};\n\t\t\t\t\t\tthis.key = app_key;\n\t\t\t\t\t\tthis.config = Collections.extend(DefaultConfig.getGlobalConfig(), options.cluster ? DefaultConfig.getClusterConfig(options.cluster) : {}, options);\n\t\t\t\t\t\tthis.channels = factory_1[\"default\"].createChannels();\n\t\t\t\t\t\tthis.global_emitter = new dispatcher_1[\"default\"]();\n\t\t\t\t\t\tthis.sessionID = Math.floor(Math.random() * 1000000000);\n\t\t\t\t\t\tthis.timeline = new timeline_1[\"default\"](this.key, this.sessionID, {\n\t\t\t\t\t\t\tcluster: this.config.cluster,\n\t\t\t\t\t\t\tfeatures: Pusher.getClientFeatures(),\n\t\t\t\t\t\t\tparams: this.config.timelineParams || {},\n\t\t\t\t\t\t\tlimit: 50,\n\t\t\t\t\t\t\tlevel: level_1[\"default\"].INFO,\n\t\t\t\t\t\t\tversion: defaults_1[\"default\"].VERSION\n\t\t\t\t\t\t});\n\t\t\t\t\t\tif (!this.config.disableStats) {\n\t\t\t\t\t\t\tthis.timelineSender = factory_1[\"default\"].createTimelineSender(this.timeline, {\n\t\t\t\t\t\t\t\thost: this.config.statsHost,\n\t\t\t\t\t\t\t\tpath: \"/timeline/v2/\" + runtime_1[\"default\"].TimelineTransport.name\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar getStrategy = function getStrategy(options) {\n\t\t\t\t\t\t\tvar config = Collections.extend({}, _this.config, options);\n\t\t\t\t\t\t\treturn StrategyBuilder.build(runtime_1[\"default\"].getDefaultStrategy(config), config);\n\t\t\t\t\t\t};\n\t\t\t\t\t\tthis.connection = factory_1[\"default\"].createConnectionManager(this.key, Collections.extend({ getStrategy: getStrategy,\n\t\t\t\t\t\t\ttimeline: this.timeline,\n\t\t\t\t\t\t\tactivityTimeout: this.config.activity_timeout,\n\t\t\t\t\t\t\tpongTimeout: this.config.pong_timeout,\n\t\t\t\t\t\t\tunavailableTimeout: this.config.unavailable_timeout\n\t\t\t\t\t\t}, this.config, { encrypted: this.isEncrypted() }));\n\t\t\t\t\t\tthis.connection.bind('connected', function () {\n\t\t\t\t\t\t\t_this.subscribeAll();\n\t\t\t\t\t\t\tif (_this.timelineSender) {\n\t\t\t\t\t\t\t\t_this.timelineSender.send(_this.connection.isEncrypted());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tthis.connection.bind('message', function (params) {\n\t\t\t\t\t\t\tvar internal = params.event.indexOf('pusher_internal:') === 0;\n\t\t\t\t\t\t\tif (params.channel) {\n\t\t\t\t\t\t\t\tvar channel = _this.channel(params.channel);\n\t\t\t\t\t\t\t\tif (channel) {\n\t\t\t\t\t\t\t\t\tchannel.handleEvent(params.event, params.data);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (!internal) {\n\t\t\t\t\t\t\t\t_this.global_emitter.emit(params.event, params.data);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tthis.connection.bind('disconnected', function () {\n\t\t\t\t\t\t\t_this.channels.disconnect();\n\t\t\t\t\t\t});\n\t\t\t\t\t\tthis.connection.bind('error', function (err) {\n\t\t\t\t\t\t\tlogger_1[\"default\"].warn('Error', err);\n\t\t\t\t\t\t});\n\t\t\t\t\t\tPusher.instances.push(this);\n\t\t\t\t\t\tthis.timeline.info({ instances: Pusher.instances.length });\n\t\t\t\t\t\tif (Pusher.isReady) {\n\t\t\t\t\t\t\tthis.connect();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tPusher.ready = function () {\n\t\t\t\t\t\tPusher.isReady = true;\n\t\t\t\t\t\tfor (var i = 0, l = Pusher.instances.length; i < l; i++) {\n\t\t\t\t\t\t\tPusher.instances[i].connect();\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tPusher.log = function (message) {\n\t\t\t\t\t\tif (Pusher.logToConsole && window.console && window.console.log) {\n\t\t\t\t\t\t\twindow.console.log(message);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tPusher.getClientFeatures = function () {\n\t\t\t\t\t\treturn Collections.keys(Collections.filterObject({ \"ws\": runtime_1[\"default\"].Transports.ws }, function (t) {\n\t\t\t\t\t\t\treturn t.isSupported({});\n\t\t\t\t\t\t}));\n\t\t\t\t\t};\n\t\t\t\t\tPusher.prototype.channel = function (name) {\n\t\t\t\t\t\treturn this.channels.find(name);\n\t\t\t\t\t};\n\t\t\t\t\tPusher.prototype.allChannels = function () {\n\t\t\t\t\t\treturn this.channels.all();\n\t\t\t\t\t};\n\t\t\t\t\tPusher.prototype.connect = function () {\n\t\t\t\t\t\tthis.connection.connect();\n\t\t\t\t\t\tif (this.timelineSender) {\n\t\t\t\t\t\t\tif (!this.timelineSenderTimer) {\n\t\t\t\t\t\t\t\tvar encrypted = this.connection.isEncrypted();\n\t\t\t\t\t\t\t\tvar timelineSender = this.timelineSender;\n\t\t\t\t\t\t\t\tthis.timelineSenderTimer = new timers_1.PeriodicTimer(60000, function () {\n\t\t\t\t\t\t\t\t\ttimelineSender.send(encrypted);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tPusher.prototype.disconnect = function () {\n\t\t\t\t\t\tthis.connection.disconnect();\n\t\t\t\t\t\tif (this.timelineSenderTimer) {\n\t\t\t\t\t\t\tthis.timelineSenderTimer.ensureAborted();\n\t\t\t\t\t\t\tthis.timelineSenderTimer = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tPusher.prototype.bind = function (event_name, callback) {\n\t\t\t\t\t\tthis.global_emitter.bind(event_name, callback);\n\t\t\t\t\t\treturn this;\n\t\t\t\t\t};\n\t\t\t\t\tPusher.prototype.unbind = function (event_name, callback) {\n\t\t\t\t\t\tthis.global_emitter.unbind(event_name, callback);\n\t\t\t\t\t\treturn this;\n\t\t\t\t\t};\n\t\t\t\t\tPusher.prototype.bind_all = function (callback) {\n\t\t\t\t\t\tthis.global_emitter.bind_all(callback);\n\t\t\t\t\t\treturn this;\n\t\t\t\t\t};\n\t\t\t\t\tPusher.prototype.subscribeAll = function () {\n\t\t\t\t\t\tvar channelName;\n\t\t\t\t\t\tfor (channelName in this.channels.channels) {\n\t\t\t\t\t\t\tif (this.channels.channels.hasOwnProperty(channelName)) {\n\t\t\t\t\t\t\t\tthis.subscribe(channelName);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tPusher.prototype.subscribe = function (channel_name) {\n\t\t\t\t\t\tvar channel = this.channels.add(channel_name, this);\n\t\t\t\t\t\tif (this.connection.state === \"connected\") {\n\t\t\t\t\t\t\tchannel.subscribe();\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn channel;\n\t\t\t\t\t};\n\t\t\t\t\tPusher.prototype.unsubscribe = function (channel_name) {\n\t\t\t\t\t\tvar channel = this.channels.remove(channel_name);\n\t\t\t\t\t\tif (channel && this.connection.state === \"connected\") {\n\t\t\t\t\t\t\tchannel.unsubscribe();\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tPusher.prototype.send_event = function (event_name, data, channel) {\n\t\t\t\t\t\treturn this.connection.send_event(event_name, data, channel);\n\t\t\t\t\t};\n\t\t\t\t\tPusher.prototype.isEncrypted = function () {\n\t\t\t\t\t\tif (runtime_1[\"default\"].getProtocol() === \"https:\") {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn Boolean(this.config.encrypted);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tPusher.instances = [];\n\t\t\t\t\tPusher.isReady = false;\n\t\t\t\t\tPusher.logToConsole = false;\n\t\t\t\t\tPusher.Runtime = runtime_1[\"default\"];\n\t\t\t\t\tPusher.ScriptReceivers = runtime_1[\"default\"].ScriptReceivers;\n\t\t\t\t\tPusher.DependenciesReceivers = runtime_1[\"default\"].DependenciesReceivers;\n\t\t\t\t\tPusher.auth_callbacks = runtime_1[\"default\"].auth_callbacks;\n\t\t\t\t\treturn Pusher;\n\t\t\t\t}();\n\t\t\t\texports.__esModule = true;\n\t\t\t\texports[\"default\"] = Pusher;\n\t\t\t\tfunction checkAppKey(key) {\n\t\t\t\t\tif (key === null || key === undefined) {\n\t\t\t\t\t\tthrow \"You must pass your app key when you instantiate Pusher.\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\truntime_1[\"default\"].setup(Pusher);\n\n\t\t\t\t/***/\n\t\t\t},\n\t\t\t/* 2 */\n\t\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\t\"use strict\";\n\n\t\t\t\tvar dependencies_1 = __webpack_require__(3);\n\t\t\t\tvar xhr_auth_1 = __webpack_require__(7);\n\t\t\t\tvar jsonp_auth_1 = __webpack_require__(14);\n\t\t\t\tvar script_request_1 = __webpack_require__(15);\n\t\t\t\tvar jsonp_request_1 = __webpack_require__(16);\n\t\t\t\tvar script_receiver_factory_1 = __webpack_require__(4);\n\t\t\t\tvar jsonp_timeline_1 = __webpack_require__(17);\n\t\t\t\tvar transports_1 = __webpack_require__(18);\n\t\t\t\tvar net_info_1 = __webpack_require__(25);\n\t\t\t\tvar default_strategy_1 = __webpack_require__(26);\n\t\t\t\tvar transport_connection_initializer_1 = __webpack_require__(27);\n\t\t\t\tvar http_1 = __webpack_require__(28);\n\t\t\t\tvar Runtime = {\n\t\t\t\t\tnextAuthCallbackID: 1,\n\t\t\t\t\tauth_callbacks: {},\n\t\t\t\t\tScriptReceivers: script_receiver_factory_1.ScriptReceivers,\n\t\t\t\t\tDependenciesReceivers: dependencies_1.DependenciesReceivers,\n\t\t\t\t\tgetDefaultStrategy: default_strategy_1[\"default\"],\n\t\t\t\t\tTransports: transports_1[\"default\"],\n\t\t\t\t\ttransportConnectionInitializer: transport_connection_initializer_1[\"default\"],\n\t\t\t\t\tHTTPFactory: http_1[\"default\"],\n\t\t\t\t\tTimelineTransport: jsonp_timeline_1[\"default\"],\n\t\t\t\t\tgetXHRAPI: function getXHRAPI() {\n\t\t\t\t\t\treturn window.XMLHttpRequest;\n\t\t\t\t\t},\n\t\t\t\t\tgetWebSocketAPI: function getWebSocketAPI() {\n\t\t\t\t\t\treturn window.WebSocket || window.MozWebSocket;\n\t\t\t\t\t},\n\t\t\t\t\tsetup: function setup(PusherClass) {\n\t\t\t\t\t\tvar _this = this;\n\t\t\t\t\t\twindow.Pusher = PusherClass;\n\t\t\t\t\t\tvar initializeOnDocumentBody = function initializeOnDocumentBody() {\n\t\t\t\t\t\t\t_this.onDocumentBody(PusherClass.ready);\n\t\t\t\t\t\t};\n\t\t\t\t\t\tif (!window.JSON) {\n\t\t\t\t\t\t\tdependencies_1.Dependencies.load(\"json2\", {}, initializeOnDocumentBody);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tinitializeOnDocumentBody();\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tgetDocument: function getDocument() {\n\t\t\t\t\t\treturn document;\n\t\t\t\t\t},\n\t\t\t\t\tgetProtocol: function getProtocol() {\n\t\t\t\t\t\treturn this.getDocument().location.protocol;\n\t\t\t\t\t},\n\t\t\t\t\tgetAuthorizers: function getAuthorizers() {\n\t\t\t\t\t\treturn { ajax: xhr_auth_1[\"default\"], jsonp: jsonp_auth_1[\"default\"] };\n\t\t\t\t\t},\n\t\t\t\t\tonDocumentBody: function onDocumentBody(callback) {\n\t\t\t\t\t\tvar _this = this;\n\t\t\t\t\t\tif (document.body) {\n\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t\t\t\t_this.onDocumentBody(callback);\n\t\t\t\t\t\t\t}, 0);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tcreateJSONPRequest: function createJSONPRequest(url, data) {\n\t\t\t\t\t\treturn new jsonp_request_1[\"default\"](url, data);\n\t\t\t\t\t},\n\t\t\t\t\tcreateScriptRequest: function createScriptRequest(src) {\n\t\t\t\t\t\treturn new script_request_1[\"default\"](src);\n\t\t\t\t\t},\n\t\t\t\t\tgetLocalStorage: function getLocalStorage() {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\treturn window.localStorage;\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tcreateXHR: function createXHR() {\n\t\t\t\t\t\tif (this.getXHRAPI()) {\n\t\t\t\t\t\t\treturn this.createXMLHttpRequest();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn this.createMicrosoftXHR();\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tcreateXMLHttpRequest: function createXMLHttpRequest() {\n\t\t\t\t\t\tvar Constructor = this.getXHRAPI();\n\t\t\t\t\t\treturn new Constructor();\n\t\t\t\t\t},\n\t\t\t\t\tcreateMicrosoftXHR: function createMicrosoftXHR() {\n\t\t\t\t\t\treturn new ActiveXObject(\"Microsoft.XMLHTTP\");\n\t\t\t\t\t},\n\t\t\t\t\tgetNetwork: function getNetwork() {\n\t\t\t\t\t\treturn net_info_1.Network;\n\t\t\t\t\t},\n\t\t\t\t\tcreateWebSocket: function createWebSocket(url) {\n\t\t\t\t\t\tvar Constructor = this.getWebSocketAPI();\n\t\t\t\t\t\treturn new Constructor(url);\n\t\t\t\t\t},\n\t\t\t\t\tcreateSocketRequest: function createSocketRequest(method, url) {\n\t\t\t\t\t\tif (this.isXHRSupported()) {\n\t\t\t\t\t\t\treturn this.HTTPFactory.createXHR(method, url);\n\t\t\t\t\t\t} else if (this.isXDRSupported(url.indexOf(\"https:\") === 0)) {\n\t\t\t\t\t\t\treturn this.HTTPFactory.createXDR(method, url);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrow \"Cross-origin HTTP requests are not supported\";\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tisXHRSupported: function isXHRSupported() {\n\t\t\t\t\t\tvar Constructor = this.getXHRAPI();\n\t\t\t\t\t\treturn Boolean(Constructor) && new Constructor().withCredentials !== undefined;\n\t\t\t\t\t},\n\t\t\t\t\tisXDRSupported: function isXDRSupported(encrypted) {\n\t\t\t\t\t\tvar protocol = encrypted ? \"https:\" : \"http:\";\n\t\t\t\t\t\tvar documentProtocol = this.getProtocol();\n\t\t\t\t\t\treturn Boolean(window['XDomainRequest']) && documentProtocol === protocol;\n\t\t\t\t\t},\n\t\t\t\t\taddUnloadListener: function addUnloadListener(listener) {\n\t\t\t\t\t\tif (window.addEventListener !== undefined) {\n\t\t\t\t\t\t\twindow.addEventListener(\"unload\", listener, false);\n\t\t\t\t\t\t} else if (window.attachEvent !== undefined) {\n\t\t\t\t\t\t\twindow.attachEvent(\"onunload\", listener);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tremoveUnloadListener: function removeUnloadListener(listener) {\n\t\t\t\t\t\tif (window.addEventListener !== undefined) {\n\t\t\t\t\t\t\twindow.removeEventListener(\"unload\", listener, false);\n\t\t\t\t\t\t} else if (window.detachEvent !== undefined) {\n\t\t\t\t\t\t\twindow.detachEvent(\"onunload\", listener);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\texports.__esModule = true;\n\t\t\t\texports[\"default\"] = Runtime;\n\n\t\t\t\t/***/\n\t\t\t},\n\t\t\t/* 3 */\n\t\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\t\"use strict\";\n\n\t\t\t\tvar script_receiver_factory_1 = __webpack_require__(4);\n\t\t\t\tvar defaults_1 = __webpack_require__(5);\n\t\t\t\tvar dependency_loader_1 = __webpack_require__(6);\n\t\t\t\texports.DependenciesReceivers = new script_receiver_factory_1.ScriptReceiverFactory(\"_pusher_dependencies\", \"Pusher.DependenciesReceivers\");\n\t\t\t\texports.Dependencies = new dependency_loader_1[\"default\"]({\n\t\t\t\t\tcdn_http: defaults_1[\"default\"].cdn_http,\n\t\t\t\t\tcdn_https: defaults_1[\"default\"].cdn_https,\n\t\t\t\t\tversion: defaults_1[\"default\"].VERSION,\n\t\t\t\t\tsuffix: defaults_1[\"default\"].dependency_suffix,\n\t\t\t\t\treceivers: exports.DependenciesReceivers\n\t\t\t\t});\n\n\t\t\t\t/***/\n\t\t\t},\n\t\t\t/* 4 */\n\t\t\t/***/function (module, exports) {\n\n\t\t\t\t\"use strict\";\n\n\t\t\t\tvar ScriptReceiverFactory = function () {\n\t\t\t\t\tfunction ScriptReceiverFactory(prefix, name) {\n\t\t\t\t\t\tthis.lastId = 0;\n\t\t\t\t\t\tthis.prefix = prefix;\n\t\t\t\t\t\tthis.name = name;\n\t\t\t\t\t}\n\t\t\t\t\tScriptReceiverFactory.prototype.create = function (callback) {\n\t\t\t\t\t\tthis.lastId++;\n\t\t\t\t\t\tvar number = this.lastId;\n\t\t\t\t\t\tvar id = this.prefix + number;\n\t\t\t\t\t\tvar name = this.name + \"[\" + number + \"]\";\n\t\t\t\t\t\tvar called = false;\n\t\t\t\t\t\tvar callbackWrapper = function callbackWrapper() {\n\t\t\t\t\t\t\tif (!called) {\n\t\t\t\t\t\t\t\tcallback.apply(null, arguments);\n\t\t\t\t\t\t\t\tcalled = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t\tthis[number] = callbackWrapper;\n\t\t\t\t\t\treturn { number: number, id: id, name: name, callback: callbackWrapper };\n\t\t\t\t\t};\n\t\t\t\t\tScriptReceiverFactory.prototype.remove = function (receiver) {\n\t\t\t\t\t\tdelete this[receiver.number];\n\t\t\t\t\t};\n\t\t\t\t\treturn ScriptReceiverFactory;\n\t\t\t\t}();\n\t\t\t\texports.ScriptReceiverFactory = ScriptReceiverFactory;\n\t\t\t\texports.ScriptReceivers = new ScriptReceiverFactory(\"_pusher_script_\", \"Pusher.ScriptReceivers\");\n\n\t\t\t\t/***/\n\t\t\t},\n\t\t\t/* 5 */\n\t\t\t/***/function (module, exports) {\n\n\t\t\t\t\"use strict\";\n\n\t\t\t\tvar Defaults = {\n\t\t\t\t\tVERSION: \"3.2.0\",\n\t\t\t\t\tPROTOCOL: 7,\n\t\t\t\t\thost: 'ws.pusherapp.com',\n\t\t\t\t\tws_port: 80,\n\t\t\t\t\twss_port: 443,\n\t\t\t\t\tsockjs_host: 'sockjs.pusher.com',\n\t\t\t\t\tsockjs_http_port: 80,\n\t\t\t\t\tsockjs_https_port: 443,\n\t\t\t\t\tsockjs_path: \"/pusher\",\n\t\t\t\t\tstats_host: 'stats.pusher.com',\n\t\t\t\t\tchannel_auth_endpoint: '/pusher/auth',\n\t\t\t\t\tchannel_auth_transport: 'ajax',\n\t\t\t\t\tactivity_timeout: 120000,\n\t\t\t\t\tpong_timeout: 30000,\n\t\t\t\t\tunavailable_timeout: 10000,\n\t\t\t\t\tcdn_http: 'http://js.pusher.com',\n\t\t\t\t\tcdn_https: 'https://js.pusher.com',\n\t\t\t\t\tdependency_suffix: ''\n\t\t\t\t};\n\t\t\t\texports.__esModule = true;\n\t\t\t\texports[\"default\"] = Defaults;\n\n\t\t\t\t/***/\n\t\t\t},\n\t\t\t/* 6 */\n\t\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\t\"use strict\";\n\n\t\t\t\tvar script_receiver_factory_1 = __webpack_require__(4);\n\t\t\t\tvar runtime_1 = __webpack_require__(2);\n\t\t\t\tvar DependencyLoader = function () {\n\t\t\t\t\tfunction DependencyLoader(options) {\n\t\t\t\t\t\tthis.options = options;\n\t\t\t\t\t\tthis.receivers = options.receivers || script_receiver_factory_1.ScriptReceivers;\n\t\t\t\t\t\tthis.loading = {};\n\t\t\t\t\t}\n\t\t\t\t\tDependencyLoader.prototype.load = function (name, options, callback) {\n\t\t\t\t\t\tvar self = this;\n\t\t\t\t\t\tif (self.loading[name] && self.loading[name].length > 0) {\n\t\t\t\t\t\t\tself.loading[name].push(callback);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tself.loading[name] = [callback];\n\t\t\t\t\t\t\tvar request = runtime_1[\"default\"].createScriptRequest(self.getPath(name, options));\n\t\t\t\t\t\t\tvar receiver = self.receivers.create(function (error) {\n\t\t\t\t\t\t\t\tself.receivers.remove(receiver);\n\t\t\t\t\t\t\t\tif (self.loading[name]) {\n\t\t\t\t\t\t\t\t\tvar callbacks = self.loading[name];\n\t\t\t\t\t\t\t\t\tdelete self.loading[name];\n\t\t\t\t\t\t\t\t\tvar successCallback = function successCallback(wasSuccessful) {\n\t\t\t\t\t\t\t\t\t\tif (!wasSuccessful) {\n\t\t\t\t\t\t\t\t\t\t\trequest.cleanup();\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\tfor (var i = 0; i < callbacks.length; i++) {\n\t\t\t\t\t\t\t\t\t\tcallbacks[i](error, successCallback);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\trequest.send(receiver);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tDependencyLoader.prototype.getRoot = function (options) {\n\t\t\t\t\t\tvar cdn;\n\t\t\t\t\t\tvar protocol = runtime_1[\"default\"].getDocument().location.protocol;\n\t\t\t\t\t\tif (options && options.encrypted || protocol === \"https:\") {\n\t\t\t\t\t\t\tcdn = this.options.cdn_https;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcdn = this.options.cdn_http;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn cdn.replace(/\\/*$/, \"\") + \"/\" + this.options.version;\n\t\t\t\t\t};\n\t\t\t\t\tDependencyLoader.prototype.getPath = function (name, options) {\n\t\t\t\t\t\treturn this.getRoot(options) + '/' + name + this.options.suffix + '.js';\n\t\t\t\t\t};\n\t\t\t\t\t;\n\t\t\t\t\treturn DependencyLoader;\n\t\t\t\t}();\n\t\t\t\texports.__esModule = true;\n\t\t\t\texports[\"default\"] = DependencyLoader;\n\n\t\t\t\t/***/\n\t\t\t},\n\t\t\t/* 7 */\n\t\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\t\"use strict\";\n\n\t\t\t\tvar logger_1 = __webpack_require__(8);\n\t\t\t\tvar runtime_1 = __webpack_require__(2);\n\t\t\t\tvar ajax = function ajax(context, socketId, callback) {\n\t\t\t\t\tvar self = this,\n\t\t\t\t\t    xhr;\n\t\t\t\t\txhr = runtime_1[\"default\"].createXHR();\n\t\t\t\t\txhr.open(\"POST\", self.options.authEndpoint, true);\n\t\t\t\t\txhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n\t\t\t\t\tfor (var headerName in this.authOptions.headers) {\n\t\t\t\t\t\txhr.setRequestHeader(headerName, this.authOptions.headers[headerName]);\n\t\t\t\t\t}\n\t\t\t\t\txhr.onreadystatechange = function () {\n\t\t\t\t\t\tif (xhr.readyState === 4) {\n\t\t\t\t\t\t\tif (xhr.status === 200) {\n\t\t\t\t\t\t\t\tvar data,\n\t\t\t\t\t\t\t\t    parsed = false;\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tdata = JSON.parse(xhr.responseText);\n\t\t\t\t\t\t\t\t\tparsed = true;\n\t\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t\tcallback(true, 'JSON returned from webapp was invalid, yet status code was 200. Data was: ' + xhr.responseText);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (parsed) {\n\t\t\t\t\t\t\t\t\tcallback(false, data);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tlogger_1[\"default\"].warn(\"Couldn't get auth info from your webapp\", xhr.status);\n\t\t\t\t\t\t\t\tcallback(true, xhr.status);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\txhr.send(this.composeQuery(socketId));\n\t\t\t\t\treturn xhr;\n\t\t\t\t};\n\t\t\t\texports.__esModule = true;\n\t\t\t\texports[\"default\"] = ajax;\n\n\t\t\t\t/***/\n\t\t\t},\n\t\t\t/* 8 */\n\t\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\t\"use strict\";\n\n\t\t\t\tvar collections_1 = __webpack_require__(9);\n\t\t\t\tvar pusher_1 = __webpack_require__(1);\n\t\t\t\tvar Logger = {\n\t\t\t\t\tdebug: function debug() {\n\t\t\t\t\t\tvar args = [];\n\t\t\t\t\t\tfor (var _i = 0; _i < arguments.length; _i++) {\n\t\t\t\t\t\t\targs[_i - 0] = arguments[_i];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!pusher_1[\"default\"].log) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpusher_1[\"default\"].log(collections_1.stringify.apply(this, arguments));\n\t\t\t\t\t},\n\t\t\t\t\twarn: function warn() {\n\t\t\t\t\t\tvar args = [];\n\t\t\t\t\t\tfor (var _i = 0; _i < arguments.length; _i++) {\n\t\t\t\t\t\t\targs[_i - 0] = arguments[_i];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar message = collections_1.stringify.apply(this, arguments);\n\t\t\t\t\t\tif (window.console) {\n\t\t\t\t\t\t\tif (window.console.warn) {\n\t\t\t\t\t\t\t\twindow.console.warn(message);\n\t\t\t\t\t\t\t} else if (window.console.log) {\n\t\t\t\t\t\t\t\twindow.console.log(message);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (pusher_1[\"default\"].log) {\n\t\t\t\t\t\t\tpusher_1[\"default\"].log(message);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\texports.__esModule = true;\n\t\t\t\texports[\"default\"] = Logger;\n\n\t\t\t\t/***/\n\t\t\t},\n\t\t\t/* 9 */\n\t\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\t\"use strict\";\n\n\t\t\t\tvar base64_1 = __webpack_require__(10);\n\t\t\t\tvar util_1 = __webpack_require__(11);\n\t\t\t\tfunction extend(target) {\n\t\t\t\t\tvar sources = [];\n\t\t\t\t\tfor (var _i = 1; _i < arguments.length; _i++) {\n\t\t\t\t\t\tsources[_i - 1] = arguments[_i];\n\t\t\t\t\t}\n\t\t\t\t\tfor (var i = 0; i < sources.length; i++) {\n\t\t\t\t\t\tvar extensions = sources[i];\n\t\t\t\t\t\tfor (var property in extensions) {\n\t\t\t\t\t\t\tif (extensions[property] && extensions[property].constructor && extensions[property].constructor === Object) {\n\t\t\t\t\t\t\t\ttarget[property] = extend(target[property] || {}, extensions[property]);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ttarget[property] = extensions[property];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn target;\n\t\t\t\t}\n\t\t\t\texports.extend = extend;\n\t\t\t\tfunction stringify() {\n\t\t\t\t\tvar m = [\"Pusher\"];\n\t\t\t\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\t\t\t\tif (typeof arguments[i] === \"string\") {\n\t\t\t\t\t\t\tm.push(arguments[i]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tm.push(safeJSONStringify(arguments[i]));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn m.join(\" : \");\n\t\t\t\t}\n\t\t\t\texports.stringify = stringify;\n\t\t\t\tfunction arrayIndexOf(array, item) {\n\t\t\t\t\tvar nativeIndexOf = Array.prototype.indexOf;\n\t\t\t\t\tif (array === null) {\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t\tif (nativeIndexOf && array.indexOf === nativeIndexOf) {\n\t\t\t\t\t\treturn array.indexOf(item);\n\t\t\t\t\t}\n\t\t\t\t\tfor (var i = 0, l = array.length; i < l; i++) {\n\t\t\t\t\t\tif (array[i] === item) {\n\t\t\t\t\t\t\treturn i;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\texports.arrayIndexOf = arrayIndexOf;\n\t\t\t\tfunction objectApply(object, f) {\n\t\t\t\t\tfor (var key in object) {\n\t\t\t\t\t\tif (Object.prototype.hasOwnProperty.call(object, key)) {\n\t\t\t\t\t\t\tf(object[key], key, object);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\texports.objectApply = objectApply;\n\t\t\t\tfunction keys(object) {\n\t\t\t\t\tvar keys = [];\n\t\t\t\t\tobjectApply(object, function (_, key) {\n\t\t\t\t\t\tkeys.push(key);\n\t\t\t\t\t});\n\t\t\t\t\treturn keys;\n\t\t\t\t}\n\t\t\t\texports.keys = keys;\n\t\t\t\tfunction values(object) {\n\t\t\t\t\tvar values = [];\n\t\t\t\t\tobjectApply(object, function (value) {\n\t\t\t\t\t\tvalues.push(value);\n\t\t\t\t\t});\n\t\t\t\t\treturn values;\n\t\t\t\t}\n\t\t\t\texports.values = values;\n\t\t\t\tfunction apply(array, f, context) {\n\t\t\t\t\tfor (var i = 0; i < array.length; i++) {\n\t\t\t\t\t\tf.call(context || window, array[i], i, array);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\texports.apply = apply;\n\t\t\t\tfunction map(array, f) {\n\t\t\t\t\tvar result = [];\n\t\t\t\t\tfor (var i = 0; i < array.length; i++) {\n\t\t\t\t\t\tresult.push(f(array[i], i, array, result));\n\t\t\t\t\t}\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t\texports.map = map;\n\t\t\t\tfunction mapObject(object, f) {\n\t\t\t\t\tvar result = {};\n\t\t\t\t\tobjectApply(object, function (value, key) {\n\t\t\t\t\t\tresult[key] = f(value);\n\t\t\t\t\t});\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t\texports.mapObject = mapObject;\n\t\t\t\tfunction filter(array, test) {\n\t\t\t\t\ttest = test || function (value) {\n\t\t\t\t\t\treturn !!value;\n\t\t\t\t\t};\n\t\t\t\t\tvar result = [];\n\t\t\t\t\tfor (var i = 0; i < array.length; i++) {\n\t\t\t\t\t\tif (test(array[i], i, array, result)) {\n\t\t\t\t\t\t\tresult.push(array[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t\texports.filter = filter;\n\t\t\t\tfunction filterObject(object, test) {\n\t\t\t\t\tvar result = {};\n\t\t\t\t\tobjectApply(object, function (value, key) {\n\t\t\t\t\t\tif (test && test(value, key, object, result) || Boolean(value)) {\n\t\t\t\t\t\t\tresult[key] = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t\texports.filterObject = filterObject;\n\t\t\t\tfunction flatten(object) {\n\t\t\t\t\tvar result = [];\n\t\t\t\t\tobjectApply(object, function (value, key) {\n\t\t\t\t\t\tresult.push([key, value]);\n\t\t\t\t\t});\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t\texports.flatten = flatten;\n\t\t\t\tfunction any(array, test) {\n\t\t\t\t\tfor (var i = 0; i < array.length; i++) {\n\t\t\t\t\t\tif (test(array[i], i, array)) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\texports.any = any;\n\t\t\t\tfunction all(array, test) {\n\t\t\t\t\tfor (var i = 0; i < array.length; i++) {\n\t\t\t\t\t\tif (!test(array[i], i, array)) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\texports.all = all;\n\t\t\t\tfunction encodeParamsObject(data) {\n\t\t\t\t\treturn mapObject(data, function (value) {\n\t\t\t\t\t\tif ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === \"object\") {\n\t\t\t\t\t\t\tvalue = safeJSONStringify(value);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn encodeURIComponent(base64_1[\"default\"](value.toString()));\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\texports.encodeParamsObject = encodeParamsObject;\n\t\t\t\tfunction buildQueryString(data) {\n\t\t\t\t\tvar params = filterObject(data, function (value) {\n\t\t\t\t\t\treturn value !== undefined;\n\t\t\t\t\t});\n\t\t\t\t\tvar query = map(flatten(encodeParamsObject(params)), util_1[\"default\"].method(\"join\", \"=\")).join(\"&\");\n\t\t\t\t\treturn query;\n\t\t\t\t}\n\t\t\t\texports.buildQueryString = buildQueryString;\n\t\t\t\tfunction decycleObject(object) {\n\t\t\t\t\tvar objects = [],\n\t\t\t\t\t    paths = [];\n\t\t\t\t\treturn function derez(value, path) {\n\t\t\t\t\t\tvar i, name, nu;\n\t\t\t\t\t\tswitch (typeof value === 'undefined' ? 'undefined' : _typeof(value)) {\n\t\t\t\t\t\t\tcase 'object':\n\t\t\t\t\t\t\t\tif (!value) {\n\t\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor (i = 0; i < objects.length; i += 1) {\n\t\t\t\t\t\t\t\t\tif (objects[i] === value) {\n\t\t\t\t\t\t\t\t\t\treturn { $ref: paths[i] };\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tobjects.push(value);\n\t\t\t\t\t\t\t\tpaths.push(path);\n\t\t\t\t\t\t\t\tif (Object.prototype.toString.apply(value) === '[object Array]') {\n\t\t\t\t\t\t\t\t\tnu = [];\n\t\t\t\t\t\t\t\t\tfor (i = 0; i < value.length; i += 1) {\n\t\t\t\t\t\t\t\t\t\tnu[i] = derez(value[i], path + '[' + i + ']');\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tnu = {};\n\t\t\t\t\t\t\t\t\tfor (name in value) {\n\t\t\t\t\t\t\t\t\t\tif (Object.prototype.hasOwnProperty.call(value, name)) {\n\t\t\t\t\t\t\t\t\t\t\tnu[name] = derez(value[name], path + '[' + JSON.stringify(name) + ']');\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn nu;\n\t\t\t\t\t\t\tcase 'number':\n\t\t\t\t\t\t\tcase 'string':\n\t\t\t\t\t\t\tcase 'boolean':\n\t\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}(object, '$');\n\t\t\t\t}\n\t\t\t\texports.decycleObject = decycleObject;\n\t\t\t\tfunction safeJSONStringify(source) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\treturn JSON.stringify(source);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\treturn JSON.stringify(decycleObject(source));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\texports.safeJSONStringify = safeJSONStringify;\n\n\t\t\t\t/***/\n\t\t\t},\n\t\t\t/* 10 */\n\t\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\t\"use strict\";\n\n\t\t\t\tfunction encode(s) {\n\t\t\t\t\treturn btoa(utob(s));\n\t\t\t\t}\n\t\t\t\texports.__esModule = true;\n\t\t\t\texports[\"default\"] = encode;\n\t\t\t\tvar fromCharCode = String.fromCharCode;\n\t\t\t\tvar b64chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\t\t\t\tvar b64tab = {};\n\t\t\t\tfor (var i = 0, l = b64chars.length; i < l; i++) {\n\t\t\t\t\tb64tab[b64chars.charAt(i)] = i;\n\t\t\t\t}\n\t\t\t\tvar cb_utob = function cb_utob(c) {\n\t\t\t\t\tvar cc = c.charCodeAt(0);\n\t\t\t\t\treturn cc < 0x80 ? c : cc < 0x800 ? fromCharCode(0xc0 | cc >>> 6) + fromCharCode(0x80 | cc & 0x3f) : fromCharCode(0xe0 | cc >>> 12 & 0x0f) + fromCharCode(0x80 | cc >>> 6 & 0x3f) + fromCharCode(0x80 | cc & 0x3f);\n\t\t\t\t};\n\t\t\t\tvar utob = function utob(u) {\n\t\t\t\t\treturn u.replace(/[^\\x00-\\x7F]/g, cb_utob);\n\t\t\t\t};\n\t\t\t\tvar cb_encode = function cb_encode(ccc) {\n\t\t\t\t\tvar padlen = [0, 2, 1][ccc.length % 3];\n\t\t\t\t\tvar ord = ccc.charCodeAt(0) << 16 | (ccc.length > 1 ? ccc.charCodeAt(1) : 0) << 8 | (ccc.length > 2 ? ccc.charCodeAt(2) : 0);\n\t\t\t\t\tvar chars = [b64chars.charAt(ord >>> 18), b64chars.charAt(ord >>> 12 & 63), padlen >= 2 ? '=' : b64chars.charAt(ord >>> 6 & 63), padlen >= 1 ? '=' : b64chars.charAt(ord & 63)];\n\t\t\t\t\treturn chars.join('');\n\t\t\t\t};\n\t\t\t\tvar btoa = window.btoa || function (b) {\n\t\t\t\t\treturn b.replace(/[\\s\\S]{1,3}/g, cb_encode);\n\t\t\t\t};\n\n\t\t\t\t/***/\n\t\t\t},\n\t\t\t/* 11 */\n\t\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\t\"use strict\";\n\n\t\t\t\tvar timers_1 = __webpack_require__(12);\n\t\t\t\tvar Util = {\n\t\t\t\t\tnow: function now() {\n\t\t\t\t\t\tif (Date.now) {\n\t\t\t\t\t\t\treturn Date.now();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn new Date().valueOf();\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tdefer: function defer(callback) {\n\t\t\t\t\t\treturn new timers_1.OneOffTimer(0, callback);\n\t\t\t\t\t},\n\t\t\t\t\tmethod: function method(name) {\n\t\t\t\t\t\tvar args = [];\n\t\t\t\t\t\tfor (var _i = 1; _i < arguments.length; _i++) {\n\t\t\t\t\t\t\targs[_i - 1] = arguments[_i];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar boundArguments = Array.prototype.slice.call(arguments, 1);\n\t\t\t\t\t\treturn function (object) {\n\t\t\t\t\t\t\treturn object[name].apply(object, boundArguments.concat(arguments));\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\texports.__esModule = true;\n\t\t\t\texports[\"default\"] = Util;\n\n\t\t\t\t/***/\n\t\t\t},\n\t\t\t/* 12 */\n\t\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\t\"use strict\";\n\n\t\t\t\tvar __extends = this && this.__extends || function (d, b) {\n\t\t\t\t\tfor (var p in b) {\n\t\t\t\t\t\tif (b.hasOwnProperty(p)) d[p] = b[p];\n\t\t\t\t\t}function __() {\n\t\t\t\t\t\tthis.constructor = d;\n\t\t\t\t\t}\n\t\t\t\t\td.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t\t\t\t};\n\t\t\t\tvar abstract_timer_1 = __webpack_require__(13);\n\t\t\t\tfunction clearTimeout(timer) {\n\t\t\t\t\twindow.clearTimeout(timer);\n\t\t\t\t}\n\t\t\t\tfunction clearInterval(timer) {\n\t\t\t\t\twindow.clearInterval(timer);\n\t\t\t\t}\n\t\t\t\tvar OneOffTimer = function (_super) {\n\t\t\t\t\t__extends(OneOffTimer, _super);\n\t\t\t\t\tfunction OneOffTimer(delay, callback) {\n\t\t\t\t\t\t_super.call(this, setTimeout, clearTimeout, delay, function (timer) {\n\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\treturn OneOffTimer;\n\t\t\t\t}(abstract_timer_1[\"default\"]);\n\t\t\t\texports.OneOffTimer = OneOffTimer;\n\t\t\t\tvar PeriodicTimer = function (_super) {\n\t\t\t\t\t__extends(PeriodicTimer, _super);\n\t\t\t\t\tfunction PeriodicTimer(delay, callback) {\n\t\t\t\t\t\t_super.call(this, setInterval, clearInterval, delay, function (timer) {\n\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t\treturn timer;\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\treturn PeriodicTimer;\n\t\t\t\t}(abstract_timer_1[\"default\"]);\n\t\t\t\texports.PeriodicTimer = PeriodicTimer;\n\n\t\t\t\t/***/\n\t\t\t},\n\t\t\t/* 13 */\n\t\t\t/***/function (module, exports) {\n\n\t\t\t\t\"use strict\";\n\n\t\t\t\tvar Timer = function () {\n\t\t\t\t\tfunction Timer(set, clear, delay, callback) {\n\t\t\t\t\t\tvar _this = this;\n\t\t\t\t\t\tthis.clear = clear;\n\t\t\t\t\t\tthis.timer = set(function () {\n\t\t\t\t\t\t\tif (_this.timer) {\n\t\t\t\t\t\t\t\t_this.timer = callback(_this.timer);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}, delay);\n\t\t\t\t\t}\n\t\t\t\t\tTimer.prototype.isRunning = function () {\n\t\t\t\t\t\treturn this.timer !== null;\n\t\t\t\t\t};\n\t\t\t\t\tTimer.prototype.ensureAborted = function () {\n\t\t\t\t\t\tif (this.timer) {\n\t\t\t\t\t\t\tthis.clear(this.timer);\n\t\t\t\t\t\t\tthis.timer = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\treturn Timer;\n\t\t\t\t}();\n\t\t\t\texports.__esModule = true;\n\t\t\t\texports[\"default\"] = Timer;\n\n\t\t\t\t/***/\n\t\t\t},\n\t\t\t/* 14 */\n\t\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\t\"use strict\";\n\n\t\t\t\tvar logger_1 = __webpack_require__(8);\n\t\t\t\tvar jsonp = function jsonp(context, socketId, callback) {\n\t\t\t\t\tif (this.authOptions.headers !== undefined) {\n\t\t\t\t\t\tlogger_1[\"default\"].warn(\"Warn\", \"To send headers with the auth request, you must use AJAX, rather than JSONP.\");\n\t\t\t\t\t}\n\t\t\t\t\tvar callbackName = context.nextAuthCallbackID.toString();\n\t\t\t\t\tcontext.nextAuthCallbackID++;\n\t\t\t\t\tvar document = context.getDocument();\n\t\t\t\t\tvar script = document.createElement(\"script\");\n\t\t\t\t\tcontext.auth_callbacks[callbackName] = function (data) {\n\t\t\t\t\t\tcallback(false, data);\n\t\t\t\t\t};\n\t\t\t\t\tvar callback_name = \"Pusher.auth_callbacks['\" + callbackName + \"']\";\n\t\t\t\t\tscript.src = this.options.authEndpoint + '?callback=' + encodeURIComponent(callback_name) + '&' + this.composeQuery(socketId);\n\t\t\t\t\tvar head = document.getElementsByTagName(\"head\")[0] || document.documentElement;\n\t\t\t\t\thead.insertBefore(script, head.firstChild);\n\t\t\t\t};\n\t\t\t\texports.__esModule = true;\n\t\t\t\texports[\"default\"] = jsonp;\n\n\t\t\t\t/***/\n\t\t\t},\n\t\t\t/* 15 */\n\t\t\t/***/function (module, exports) {\n\n\t\t\t\t\"use strict\";\n\n\t\t\t\tvar ScriptRequest = function () {\n\t\t\t\t\tfunction ScriptRequest(src) {\n\t\t\t\t\t\tthis.src = src;\n\t\t\t\t\t}\n\t\t\t\t\tScriptRequest.prototype.send = function (receiver) {\n\t\t\t\t\t\tvar self = this;\n\t\t\t\t\t\tvar errorString = \"Error loading \" + self.src;\n\t\t\t\t\t\tself.script = document.createElement(\"script\");\n\t\t\t\t\t\tself.script.id = receiver.id;\n\t\t\t\t\t\tself.script.src = self.src;\n\t\t\t\t\t\tself.script.type = \"text/javascript\";\n\t\t\t\t\t\tself.script.charset = \"UTF-8\";\n\t\t\t\t\t\tif (self.script.addEventListener) {\n\t\t\t\t\t\t\tself.script.onerror = function () {\n\t\t\t\t\t\t\t\treceiver.callback(errorString);\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tself.script.onload = function () {\n\t\t\t\t\t\t\t\treceiver.callback(null);\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tself.script.onreadystatechange = function () {\n\t\t\t\t\t\t\t\tif (self.script.readyState === 'loaded' || self.script.readyState === 'complete') {\n\t\t\t\t\t\t\t\t\treceiver.callback(null);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (self.script.async === undefined && document.attachEvent && /opera/i.test(navigator.userAgent)) {\n\t\t\t\t\t\t\tself.errorScript = document.createElement(\"script\");\n\t\t\t\t\t\t\tself.errorScript.id = receiver.id + \"_error\";\n\t\t\t\t\t\t\tself.errorScript.text = receiver.name + \"('\" + errorString + \"');\";\n\t\t\t\t\t\t\tself.script.async = self.errorScript.async = false;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tself.script.async = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar head = document.getElementsByTagName('head')[0];\n\t\t\t\t\t\thead.insertBefore(self.script, head.firstChild);\n\t\t\t\t\t\tif (self.errorScript) {\n\t\t\t\t\t\t\thead.insertBefore(self.errorScript, self.script.nextSibling);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tScriptRequest.prototype.cleanup = function () {\n\t\t\t\t\t\tif (this.script) {\n\t\t\t\t\t\t\tthis.script.onload = this.script.onerror = null;\n\t\t\t\t\t\t\tthis.script.onreadystatechange = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (this.script && this.script.parentNode) {\n\t\t\t\t\t\t\tthis.script.parentNode.removeChild(this.script);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (this.errorScript && this.errorScript.parentNode) {\n\t\t\t\t\t\t\tthis.errorScript.parentNode.removeChild(this.errorScript);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.script = null;\n\t\t\t\t\t\tthis.errorScript = null;\n\t\t\t\t\t};\n\t\t\t\t\treturn ScriptRequest;\n\t\t\t\t}();\n\t\t\t\texports.__esModule = true;\n\t\t\t\texports[\"default\"] = ScriptRequest;\n\n\t\t\t\t/***/\n\t\t\t},\n\t\t\t/* 16 */\n\t\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\t\"use strict\";\n\n\t\t\t\tvar Collections = __webpack_require__(9);\n\t\t\t\tvar runtime_1 = __webpack_require__(2);\n\t\t\t\tvar JSONPRequest = function () {\n\t\t\t\t\tfunction JSONPRequest(url, data) {\n\t\t\t\t\t\tthis.url = url;\n\t\t\t\t\t\tthis.data = data;\n\t\t\t\t\t}\n\t\t\t\t\tJSONPRequest.prototype.send = function (receiver) {\n\t\t\t\t\t\tif (this.request) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar query = Collections.buildQueryString(this.data);\n\t\t\t\t\t\tvar url = this.url + \"/\" + receiver.number + \"?\" + query;\n\t\t\t\t\t\tthis.request = runtime_1[\"default\"].createScriptRequest(url);\n\t\t\t\t\t\tthis.request.send(receiver);\n\t\t\t\t\t};\n\t\t\t\t\tJSONPRequest.prototype.cleanup = function () {\n\t\t\t\t\t\tif (this.request) {\n\t\t\t\t\t\t\tthis.request.cleanup();\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\treturn JSONPRequest;\n\t\t\t\t}();\n\t\t\t\texports.__esModule = true;\n\t\t\t\texports[\"default\"] = JSONPRequest;\n\n\t\t\t\t/***/\n\t\t\t},\n\t\t\t/* 17 */\n\t\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\t\"use strict\";\n\n\t\t\t\tvar runtime_1 = __webpack_require__(2);\n\t\t\t\tvar script_receiver_factory_1 = __webpack_require__(4);\n\t\t\t\tvar getAgent = function getAgent(sender, encrypted) {\n\t\t\t\t\treturn function (data, callback) {\n\t\t\t\t\t\tvar scheme = \"http\" + (encrypted ? \"s\" : \"\") + \"://\";\n\t\t\t\t\t\tvar url = scheme + (sender.host || sender.options.host) + sender.options.path;\n\t\t\t\t\t\tvar request = runtime_1[\"default\"].createJSONPRequest(url, data);\n\t\t\t\t\t\tvar receiver = runtime_1[\"default\"].ScriptReceivers.create(function (error, result) {\n\t\t\t\t\t\t\tscript_receiver_factory_1.ScriptReceivers.remove(receiver);\n\t\t\t\t\t\t\trequest.cleanup();\n\t\t\t\t\t\t\tif (result && result.host) {\n\t\t\t\t\t\t\t\tsender.host = result.host;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (callback) {\n\t\t\t\t\t\t\t\tcallback(error, result);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\trequest.send(receiver);\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t\tvar jsonp = {\n\t\t\t\t\tname: 'jsonp',\n\t\t\t\t\tgetAgent: getAgent\n\t\t\t\t};\n\t\t\t\texports.__esModule = true;\n\t\t\t\texports[\"default\"] = jsonp;\n\n\t\t\t\t/***/\n\t\t\t},\n\t\t\t/* 18 */\n\t\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\t\"use strict\";\n\n\t\t\t\tvar transports_1 = __webpack_require__(19);\n\t\t\t\tvar transport_1 = __webpack_require__(21);\n\t\t\t\tvar URLSchemes = __webpack_require__(20);\n\t\t\t\tvar runtime_1 = __webpack_require__(2);\n\t\t\t\tvar dependencies_1 = __webpack_require__(3);\n\t\t\t\tvar Collections = __webpack_require__(9);\n\t\t\t\tvar SockJSTransport = new transport_1[\"default\"]({\n\t\t\t\t\tfile: \"sockjs\",\n\t\t\t\t\turls: URLSchemes.sockjs,\n\t\t\t\t\thandlesActivityChecks: true,\n\t\t\t\t\tsupportsPing: false,\n\t\t\t\t\tisSupported: function isSupported() {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t},\n\t\t\t\t\tisInitialized: function isInitialized() {\n\t\t\t\t\t\treturn window.SockJS !== undefined;\n\t\t\t\t\t},\n\t\t\t\t\tgetSocket: function getSocket(url, options) {\n\t\t\t\t\t\treturn new window.SockJS(url, null, {\n\t\t\t\t\t\t\tjs_path: dependencies_1.Dependencies.getPath(\"sockjs\", {\n\t\t\t\t\t\t\t\tencrypted: options.encrypted\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\tignore_null_origin: options.ignoreNullOrigin\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\tbeforeOpen: function beforeOpen(socket, path) {\n\t\t\t\t\t\tsocket.send(JSON.stringify({\n\t\t\t\t\t\t\tpath: path\n\t\t\t\t\t\t}));\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tvar xdrConfiguration = {\n\t\t\t\t\tisSupported: function isSupported(environment) {\n\t\t\t\t\t\tvar yes = runtime_1[\"default\"].isXDRSupported(environment.encrypted);\n\t\t\t\t\t\treturn yes;\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tvar XDRStreamingTransport = new transport_1[\"default\"](Collections.extend({}, transports_1.streamingConfiguration, xdrConfiguration));\n\t\t\t\tvar XDRPollingTransport = new transport_1[\"default\"](Collections.extend({}, transports_1.pollingConfiguration, xdrConfiguration));\n\t\t\t\ttransports_1[\"default\"].xdr_streaming = XDRStreamingTransport;\n\t\t\t\ttransports_1[\"default\"].xdr_polling = XDRPollingTransport;\n\t\t\t\ttransports_1[\"default\"].sockjs = SockJSTransport;\n\t\t\t\texports.__esModule = true;\n\t\t\t\texports[\"default\"] = transports_1[\"default\"];\n\n\t\t\t\t/***/\n\t\t\t},\n\t\t\t/* 19 */\n\t\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\t\"use strict\";\n\n\t\t\t\tvar URLSchemes = __webpack_require__(20);\n\t\t\t\tvar transport_1 = __webpack_require__(21);\n\t\t\t\tvar Collections = __webpack_require__(9);\n\t\t\t\tvar runtime_1 = __webpack_require__(2);\n\t\t\t\tvar WSTransport = new transport_1[\"default\"]({\n\t\t\t\t\turls: URLSchemes.ws,\n\t\t\t\t\thandlesActivityChecks: false,\n\t\t\t\t\tsupportsPing: false,\n\t\t\t\t\tisInitialized: function isInitialized() {\n\t\t\t\t\t\treturn Boolean(runtime_1[\"default\"].getWebSocketAPI());\n\t\t\t\t\t},\n\t\t\t\t\tisSupported: function isSupported() {\n\t\t\t\t\t\treturn Boolean(runtime_1[\"default\"].getWebSocketAPI());\n\t\t\t\t\t},\n\t\t\t\t\tgetSocket: function getSocket(url) {\n\t\t\t\t\t\treturn runtime_1[\"default\"].createWebSocket(url);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tvar httpConfiguration = {\n\t\t\t\t\turls: URLSchemes.http,\n\t\t\t\t\thandlesActivityChecks: false,\n\t\t\t\t\tsupportsPing: true,\n\t\t\t\t\tisInitialized: function isInitialized() {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\texports.streamingConfiguration = Collections.extend({ getSocket: function getSocket(url) {\n\t\t\t\t\t\treturn runtime_1[\"default\"].HTTPFactory.createStreamingSocket(url);\n\t\t\t\t\t}\n\t\t\t\t}, httpConfiguration);\n\t\t\t\texports.pollingConfiguration = Collections.extend({ getSocket: function getSocket(url) {\n\t\t\t\t\t\treturn runtime_1[\"default\"].HTTPFactory.createPollingSocket(url);\n\t\t\t\t\t}\n\t\t\t\t}, httpConfiguration);\n\t\t\t\tvar xhrConfiguration = {\n\t\t\t\t\tisSupported: function isSupported() {\n\t\t\t\t\t\treturn runtime_1[\"default\"].isXHRSupported();\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tvar XHRStreamingTransport = new transport_1[\"default\"](Collections.extend({}, exports.streamingConfiguration, xhrConfiguration));\n\t\t\t\tvar XHRPollingTransport = new transport_1[\"default\"](Collections.extend({}, exports.pollingConfiguration, xhrConfiguration));\n\t\t\t\tvar Transports = {\n\t\t\t\t\tws: WSTransport,\n\t\t\t\t\txhr_streaming: XHRStreamingTransport,\n\t\t\t\t\txhr_polling: XHRPollingTransport\n\t\t\t\t};\n\t\t\t\texports.__esModule = true;\n\t\t\t\texports[\"default\"] = Transports;\n\n\t\t\t\t/***/\n\t\t\t},\n\t\t\t/* 20 */\n\t\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\t\"use strict\";\n\n\t\t\t\tvar defaults_1 = __webpack_require__(5);\n\t\t\t\tfunction getGenericURL(baseScheme, params, path) {\n\t\t\t\t\tvar scheme = baseScheme + (params.encrypted ? \"s\" : \"\");\n\t\t\t\t\tvar host = params.encrypted ? params.hostEncrypted : params.hostUnencrypted;\n\t\t\t\t\treturn scheme + \"://\" + host + path;\n\t\t\t\t}\n\t\t\t\tfunction getGenericPath(key, queryString) {\n\t\t\t\t\tvar path = \"/app/\" + key;\n\t\t\t\t\tvar query = \"?protocol=\" + defaults_1[\"default\"].PROTOCOL + \"&client=js\" + \"&version=\" + defaults_1[\"default\"].VERSION + (queryString ? \"&\" + queryString : \"\");\n\t\t\t\t\treturn path + query;\n\t\t\t\t}\n\t\t\t\texports.ws = {\n\t\t\t\t\tgetInitial: function getInitial(key, params) {\n\t\t\t\t\t\treturn getGenericURL(\"ws\", params, getGenericPath(key, \"flash=false\"));\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\texports.http = {\n\t\t\t\t\tgetInitial: function getInitial(key, params) {\n\t\t\t\t\t\tvar path = (params.httpPath || \"/pusher\") + getGenericPath(key);\n\t\t\t\t\t\treturn getGenericURL(\"http\", params, path);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\texports.sockjs = {\n\t\t\t\t\tgetInitial: function getInitial(key, params) {\n\t\t\t\t\t\treturn getGenericURL(\"http\", params, params.httpPath || \"/pusher\");\n\t\t\t\t\t},\n\t\t\t\t\tgetPath: function getPath(key, params) {\n\t\t\t\t\t\treturn getGenericPath(key);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t/***/\n\t\t\t},\n\t\t\t/* 21 */\n\t\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\t\"use strict\";\n\n\t\t\t\tvar transport_connection_1 = __webpack_require__(22);\n\t\t\t\tvar Transport = function () {\n\t\t\t\t\tfunction Transport(hooks) {\n\t\t\t\t\t\tthis.hooks = hooks;\n\t\t\t\t\t}\n\t\t\t\t\tTransport.prototype.isSupported = function (environment) {\n\t\t\t\t\t\treturn this.hooks.isSupported(environment);\n\t\t\t\t\t};\n\t\t\t\t\tTransport.prototype.createConnection = function (name, priority, key, options) {\n\t\t\t\t\t\treturn new transport_connection_1[\"default\"](this.hooks, name, priority, key, options);\n\t\t\t\t\t};\n\t\t\t\t\treturn Transport;\n\t\t\t\t}();\n\t\t\t\texports.__esModule = true;\n\t\t\t\texports[\"default\"] = Transport;\n\n\t\t\t\t/***/\n\t\t\t},\n\t\t\t/* 22 */\n\t\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\t\"use strict\";\n\n\t\t\t\tvar __extends = this && this.__extends || function (d, b) {\n\t\t\t\t\tfor (var p in b) {\n\t\t\t\t\t\tif (b.hasOwnProperty(p)) d[p] = b[p];\n\t\t\t\t\t}function __() {\n\t\t\t\t\t\tthis.constructor = d;\n\t\t\t\t\t}\n\t\t\t\t\td.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t\t\t\t};\n\t\t\t\tvar util_1 = __webpack_require__(11);\n\t\t\t\tvar Collections = __webpack_require__(9);\n\t\t\t\tvar dispatcher_1 = __webpack_require__(23);\n\t\t\t\tvar logger_1 = __webpack_require__(8);\n\t\t\t\tvar runtime_1 = __webpack_require__(2);\n\t\t\t\tvar TransportConnection = function (_super) {\n\t\t\t\t\t__extends(TransportConnection, _super);\n\t\t\t\t\tfunction TransportConnection(hooks, name, priority, key, options) {\n\t\t\t\t\t\t_super.call(this);\n\t\t\t\t\t\tthis.initialize = runtime_1[\"default\"].transportConnectionInitializer;\n\t\t\t\t\t\tthis.hooks = hooks;\n\t\t\t\t\t\tthis.name = name;\n\t\t\t\t\t\tthis.priority = priority;\n\t\t\t\t\t\tthis.key = key;\n\t\t\t\t\t\tthis.options = options;\n\t\t\t\t\t\tthis.state = \"new\";\n\t\t\t\t\t\tthis.timeline = options.timeline;\n\t\t\t\t\t\tthis.activityTimeout = options.activityTimeout;\n\t\t\t\t\t\tthis.id = this.timeline.generateUniqueID();\n\t\t\t\t\t}\n\t\t\t\t\tTransportConnection.prototype.handlesActivityChecks = function () {\n\t\t\t\t\t\treturn Boolean(this.hooks.handlesActivityChecks);\n\t\t\t\t\t};\n\t\t\t\t\tTransportConnection.prototype.supportsPing = function () {\n\t\t\t\t\t\treturn Boolean(this.hooks.supportsPing);\n\t\t\t\t\t};\n\t\t\t\t\tTransportConnection.prototype.connect = function () {\n\t\t\t\t\t\tvar _this = this;\n\t\t\t\t\t\tif (this.socket || this.state !== \"initialized\") {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar url = this.hooks.urls.getInitial(this.key, this.options);\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tthis.socket = this.hooks.getSocket(url, this.options);\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tutil_1[\"default\"].defer(function () {\n\t\t\t\t\t\t\t\t_this.onError(e);\n\t\t\t\t\t\t\t\t_this.changeState(\"closed\");\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.bindListeners();\n\t\t\t\t\t\tlogger_1[\"default\"].debug(\"Connecting\", { transport: this.name, url: url });\n\t\t\t\t\t\tthis.changeState(\"connecting\");\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t};\n\t\t\t\t\tTransportConnection.prototype.close = function () {\n\t\t\t\t\t\tif (this.socket) {\n\t\t\t\t\t\t\tthis.socket.close();\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tTransportConnection.prototype.send = function (data) {\n\t\t\t\t\t\tvar _this = this;\n\t\t\t\t\t\tif (this.state === \"open\") {\n\t\t\t\t\t\t\tutil_1[\"default\"].defer(function () {\n\t\t\t\t\t\t\t\tif (_this.socket) {\n\t\t\t\t\t\t\t\t\t_this.socket.send(data);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tTransportConnection.prototype.ping = function () {\n\t\t\t\t\t\tif (this.state === \"open\" && this.supportsPing()) {\n\t\t\t\t\t\t\tthis.socket.ping();\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tTransportConnection.prototype.onOpen = function () {\n\t\t\t\t\t\tif (this.hooks.beforeOpen) {\n\t\t\t\t\t\t\tthis.hooks.beforeOpen(this.socket, this.hooks.urls.getPath(this.key, this.options));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.changeState(\"open\");\n\t\t\t\t\t\tthis.socket.onopen = undefined;\n\t\t\t\t\t};\n\t\t\t\t\tTransportConnection.prototype.onError = function (error) {\n\t\t\t\t\t\tthis.emit(\"error\", { type: 'WebSocketError', error: error });\n\t\t\t\t\t\tthis.timeline.error(this.buildTimelineMessage({ error: error.toString() }));\n\t\t\t\t\t};\n\t\t\t\t\tTransportConnection.prototype.onClose = function (closeEvent) {\n\t\t\t\t\t\tif (closeEvent) {\n\t\t\t\t\t\t\tthis.changeState(\"closed\", {\n\t\t\t\t\t\t\t\tcode: closeEvent.code,\n\t\t\t\t\t\t\t\treason: closeEvent.reason,\n\t\t\t\t\t\t\t\twasClean: closeEvent.wasClean\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.changeState(\"closed\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.unbindListeners();\n\t\t\t\t\t\tthis.socket = undefined;\n\t\t\t\t\t};\n\t\t\t\t\tTransportConnection.prototype.onMessage = function (message) {\n\t\t\t\t\t\tthis.emit(\"message\", message);\n\t\t\t\t\t};\n\t\t\t\t\tTransportConnection.prototype.onActivity = function () {\n\t\t\t\t\t\tthis.emit(\"activity\");\n\t\t\t\t\t};\n\t\t\t\t\tTransportConnection.prototype.bindListeners = function () {\n\t\t\t\t\t\tvar _this = this;\n\t\t\t\t\t\tthis.socket.onopen = function () {\n\t\t\t\t\t\t\t_this.onOpen();\n\t\t\t\t\t\t};\n\t\t\t\t\t\tthis.socket.onerror = function (error) {\n\t\t\t\t\t\t\t_this.onError(error);\n\t\t\t\t\t\t};\n\t\t\t\t\t\tthis.socket.onclose = function (closeEvent) {\n\t\t\t\t\t\t\t_this.onClose(closeEvent);\n\t\t\t\t\t\t};\n\t\t\t\t\t\tthis.socket.onmessage = function (message) {\n\t\t\t\t\t\t\t_this.onMessage(message);\n\t\t\t\t\t\t};\n\t\t\t\t\t\tif (this.supportsPing()) {\n\t\t\t\t\t\t\tthis.socket.onactivity = function () {\n\t\t\t\t\t\t\t\t_this.onActivity();\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tTransportConnection.prototype.unbindListeners = function () {\n\t\t\t\t\t\tif (this.socket) {\n\t\t\t\t\t\t\tthis.socket.onopen = undefined;\n\t\t\t\t\t\t\tthis.socket.onerror = undefined;\n\t\t\t\t\t\t\tthis.socket.onclose = undefined;\n\t\t\t\t\t\t\tthis.socket.onmessage = undefined;\n\t\t\t\t\t\t\tif (this.supportsPing()) {\n\t\t\t\t\t\t\t\tthis.socket.onactivity = undefined;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tTransportConnection.prototype.changeState = function (state, params) {\n\t\t\t\t\t\tthis.state = state;\n\t\t\t\t\t\tthis.timeline.info(this.buildTimelineMessage({\n\t\t\t\t\t\t\tstate: state,\n\t\t\t\t\t\t\tparams: params\n\t\t\t\t\t\t}));\n\t\t\t\t\t\tthis.emit(state, params);\n\t\t\t\t\t};\n\t\t\t\t\tTransportConnection.prototype.buildTimelineMessage = function (message) {\n\t\t\t\t\t\treturn Collections.extend({ cid: this.id }, message);\n\t\t\t\t\t};\n\t\t\t\t\treturn TransportConnection;\n\t\t\t\t}(dispatcher_1[\"default\"]);\n\t\t\t\texports.__esModule = true;\n\t\t\t\texports[\"default\"] = TransportConnection;\n\n\t\t\t\t/***/\n\t\t\t},\n\t\t\t/* 23 */\n\t\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\t\"use strict\";\n\n\t\t\t\tvar callback_registry_1 = __webpack_require__(24);\n\t\t\t\tvar Dispatcher = function () {\n\t\t\t\t\tfunction Dispatcher(failThrough) {\n\t\t\t\t\t\tthis.callbacks = new callback_registry_1[\"default\"]();\n\t\t\t\t\t\tthis.global_callbacks = [];\n\t\t\t\t\t\tthis.failThrough = failThrough;\n\t\t\t\t\t}\n\t\t\t\t\tDispatcher.prototype.bind = function (eventName, callback, context) {\n\t\t\t\t\t\tthis.callbacks.add(eventName, callback, context);\n\t\t\t\t\t\treturn this;\n\t\t\t\t\t};\n\t\t\t\t\tDispatcher.prototype.bind_all = function (callback) {\n\t\t\t\t\t\tthis.global_callbacks.push(callback);\n\t\t\t\t\t\treturn this;\n\t\t\t\t\t};\n\t\t\t\t\tDispatcher.prototype.unbind = function (eventName, callback, context) {\n\t\t\t\t\t\tthis.callbacks.remove(eventName, callback, context);\n\t\t\t\t\t\treturn this;\n\t\t\t\t\t};\n\t\t\t\t\tDispatcher.prototype.unbind_all = function (eventName, callback) {\n\t\t\t\t\t\tthis.callbacks.remove(eventName, callback);\n\t\t\t\t\t\treturn this;\n\t\t\t\t\t};\n\t\t\t\t\tDispatcher.prototype.emit = function (eventName, data) {\n\t\t\t\t\t\tvar i;\n\t\t\t\t\t\tfor (i = 0; i < this.global_callbacks.length; i++) {\n\t\t\t\t\t\t\tthis.global_callbacks[i](eventName, data);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar callbacks = this.callbacks.get(eventName);\n\t\t\t\t\t\tif (callbacks && callbacks.length > 0) {\n\t\t\t\t\t\t\tfor (i = 0; i < callbacks.length; i++) {\n\t\t\t\t\t\t\t\tcallbacks[i].fn.call(callbacks[i].context || window, data);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (this.failThrough) {\n\t\t\t\t\t\t\tthis.failThrough(eventName, data);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn this;\n\t\t\t\t\t};\n\t\t\t\t\treturn Dispatcher;\n\t\t\t\t}();\n\t\t\t\texports.__esModule = true;\n\t\t\t\texports[\"default\"] = Dispatcher;\n\n\t\t\t\t/***/\n\t\t\t},\n\t\t\t/* 24 */\n\t\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\t\"use strict\";\n\n\t\t\t\tvar Collections = __webpack_require__(9);\n\t\t\t\tvar CallbackRegistry = function () {\n\t\t\t\t\tfunction CallbackRegistry() {\n\t\t\t\t\t\tthis._callbacks = {};\n\t\t\t\t\t}\n\t\t\t\t\tCallbackRegistry.prototype.get = function (name) {\n\t\t\t\t\t\treturn this._callbacks[prefix(name)];\n\t\t\t\t\t};\n\t\t\t\t\tCallbackRegistry.prototype.add = function (name, callback, context) {\n\t\t\t\t\t\tvar prefixedEventName = prefix(name);\n\t\t\t\t\t\tthis._callbacks[prefixedEventName] = this._callbacks[prefixedEventName] || [];\n\t\t\t\t\t\tthis._callbacks[prefixedEventName].push({\n\t\t\t\t\t\t\tfn: callback,\n\t\t\t\t\t\t\tcontext: context\n\t\t\t\t\t\t});\n\t\t\t\t\t};\n\t\t\t\t\tCallbackRegistry.prototype.remove = function (name, callback, context) {\n\t\t\t\t\t\tif (!name && !callback && !context) {\n\t\t\t\t\t\t\tthis._callbacks = {};\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar names = name ? [prefix(name)] : Collections.keys(this._callbacks);\n\t\t\t\t\t\tif (callback || context) {\n\t\t\t\t\t\t\tthis.removeCallback(names, callback, context);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.removeAllCallbacks(names);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tCallbackRegistry.prototype.removeCallback = function (names, callback, context) {\n\t\t\t\t\t\tCollections.apply(names, function (name) {\n\t\t\t\t\t\t\tthis._callbacks[name] = Collections.filter(this._callbacks[name] || [], function (binding) {\n\t\t\t\t\t\t\t\treturn callback && callback !== binding.fn || context && context !== binding.context;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tif (this._callbacks[name].length === 0) {\n\t\t\t\t\t\t\t\tdelete this._callbacks[name];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}, this);\n\t\t\t\t\t};\n\t\t\t\t\tCallbackRegistry.prototype.removeAllCallbacks = function (names) {\n\t\t\t\t\t\tCollections.apply(names, function (name) {\n\t\t\t\t\t\t\tdelete this._callbacks[name];\n\t\t\t\t\t\t}, this);\n\t\t\t\t\t};\n\t\t\t\t\treturn CallbackRegistry;\n\t\t\t\t}();\n\t\t\t\texports.__esModule = true;\n\t\t\t\texports[\"default\"] = CallbackRegistry;\n\t\t\t\tfunction prefix(name) {\n\t\t\t\t\treturn \"_\" + name;\n\t\t\t\t}\n\n\t\t\t\t/***/\n\t\t\t},\n\t\t\t/* 25 */\n\t\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\t\"use strict\";\n\n\t\t\t\tvar __extends = this && this.__extends || function (d, b) {\n\t\t\t\t\tfor (var p in b) {\n\t\t\t\t\t\tif (b.hasOwnProperty(p)) d[p] = b[p];\n\t\t\t\t\t}function __() {\n\t\t\t\t\t\tthis.constructor = d;\n\t\t\t\t\t}\n\t\t\t\t\td.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t\t\t\t};\n\t\t\t\tvar dispatcher_1 = __webpack_require__(23);\n\t\t\t\tvar NetInfo = function (_super) {\n\t\t\t\t\t__extends(NetInfo, _super);\n\t\t\t\t\tfunction NetInfo() {\n\t\t\t\t\t\t_super.call(this);\n\t\t\t\t\t\tvar self = this;\n\t\t\t\t\t\tif (window.addEventListener !== undefined) {\n\t\t\t\t\t\t\twindow.addEventListener(\"online\", function () {\n\t\t\t\t\t\t\t\tself.emit('online');\n\t\t\t\t\t\t\t}, false);\n\t\t\t\t\t\t\twindow.addEventListener(\"offline\", function () {\n\t\t\t\t\t\t\t\tself.emit('offline');\n\t\t\t\t\t\t\t}, false);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tNetInfo.prototype.isOnline = function () {\n\t\t\t\t\t\tif (window.navigator.onLine === undefined) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn window.navigator.onLine;\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\treturn NetInfo;\n\t\t\t\t}(dispatcher_1[\"default\"]);\n\t\t\t\texports.NetInfo = NetInfo;\n\t\t\t\texports.Network = new NetInfo();\n\n\t\t\t\t/***/\n\t\t\t},\n\t\t\t/* 26 */\n\t\t\t/***/function (module, exports) {\n\n\t\t\t\t\"use strict\";\n\n\t\t\t\tvar getDefaultStrategy = function getDefaultStrategy(config) {\n\t\t\t\t\tvar wsStrategy;\n\t\t\t\t\tif (config.encrypted) {\n\t\t\t\t\t\twsStrategy = [\":best_connected_ever\", \":ws_loop\", [\":delayed\", 2000, [\":http_fallback_loop\"]]];\n\t\t\t\t\t} else {\n\t\t\t\t\t\twsStrategy = [\":best_connected_ever\", \":ws_loop\", [\":delayed\", 2000, [\":wss_loop\"]], [\":delayed\", 5000, [\":http_fallback_loop\"]]];\n\t\t\t\t\t}\n\t\t\t\t\treturn [[\":def\", \"ws_options\", {\n\t\t\t\t\t\thostUnencrypted: config.wsHost + \":\" + config.wsPort,\n\t\t\t\t\t\thostEncrypted: config.wsHost + \":\" + config.wssPort\n\t\t\t\t\t}], [\":def\", \"wss_options\", [\":extend\", \":ws_options\", {\n\t\t\t\t\t\tencrypted: true\n\t\t\t\t\t}]], [\":def\", \"sockjs_options\", {\n\t\t\t\t\t\thostUnencrypted: config.httpHost + \":\" + config.httpPort,\n\t\t\t\t\t\thostEncrypted: config.httpHost + \":\" + config.httpsPort,\n\t\t\t\t\t\thttpPath: config.httpPath\n\t\t\t\t\t}], [\":def\", \"timeouts\", {\n\t\t\t\t\t\tloop: true,\n\t\t\t\t\t\ttimeout: 15000,\n\t\t\t\t\t\ttimeoutLimit: 60000\n\t\t\t\t\t}], [\":def\", \"ws_manager\", [\":transport_manager\", {\n\t\t\t\t\t\tlives: 2,\n\t\t\t\t\t\tminPingDelay: 10000,\n\t\t\t\t\t\tmaxPingDelay: config.activity_timeout\n\t\t\t\t\t}]], [\":def\", \"streaming_manager\", [\":transport_manager\", {\n\t\t\t\t\t\tlives: 2,\n\t\t\t\t\t\tminPingDelay: 10000,\n\t\t\t\t\t\tmaxPingDelay: config.activity_timeout\n\t\t\t\t\t}]], [\":def_transport\", \"ws\", \"ws\", 3, \":ws_options\", \":ws_manager\"], [\":def_transport\", \"wss\", \"ws\", 3, \":wss_options\", \":ws_manager\"], [\":def_transport\", \"sockjs\", \"sockjs\", 1, \":sockjs_options\"], [\":def_transport\", \"xhr_streaming\", \"xhr_streaming\", 1, \":sockjs_options\", \":streaming_manager\"], [\":def_transport\", \"xdr_streaming\", \"xdr_streaming\", 1, \":sockjs_options\", \":streaming_manager\"], [\":def_transport\", \"xhr_polling\", \"xhr_polling\", 1, \":sockjs_options\"], [\":def_transport\", \"xdr_polling\", \"xdr_polling\", 1, \":sockjs_options\"], [\":def\", \"ws_loop\", [\":sequential\", \":timeouts\", \":ws\"]], [\":def\", \"wss_loop\", [\":sequential\", \":timeouts\", \":wss\"]], [\":def\", \"sockjs_loop\", [\":sequential\", \":timeouts\", \":sockjs\"]], [\":def\", \"streaming_loop\", [\":sequential\", \":timeouts\", [\":if\", [\":is_supported\", \":xhr_streaming\"], \":xhr_streaming\", \":xdr_streaming\"]]], [\":def\", \"polling_loop\", [\":sequential\", \":timeouts\", [\":if\", [\":is_supported\", \":xhr_polling\"], \":xhr_polling\", \":xdr_polling\"]]], [\":def\", \"http_loop\", [\":if\", [\":is_supported\", \":streaming_loop\"], [\":best_connected_ever\", \":streaming_loop\", [\":delayed\", 4000, [\":polling_loop\"]]], [\":polling_loop\"]]], [\":def\", \"http_fallback_loop\", [\":if\", [\":is_supported\", \":http_loop\"], [\":http_loop\"], [\":sockjs_loop\"]]], [\":def\", \"strategy\", [\":cached\", 1800000, [\":first_connected\", [\":if\", [\":is_supported\", \":ws\"], wsStrategy, \":http_fallback_loop\"]]]]];\n\t\t\t\t};\n\t\t\t\texports.__esModule = true;\n\t\t\t\texports[\"default\"] = getDefaultStrategy;\n\n\t\t\t\t/***/\n\t\t\t},\n\t\t\t/* 27 */\n\t\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\t\"use strict\";\n\n\t\t\t\tvar dependencies_1 = __webpack_require__(3);\n\t\t\t\tfunction default_1() {\n\t\t\t\t\tvar self = this;\n\t\t\t\t\tself.timeline.info(self.buildTimelineMessage({\n\t\t\t\t\t\ttransport: self.name + (self.options.encrypted ? \"s\" : \"\")\n\t\t\t\t\t}));\n\t\t\t\t\tif (self.hooks.isInitialized()) {\n\t\t\t\t\t\tself.changeState(\"initialized\");\n\t\t\t\t\t} else if (self.hooks.file) {\n\t\t\t\t\t\tself.changeState(\"initializing\");\n\t\t\t\t\t\tdependencies_1.Dependencies.load(self.hooks.file, { encrypted: self.options.encrypted }, function (error, callback) {\n\t\t\t\t\t\t\tif (self.hooks.isInitialized()) {\n\t\t\t\t\t\t\t\tself.changeState(\"initialized\");\n\t\t\t\t\t\t\t\tcallback(true);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif (error) {\n\t\t\t\t\t\t\t\t\tself.onError(error);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tself.onClose();\n\t\t\t\t\t\t\t\tcallback(false);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.onClose();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\texports.__esModule = true;\n\t\t\t\texports[\"default\"] = default_1;\n\n\t\t\t\t/***/\n\t\t\t},\n\t\t\t/* 28 */\n\t\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\t\"use strict\";\n\n\t\t\t\tvar http_xdomain_request_1 = __webpack_require__(29);\n\t\t\t\tvar http_1 = __webpack_require__(31);\n\t\t\t\thttp_1[\"default\"].createXDR = function (method, url) {\n\t\t\t\t\treturn this.createRequest(http_xdomain_request_1[\"default\"], method, url);\n\t\t\t\t};\n\t\t\t\texports.__esModule = true;\n\t\t\t\texports[\"default\"] = http_1[\"default\"];\n\n\t\t\t\t/***/\n\t\t\t},\n\t\t\t/* 29 */\n\t\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\t\"use strict\";\n\n\t\t\t\tvar Errors = __webpack_require__(30);\n\t\t\t\tvar hooks = {\n\t\t\t\t\tgetRequest: function getRequest(socket) {\n\t\t\t\t\t\tvar xdr = new window.XDomainRequest();\n\t\t\t\t\t\txdr.ontimeout = function () {\n\t\t\t\t\t\t\tsocket.emit(\"error\", new Errors.RequestTimedOut());\n\t\t\t\t\t\t\tsocket.close();\n\t\t\t\t\t\t};\n\t\t\t\t\t\txdr.onerror = function (e) {\n\t\t\t\t\t\t\tsocket.emit(\"error\", e);\n\t\t\t\t\t\t\tsocket.close();\n\t\t\t\t\t\t};\n\t\t\t\t\t\txdr.onprogress = function () {\n\t\t\t\t\t\t\tif (xdr.responseText && xdr.responseText.length > 0) {\n\t\t\t\t\t\t\t\tsocket.onChunk(200, xdr.responseText);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t\txdr.onload = function () {\n\t\t\t\t\t\t\tif (xdr.responseText && xdr.responseText.length > 0) {\n\t\t\t\t\t\t\t\tsocket.onChunk(200, xdr.responseText);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tsocket.emit(\"finished\", 200);\n\t\t\t\t\t\t\tsocket.close();\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturn xdr;\n\t\t\t\t\t},\n\t\t\t\t\tabortRequest: function abortRequest(xdr) {\n\t\t\t\t\t\txdr.ontimeout = xdr.onerror = xdr.onprogress = xdr.onload = null;\n\t\t\t\t\t\txdr.abort();\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\texports.__esModule = true;\n\t\t\t\texports[\"default\"] = hooks;\n\n\t\t\t\t/***/\n\t\t\t},\n\t\t\t/* 30 */\n\t\t\t/***/function (module, exports) {\n\n\t\t\t\t\"use strict\";\n\n\t\t\t\tvar __extends = this && this.__extends || function (d, b) {\n\t\t\t\t\tfor (var p in b) {\n\t\t\t\t\t\tif (b.hasOwnProperty(p)) d[p] = b[p];\n\t\t\t\t\t}function __() {\n\t\t\t\t\t\tthis.constructor = d;\n\t\t\t\t\t}\n\t\t\t\t\td.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t\t\t\t};\n\t\t\t\tvar BadEventName = function (_super) {\n\t\t\t\t\t__extends(BadEventName, _super);\n\t\t\t\t\tfunction BadEventName() {\n\t\t\t\t\t\t_super.apply(this, arguments);\n\t\t\t\t\t}\n\t\t\t\t\treturn BadEventName;\n\t\t\t\t}(Error);\n\t\t\t\texports.BadEventName = BadEventName;\n\t\t\t\tvar RequestTimedOut = function (_super) {\n\t\t\t\t\t__extends(RequestTimedOut, _super);\n\t\t\t\t\tfunction RequestTimedOut() {\n\t\t\t\t\t\t_super.apply(this, arguments);\n\t\t\t\t\t}\n\t\t\t\t\treturn RequestTimedOut;\n\t\t\t\t}(Error);\n\t\t\t\texports.RequestTimedOut = RequestTimedOut;\n\t\t\t\tvar TransportPriorityTooLow = function (_super) {\n\t\t\t\t\t__extends(TransportPriorityTooLow, _super);\n\t\t\t\t\tfunction TransportPriorityTooLow() {\n\t\t\t\t\t\t_super.apply(this, arguments);\n\t\t\t\t\t}\n\t\t\t\t\treturn TransportPriorityTooLow;\n\t\t\t\t}(Error);\n\t\t\t\texports.TransportPriorityTooLow = TransportPriorityTooLow;\n\t\t\t\tvar TransportClosed = function (_super) {\n\t\t\t\t\t__extends(TransportClosed, _super);\n\t\t\t\t\tfunction TransportClosed() {\n\t\t\t\t\t\t_super.apply(this, arguments);\n\t\t\t\t\t}\n\t\t\t\t\treturn TransportClosed;\n\t\t\t\t}(Error);\n\t\t\t\texports.TransportClosed = TransportClosed;\n\t\t\t\tvar UnsupportedTransport = function (_super) {\n\t\t\t\t\t__extends(UnsupportedTransport, _super);\n\t\t\t\t\tfunction UnsupportedTransport() {\n\t\t\t\t\t\t_super.apply(this, arguments);\n\t\t\t\t\t}\n\t\t\t\t\treturn UnsupportedTransport;\n\t\t\t\t}(Error);\n\t\t\t\texports.UnsupportedTransport = UnsupportedTransport;\n\t\t\t\tvar UnsupportedStrategy = function (_super) {\n\t\t\t\t\t__extends(UnsupportedStrategy, _super);\n\t\t\t\t\tfunction UnsupportedStrategy() {\n\t\t\t\t\t\t_super.apply(this, arguments);\n\t\t\t\t\t}\n\t\t\t\t\treturn UnsupportedStrategy;\n\t\t\t\t}(Error);\n\t\t\t\texports.UnsupportedStrategy = UnsupportedStrategy;\n\n\t\t\t\t/***/\n\t\t\t},\n\t\t\t/* 31 */\n\t\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\t\"use strict\";\n\n\t\t\t\tvar http_request_1 = __webpack_require__(32);\n\t\t\t\tvar http_socket_1 = __webpack_require__(33);\n\t\t\t\tvar http_streaming_socket_1 = __webpack_require__(35);\n\t\t\t\tvar http_polling_socket_1 = __webpack_require__(36);\n\t\t\t\tvar http_xhr_request_1 = __webpack_require__(37);\n\t\t\t\tvar HTTP = {\n\t\t\t\t\tcreateStreamingSocket: function createStreamingSocket(url) {\n\t\t\t\t\t\treturn this.createSocket(http_streaming_socket_1[\"default\"], url);\n\t\t\t\t\t},\n\t\t\t\t\tcreatePollingSocket: function createPollingSocket(url) {\n\t\t\t\t\t\treturn this.createSocket(http_polling_socket_1[\"default\"], url);\n\t\t\t\t\t},\n\t\t\t\t\tcreateSocket: function createSocket(hooks, url) {\n\t\t\t\t\t\treturn new http_socket_1[\"default\"](hooks, url);\n\t\t\t\t\t},\n\t\t\t\t\tcreateXHR: function createXHR(method, url) {\n\t\t\t\t\t\treturn this.createRequest(http_xhr_request_1[\"default\"], method, url);\n\t\t\t\t\t},\n\t\t\t\t\tcreateRequest: function createRequest(hooks, method, url) {\n\t\t\t\t\t\treturn new http_request_1[\"default\"](hooks, method, url);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\texports.__esModule = true;\n\t\t\t\texports[\"default\"] = HTTP;\n\n\t\t\t\t/***/\n\t\t\t},\n\t\t\t/* 32 */\n\t\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\t\"use strict\";\n\n\t\t\t\tvar __extends = this && this.__extends || function (d, b) {\n\t\t\t\t\tfor (var p in b) {\n\t\t\t\t\t\tif (b.hasOwnProperty(p)) d[p] = b[p];\n\t\t\t\t\t}function __() {\n\t\t\t\t\t\tthis.constructor = d;\n\t\t\t\t\t}\n\t\t\t\t\td.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t\t\t\t};\n\t\t\t\tvar runtime_1 = __webpack_require__(2);\n\t\t\t\tvar dispatcher_1 = __webpack_require__(23);\n\t\t\t\tvar MAX_BUFFER_LENGTH = 256 * 1024;\n\t\t\t\tvar HTTPRequest = function (_super) {\n\t\t\t\t\t__extends(HTTPRequest, _super);\n\t\t\t\t\tfunction HTTPRequest(hooks, method, url) {\n\t\t\t\t\t\t_super.call(this);\n\t\t\t\t\t\tthis.hooks = hooks;\n\t\t\t\t\t\tthis.method = method;\n\t\t\t\t\t\tthis.url = url;\n\t\t\t\t\t}\n\t\t\t\t\tHTTPRequest.prototype.start = function (payload) {\n\t\t\t\t\t\tvar _this = this;\n\t\t\t\t\t\tthis.position = 0;\n\t\t\t\t\t\tthis.xhr = this.hooks.getRequest(this);\n\t\t\t\t\t\tthis.unloader = function () {\n\t\t\t\t\t\t\t_this.close();\n\t\t\t\t\t\t};\n\t\t\t\t\t\truntime_1[\"default\"].addUnloadListener(this.unloader);\n\t\t\t\t\t\tthis.xhr.open(this.method, this.url, true);\n\t\t\t\t\t\tif (this.xhr.setRequestHeader) {\n\t\t\t\t\t\t\tthis.xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.xhr.send(payload);\n\t\t\t\t\t};\n\t\t\t\t\tHTTPRequest.prototype.close = function () {\n\t\t\t\t\t\tif (this.unloader) {\n\t\t\t\t\t\t\truntime_1[\"default\"].removeUnloadListener(this.unloader);\n\t\t\t\t\t\t\tthis.unloader = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (this.xhr) {\n\t\t\t\t\t\t\tthis.hooks.abortRequest(this.xhr);\n\t\t\t\t\t\t\tthis.xhr = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tHTTPRequest.prototype.onChunk = function (status, data) {\n\t\t\t\t\t\twhile (true) {\n\t\t\t\t\t\t\tvar chunk = this.advanceBuffer(data);\n\t\t\t\t\t\t\tif (chunk) {\n\t\t\t\t\t\t\t\tthis.emit(\"chunk\", { status: status, data: chunk });\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (this.isBufferTooLong(data)) {\n\t\t\t\t\t\t\tthis.emit(\"buffer_too_long\");\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tHTTPRequest.prototype.advanceBuffer = function (buffer) {\n\t\t\t\t\t\tvar unreadData = buffer.slice(this.position);\n\t\t\t\t\t\tvar endOfLinePosition = unreadData.indexOf(\"\\n\");\n\t\t\t\t\t\tif (endOfLinePosition !== -1) {\n\t\t\t\t\t\t\tthis.position += endOfLinePosition + 1;\n\t\t\t\t\t\t\treturn unreadData.slice(0, endOfLinePosition);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tHTTPRequest.prototype.isBufferTooLong = function (buffer) {\n\t\t\t\t\t\treturn this.position === buffer.length && buffer.length > MAX_BUFFER_LENGTH;\n\t\t\t\t\t};\n\t\t\t\t\treturn HTTPRequest;\n\t\t\t\t}(dispatcher_1[\"default\"]);\n\t\t\t\texports.__esModule = true;\n\t\t\t\texports[\"default\"] = HTTPRequest;\n\n\t\t\t\t/***/\n\t\t\t},\n\t\t\t/* 33 */\n\t\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\t\"use strict\";\n\n\t\t\t\tvar state_1 = __webpack_require__(34);\n\t\t\t\tvar util_1 = __webpack_require__(11);\n\t\t\t\tvar runtime_1 = __webpack_require__(2);\n\t\t\t\tvar autoIncrement = 1;\n\t\t\t\tvar HTTPSocket = function () {\n\t\t\t\t\tfunction HTTPSocket(hooks, url) {\n\t\t\t\t\t\tthis.hooks = hooks;\n\t\t\t\t\t\tthis.session = randomNumber(1000) + \"/\" + randomString(8);\n\t\t\t\t\t\tthis.location = getLocation(url);\n\t\t\t\t\t\tthis.readyState = state_1[\"default\"].CONNECTING;\n\t\t\t\t\t\tthis.openStream();\n\t\t\t\t\t}\n\t\t\t\t\tHTTPSocket.prototype.send = function (payload) {\n\t\t\t\t\t\treturn this.sendRaw(JSON.stringify([payload]));\n\t\t\t\t\t};\n\t\t\t\t\tHTTPSocket.prototype.ping = function () {\n\t\t\t\t\t\tthis.hooks.sendHeartbeat(this);\n\t\t\t\t\t};\n\t\t\t\t\tHTTPSocket.prototype.close = function (code, reason) {\n\t\t\t\t\t\tthis.onClose(code, reason, true);\n\t\t\t\t\t};\n\t\t\t\t\tHTTPSocket.prototype.sendRaw = function (payload) {\n\t\t\t\t\t\tif (this.readyState === state_1[\"default\"].OPEN) {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\truntime_1[\"default\"].createSocketRequest(\"POST\", getUniqueURL(getSendURL(this.location, this.session))).start(payload);\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tHTTPSocket.prototype.reconnect = function () {\n\t\t\t\t\t\tthis.closeStream();\n\t\t\t\t\t\tthis.openStream();\n\t\t\t\t\t};\n\t\t\t\t\t;\n\t\t\t\t\tHTTPSocket.prototype.onClose = function (code, reason, wasClean) {\n\t\t\t\t\t\tthis.closeStream();\n\t\t\t\t\t\tthis.readyState = state_1[\"default\"].CLOSED;\n\t\t\t\t\t\tif (this.onclose) {\n\t\t\t\t\t\t\tthis.onclose({\n\t\t\t\t\t\t\t\tcode: code,\n\t\t\t\t\t\t\t\treason: reason,\n\t\t\t\t\t\t\t\twasClean: wasClean\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tHTTPSocket.prototype.onChunk = function (chunk) {\n\t\t\t\t\t\tif (chunk.status !== 200) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (this.readyState === state_1[\"default\"].OPEN) {\n\t\t\t\t\t\t\tthis.onActivity();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar payload;\n\t\t\t\t\t\tvar type = chunk.data.slice(0, 1);\n\t\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\t\tcase 'o':\n\t\t\t\t\t\t\t\tpayload = JSON.parse(chunk.data.slice(1) || '{}');\n\t\t\t\t\t\t\t\tthis.onOpen(payload);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'a':\n\t\t\t\t\t\t\t\tpayload = JSON.parse(chunk.data.slice(1) || '[]');\n\t\t\t\t\t\t\t\tfor (var i = 0; i < payload.length; i++) {\n\t\t\t\t\t\t\t\t\tthis.onEvent(payload[i]);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'm':\n\t\t\t\t\t\t\t\tpayload = JSON.parse(chunk.data.slice(1) || 'null');\n\t\t\t\t\t\t\t\tthis.onEvent(payload);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'h':\n\t\t\t\t\t\t\t\tthis.hooks.onHeartbeat(this);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'c':\n\t\t\t\t\t\t\t\tpayload = JSON.parse(chunk.data.slice(1) || '[]');\n\t\t\t\t\t\t\t\tthis.onClose(payload[0], payload[1], true);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tHTTPSocket.prototype.onOpen = function (options) {\n\t\t\t\t\t\tif (this.readyState === state_1[\"default\"].CONNECTING) {\n\t\t\t\t\t\t\tif (options && options.hostname) {\n\t\t\t\t\t\t\t\tthis.location.base = replaceHost(this.location.base, options.hostname);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.readyState = state_1[\"default\"].OPEN;\n\t\t\t\t\t\t\tif (this.onopen) {\n\t\t\t\t\t\t\t\tthis.onopen();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.onClose(1006, \"Server lost session\", true);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tHTTPSocket.prototype.onEvent = function (event) {\n\t\t\t\t\t\tif (this.readyState === state_1[\"default\"].OPEN && this.onmessage) {\n\t\t\t\t\t\t\tthis.onmessage({ data: event });\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tHTTPSocket.prototype.onActivity = function () {\n\t\t\t\t\t\tif (this.onactivity) {\n\t\t\t\t\t\t\tthis.onactivity();\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tHTTPSocket.prototype.onError = function (error) {\n\t\t\t\t\t\tif (this.onerror) {\n\t\t\t\t\t\t\tthis.onerror(error);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tHTTPSocket.prototype.openStream = function () {\n\t\t\t\t\t\tvar _this = this;\n\t\t\t\t\t\tthis.stream = runtime_1[\"default\"].createSocketRequest(\"POST\", getUniqueURL(this.hooks.getReceiveURL(this.location, this.session)));\n\t\t\t\t\t\tthis.stream.bind(\"chunk\", function (chunk) {\n\t\t\t\t\t\t\t_this.onChunk(chunk);\n\t\t\t\t\t\t});\n\t\t\t\t\t\tthis.stream.bind(\"finished\", function (status) {\n\t\t\t\t\t\t\t_this.hooks.onFinished(_this, status);\n\t\t\t\t\t\t});\n\t\t\t\t\t\tthis.stream.bind(\"buffer_too_long\", function () {\n\t\t\t\t\t\t\t_this.reconnect();\n\t\t\t\t\t\t});\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tthis.stream.start();\n\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\tutil_1[\"default\"].defer(function () {\n\t\t\t\t\t\t\t\t_this.onError(error);\n\t\t\t\t\t\t\t\t_this.onClose(1006, \"Could not start streaming\", false);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tHTTPSocket.prototype.closeStream = function () {\n\t\t\t\t\t\tif (this.stream) {\n\t\t\t\t\t\t\tthis.stream.unbind_all();\n\t\t\t\t\t\t\tthis.stream.close();\n\t\t\t\t\t\t\tthis.stream = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\treturn HTTPSocket;\n\t\t\t\t}();\n\t\t\t\tfunction getLocation(url) {\n\t\t\t\t\tvar parts = /([^\\?]*)\\/*(\\??.*)/.exec(url);\n\t\t\t\t\treturn {\n\t\t\t\t\t\tbase: parts[1],\n\t\t\t\t\t\tqueryString: parts[2]\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tfunction getSendURL(url, session) {\n\t\t\t\t\treturn url.base + \"/\" + session + \"/xhr_send\";\n\t\t\t\t}\n\t\t\t\tfunction getUniqueURL(url) {\n\t\t\t\t\tvar separator = url.indexOf('?') === -1 ? \"?\" : \"&\";\n\t\t\t\t\treturn url + separator + \"t=\" + +new Date() + \"&n=\" + autoIncrement++;\n\t\t\t\t}\n\t\t\t\tfunction replaceHost(url, hostname) {\n\t\t\t\t\tvar urlParts = /(https?:\\/\\/)([^\\/:]+)((\\/|:)?.*)/.exec(url);\n\t\t\t\t\treturn urlParts[1] + hostname + urlParts[3];\n\t\t\t\t}\n\t\t\t\tfunction randomNumber(max) {\n\t\t\t\t\treturn Math.floor(Math.random() * max);\n\t\t\t\t}\n\t\t\t\tfunction randomString(length) {\n\t\t\t\t\tvar result = [];\n\t\t\t\t\tfor (var i = 0; i < length; i++) {\n\t\t\t\t\t\tresult.push(randomNumber(32).toString(32));\n\t\t\t\t\t}\n\t\t\t\t\treturn result.join('');\n\t\t\t\t}\n\t\t\t\texports.__esModule = true;\n\t\t\t\texports[\"default\"] = HTTPSocket;\n\n\t\t\t\t/***/\n\t\t\t},\n\t\t\t/* 34 */\n\t\t\t/***/function (module, exports) {\n\n\t\t\t\t\"use strict\";\n\n\t\t\t\tvar State;\n\t\t\t\t(function (State) {\n\t\t\t\t\tState[State[\"CONNECTING\"] = 0] = \"CONNECTING\";\n\t\t\t\t\tState[State[\"OPEN\"] = 1] = \"OPEN\";\n\t\t\t\t\tState[State[\"CLOSED\"] = 3] = \"CLOSED\";\n\t\t\t\t})(State || (State = {}));\n\t\t\t\texports.__esModule = true;\n\t\t\t\texports[\"default\"] = State;\n\n\t\t\t\t/***/\n\t\t\t},\n\t\t\t/* 35 */\n\t\t\t/***/function (module, exports) {\n\n\t\t\t\t\"use strict\";\n\n\t\t\t\tvar hooks = {\n\t\t\t\t\tgetReceiveURL: function getReceiveURL(url, session) {\n\t\t\t\t\t\treturn url.base + \"/\" + session + \"/xhr_streaming\" + url.queryString;\n\t\t\t\t\t},\n\t\t\t\t\tonHeartbeat: function onHeartbeat(socket) {\n\t\t\t\t\t\tsocket.sendRaw(\"[]\");\n\t\t\t\t\t},\n\t\t\t\t\tsendHeartbeat: function sendHeartbeat(socket) {\n\t\t\t\t\t\tsocket.sendRaw(\"[]\");\n\t\t\t\t\t},\n\t\t\t\t\tonFinished: function onFinished(socket, status) {\n\t\t\t\t\t\tsocket.onClose(1006, \"Connection interrupted (\" + status + \")\", false);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\texports.__esModule = true;\n\t\t\t\texports[\"default\"] = hooks;\n\n\t\t\t\t/***/\n\t\t\t},\n\t\t\t/* 36 */\n\t\t\t/***/function (module, exports) {\n\n\t\t\t\t\"use strict\";\n\n\t\t\t\tvar hooks = {\n\t\t\t\t\tgetReceiveURL: function getReceiveURL(url, session) {\n\t\t\t\t\t\treturn url.base + \"/\" + session + \"/xhr\" + url.queryString;\n\t\t\t\t\t},\n\t\t\t\t\tonHeartbeat: function onHeartbeat() {},\n\t\t\t\t\tsendHeartbeat: function sendHeartbeat(socket) {\n\t\t\t\t\t\tsocket.sendRaw(\"[]\");\n\t\t\t\t\t},\n\t\t\t\t\tonFinished: function onFinished(socket, status) {\n\t\t\t\t\t\tif (status === 200) {\n\t\t\t\t\t\t\tsocket.reconnect();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsocket.onClose(1006, \"Connection interrupted (\" + status + \")\", false);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\texports.__esModule = true;\n\t\t\t\texports[\"default\"] = hooks;\n\n\t\t\t\t/***/\n\t\t\t},\n\t\t\t/* 37 */\n\t\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\t\"use strict\";\n\n\t\t\t\tvar runtime_1 = __webpack_require__(2);\n\t\t\t\tvar hooks = {\n\t\t\t\t\tgetRequest: function getRequest(socket) {\n\t\t\t\t\t\tvar Constructor = runtime_1[\"default\"].getXHRAPI();\n\t\t\t\t\t\tvar xhr = new Constructor();\n\t\t\t\t\t\txhr.onreadystatechange = xhr.onprogress = function () {\n\t\t\t\t\t\t\tswitch (xhr.readyState) {\n\t\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\t\tif (xhr.responseText && xhr.responseText.length > 0) {\n\t\t\t\t\t\t\t\t\t\tsocket.onChunk(xhr.status, xhr.responseText);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\t\t\tif (xhr.responseText && xhr.responseText.length > 0) {\n\t\t\t\t\t\t\t\t\t\tsocket.onChunk(xhr.status, xhr.responseText);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tsocket.emit(\"finished\", xhr.status);\n\t\t\t\t\t\t\t\t\tsocket.close();\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturn xhr;\n\t\t\t\t\t},\n\t\t\t\t\tabortRequest: function abortRequest(xhr) {\n\t\t\t\t\t\txhr.onreadystatechange = null;\n\t\t\t\t\t\txhr.abort();\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\texports.__esModule = true;\n\t\t\t\texports[\"default\"] = hooks;\n\n\t\t\t\t/***/\n\t\t\t},\n\t\t\t/* 38 */\n\t\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\t\"use strict\";\n\n\t\t\t\tvar Collections = __webpack_require__(9);\n\t\t\t\tvar util_1 = __webpack_require__(11);\n\t\t\t\tvar level_1 = __webpack_require__(39);\n\t\t\t\tvar Timeline = function () {\n\t\t\t\t\tfunction Timeline(key, session, options) {\n\t\t\t\t\t\tthis.key = key;\n\t\t\t\t\t\tthis.session = session;\n\t\t\t\t\t\tthis.events = [];\n\t\t\t\t\t\tthis.options = options || {};\n\t\t\t\t\t\tthis.sent = 0;\n\t\t\t\t\t\tthis.uniqueID = 0;\n\t\t\t\t\t}\n\t\t\t\t\tTimeline.prototype.log = function (level, event) {\n\t\t\t\t\t\tif (level <= this.options.level) {\n\t\t\t\t\t\t\tthis.events.push(Collections.extend({}, event, { timestamp: util_1[\"default\"].now() }));\n\t\t\t\t\t\t\tif (this.options.limit && this.events.length > this.options.limit) {\n\t\t\t\t\t\t\t\tthis.events.shift();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tTimeline.prototype.error = function (event) {\n\t\t\t\t\t\tthis.log(level_1[\"default\"].ERROR, event);\n\t\t\t\t\t};\n\t\t\t\t\tTimeline.prototype.info = function (event) {\n\t\t\t\t\t\tthis.log(level_1[\"default\"].INFO, event);\n\t\t\t\t\t};\n\t\t\t\t\tTimeline.prototype.debug = function (event) {\n\t\t\t\t\t\tthis.log(level_1[\"default\"].DEBUG, event);\n\t\t\t\t\t};\n\t\t\t\t\tTimeline.prototype.isEmpty = function () {\n\t\t\t\t\t\treturn this.events.length === 0;\n\t\t\t\t\t};\n\t\t\t\t\tTimeline.prototype.send = function (sendfn, callback) {\n\t\t\t\t\t\tvar _this = this;\n\t\t\t\t\t\tvar data = Collections.extend({\n\t\t\t\t\t\t\tsession: this.session,\n\t\t\t\t\t\t\tbundle: this.sent + 1,\n\t\t\t\t\t\t\tkey: this.key,\n\t\t\t\t\t\t\tlib: \"js\",\n\t\t\t\t\t\t\tversion: this.options.version,\n\t\t\t\t\t\t\tcluster: this.options.cluster,\n\t\t\t\t\t\t\tfeatures: this.options.features,\n\t\t\t\t\t\t\ttimeline: this.events\n\t\t\t\t\t\t}, this.options.params);\n\t\t\t\t\t\tthis.events = [];\n\t\t\t\t\t\tsendfn(data, function (error, result) {\n\t\t\t\t\t\t\tif (!error) {\n\t\t\t\t\t\t\t\t_this.sent++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (callback) {\n\t\t\t\t\t\t\t\tcallback(error, result);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t};\n\t\t\t\t\tTimeline.prototype.generateUniqueID = function () {\n\t\t\t\t\t\tthis.uniqueID++;\n\t\t\t\t\t\treturn this.uniqueID;\n\t\t\t\t\t};\n\t\t\t\t\treturn Timeline;\n\t\t\t\t}();\n\t\t\t\texports.__esModule = true;\n\t\t\t\texports[\"default\"] = Timeline;\n\n\t\t\t\t/***/\n\t\t\t},\n\t\t\t/* 39 */\n\t\t\t/***/function (module, exports) {\n\n\t\t\t\t\"use strict\";\n\n\t\t\t\tvar TimelineLevel;\n\t\t\t\t(function (TimelineLevel) {\n\t\t\t\t\tTimelineLevel[TimelineLevel[\"ERROR\"] = 3] = \"ERROR\";\n\t\t\t\t\tTimelineLevel[TimelineLevel[\"INFO\"] = 6] = \"INFO\";\n\t\t\t\t\tTimelineLevel[TimelineLevel[\"DEBUG\"] = 7] = \"DEBUG\";\n\t\t\t\t})(TimelineLevel || (TimelineLevel = {}));\n\t\t\t\texports.__esModule = true;\n\t\t\t\texports[\"default\"] = TimelineLevel;\n\n\t\t\t\t/***/\n\t\t\t},\n\t\t\t/* 40 */\n\t\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\t\"use strict\";\n\n\t\t\t\tvar Collections = __webpack_require__(9);\n\t\t\t\tvar util_1 = __webpack_require__(11);\n\t\t\t\tvar transport_manager_1 = __webpack_require__(41);\n\t\t\t\tvar Errors = __webpack_require__(30);\n\t\t\t\tvar transport_strategy_1 = __webpack_require__(55);\n\t\t\t\tvar sequential_strategy_1 = __webpack_require__(56);\n\t\t\t\tvar best_connected_ever_strategy_1 = __webpack_require__(57);\n\t\t\t\tvar cached_strategy_1 = __webpack_require__(58);\n\t\t\t\tvar delayed_strategy_1 = __webpack_require__(59);\n\t\t\t\tvar if_strategy_1 = __webpack_require__(60);\n\t\t\t\tvar first_connected_strategy_1 = __webpack_require__(61);\n\t\t\t\tvar runtime_1 = __webpack_require__(2);\n\t\t\t\tvar Transports = runtime_1[\"default\"].Transports;\n\t\t\t\texports.build = function (scheme, options) {\n\t\t\t\t\tvar context = Collections.extend({}, globalContext, options);\n\t\t\t\t\treturn evaluate(scheme, context)[1].strategy;\n\t\t\t\t};\n\t\t\t\tvar UnsupportedStrategy = {\n\t\t\t\t\tisSupported: function isSupported() {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t},\n\t\t\t\t\tconnect: function connect(_, callback) {\n\t\t\t\t\t\tvar deferred = util_1[\"default\"].defer(function () {\n\t\t\t\t\t\t\tcallback(new Errors.UnsupportedStrategy());\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tabort: function abort() {\n\t\t\t\t\t\t\t\tdeferred.ensureAborted();\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tforceMinPriority: function forceMinPriority() {}\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tfunction returnWithOriginalContext(f) {\n\t\t\t\t\treturn function (context) {\n\t\t\t\t\t\treturn [f.apply(this, arguments), context];\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tvar globalContext = {\n\t\t\t\t\textend: function extend(context, first, second) {\n\t\t\t\t\t\treturn [Collections.extend({}, first, second), context];\n\t\t\t\t\t},\n\t\t\t\t\tdef: function def(context, name, value) {\n\t\t\t\t\t\tif (context[name] !== undefined) {\n\t\t\t\t\t\t\tthrow \"Redefining symbol \" + name;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcontext[name] = value;\n\t\t\t\t\t\treturn [undefined, context];\n\t\t\t\t\t},\n\t\t\t\t\tdef_transport: function def_transport(context, name, type, priority, options, manager) {\n\t\t\t\t\t\tvar transportClass = Transports[type];\n\t\t\t\t\t\tif (!transportClass) {\n\t\t\t\t\t\t\tthrow new Errors.UnsupportedTransport(type);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar enabled = (!context.enabledTransports || Collections.arrayIndexOf(context.enabledTransports, name) !== -1) && (!context.disabledTransports || Collections.arrayIndexOf(context.disabledTransports, name) === -1);\n\t\t\t\t\t\tvar transport;\n\t\t\t\t\t\tif (enabled) {\n\t\t\t\t\t\t\ttransport = new transport_strategy_1[\"default\"](name, priority, manager ? manager.getAssistant(transportClass) : transportClass, Collections.extend({\n\t\t\t\t\t\t\t\tkey: context.key,\n\t\t\t\t\t\t\t\tencrypted: context.encrypted,\n\t\t\t\t\t\t\t\ttimeline: context.timeline,\n\t\t\t\t\t\t\t\tignoreNullOrigin: context.ignoreNullOrigin\n\t\t\t\t\t\t\t}, options));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttransport = UnsupportedStrategy;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar newContext = context.def(context, name, transport)[1];\n\t\t\t\t\t\tnewContext.Transports = context.Transports || {};\n\t\t\t\t\t\tnewContext.Transports[name] = transport;\n\t\t\t\t\t\treturn [undefined, newContext];\n\t\t\t\t\t},\n\t\t\t\t\ttransport_manager: returnWithOriginalContext(function (_, options) {\n\t\t\t\t\t\treturn new transport_manager_1[\"default\"](options);\n\t\t\t\t\t}),\n\t\t\t\t\tsequential: returnWithOriginalContext(function (_, options) {\n\t\t\t\t\t\tvar strategies = Array.prototype.slice.call(arguments, 2);\n\t\t\t\t\t\treturn new sequential_strategy_1[\"default\"](strategies, options);\n\t\t\t\t\t}),\n\t\t\t\t\tcached: returnWithOriginalContext(function (context, ttl, strategy) {\n\t\t\t\t\t\treturn new cached_strategy_1[\"default\"](strategy, context.Transports, {\n\t\t\t\t\t\t\tttl: ttl,\n\t\t\t\t\t\t\ttimeline: context.timeline,\n\t\t\t\t\t\t\tencrypted: context.encrypted\n\t\t\t\t\t\t});\n\t\t\t\t\t}),\n\t\t\t\t\tfirst_connected: returnWithOriginalContext(function (_, strategy) {\n\t\t\t\t\t\treturn new first_connected_strategy_1[\"default\"](strategy);\n\t\t\t\t\t}),\n\t\t\t\t\tbest_connected_ever: returnWithOriginalContext(function () {\n\t\t\t\t\t\tvar strategies = Array.prototype.slice.call(arguments, 1);\n\t\t\t\t\t\treturn new best_connected_ever_strategy_1[\"default\"](strategies);\n\t\t\t\t\t}),\n\t\t\t\t\tdelayed: returnWithOriginalContext(function (_, delay, strategy) {\n\t\t\t\t\t\treturn new delayed_strategy_1[\"default\"](strategy, { delay: delay });\n\t\t\t\t\t}),\n\t\t\t\t\t\"if\": returnWithOriginalContext(function (_, test, trueBranch, falseBranch) {\n\t\t\t\t\t\treturn new if_strategy_1[\"default\"](test, trueBranch, falseBranch);\n\t\t\t\t\t}),\n\t\t\t\t\tis_supported: returnWithOriginalContext(function (_, strategy) {\n\t\t\t\t\t\treturn function () {\n\t\t\t\t\t\t\treturn strategy.isSupported();\n\t\t\t\t\t\t};\n\t\t\t\t\t})\n\t\t\t\t};\n\t\t\t\tfunction isSymbol(expression) {\n\t\t\t\t\treturn typeof expression === \"string\" && expression.charAt(0) === \":\";\n\t\t\t\t}\n\t\t\t\tfunction getSymbolValue(expression, context) {\n\t\t\t\t\treturn context[expression.slice(1)];\n\t\t\t\t}\n\t\t\t\tfunction evaluateListOfExpressions(expressions, context) {\n\t\t\t\t\tif (expressions.length === 0) {\n\t\t\t\t\t\treturn [[], context];\n\t\t\t\t\t}\n\t\t\t\t\tvar head = evaluate(expressions[0], context);\n\t\t\t\t\tvar tail = evaluateListOfExpressions(expressions.slice(1), head[1]);\n\t\t\t\t\treturn [[head[0]].concat(tail[0]), tail[1]];\n\t\t\t\t}\n\t\t\t\tfunction evaluateString(expression, context) {\n\t\t\t\t\tif (!isSymbol(expression)) {\n\t\t\t\t\t\treturn [expression, context];\n\t\t\t\t\t}\n\t\t\t\t\tvar value = getSymbolValue(expression, context);\n\t\t\t\t\tif (value === undefined) {\n\t\t\t\t\t\tthrow \"Undefined symbol \" + expression;\n\t\t\t\t\t}\n\t\t\t\t\treturn [value, context];\n\t\t\t\t}\n\t\t\t\tfunction evaluateArray(expression, context) {\n\t\t\t\t\tif (isSymbol(expression[0])) {\n\t\t\t\t\t\tvar f = getSymbolValue(expression[0], context);\n\t\t\t\t\t\tif (expression.length > 1) {\n\t\t\t\t\t\t\tif (typeof f !== \"function\") {\n\t\t\t\t\t\t\t\tthrow \"Calling non-function \" + expression[0];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tvar args = [Collections.extend({}, context)].concat(Collections.map(expression.slice(1), function (arg) {\n\t\t\t\t\t\t\t\treturn evaluate(arg, Collections.extend({}, context))[0];\n\t\t\t\t\t\t\t}));\n\t\t\t\t\t\t\treturn f.apply(this, args);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn [f, context];\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn evaluateListOfExpressions(expression, context);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfunction evaluate(expression, context) {\n\t\t\t\t\tif (typeof expression === \"string\") {\n\t\t\t\t\t\treturn evaluateString(expression, context);\n\t\t\t\t\t} else if ((typeof expression === 'undefined' ? 'undefined' : _typeof(expression)) === \"object\") {\n\t\t\t\t\t\tif (expression instanceof Array && expression.length > 0) {\n\t\t\t\t\t\t\treturn evaluateArray(expression, context);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn [expression, context];\n\t\t\t\t}\n\n\t\t\t\t/***/\n\t\t\t},\n\t\t\t/* 41 */\n\t\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\t\"use strict\";\n\n\t\t\t\tvar factory_1 = __webpack_require__(42);\n\t\t\t\tvar TransportManager = function () {\n\t\t\t\t\tfunction TransportManager(options) {\n\t\t\t\t\t\tthis.options = options || {};\n\t\t\t\t\t\tthis.livesLeft = this.options.lives || Infinity;\n\t\t\t\t\t}\n\t\t\t\t\tTransportManager.prototype.getAssistant = function (transport) {\n\t\t\t\t\t\treturn factory_1[\"default\"].createAssistantToTheTransportManager(this, transport, {\n\t\t\t\t\t\t\tminPingDelay: this.options.minPingDelay,\n\t\t\t\t\t\t\tmaxPingDelay: this.options.maxPingDelay\n\t\t\t\t\t\t});\n\t\t\t\t\t};\n\t\t\t\t\tTransportManager.prototype.isAlive = function () {\n\t\t\t\t\t\treturn this.livesLeft > 0;\n\t\t\t\t\t};\n\t\t\t\t\tTransportManager.prototype.reportDeath = function () {\n\t\t\t\t\t\tthis.livesLeft -= 1;\n\t\t\t\t\t};\n\t\t\t\t\treturn TransportManager;\n\t\t\t\t}();\n\t\t\t\texports.__esModule = true;\n\t\t\t\texports[\"default\"] = TransportManager;\n\n\t\t\t\t/***/\n\t\t\t},\n\t\t\t/* 42 */\n\t\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\t\"use strict\";\n\n\t\t\t\tvar assistant_to_the_transport_manager_1 = __webpack_require__(43);\n\t\t\t\tvar handshake_1 = __webpack_require__(44);\n\t\t\t\tvar pusher_authorizer_1 = __webpack_require__(47);\n\t\t\t\tvar timeline_sender_1 = __webpack_require__(48);\n\t\t\t\tvar presence_channel_1 = __webpack_require__(49);\n\t\t\t\tvar private_channel_1 = __webpack_require__(50);\n\t\t\t\tvar channel_1 = __webpack_require__(51);\n\t\t\t\tvar connection_manager_1 = __webpack_require__(53);\n\t\t\t\tvar channels_1 = __webpack_require__(54);\n\t\t\t\tvar Factory = {\n\t\t\t\t\tcreateChannels: function createChannels() {\n\t\t\t\t\t\treturn new channels_1[\"default\"]();\n\t\t\t\t\t},\n\t\t\t\t\tcreateConnectionManager: function createConnectionManager(key, options) {\n\t\t\t\t\t\treturn new connection_manager_1[\"default\"](key, options);\n\t\t\t\t\t},\n\t\t\t\t\tcreateChannel: function createChannel(name, pusher) {\n\t\t\t\t\t\treturn new channel_1[\"default\"](name, pusher);\n\t\t\t\t\t},\n\t\t\t\t\tcreatePrivateChannel: function createPrivateChannel(name, pusher) {\n\t\t\t\t\t\treturn new private_channel_1[\"default\"](name, pusher);\n\t\t\t\t\t},\n\t\t\t\t\tcreatePresenceChannel: function createPresenceChannel(name, pusher) {\n\t\t\t\t\t\treturn new presence_channel_1[\"default\"](name, pusher);\n\t\t\t\t\t},\n\t\t\t\t\tcreateTimelineSender: function createTimelineSender(timeline, options) {\n\t\t\t\t\t\treturn new timeline_sender_1[\"default\"](timeline, options);\n\t\t\t\t\t},\n\t\t\t\t\tcreateAuthorizer: function createAuthorizer(channel, options) {\n\t\t\t\t\t\treturn new pusher_authorizer_1[\"default\"](channel, options);\n\t\t\t\t\t},\n\t\t\t\t\tcreateHandshake: function createHandshake(transport, callback) {\n\t\t\t\t\t\treturn new handshake_1[\"default\"](transport, callback);\n\t\t\t\t\t},\n\t\t\t\t\tcreateAssistantToTheTransportManager: function createAssistantToTheTransportManager(manager, transport, options) {\n\t\t\t\t\t\treturn new assistant_to_the_transport_manager_1[\"default\"](manager, transport, options);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\texports.__esModule = true;\n\t\t\t\texports[\"default\"] = Factory;\n\n\t\t\t\t/***/\n\t\t\t},\n\t\t\t/* 43 */\n\t\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\t\"use strict\";\n\n\t\t\t\tvar util_1 = __webpack_require__(11);\n\t\t\t\tvar Collections = __webpack_require__(9);\n\t\t\t\tvar AssistantToTheTransportManager = function () {\n\t\t\t\t\tfunction AssistantToTheTransportManager(manager, transport, options) {\n\t\t\t\t\t\tthis.manager = manager;\n\t\t\t\t\t\tthis.transport = transport;\n\t\t\t\t\t\tthis.minPingDelay = options.minPingDelay;\n\t\t\t\t\t\tthis.maxPingDelay = options.maxPingDelay;\n\t\t\t\t\t\tthis.pingDelay = undefined;\n\t\t\t\t\t}\n\t\t\t\t\tAssistantToTheTransportManager.prototype.createConnection = function (name, priority, key, options) {\n\t\t\t\t\t\tvar _this = this;\n\t\t\t\t\t\toptions = Collections.extend({}, options, {\n\t\t\t\t\t\t\tactivityTimeout: this.pingDelay\n\t\t\t\t\t\t});\n\t\t\t\t\t\tvar connection = this.transport.createConnection(name, priority, key, options);\n\t\t\t\t\t\tvar openTimestamp = null;\n\t\t\t\t\t\tvar onOpen = function onOpen() {\n\t\t\t\t\t\t\tconnection.unbind(\"open\", onOpen);\n\t\t\t\t\t\t\tconnection.bind(\"closed\", onClosed);\n\t\t\t\t\t\t\topenTimestamp = util_1[\"default\"].now();\n\t\t\t\t\t\t};\n\t\t\t\t\t\tvar onClosed = function onClosed(closeEvent) {\n\t\t\t\t\t\t\tconnection.unbind(\"closed\", onClosed);\n\t\t\t\t\t\t\tif (closeEvent.code === 1002 || closeEvent.code === 1003) {\n\t\t\t\t\t\t\t\t_this.manager.reportDeath();\n\t\t\t\t\t\t\t} else if (!closeEvent.wasClean && openTimestamp) {\n\t\t\t\t\t\t\t\tvar lifespan = util_1[\"default\"].now() - openTimestamp;\n\t\t\t\t\t\t\t\tif (lifespan < 2 * _this.maxPingDelay) {\n\t\t\t\t\t\t\t\t\t_this.manager.reportDeath();\n\t\t\t\t\t\t\t\t\t_this.pingDelay = Math.max(lifespan / 2, _this.minPingDelay);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t\tconnection.bind(\"open\", onOpen);\n\t\t\t\t\t\treturn connection;\n\t\t\t\t\t};\n\t\t\t\t\tAssistantToTheTransportManager.prototype.isSupported = function (environment) {\n\t\t\t\t\t\treturn this.manager.isAlive() && this.transport.isSupported(environment);\n\t\t\t\t\t};\n\t\t\t\t\treturn AssistantToTheTransportManager;\n\t\t\t\t}();\n\t\t\t\texports.__esModule = true;\n\t\t\t\texports[\"default\"] = AssistantToTheTransportManager;\n\n\t\t\t\t/***/\n\t\t\t},\n\t\t\t/* 44 */\n\t\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\t\"use strict\";\n\n\t\t\t\tvar Collections = __webpack_require__(9);\n\t\t\t\tvar Protocol = __webpack_require__(45);\n\t\t\t\tvar connection_1 = __webpack_require__(46);\n\t\t\t\tvar Handshake = function () {\n\t\t\t\t\tfunction Handshake(transport, callback) {\n\t\t\t\t\t\tthis.transport = transport;\n\t\t\t\t\t\tthis.callback = callback;\n\t\t\t\t\t\tthis.bindListeners();\n\t\t\t\t\t}\n\t\t\t\t\tHandshake.prototype.close = function () {\n\t\t\t\t\t\tthis.unbindListeners();\n\t\t\t\t\t\tthis.transport.close();\n\t\t\t\t\t};\n\t\t\t\t\tHandshake.prototype.bindListeners = function () {\n\t\t\t\t\t\tvar _this = this;\n\t\t\t\t\t\tthis.onMessage = function (m) {\n\t\t\t\t\t\t\t_this.unbindListeners();\n\t\t\t\t\t\t\tvar result;\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tresult = Protocol.processHandshake(m);\n\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t_this.finish(\"error\", { error: e });\n\t\t\t\t\t\t\t\t_this.transport.close();\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (result.action === \"connected\") {\n\t\t\t\t\t\t\t\t_this.finish(\"connected\", {\n\t\t\t\t\t\t\t\t\tconnection: new connection_1[\"default\"](result.id, _this.transport),\n\t\t\t\t\t\t\t\t\tactivityTimeout: result.activityTimeout\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t_this.finish(result.action, { error: result.error });\n\t\t\t\t\t\t\t\t_this.transport.close();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t\tthis.onClosed = function (closeEvent) {\n\t\t\t\t\t\t\t_this.unbindListeners();\n\t\t\t\t\t\t\tvar action = Protocol.getCloseAction(closeEvent) || \"backoff\";\n\t\t\t\t\t\t\tvar error = Protocol.getCloseError(closeEvent);\n\t\t\t\t\t\t\t_this.finish(action, { error: error });\n\t\t\t\t\t\t};\n\t\t\t\t\t\tthis.transport.bind(\"message\", this.onMessage);\n\t\t\t\t\t\tthis.transport.bind(\"closed\", this.onClosed);\n\t\t\t\t\t};\n\t\t\t\t\tHandshake.prototype.unbindListeners = function () {\n\t\t\t\t\t\tthis.transport.unbind(\"message\", this.onMessage);\n\t\t\t\t\t\tthis.transport.unbind(\"closed\", this.onClosed);\n\t\t\t\t\t};\n\t\t\t\t\tHandshake.prototype.finish = function (action, params) {\n\t\t\t\t\t\tthis.callback(Collections.extend({ transport: this.transport, action: action }, params));\n\t\t\t\t\t};\n\t\t\t\t\treturn Handshake;\n\t\t\t\t}();\n\t\t\t\texports.__esModule = true;\n\t\t\t\texports[\"default\"] = Handshake;\n\n\t\t\t\t/***/\n\t\t\t},\n\t\t\t/* 45 */\n\t\t\t/***/function (module, exports) {\n\n\t\t\t\t\"use strict\";\n\n\t\t\t\texports.decodeMessage = function (message) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tvar params = JSON.parse(message.data);\n\t\t\t\t\t\tif (typeof params.data === 'string') {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tparams.data = JSON.parse(params.data);\n\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\tif (!(e instanceof SyntaxError)) {\n\t\t\t\t\t\t\t\t\tthrow e;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn params;\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tthrow { type: 'MessageParseError', error: e, data: message.data };\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\texports.encodeMessage = function (message) {\n\t\t\t\t\treturn JSON.stringify(message);\n\t\t\t\t};\n\t\t\t\texports.processHandshake = function (message) {\n\t\t\t\t\tmessage = exports.decodeMessage(message);\n\t\t\t\t\tif (message.event === \"pusher:connection_established\") {\n\t\t\t\t\t\tif (!message.data.activity_timeout) {\n\t\t\t\t\t\t\tthrow \"No activity timeout specified in handshake\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\taction: \"connected\",\n\t\t\t\t\t\t\tid: message.data.socket_id,\n\t\t\t\t\t\t\tactivityTimeout: message.data.activity_timeout * 1000\n\t\t\t\t\t\t};\n\t\t\t\t\t} else if (message.event === \"pusher:error\") {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\taction: this.getCloseAction(message.data),\n\t\t\t\t\t\t\terror: this.getCloseError(message.data)\n\t\t\t\t\t\t};\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow \"Invalid handshake\";\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\texports.getCloseAction = function (closeEvent) {\n\t\t\t\t\tif (closeEvent.code < 4000) {\n\t\t\t\t\t\tif (closeEvent.code >= 1002 && closeEvent.code <= 1004) {\n\t\t\t\t\t\t\treturn \"backoff\";\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (closeEvent.code === 4000) {\n\t\t\t\t\t\treturn \"ssl_only\";\n\t\t\t\t\t} else if (closeEvent.code < 4100) {\n\t\t\t\t\t\treturn \"refused\";\n\t\t\t\t\t} else if (closeEvent.code < 4200) {\n\t\t\t\t\t\treturn \"backoff\";\n\t\t\t\t\t} else if (closeEvent.code < 4300) {\n\t\t\t\t\t\treturn \"retry\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn \"refused\";\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\texports.getCloseError = function (closeEvent) {\n\t\t\t\t\tif (closeEvent.code !== 1000 && closeEvent.code !== 1001) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\ttype: 'PusherError',\n\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\tcode: closeEvent.code,\n\t\t\t\t\t\t\t\tmessage: closeEvent.reason || closeEvent.message\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t/***/\n\t\t\t},\n\t\t\t/* 46 */\n\t\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\t\"use strict\";\n\n\t\t\t\tvar __extends = this && this.__extends || function (d, b) {\n\t\t\t\t\tfor (var p in b) {\n\t\t\t\t\t\tif (b.hasOwnProperty(p)) d[p] = b[p];\n\t\t\t\t\t}function __() {\n\t\t\t\t\t\tthis.constructor = d;\n\t\t\t\t\t}\n\t\t\t\t\td.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t\t\t\t};\n\t\t\t\tvar Collections = __webpack_require__(9);\n\t\t\t\tvar dispatcher_1 = __webpack_require__(23);\n\t\t\t\tvar Protocol = __webpack_require__(45);\n\t\t\t\tvar logger_1 = __webpack_require__(8);\n\t\t\t\tvar Connection = function (_super) {\n\t\t\t\t\t__extends(Connection, _super);\n\t\t\t\t\tfunction Connection(id, transport) {\n\t\t\t\t\t\t_super.call(this);\n\t\t\t\t\t\tthis.id = id;\n\t\t\t\t\t\tthis.transport = transport;\n\t\t\t\t\t\tthis.activityTimeout = transport.activityTimeout;\n\t\t\t\t\t\tthis.bindListeners();\n\t\t\t\t\t}\n\t\t\t\t\tConnection.prototype.handlesActivityChecks = function () {\n\t\t\t\t\t\treturn this.transport.handlesActivityChecks();\n\t\t\t\t\t};\n\t\t\t\t\tConnection.prototype.send = function (data) {\n\t\t\t\t\t\treturn this.transport.send(data);\n\t\t\t\t\t};\n\t\t\t\t\tConnection.prototype.send_event = function (name, data, channel) {\n\t\t\t\t\t\tvar message = { event: name, data: data };\n\t\t\t\t\t\tif (channel) {\n\t\t\t\t\t\t\tmessage.channel = channel;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlogger_1[\"default\"].debug('Event sent', message);\n\t\t\t\t\t\treturn this.send(Protocol.encodeMessage(message));\n\t\t\t\t\t};\n\t\t\t\t\tConnection.prototype.ping = function () {\n\t\t\t\t\t\tif (this.transport.supportsPing()) {\n\t\t\t\t\t\t\tthis.transport.ping();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.send_event('pusher:ping', {});\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tConnection.prototype.close = function () {\n\t\t\t\t\t\tthis.transport.close();\n\t\t\t\t\t};\n\t\t\t\t\tConnection.prototype.bindListeners = function () {\n\t\t\t\t\t\tvar _this = this;\n\t\t\t\t\t\tvar listeners = {\n\t\t\t\t\t\t\tmessage: function message(m) {\n\t\t\t\t\t\t\t\tvar message;\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tmessage = Protocol.decodeMessage(m);\n\t\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t\t_this.emit('error', {\n\t\t\t\t\t\t\t\t\t\ttype: 'MessageParseError',\n\t\t\t\t\t\t\t\t\t\terror: e,\n\t\t\t\t\t\t\t\t\t\tdata: m.data\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (message !== undefined) {\n\t\t\t\t\t\t\t\t\tlogger_1[\"default\"].debug('Event recd', message);\n\t\t\t\t\t\t\t\t\tswitch (message.event) {\n\t\t\t\t\t\t\t\t\t\tcase 'pusher:error':\n\t\t\t\t\t\t\t\t\t\t\t_this.emit('error', { type: 'PusherError', data: message.data });\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\tcase 'pusher:ping':\n\t\t\t\t\t\t\t\t\t\t\t_this.emit(\"ping\");\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\tcase 'pusher:pong':\n\t\t\t\t\t\t\t\t\t\t\t_this.emit(\"pong\");\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t_this.emit('message', message);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tactivity: function activity() {\n\t\t\t\t\t\t\t\t_this.emit(\"activity\");\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\terror: function error(_error) {\n\t\t\t\t\t\t\t\t_this.emit(\"error\", { type: \"WebSocketError\", error: _error });\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tclosed: function closed(closeEvent) {\n\t\t\t\t\t\t\t\tunbindListeners();\n\t\t\t\t\t\t\t\tif (closeEvent && closeEvent.code) {\n\t\t\t\t\t\t\t\t\t_this.handleCloseEvent(closeEvent);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t_this.transport = null;\n\t\t\t\t\t\t\t\t_this.emit(\"closed\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t\tvar unbindListeners = function unbindListeners() {\n\t\t\t\t\t\t\tCollections.objectApply(listeners, function (listener, event) {\n\t\t\t\t\t\t\t\t_this.transport.unbind(event, listener);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t};\n\t\t\t\t\t\tCollections.objectApply(listeners, function (listener, event) {\n\t\t\t\t\t\t\t_this.transport.bind(event, listener);\n\t\t\t\t\t\t});\n\t\t\t\t\t};\n\t\t\t\t\tConnection.prototype.handleCloseEvent = function (closeEvent) {\n\t\t\t\t\t\tvar action = Protocol.getCloseAction(closeEvent);\n\t\t\t\t\t\tvar error = Protocol.getCloseError(closeEvent);\n\t\t\t\t\t\tif (error) {\n\t\t\t\t\t\t\tthis.emit('error', error);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (action) {\n\t\t\t\t\t\t\tthis.emit(action);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\treturn Connection;\n\t\t\t\t}(dispatcher_1[\"default\"]);\n\t\t\t\texports.__esModule = true;\n\t\t\t\texports[\"default\"] = Connection;\n\n\t\t\t\t/***/\n\t\t\t},\n\t\t\t/* 47 */\n\t\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\t\"use strict\";\n\n\t\t\t\tvar runtime_1 = __webpack_require__(2);\n\t\t\t\tvar Authorizer = function () {\n\t\t\t\t\tfunction Authorizer(channel, options) {\n\t\t\t\t\t\tthis.channel = channel;\n\t\t\t\t\t\tvar authTransport = options.authTransport;\n\t\t\t\t\t\tif (typeof runtime_1[\"default\"].getAuthorizers()[authTransport] === \"undefined\") {\n\t\t\t\t\t\t\tthrow \"'\" + authTransport + \"' is not a recognized auth transport\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.type = authTransport;\n\t\t\t\t\t\tthis.options = options;\n\t\t\t\t\t\tthis.authOptions = (options || {}).auth || {};\n\t\t\t\t\t}\n\t\t\t\t\tAuthorizer.prototype.composeQuery = function (socketId) {\n\t\t\t\t\t\tvar query = 'socket_id=' + encodeURIComponent(socketId) + '&channel_name=' + encodeURIComponent(this.channel.name);\n\t\t\t\t\t\tfor (var i in this.authOptions.params) {\n\t\t\t\t\t\t\tquery += \"&\" + encodeURIComponent(i) + \"=\" + encodeURIComponent(this.authOptions.params[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn query;\n\t\t\t\t\t};\n\t\t\t\t\tAuthorizer.prototype.authorize = function (socketId, callback) {\n\t\t\t\t\t\tAuthorizer.authorizers = Authorizer.authorizers || runtime_1[\"default\"].getAuthorizers();\n\t\t\t\t\t\treturn Authorizer.authorizers[this.type].call(this, runtime_1[\"default\"], socketId, callback);\n\t\t\t\t\t};\n\t\t\t\t\treturn Authorizer;\n\t\t\t\t}();\n\t\t\t\texports.__esModule = true;\n\t\t\t\texports[\"default\"] = Authorizer;\n\n\t\t\t\t/***/\n\t\t\t},\n\t\t\t/* 48 */\n\t\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\t\"use strict\";\n\n\t\t\t\tvar runtime_1 = __webpack_require__(2);\n\t\t\t\tvar TimelineSender = function () {\n\t\t\t\t\tfunction TimelineSender(timeline, options) {\n\t\t\t\t\t\tthis.timeline = timeline;\n\t\t\t\t\t\tthis.options = options || {};\n\t\t\t\t\t}\n\t\t\t\t\tTimelineSender.prototype.send = function (encrypted, callback) {\n\t\t\t\t\t\tif (this.timeline.isEmpty()) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.timeline.send(runtime_1[\"default\"].TimelineTransport.getAgent(this, encrypted), callback);\n\t\t\t\t\t};\n\t\t\t\t\treturn TimelineSender;\n\t\t\t\t}();\n\t\t\t\texports.__esModule = true;\n\t\t\t\texports[\"default\"] = TimelineSender;\n\n\t\t\t\t/***/\n\t\t\t},\n\t\t\t/* 49 */\n\t\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\t\"use strict\";\n\n\t\t\t\tvar __extends = this && this.__extends || function (d, b) {\n\t\t\t\t\tfor (var p in b) {\n\t\t\t\t\t\tif (b.hasOwnProperty(p)) d[p] = b[p];\n\t\t\t\t\t}function __() {\n\t\t\t\t\t\tthis.constructor = d;\n\t\t\t\t\t}\n\t\t\t\t\td.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t\t\t\t};\n\t\t\t\tvar private_channel_1 = __webpack_require__(50);\n\t\t\t\tvar logger_1 = __webpack_require__(8);\n\t\t\t\tvar members_1 = __webpack_require__(52);\n\t\t\t\tvar PresenceChannel = function (_super) {\n\t\t\t\t\t__extends(PresenceChannel, _super);\n\t\t\t\t\tfunction PresenceChannel(name, pusher) {\n\t\t\t\t\t\t_super.call(this, name, pusher);\n\t\t\t\t\t\tthis.members = new members_1[\"default\"]();\n\t\t\t\t\t}\n\t\t\t\t\tPresenceChannel.prototype.authorize = function (socketId, callback) {\n\t\t\t\t\t\tvar _this = this;\n\t\t\t\t\t\t_super.prototype.authorize.call(this, socketId, function (error, authData) {\n\t\t\t\t\t\t\tif (!error) {\n\t\t\t\t\t\t\t\tif (authData.channel_data === undefined) {\n\t\t\t\t\t\t\t\t\tlogger_1[\"default\"].warn(\"Invalid auth response for channel '\" + _this.name + \"', expected 'channel_data' field\");\n\t\t\t\t\t\t\t\t\tcallback(\"Invalid auth response\");\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tvar channelData = JSON.parse(authData.channel_data);\n\t\t\t\t\t\t\t\t_this.members.setMyID(channelData.user_id);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcallback(error, authData);\n\t\t\t\t\t\t});\n\t\t\t\t\t};\n\t\t\t\t\tPresenceChannel.prototype.handleEvent = function (event, data) {\n\t\t\t\t\t\tswitch (event) {\n\t\t\t\t\t\t\tcase \"pusher_internal:subscription_succeeded\":\n\t\t\t\t\t\t\t\tthis.members.onSubscription(data);\n\t\t\t\t\t\t\t\tthis.subscribed = true;\n\t\t\t\t\t\t\t\tthis.emit(\"pusher:subscription_succeeded\", this.members);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \"pusher_internal:member_added\":\n\t\t\t\t\t\t\t\tvar addedMember = this.members.addMember(data);\n\t\t\t\t\t\t\t\tthis.emit('pusher:member_added', addedMember);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \"pusher_internal:member_removed\":\n\t\t\t\t\t\t\t\tvar removedMember = this.members.removeMember(data);\n\t\t\t\t\t\t\t\tif (removedMember) {\n\t\t\t\t\t\t\t\t\tthis.emit('pusher:member_removed', removedMember);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tprivate_channel_1[\"default\"].prototype.handleEvent.call(this, event, data);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tPresenceChannel.prototype.disconnect = function () {\n\t\t\t\t\t\tthis.members.reset();\n\t\t\t\t\t\t_super.prototype.disconnect.call(this);\n\t\t\t\t\t};\n\t\t\t\t\treturn PresenceChannel;\n\t\t\t\t}(private_channel_1[\"default\"]);\n\t\t\t\texports.__esModule = true;\n\t\t\t\texports[\"default\"] = PresenceChannel;\n\n\t\t\t\t/***/\n\t\t\t},\n\t\t\t/* 50 */\n\t\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\t\"use strict\";\n\n\t\t\t\tvar __extends = this && this.__extends || function (d, b) {\n\t\t\t\t\tfor (var p in b) {\n\t\t\t\t\t\tif (b.hasOwnProperty(p)) d[p] = b[p];\n\t\t\t\t\t}function __() {\n\t\t\t\t\t\tthis.constructor = d;\n\t\t\t\t\t}\n\t\t\t\t\td.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t\t\t\t};\n\t\t\t\tvar factory_1 = __webpack_require__(42);\n\t\t\t\tvar channel_1 = __webpack_require__(51);\n\t\t\t\tvar PrivateChannel = function (_super) {\n\t\t\t\t\t__extends(PrivateChannel, _super);\n\t\t\t\t\tfunction PrivateChannel() {\n\t\t\t\t\t\t_super.apply(this, arguments);\n\t\t\t\t\t}\n\t\t\t\t\tPrivateChannel.prototype.authorize = function (socketId, callback) {\n\t\t\t\t\t\tvar authorizer = factory_1[\"default\"].createAuthorizer(this, this.pusher.config);\n\t\t\t\t\t\treturn authorizer.authorize(socketId, callback);\n\t\t\t\t\t};\n\t\t\t\t\treturn PrivateChannel;\n\t\t\t\t}(channel_1[\"default\"]);\n\t\t\t\texports.__esModule = true;\n\t\t\t\texports[\"default\"] = PrivateChannel;\n\n\t\t\t\t/***/\n\t\t\t},\n\t\t\t/* 51 */\n\t\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\t\"use strict\";\n\n\t\t\t\tvar __extends = this && this.__extends || function (d, b) {\n\t\t\t\t\tfor (var p in b) {\n\t\t\t\t\t\tif (b.hasOwnProperty(p)) d[p] = b[p];\n\t\t\t\t\t}function __() {\n\t\t\t\t\t\tthis.constructor = d;\n\t\t\t\t\t}\n\t\t\t\t\td.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t\t\t\t};\n\t\t\t\tvar dispatcher_1 = __webpack_require__(23);\n\t\t\t\tvar Errors = __webpack_require__(30);\n\t\t\t\tvar logger_1 = __webpack_require__(8);\n\t\t\t\tvar Channel = function (_super) {\n\t\t\t\t\t__extends(Channel, _super);\n\t\t\t\t\tfunction Channel(name, pusher) {\n\t\t\t\t\t\t_super.call(this, function (event, data) {\n\t\t\t\t\t\t\tlogger_1[\"default\"].debug('No callbacks on ' + name + ' for ' + event);\n\t\t\t\t\t\t});\n\t\t\t\t\t\tthis.name = name;\n\t\t\t\t\t\tthis.pusher = pusher;\n\t\t\t\t\t\tthis.subscribed = false;\n\t\t\t\t\t}\n\t\t\t\t\tChannel.prototype.authorize = function (socketId, callback) {\n\t\t\t\t\t\treturn callback(false, {});\n\t\t\t\t\t};\n\t\t\t\t\tChannel.prototype.trigger = function (event, data) {\n\t\t\t\t\t\tif (event.indexOf(\"client-\") !== 0) {\n\t\t\t\t\t\t\tthrow new Errors.BadEventName(\"Event '\" + event + \"' does not start with 'client-'\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn this.pusher.send_event(event, data, this.name);\n\t\t\t\t\t};\n\t\t\t\t\tChannel.prototype.disconnect = function () {\n\t\t\t\t\t\tthis.subscribed = false;\n\t\t\t\t\t};\n\t\t\t\t\tChannel.prototype.handleEvent = function (event, data) {\n\t\t\t\t\t\tif (event.indexOf(\"pusher_internal:\") === 0) {\n\t\t\t\t\t\t\tif (event === \"pusher_internal:subscription_succeeded\") {\n\t\t\t\t\t\t\t\tthis.subscribed = true;\n\t\t\t\t\t\t\t\tthis.emit(\"pusher:subscription_succeeded\", data);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.emit(event, data);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tChannel.prototype.subscribe = function () {\n\t\t\t\t\t\tvar _this = this;\n\t\t\t\t\t\tthis.authorize(this.pusher.connection.socket_id, function (error, data) {\n\t\t\t\t\t\t\tif (error) {\n\t\t\t\t\t\t\t\t_this.handleEvent('pusher:subscription_error', data);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t_this.pusher.send_event('pusher:subscribe', {\n\t\t\t\t\t\t\t\t\tauth: data.auth,\n\t\t\t\t\t\t\t\t\tchannel_data: data.channel_data,\n\t\t\t\t\t\t\t\t\tchannel: _this.name\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t};\n\t\t\t\t\tChannel.prototype.unsubscribe = function () {\n\t\t\t\t\t\tthis.pusher.send_event('pusher:unsubscribe', {\n\t\t\t\t\t\t\tchannel: this.name\n\t\t\t\t\t\t});\n\t\t\t\t\t};\n\t\t\t\t\treturn Channel;\n\t\t\t\t}(dispatcher_1[\"default\"]);\n\t\t\t\texports.__esModule = true;\n\t\t\t\texports[\"default\"] = Channel;\n\n\t\t\t\t/***/\n\t\t\t},\n\t\t\t/* 52 */\n\t\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\t\"use strict\";\n\n\t\t\t\tvar Collections = __webpack_require__(9);\n\t\t\t\tvar Members = function () {\n\t\t\t\t\tfunction Members() {\n\t\t\t\t\t\tthis.reset();\n\t\t\t\t\t}\n\t\t\t\t\tMembers.prototype.get = function (id) {\n\t\t\t\t\t\tif (Object.prototype.hasOwnProperty.call(this.members, id)) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tid: id,\n\t\t\t\t\t\t\t\tinfo: this.members[id]\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tMembers.prototype.each = function (callback) {\n\t\t\t\t\t\tvar _this = this;\n\t\t\t\t\t\tCollections.objectApply(this.members, function (member, id) {\n\t\t\t\t\t\t\tcallback(_this.get(id));\n\t\t\t\t\t\t});\n\t\t\t\t\t};\n\t\t\t\t\tMembers.prototype.setMyID = function (id) {\n\t\t\t\t\t\tthis.myID = id;\n\t\t\t\t\t};\n\t\t\t\t\tMembers.prototype.onSubscription = function (subscriptionData) {\n\t\t\t\t\t\tthis.members = subscriptionData.presence.hash;\n\t\t\t\t\t\tthis.count = subscriptionData.presence.count;\n\t\t\t\t\t\tthis.me = this.get(this.myID);\n\t\t\t\t\t};\n\t\t\t\t\tMembers.prototype.addMember = function (memberData) {\n\t\t\t\t\t\tif (this.get(memberData.user_id) === null) {\n\t\t\t\t\t\t\tthis.count++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.members[memberData.user_id] = memberData.user_info;\n\t\t\t\t\t\treturn this.get(memberData.user_id);\n\t\t\t\t\t};\n\t\t\t\t\tMembers.prototype.removeMember = function (memberData) {\n\t\t\t\t\t\tvar member = this.get(memberData.user_id);\n\t\t\t\t\t\tif (member) {\n\t\t\t\t\t\t\tdelete this.members[memberData.user_id];\n\t\t\t\t\t\t\tthis.count--;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn member;\n\t\t\t\t\t};\n\t\t\t\t\tMembers.prototype.reset = function () {\n\t\t\t\t\t\tthis.members = {};\n\t\t\t\t\t\tthis.count = 0;\n\t\t\t\t\t\tthis.myID = null;\n\t\t\t\t\t\tthis.me = null;\n\t\t\t\t\t};\n\t\t\t\t\treturn Members;\n\t\t\t\t}();\n\t\t\t\texports.__esModule = true;\n\t\t\t\texports[\"default\"] = Members;\n\n\t\t\t\t/***/\n\t\t\t},\n\t\t\t/* 53 */\n\t\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\t\"use strict\";\n\n\t\t\t\tvar __extends = this && this.__extends || function (d, b) {\n\t\t\t\t\tfor (var p in b) {\n\t\t\t\t\t\tif (b.hasOwnProperty(p)) d[p] = b[p];\n\t\t\t\t\t}function __() {\n\t\t\t\t\t\tthis.constructor = d;\n\t\t\t\t\t}\n\t\t\t\t\td.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t\t\t\t};\n\t\t\t\tvar dispatcher_1 = __webpack_require__(23);\n\t\t\t\tvar timers_1 = __webpack_require__(12);\n\t\t\t\tvar logger_1 = __webpack_require__(8);\n\t\t\t\tvar Collections = __webpack_require__(9);\n\t\t\t\tvar runtime_1 = __webpack_require__(2);\n\t\t\t\tvar ConnectionManager = function (_super) {\n\t\t\t\t\t__extends(ConnectionManager, _super);\n\t\t\t\t\tfunction ConnectionManager(key, options) {\n\t\t\t\t\t\tvar _this = this;\n\t\t\t\t\t\t_super.call(this);\n\t\t\t\t\t\tthis.key = key;\n\t\t\t\t\t\tthis.options = options || {};\n\t\t\t\t\t\tthis.state = \"initialized\";\n\t\t\t\t\t\tthis.connection = null;\n\t\t\t\t\t\tthis.encrypted = !!options.encrypted;\n\t\t\t\t\t\tthis.timeline = this.options.timeline;\n\t\t\t\t\t\tthis.connectionCallbacks = this.buildConnectionCallbacks();\n\t\t\t\t\t\tthis.errorCallbacks = this.buildErrorCallbacks();\n\t\t\t\t\t\tthis.handshakeCallbacks = this.buildHandshakeCallbacks(this.errorCallbacks);\n\t\t\t\t\t\tvar Network = runtime_1[\"default\"].getNetwork();\n\t\t\t\t\t\tNetwork.bind(\"online\", function () {\n\t\t\t\t\t\t\t_this.timeline.info({ netinfo: \"online\" });\n\t\t\t\t\t\t\tif (_this.state === \"connecting\" || _this.state === \"unavailable\") {\n\t\t\t\t\t\t\t\t_this.retryIn(0);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tNetwork.bind(\"offline\", function () {\n\t\t\t\t\t\t\t_this.timeline.info({ netinfo: \"offline\" });\n\t\t\t\t\t\t\tif (_this.connection) {\n\t\t\t\t\t\t\t\t_this.sendActivityCheck();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tthis.updateStrategy();\n\t\t\t\t\t}\n\t\t\t\t\tConnectionManager.prototype.connect = function () {\n\t\t\t\t\t\tif (this.connection || this.runner) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!this.strategy.isSupported()) {\n\t\t\t\t\t\t\tthis.updateState(\"failed\");\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.updateState(\"connecting\");\n\t\t\t\t\t\tthis.startConnecting();\n\t\t\t\t\t\tthis.setUnavailableTimer();\n\t\t\t\t\t};\n\t\t\t\t\t;\n\t\t\t\t\tConnectionManager.prototype.send = function (data) {\n\t\t\t\t\t\tif (this.connection) {\n\t\t\t\t\t\t\treturn this.connection.send(data);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t;\n\t\t\t\t\tConnectionManager.prototype.send_event = function (name, data, channel) {\n\t\t\t\t\t\tif (this.connection) {\n\t\t\t\t\t\t\treturn this.connection.send_event(name, data, channel);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t;\n\t\t\t\t\tConnectionManager.prototype.disconnect = function () {\n\t\t\t\t\t\tthis.disconnectInternally();\n\t\t\t\t\t\tthis.updateState(\"disconnected\");\n\t\t\t\t\t};\n\t\t\t\t\t;\n\t\t\t\t\tConnectionManager.prototype.isEncrypted = function () {\n\t\t\t\t\t\treturn this.encrypted;\n\t\t\t\t\t};\n\t\t\t\t\t;\n\t\t\t\t\tConnectionManager.prototype.startConnecting = function () {\n\t\t\t\t\t\tvar _this = this;\n\t\t\t\t\t\tvar callback = function callback(error, handshake) {\n\t\t\t\t\t\t\tif (error) {\n\t\t\t\t\t\t\t\t_this.runner = _this.strategy.connect(0, callback);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif (handshake.action === \"error\") {\n\t\t\t\t\t\t\t\t\t_this.emit(\"error\", { type: \"HandshakeError\", error: handshake.error });\n\t\t\t\t\t\t\t\t\t_this.timeline.error({ handshakeError: handshake.error });\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t_this.abortConnecting();\n\t\t\t\t\t\t\t\t\t_this.handshakeCallbacks[handshake.action](handshake);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t\tthis.runner = this.strategy.connect(0, callback);\n\t\t\t\t\t};\n\t\t\t\t\t;\n\t\t\t\t\tConnectionManager.prototype.abortConnecting = function () {\n\t\t\t\t\t\tif (this.runner) {\n\t\t\t\t\t\t\tthis.runner.abort();\n\t\t\t\t\t\t\tthis.runner = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t;\n\t\t\t\t\tConnectionManager.prototype.disconnectInternally = function () {\n\t\t\t\t\t\tthis.abortConnecting();\n\t\t\t\t\t\tthis.clearRetryTimer();\n\t\t\t\t\t\tthis.clearUnavailableTimer();\n\t\t\t\t\t\tif (this.connection) {\n\t\t\t\t\t\t\tvar connection = this.abandonConnection();\n\t\t\t\t\t\t\tconnection.close();\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t;\n\t\t\t\t\tConnectionManager.prototype.updateStrategy = function () {\n\t\t\t\t\t\tthis.strategy = this.options.getStrategy({\n\t\t\t\t\t\t\tkey: this.key,\n\t\t\t\t\t\t\ttimeline: this.timeline,\n\t\t\t\t\t\t\tencrypted: this.encrypted\n\t\t\t\t\t\t});\n\t\t\t\t\t};\n\t\t\t\t\t;\n\t\t\t\t\tConnectionManager.prototype.retryIn = function (delay) {\n\t\t\t\t\t\tvar _this = this;\n\t\t\t\t\t\tthis.timeline.info({ action: \"retry\", delay: delay });\n\t\t\t\t\t\tif (delay > 0) {\n\t\t\t\t\t\t\tthis.emit(\"connecting_in\", Math.round(delay / 1000));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.retryTimer = new timers_1.OneOffTimer(delay || 0, function () {\n\t\t\t\t\t\t\t_this.disconnectInternally();\n\t\t\t\t\t\t\t_this.connect();\n\t\t\t\t\t\t});\n\t\t\t\t\t};\n\t\t\t\t\t;\n\t\t\t\t\tConnectionManager.prototype.clearRetryTimer = function () {\n\t\t\t\t\t\tif (this.retryTimer) {\n\t\t\t\t\t\t\tthis.retryTimer.ensureAborted();\n\t\t\t\t\t\t\tthis.retryTimer = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t;\n\t\t\t\t\tConnectionManager.prototype.setUnavailableTimer = function () {\n\t\t\t\t\t\tvar _this = this;\n\t\t\t\t\t\tthis.unavailableTimer = new timers_1.OneOffTimer(this.options.unavailableTimeout, function () {\n\t\t\t\t\t\t\t_this.updateState(\"unavailable\");\n\t\t\t\t\t\t});\n\t\t\t\t\t};\n\t\t\t\t\t;\n\t\t\t\t\tConnectionManager.prototype.clearUnavailableTimer = function () {\n\t\t\t\t\t\tif (this.unavailableTimer) {\n\t\t\t\t\t\t\tthis.unavailableTimer.ensureAborted();\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t;\n\t\t\t\t\tConnectionManager.prototype.sendActivityCheck = function () {\n\t\t\t\t\t\tvar _this = this;\n\t\t\t\t\t\tthis.stopActivityCheck();\n\t\t\t\t\t\tthis.connection.ping();\n\t\t\t\t\t\tthis.activityTimer = new timers_1.OneOffTimer(this.options.pongTimeout, function () {\n\t\t\t\t\t\t\t_this.timeline.error({ pong_timed_out: _this.options.pongTimeout });\n\t\t\t\t\t\t\t_this.retryIn(0);\n\t\t\t\t\t\t});\n\t\t\t\t\t};\n\t\t\t\t\t;\n\t\t\t\t\tConnectionManager.prototype.resetActivityCheck = function () {\n\t\t\t\t\t\tvar _this = this;\n\t\t\t\t\t\tthis.stopActivityCheck();\n\t\t\t\t\t\tif (!this.connection.handlesActivityChecks()) {\n\t\t\t\t\t\t\tthis.activityTimer = new timers_1.OneOffTimer(this.activityTimeout, function () {\n\t\t\t\t\t\t\t\t_this.sendActivityCheck();\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t;\n\t\t\t\t\tConnectionManager.prototype.stopActivityCheck = function () {\n\t\t\t\t\t\tif (this.activityTimer) {\n\t\t\t\t\t\t\tthis.activityTimer.ensureAborted();\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t;\n\t\t\t\t\tConnectionManager.prototype.buildConnectionCallbacks = function () {\n\t\t\t\t\t\tvar _this = this;\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tmessage: function message(_message) {\n\t\t\t\t\t\t\t\t_this.resetActivityCheck();\n\t\t\t\t\t\t\t\t_this.emit('message', _message);\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tping: function ping() {\n\t\t\t\t\t\t\t\t_this.send_event('pusher:pong', {});\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tactivity: function activity() {\n\t\t\t\t\t\t\t\t_this.resetActivityCheck();\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\terror: function error(_error2) {\n\t\t\t\t\t\t\t\t_this.emit(\"error\", { type: \"WebSocketError\", error: _error2 });\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tclosed: function closed() {\n\t\t\t\t\t\t\t\t_this.abandonConnection();\n\t\t\t\t\t\t\t\tif (_this.shouldRetry()) {\n\t\t\t\t\t\t\t\t\t_this.retryIn(1000);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t};\n\t\t\t\t\t;\n\t\t\t\t\tConnectionManager.prototype.buildHandshakeCallbacks = function (errorCallbacks) {\n\t\t\t\t\t\tvar _this = this;\n\t\t\t\t\t\treturn Collections.extend({}, errorCallbacks, {\n\t\t\t\t\t\t\tconnected: function connected(handshake) {\n\t\t\t\t\t\t\t\t_this.activityTimeout = Math.min(_this.options.activityTimeout, handshake.activityTimeout, handshake.connection.activityTimeout || Infinity);\n\t\t\t\t\t\t\t\t_this.clearUnavailableTimer();\n\t\t\t\t\t\t\t\t_this.setConnection(handshake.connection);\n\t\t\t\t\t\t\t\t_this.socket_id = _this.connection.id;\n\t\t\t\t\t\t\t\t_this.updateState(\"connected\", { socket_id: _this.socket_id });\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t};\n\t\t\t\t\t;\n\t\t\t\t\tConnectionManager.prototype.buildErrorCallbacks = function () {\n\t\t\t\t\t\tvar _this = this;\n\t\t\t\t\t\tvar withErrorEmitted = function withErrorEmitted(callback) {\n\t\t\t\t\t\t\treturn function (result) {\n\t\t\t\t\t\t\t\tif (result.error) {\n\t\t\t\t\t\t\t\t\t_this.emit(\"error\", { type: \"WebSocketError\", error: result.error });\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tcallback(result);\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tssl_only: withErrorEmitted(function () {\n\t\t\t\t\t\t\t\t_this.encrypted = true;\n\t\t\t\t\t\t\t\t_this.updateStrategy();\n\t\t\t\t\t\t\t\t_this.retryIn(0);\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\trefused: withErrorEmitted(function () {\n\t\t\t\t\t\t\t\t_this.disconnect();\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\tbackoff: withErrorEmitted(function () {\n\t\t\t\t\t\t\t\t_this.retryIn(1000);\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\tretry: withErrorEmitted(function () {\n\t\t\t\t\t\t\t\t_this.retryIn(0);\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t};\n\t\t\t\t\t};\n\t\t\t\t\t;\n\t\t\t\t\tConnectionManager.prototype.setConnection = function (connection) {\n\t\t\t\t\t\tthis.connection = connection;\n\t\t\t\t\t\tfor (var event in this.connectionCallbacks) {\n\t\t\t\t\t\t\tthis.connection.bind(event, this.connectionCallbacks[event]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.resetActivityCheck();\n\t\t\t\t\t};\n\t\t\t\t\t;\n\t\t\t\t\tConnectionManager.prototype.abandonConnection = function () {\n\t\t\t\t\t\tif (!this.connection) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.stopActivityCheck();\n\t\t\t\t\t\tfor (var event in this.connectionCallbacks) {\n\t\t\t\t\t\t\tthis.connection.unbind(event, this.connectionCallbacks[event]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar connection = this.connection;\n\t\t\t\t\t\tthis.connection = null;\n\t\t\t\t\t\treturn connection;\n\t\t\t\t\t};\n\t\t\t\t\tConnectionManager.prototype.updateState = function (newState, data) {\n\t\t\t\t\t\tvar previousState = this.state;\n\t\t\t\t\t\tthis.state = newState;\n\t\t\t\t\t\tif (previousState !== newState) {\n\t\t\t\t\t\t\tvar newStateDescription = newState;\n\t\t\t\t\t\t\tif (newStateDescription === \"connected\") {\n\t\t\t\t\t\t\t\tnewStateDescription += \" with new socket ID \" + data.socket_id;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tlogger_1[\"default\"].debug('State changed', previousState + ' -> ' + newStateDescription);\n\t\t\t\t\t\t\tthis.timeline.info({ state: newState, params: data });\n\t\t\t\t\t\t\tthis.emit('state_change', { previous: previousState, current: newState });\n\t\t\t\t\t\t\tthis.emit(newState, data);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tConnectionManager.prototype.shouldRetry = function () {\n\t\t\t\t\t\treturn this.state === \"connecting\" || this.state === \"connected\";\n\t\t\t\t\t};\n\t\t\t\t\treturn ConnectionManager;\n\t\t\t\t}(dispatcher_1[\"default\"]);\n\t\t\t\texports.__esModule = true;\n\t\t\t\texports[\"default\"] = ConnectionManager;\n\n\t\t\t\t/***/\n\t\t\t},\n\t\t\t/* 54 */\n\t\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\t\"use strict\";\n\n\t\t\t\tvar Collections = __webpack_require__(9);\n\t\t\t\tvar factory_1 = __webpack_require__(42);\n\t\t\t\tvar Channels = function () {\n\t\t\t\t\tfunction Channels() {\n\t\t\t\t\t\tthis.channels = {};\n\t\t\t\t\t}\n\t\t\t\t\tChannels.prototype.add = function (name, pusher) {\n\t\t\t\t\t\tif (!this.channels[name]) {\n\t\t\t\t\t\t\tthis.channels[name] = createChannel(name, pusher);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn this.channels[name];\n\t\t\t\t\t};\n\t\t\t\t\tChannels.prototype.all = function () {\n\t\t\t\t\t\treturn Collections.values(this.channels);\n\t\t\t\t\t};\n\t\t\t\t\tChannels.prototype.find = function (name) {\n\t\t\t\t\t\treturn this.channels[name];\n\t\t\t\t\t};\n\t\t\t\t\tChannels.prototype.remove = function (name) {\n\t\t\t\t\t\tvar channel = this.channels[name];\n\t\t\t\t\t\tdelete this.channels[name];\n\t\t\t\t\t\treturn channel;\n\t\t\t\t\t};\n\t\t\t\t\tChannels.prototype.disconnect = function () {\n\t\t\t\t\t\tCollections.objectApply(this.channels, function (channel) {\n\t\t\t\t\t\t\tchannel.disconnect();\n\t\t\t\t\t\t});\n\t\t\t\t\t};\n\t\t\t\t\treturn Channels;\n\t\t\t\t}();\n\t\t\t\texports.__esModule = true;\n\t\t\t\texports[\"default\"] = Channels;\n\t\t\t\tfunction createChannel(name, pusher) {\n\t\t\t\t\tif (name.indexOf('private-') === 0) {\n\t\t\t\t\t\treturn factory_1[\"default\"].createPrivateChannel(name, pusher);\n\t\t\t\t\t} else if (name.indexOf('presence-') === 0) {\n\t\t\t\t\t\treturn factory_1[\"default\"].createPresenceChannel(name, pusher);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn factory_1[\"default\"].createChannel(name, pusher);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t/***/\n\t\t\t},\n\t\t\t/* 55 */\n\t\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\t\"use strict\";\n\n\t\t\t\tvar factory_1 = __webpack_require__(42);\n\t\t\t\tvar util_1 = __webpack_require__(11);\n\t\t\t\tvar Errors = __webpack_require__(30);\n\t\t\t\tvar Collections = __webpack_require__(9);\n\t\t\t\tvar TransportStrategy = function () {\n\t\t\t\t\tfunction TransportStrategy(name, priority, transport, options) {\n\t\t\t\t\t\tthis.name = name;\n\t\t\t\t\t\tthis.priority = priority;\n\t\t\t\t\t\tthis.transport = transport;\n\t\t\t\t\t\tthis.options = options || {};\n\t\t\t\t\t}\n\t\t\t\t\tTransportStrategy.prototype.isSupported = function () {\n\t\t\t\t\t\treturn this.transport.isSupported({\n\t\t\t\t\t\t\tencrypted: this.options.encrypted\n\t\t\t\t\t\t});\n\t\t\t\t\t};\n\t\t\t\t\tTransportStrategy.prototype.connect = function (minPriority, callback) {\n\t\t\t\t\t\tvar _this = this;\n\t\t\t\t\t\tif (!this.isSupported()) {\n\t\t\t\t\t\t\treturn failAttempt(new Errors.UnsupportedStrategy(), callback);\n\t\t\t\t\t\t} else if (this.priority < minPriority) {\n\t\t\t\t\t\t\treturn failAttempt(new Errors.TransportPriorityTooLow(), callback);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar connected = false;\n\t\t\t\t\t\tvar transport = this.transport.createConnection(this.name, this.priority, this.options.key, this.options);\n\t\t\t\t\t\tvar handshake = null;\n\t\t\t\t\t\tvar onInitialized = function onInitialized() {\n\t\t\t\t\t\t\ttransport.unbind(\"initialized\", onInitialized);\n\t\t\t\t\t\t\ttransport.connect();\n\t\t\t\t\t\t};\n\t\t\t\t\t\tvar onOpen = function onOpen() {\n\t\t\t\t\t\t\thandshake = factory_1[\"default\"].createHandshake(transport, function (result) {\n\t\t\t\t\t\t\t\tconnected = true;\n\t\t\t\t\t\t\t\tunbindListeners();\n\t\t\t\t\t\t\t\tcallback(null, result);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t};\n\t\t\t\t\t\tvar onError = function onError(error) {\n\t\t\t\t\t\t\tunbindListeners();\n\t\t\t\t\t\t\tcallback(error);\n\t\t\t\t\t\t};\n\t\t\t\t\t\tvar onClosed = function onClosed() {\n\t\t\t\t\t\t\tunbindListeners();\n\t\t\t\t\t\t\tvar serializedTransport;\n\t\t\t\t\t\t\tserializedTransport = Collections.safeJSONStringify(transport);\n\t\t\t\t\t\t\tcallback(new Errors.TransportClosed(serializedTransport));\n\t\t\t\t\t\t};\n\t\t\t\t\t\tvar unbindListeners = function unbindListeners() {\n\t\t\t\t\t\t\ttransport.unbind(\"initialized\", onInitialized);\n\t\t\t\t\t\t\ttransport.unbind(\"open\", onOpen);\n\t\t\t\t\t\t\ttransport.unbind(\"error\", onError);\n\t\t\t\t\t\t\ttransport.unbind(\"closed\", onClosed);\n\t\t\t\t\t\t};\n\t\t\t\t\t\ttransport.bind(\"initialized\", onInitialized);\n\t\t\t\t\t\ttransport.bind(\"open\", onOpen);\n\t\t\t\t\t\ttransport.bind(\"error\", onError);\n\t\t\t\t\t\ttransport.bind(\"closed\", onClosed);\n\t\t\t\t\t\ttransport.initialize();\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tabort: function abort() {\n\t\t\t\t\t\t\t\tif (connected) {\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tunbindListeners();\n\t\t\t\t\t\t\t\tif (handshake) {\n\t\t\t\t\t\t\t\t\thandshake.close();\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ttransport.close();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tforceMinPriority: function forceMinPriority(p) {\n\t\t\t\t\t\t\t\tif (connected) {\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (_this.priority < p) {\n\t\t\t\t\t\t\t\t\tif (handshake) {\n\t\t\t\t\t\t\t\t\t\thandshake.close();\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ttransport.close();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t};\n\t\t\t\t\treturn TransportStrategy;\n\t\t\t\t}();\n\t\t\t\texports.__esModule = true;\n\t\t\t\texports[\"default\"] = TransportStrategy;\n\t\t\t\tfunction failAttempt(error, callback) {\n\t\t\t\t\tutil_1[\"default\"].defer(function () {\n\t\t\t\t\t\tcallback(error);\n\t\t\t\t\t});\n\t\t\t\t\treturn {\n\t\t\t\t\t\tabort: function abort() {},\n\t\t\t\t\t\tforceMinPriority: function forceMinPriority() {}\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t/***/\n\t\t\t},\n\t\t\t/* 56 */\n\t\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\t\"use strict\";\n\n\t\t\t\tvar Collections = __webpack_require__(9);\n\t\t\t\tvar util_1 = __webpack_require__(11);\n\t\t\t\tvar timers_1 = __webpack_require__(12);\n\t\t\t\tvar SequentialStrategy = function () {\n\t\t\t\t\tfunction SequentialStrategy(strategies, options) {\n\t\t\t\t\t\tthis.strategies = strategies;\n\t\t\t\t\t\tthis.loop = Boolean(options.loop);\n\t\t\t\t\t\tthis.failFast = Boolean(options.failFast);\n\t\t\t\t\t\tthis.timeout = options.timeout;\n\t\t\t\t\t\tthis.timeoutLimit = options.timeoutLimit;\n\t\t\t\t\t}\n\t\t\t\t\tSequentialStrategy.prototype.isSupported = function () {\n\t\t\t\t\t\treturn Collections.any(this.strategies, util_1[\"default\"].method(\"isSupported\"));\n\t\t\t\t\t};\n\t\t\t\t\tSequentialStrategy.prototype.connect = function (minPriority, callback) {\n\t\t\t\t\t\tvar _this = this;\n\t\t\t\t\t\tvar strategies = this.strategies;\n\t\t\t\t\t\tvar current = 0;\n\t\t\t\t\t\tvar timeout = this.timeout;\n\t\t\t\t\t\tvar runner = null;\n\t\t\t\t\t\tvar tryNextStrategy = function tryNextStrategy(error, handshake) {\n\t\t\t\t\t\t\tif (handshake) {\n\t\t\t\t\t\t\t\tcallback(null, handshake);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcurrent = current + 1;\n\t\t\t\t\t\t\t\tif (_this.loop) {\n\t\t\t\t\t\t\t\t\tcurrent = current % strategies.length;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (current < strategies.length) {\n\t\t\t\t\t\t\t\t\tif (timeout) {\n\t\t\t\t\t\t\t\t\t\ttimeout = timeout * 2;\n\t\t\t\t\t\t\t\t\t\tif (_this.timeoutLimit) {\n\t\t\t\t\t\t\t\t\t\t\ttimeout = Math.min(timeout, _this.timeoutLimit);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\trunner = _this.tryStrategy(strategies[current], minPriority, { timeout: timeout, failFast: _this.failFast }, tryNextStrategy);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tcallback(true);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t\trunner = this.tryStrategy(strategies[current], minPriority, { timeout: timeout, failFast: this.failFast }, tryNextStrategy);\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tabort: function abort() {\n\t\t\t\t\t\t\t\trunner.abort();\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tforceMinPriority: function forceMinPriority(p) {\n\t\t\t\t\t\t\t\tminPriority = p;\n\t\t\t\t\t\t\t\tif (runner) {\n\t\t\t\t\t\t\t\t\trunner.forceMinPriority(p);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t};\n\t\t\t\t\tSequentialStrategy.prototype.tryStrategy = function (strategy, minPriority, options, callback) {\n\t\t\t\t\t\tvar timer = null;\n\t\t\t\t\t\tvar runner = null;\n\t\t\t\t\t\tif (options.timeout > 0) {\n\t\t\t\t\t\t\ttimer = new timers_1.OneOffTimer(options.timeout, function () {\n\t\t\t\t\t\t\t\trunner.abort();\n\t\t\t\t\t\t\t\tcallback(true);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\trunner = strategy.connect(minPriority, function (error, handshake) {\n\t\t\t\t\t\t\tif (error && timer && timer.isRunning() && !options.failFast) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (timer) {\n\t\t\t\t\t\t\t\ttimer.ensureAborted();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcallback(error, handshake);\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tabort: function abort() {\n\t\t\t\t\t\t\t\tif (timer) {\n\t\t\t\t\t\t\t\t\ttimer.ensureAborted();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\trunner.abort();\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tforceMinPriority: function forceMinPriority(p) {\n\t\t\t\t\t\t\t\trunner.forceMinPriority(p);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t};\n\t\t\t\t\treturn SequentialStrategy;\n\t\t\t\t}();\n\t\t\t\texports.__esModule = true;\n\t\t\t\texports[\"default\"] = SequentialStrategy;\n\n\t\t\t\t/***/\n\t\t\t},\n\t\t\t/* 57 */\n\t\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\t\"use strict\";\n\n\t\t\t\tvar Collections = __webpack_require__(9);\n\t\t\t\tvar util_1 = __webpack_require__(11);\n\t\t\t\tvar BestConnectedEverStrategy = function () {\n\t\t\t\t\tfunction BestConnectedEverStrategy(strategies) {\n\t\t\t\t\t\tthis.strategies = strategies;\n\t\t\t\t\t}\n\t\t\t\t\tBestConnectedEverStrategy.prototype.isSupported = function () {\n\t\t\t\t\t\treturn Collections.any(this.strategies, util_1[\"default\"].method(\"isSupported\"));\n\t\t\t\t\t};\n\t\t\t\t\tBestConnectedEverStrategy.prototype.connect = function (minPriority, callback) {\n\t\t\t\t\t\treturn connect(this.strategies, minPriority, function (i, runners) {\n\t\t\t\t\t\t\treturn function (error, handshake) {\n\t\t\t\t\t\t\t\trunners[i].error = error;\n\t\t\t\t\t\t\t\tif (error) {\n\t\t\t\t\t\t\t\t\tif (allRunnersFailed(runners)) {\n\t\t\t\t\t\t\t\t\t\tcallback(true);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tCollections.apply(runners, function (runner) {\n\t\t\t\t\t\t\t\t\trunner.forceMinPriority(handshake.transport.priority);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tcallback(null, handshake);\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t});\n\t\t\t\t\t};\n\t\t\t\t\treturn BestConnectedEverStrategy;\n\t\t\t\t}();\n\t\t\t\texports.__esModule = true;\n\t\t\t\texports[\"default\"] = BestConnectedEverStrategy;\n\t\t\t\tfunction connect(strategies, minPriority, callbackBuilder) {\n\t\t\t\t\tvar runners = Collections.map(strategies, function (strategy, i, _, rs) {\n\t\t\t\t\t\treturn strategy.connect(minPriority, callbackBuilder(i, rs));\n\t\t\t\t\t});\n\t\t\t\t\treturn {\n\t\t\t\t\t\tabort: function abort() {\n\t\t\t\t\t\t\tCollections.apply(runners, abortRunner);\n\t\t\t\t\t\t},\n\t\t\t\t\t\tforceMinPriority: function forceMinPriority(p) {\n\t\t\t\t\t\t\tCollections.apply(runners, function (runner) {\n\t\t\t\t\t\t\t\trunner.forceMinPriority(p);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tfunction allRunnersFailed(runners) {\n\t\t\t\t\treturn Collections.all(runners, function (runner) {\n\t\t\t\t\t\treturn Boolean(runner.error);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tfunction abortRunner(runner) {\n\t\t\t\t\tif (!runner.error && !runner.aborted) {\n\t\t\t\t\t\trunner.abort();\n\t\t\t\t\t\trunner.aborted = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t/***/\n\t\t\t},\n\t\t\t/* 58 */\n\t\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\t\"use strict\";\n\n\t\t\t\tvar util_1 = __webpack_require__(11);\n\t\t\t\tvar runtime_1 = __webpack_require__(2);\n\t\t\t\tvar sequential_strategy_1 = __webpack_require__(56);\n\t\t\t\tvar Collections = __webpack_require__(9);\n\t\t\t\tvar CachedStrategy = function () {\n\t\t\t\t\tfunction CachedStrategy(strategy, transports, options) {\n\t\t\t\t\t\tthis.strategy = strategy;\n\t\t\t\t\t\tthis.transports = transports;\n\t\t\t\t\t\tthis.ttl = options.ttl || 1800 * 1000;\n\t\t\t\t\t\tthis.encrypted = options.encrypted;\n\t\t\t\t\t\tthis.timeline = options.timeline;\n\t\t\t\t\t}\n\t\t\t\t\tCachedStrategy.prototype.isSupported = function () {\n\t\t\t\t\t\treturn this.strategy.isSupported();\n\t\t\t\t\t};\n\t\t\t\t\tCachedStrategy.prototype.connect = function (minPriority, callback) {\n\t\t\t\t\t\tvar encrypted = this.encrypted;\n\t\t\t\t\t\tvar info = fetchTransportCache(encrypted);\n\t\t\t\t\t\tvar strategies = [this.strategy];\n\t\t\t\t\t\tif (info && info.timestamp + this.ttl >= util_1[\"default\"].now()) {\n\t\t\t\t\t\t\tvar transport = this.transports[info.transport];\n\t\t\t\t\t\t\tif (transport) {\n\t\t\t\t\t\t\t\tthis.timeline.info({\n\t\t\t\t\t\t\t\t\tcached: true,\n\t\t\t\t\t\t\t\t\ttransport: info.transport,\n\t\t\t\t\t\t\t\t\tlatency: info.latency\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tstrategies.push(new sequential_strategy_1[\"default\"]([transport], {\n\t\t\t\t\t\t\t\t\ttimeout: info.latency * 2 + 1000,\n\t\t\t\t\t\t\t\t\tfailFast: true\n\t\t\t\t\t\t\t\t}));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar startTimestamp = util_1[\"default\"].now();\n\t\t\t\t\t\tvar runner = strategies.pop().connect(minPriority, function cb(error, handshake) {\n\t\t\t\t\t\t\tif (error) {\n\t\t\t\t\t\t\t\tflushTransportCache(encrypted);\n\t\t\t\t\t\t\t\tif (strategies.length > 0) {\n\t\t\t\t\t\t\t\t\tstartTimestamp = util_1[\"default\"].now();\n\t\t\t\t\t\t\t\t\trunner = strategies.pop().connect(minPriority, cb);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tcallback(error);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tstoreTransportCache(encrypted, handshake.transport.name, util_1[\"default\"].now() - startTimestamp);\n\t\t\t\t\t\t\t\tcallback(null, handshake);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tabort: function abort() {\n\t\t\t\t\t\t\t\trunner.abort();\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tforceMinPriority: function forceMinPriority(p) {\n\t\t\t\t\t\t\t\tminPriority = p;\n\t\t\t\t\t\t\t\tif (runner) {\n\t\t\t\t\t\t\t\t\trunner.forceMinPriority(p);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t};\n\t\t\t\t\treturn CachedStrategy;\n\t\t\t\t}();\n\t\t\t\texports.__esModule = true;\n\t\t\t\texports[\"default\"] = CachedStrategy;\n\t\t\t\tfunction getTransportCacheKey(encrypted) {\n\t\t\t\t\treturn \"pusherTransport\" + (encrypted ? \"Encrypted\" : \"Unencrypted\");\n\t\t\t\t}\n\t\t\t\tfunction fetchTransportCache(encrypted) {\n\t\t\t\t\tvar storage = runtime_1[\"default\"].getLocalStorage();\n\t\t\t\t\tif (storage) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tvar serializedCache = storage[getTransportCacheKey(encrypted)];\n\t\t\t\t\t\t\tif (serializedCache) {\n\t\t\t\t\t\t\t\treturn JSON.parse(serializedCache);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tflushTransportCache(encrypted);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tfunction storeTransportCache(encrypted, transport, latency) {\n\t\t\t\t\tvar storage = runtime_1[\"default\"].getLocalStorage();\n\t\t\t\t\tif (storage) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tstorage[getTransportCacheKey(encrypted)] = Collections.safeJSONStringify({\n\t\t\t\t\t\t\t\ttimestamp: util_1[\"default\"].now(),\n\t\t\t\t\t\t\t\ttransport: transport,\n\t\t\t\t\t\t\t\tlatency: latency\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} catch (e) {}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfunction flushTransportCache(encrypted) {\n\t\t\t\t\tvar storage = runtime_1[\"default\"].getLocalStorage();\n\t\t\t\t\tif (storage) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tdelete storage[getTransportCacheKey(encrypted)];\n\t\t\t\t\t\t} catch (e) {}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t/***/\n\t\t\t},\n\t\t\t/* 59 */\n\t\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\t\"use strict\";\n\n\t\t\t\tvar timers_1 = __webpack_require__(12);\n\t\t\t\tvar DelayedStrategy = function () {\n\t\t\t\t\tfunction DelayedStrategy(strategy, _a) {\n\t\t\t\t\t\tvar number = _a.delay;\n\t\t\t\t\t\tthis.strategy = strategy;\n\t\t\t\t\t\tthis.options = { delay: number };\n\t\t\t\t\t}\n\t\t\t\t\tDelayedStrategy.prototype.isSupported = function () {\n\t\t\t\t\t\treturn this.strategy.isSupported();\n\t\t\t\t\t};\n\t\t\t\t\tDelayedStrategy.prototype.connect = function (minPriority, callback) {\n\t\t\t\t\t\tvar strategy = this.strategy;\n\t\t\t\t\t\tvar runner;\n\t\t\t\t\t\tvar timer = new timers_1.OneOffTimer(this.options.delay, function () {\n\t\t\t\t\t\t\trunner = strategy.connect(minPriority, callback);\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tabort: function abort() {\n\t\t\t\t\t\t\t\ttimer.ensureAborted();\n\t\t\t\t\t\t\t\tif (runner) {\n\t\t\t\t\t\t\t\t\trunner.abort();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tforceMinPriority: function forceMinPriority(p) {\n\t\t\t\t\t\t\t\tminPriority = p;\n\t\t\t\t\t\t\t\tif (runner) {\n\t\t\t\t\t\t\t\t\trunner.forceMinPriority(p);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t};\n\t\t\t\t\treturn DelayedStrategy;\n\t\t\t\t}();\n\t\t\t\texports.__esModule = true;\n\t\t\t\texports[\"default\"] = DelayedStrategy;\n\n\t\t\t\t/***/\n\t\t\t},\n\t\t\t/* 60 */\n\t\t\t/***/function (module, exports) {\n\n\t\t\t\t\"use strict\";\n\n\t\t\t\tvar IfStrategy = function () {\n\t\t\t\t\tfunction IfStrategy(test, trueBranch, falseBranch) {\n\t\t\t\t\t\tthis.test = test;\n\t\t\t\t\t\tthis.trueBranch = trueBranch;\n\t\t\t\t\t\tthis.falseBranch = falseBranch;\n\t\t\t\t\t}\n\t\t\t\t\tIfStrategy.prototype.isSupported = function () {\n\t\t\t\t\t\tvar branch = this.test() ? this.trueBranch : this.falseBranch;\n\t\t\t\t\t\treturn branch.isSupported();\n\t\t\t\t\t};\n\t\t\t\t\tIfStrategy.prototype.connect = function (minPriority, callback) {\n\t\t\t\t\t\tvar branch = this.test() ? this.trueBranch : this.falseBranch;\n\t\t\t\t\t\treturn branch.connect(minPriority, callback);\n\t\t\t\t\t};\n\t\t\t\t\treturn IfStrategy;\n\t\t\t\t}();\n\t\t\t\texports.__esModule = true;\n\t\t\t\texports[\"default\"] = IfStrategy;\n\n\t\t\t\t/***/\n\t\t\t},\n\t\t\t/* 61 */\n\t\t\t/***/function (module, exports) {\n\n\t\t\t\t\"use strict\";\n\n\t\t\t\tvar FirstConnectedStrategy = function () {\n\t\t\t\t\tfunction FirstConnectedStrategy(strategy) {\n\t\t\t\t\t\tthis.strategy = strategy;\n\t\t\t\t\t}\n\t\t\t\t\tFirstConnectedStrategy.prototype.isSupported = function () {\n\t\t\t\t\t\treturn this.strategy.isSupported();\n\t\t\t\t\t};\n\t\t\t\t\tFirstConnectedStrategy.prototype.connect = function (minPriority, callback) {\n\t\t\t\t\t\tvar runner = this.strategy.connect(minPriority, function (error, handshake) {\n\t\t\t\t\t\t\tif (handshake) {\n\t\t\t\t\t\t\t\trunner.abort();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcallback(error, handshake);\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn runner;\n\t\t\t\t\t};\n\t\t\t\t\treturn FirstConnectedStrategy;\n\t\t\t\t}();\n\t\t\t\texports.__esModule = true;\n\t\t\t\texports[\"default\"] = FirstConnectedStrategy;\n\n\t\t\t\t/***/\n\t\t\t},\n\t\t\t/* 62 */\n\t\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\t\"use strict\";\n\n\t\t\t\tvar defaults_1 = __webpack_require__(5);\n\t\t\t\texports.getGlobalConfig = function () {\n\t\t\t\t\treturn {\n\t\t\t\t\t\twsHost: defaults_1[\"default\"].host,\n\t\t\t\t\t\twsPort: defaults_1[\"default\"].ws_port,\n\t\t\t\t\t\twssPort: defaults_1[\"default\"].wss_port,\n\t\t\t\t\t\thttpHost: defaults_1[\"default\"].sockjs_host,\n\t\t\t\t\t\thttpPort: defaults_1[\"default\"].sockjs_http_port,\n\t\t\t\t\t\thttpsPort: defaults_1[\"default\"].sockjs_https_port,\n\t\t\t\t\t\thttpPath: defaults_1[\"default\"].sockjs_path,\n\t\t\t\t\t\tstatsHost: defaults_1[\"default\"].stats_host,\n\t\t\t\t\t\tauthEndpoint: defaults_1[\"default\"].channel_auth_endpoint,\n\t\t\t\t\t\tauthTransport: defaults_1[\"default\"].channel_auth_transport,\n\t\t\t\t\t\tactivity_timeout: defaults_1[\"default\"].activity_timeout,\n\t\t\t\t\t\tpong_timeout: defaults_1[\"default\"].pong_timeout,\n\t\t\t\t\t\tunavailable_timeout: defaults_1[\"default\"].unavailable_timeout\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t\texports.getClusterConfig = function (clusterName) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\twsHost: \"ws-\" + clusterName + \".pusher.com\",\n\t\t\t\t\t\thttpHost: \"sockjs-\" + clusterName + \".pusher.com\"\n\t\t\t\t\t};\n\t\t\t\t};\n\n\t\t\t\t/***/\n\t\t\t}\n\t\t\t/******/])\n\t\t);\n\t});\n\t;\n}).call(global, module, undefined, undefined);\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","deps":{"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\node_modules\\jquery\\dist\\jquery":"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\node_modules\\jquery\\dist\\jquery.js"}},"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\resources\\scripts\\models.js":{"file":"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\resources\\scripts\\models.js","source":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.Message = exports.Channel = exports.User = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**\r\nreated by Chad on 2016-09-12.\r\nn\n// jquery plugin\n\n\nvar _jquery = require('jquery');\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nrequire('jquery.nicescroll');\n\nvar _pusherJs = require('pusher-js');\n\nvar _pusherJs2 = _interopRequireDefault(_pusherJs);\n\nvar _knockout = require('knockout');\n\nvar _knockout2 = _interopRequireDefault(_knockout);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n//Pusher.logToConsole = true;\n\nvar User = exports.User = function () {\n    function User(parameters) {\n        _classCallCheck(this, User);\n\n        this.id = parameters.id;\n        this.name = parameters.name;\n        this.created_at = parameters.created_at;\n        this.api_token = parameters.api_token;\n\n        if (this.api_token) {\n            this.pusher = new _pusherJs2.default('944b0bdac25cd6df507f', {\n                authEndpoint: '/api/v1/pusher/auth',\n                auth: {\n                    headers: {\n                        'Authorization': 'API-TOKEN ' + this.api_token\n                    }\n                },\n                encrypted: true,\n                disableStats: true\n            });\n        }\n    }\n\n    _createClass(User, [{\n        key: 'request',\n        value: function request(method, endpoint, data) {\n            var _this = this;\n\n            if (!this.api_token) {\n                throw \"User does not have an api token\";\n            }\n\n            var url = '/api/v1/' + endpoint;\n\n            return new Promise(function (resolve, reject) {\n                _jquery2.default.ajax({\n                    type: method,\n                    url: url,\n                    headers: {\n                        'Authorization': 'API-TOKEN ' + _this.api_token\n                    },\n                    data: data,\n                    dataType: 'json'\n                }).done(function (response) {\n                    resolve(response);\n                }).fail(function (response) {\n                    reject(response);\n                }).always(function (response) {\n                    console.log('API Response', url, data, response);\n                });\n            });\n        }\n    }, {\n        key: 'getPusher',\n        value: function getPusher() {\n            return this.pusher;\n        }\n    }, {\n        key: 'publicify',\n        value: function publicify() {\n            return {\n                id: this.id,\n                name: this.name,\n                created_at: this.created_at\n            };\n        }\n    }]);\n\n    return User;\n}();\n\nvar Channel = exports.Channel = function () {\n    function Channel(user, parameters) {\n        _classCallCheck(this, Channel);\n\n        this.user = user;\n        this.me = user;\n\n        this.id = parameters.id;\n        this.name = parameters.name;\n        this.display_name = parameters.display_name;\n        this.created_at = parameters.created_at;\n\n        this.isJoined = _knockout2.default.observable(false);\n    }\n\n    _createClass(Channel, [{\n        key: 'join',\n        value: function join() {\n            var pusher = this.user.getPusher();\n            this.pChannel = pusher.subscribe(this.name);\n\n            this.isJoined(true);\n\n            return this;\n        }\n    }, {\n        key: 'leave',\n        value: function leave() {\n            var pusher = this.user.getPusher();\n            pusher.unsubscribe(this.name);\n\n            this.isJoined(false);\n\n            return this;\n        }\n    }, {\n        key: 'getUrl',\n        value: function getUrl() {\n            return 'channel/' + this.id;\n        }\n    }, {\n        key: 'getHistory',\n        value: function getHistory() {\n            var _this2 = this;\n\n            return new Promise(function (resolve, reject) {\n                _this2.user.request('GET', _this2.getUrl() + '/history').then(function (response) {\n                    //console.log('Messages', response.data.messages);\n\n                    var messages = response.data.messages.map(function (data) {\n                        return new Message(data);\n                    });\n\n                    resolve(messages);\n                }, function (response) {\n                    reject(response);\n                });\n            });\n        }\n    }, {\n        key: 'sendMessage',\n        value: function sendMessage(text) {\n            var _this3 = this;\n\n            return new Promise(function (resolve, reject) {\n                _this3.user.request('POST', _this3.getUrl() + '/send-message', {\n                    text: text\n                }).then(function (response) {\n                    resolve(response);\n                }, function (response) {\n                    reject(response);\n                });\n            });\n        }\n    }, {\n        key: 'bind',\n        value: function bind(event, callback) {\n            this.pChannel.bind.call(this.pChannel, event, callback);\n        }\n    }, {\n        key: 'trigger',\n        value: function trigger(event, data) {\n            this.pChannel.trigger.call(this.pChannel, event, data);\n        }\n    }, {\n        key: 'onUserAdded',\n        value: function onUserAdded(callback) {\n            var _this4 = this;\n\n            this.pChannel.bind('pusher:subscription_succeeded', function (status) {\n                _this4.pChannel.members.each(function (data) {\n                    callback(new User(data.info));\n                });\n            });\n            this.pChannel.bind('pusher:member_added', function (data) {\n                callback(new User(data.info));\n            });\n        }\n    }, {\n        key: 'onUserRemoved',\n        value: function onUserRemoved(callback) {\n            this.pChannel.bind('pusher:member_removed', function (data) {\n                callback(new User(data.info));\n            });\n        }\n    }, {\n        key: 'onNewMessage',\n        value: function onNewMessage(callback) {\n            this.pChannel.bind('new-message', function (data) {\n                var user = new User(data.message.user);\n                var message = new Message(data.message);\n\n                callback(user, message);\n            });\n        }\n    }], [{\n        key: 'getAll',\n        value: function getAll(currentUser) {\n            return new Promise(function (resolve, reject) {\n                currentUser.request('GET', 'channels').then(function (response) {\n                    var channels = response.data.channels.map(function (data) {\n                        return new Channel(currentUser, data);\n                    });\n\n                    resolve(channels);\n                }, function (response) {\n                    console.log('Get All Error', response);\n                    reject(response);\n                });\n            });\n        }\n    }]);\n\n    return Channel;\n}();\n\nvar Message = exports.Message = function () {\n    function Message(parameters) {\n        _classCallCheck(this, Message);\n\n        this.id = parameters.id;\n        this.user_id = parameters.user_id;\n        this.text = parameters.text;\n        this.created_at = parameters.created_at;\n\n        this.user = new User(parameters.user);\n    }\n\n    _createClass(Message, [{\n        key: 'isConfirmed',\n        value: function isConfirmed() {\n            return this.id > -1;\n        }\n    }], [{\n        key: 'newLocalMessage',\n        value: function newLocalMessage(user, text) {\n            return new Message({\n                id: -1,\n                user_id: user.id,\n                text: text,\n                created_at: Date.now(),\n                user: user\n            });\n        }\n    }]);\n\n    return Message;\n}();\n//# sourceMappingURL=data:application/json;base64,","deps":{"jquery.nicescroll":"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\node_modules\\jquery.nicescroll\\jquery.nicescroll.js","jquery":"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\node_modules\\jquery\\dist\\jquery.js","knockout":"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\node_modules\\knockout\\build\\output\\knockout-latest.debug.js","pusher-js":"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\node_modules\\pusher-js\\dist\\web\\pusher.js"}},"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\resources\\scripts\\util.js":{"file":"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\resources\\scripts\\util.js","source":"'use strict';\n\n//export function applyUserTypingHandler(observableInput, observableUsersTypingCollection, channel, user) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.applyUserTypingHandler = applyUserTypingHandler;\nfunction applyUserTypingHandler(view) {\n    function trigger(event) {\n        view.channel().trigger(event, view.me().publicify());\n    }\n\n    function add(data) {\n        var found = false;\n        view.typing().forEach(function (item) {\n            if (!found) {\n                found = item.id === data.id;\n            }\n        });\n\n        if (!found) {\n            view.typing.push(data);\n        }\n    }\n\n    function remove(data) {\n        view.typing.remove(function (item) {\n            return item.id === data.id;\n        });\n    }\n\n    var t = void 0;\n    view.newMessage.subscribe(function (value) {\n        clearTimeout(t);\n        t = setTimeout(function () {\n            if (value.length > 0) {\n                trigger('client-started-typing');\n            } else {\n                trigger('client-stopped-typing');\n            }\n        }, 500);\n    });\n\n    view.channel.subscribe(function (channel) {\n        channel.bind('client-started-typing', function (data) {\n            console.log('Started Typing', data);\n            add(data);\n        });\n        channel.bind('client-stopped-typing', function (data) {\n            console.log('Stopped Typing', data);\n            remove(data);\n        });\n\n        // remove user from our list of users typing when they leave the chat\n        channel.bind('pusher:member_removed', function (data) {\n            remove(data.info);\n        });\n    });\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWwuanMiXSwibmFtZXMiOlsiYXBwbHlVc2VyVHlwaW5nSGFuZGxlciIsInZpZXciLCJ0cmlnZ2VyIiwiZXZlbnQiLCJjaGFubmVsIiwibWUiLCJwdWJsaWNpZnkiLCJhZGQiLCJkYXRhIiwiZm91bmQiLCJ0eXBpbmciLCJmb3JFYWNoIiwiaXRlbSIsImlkIiwicHVzaCIsInJlbW92ZSIsInQiLCJuZXdNZXNzYWdlIiwic3Vic2NyaWJlIiwidmFsdWUiLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwibGVuZ3RoIiwiYmluZCIsImNvbnNvbGUiLCJsb2ciLCJpbmZvIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTs7Ozs7UUFDZ0JBLHNCLEdBQUFBLHNCO0FBQVQsU0FBU0Esc0JBQVQsQ0FBZ0NDLElBQWhDLEVBQXNDO0FBQ3pDLGFBQVNDLE9BQVQsQ0FBaUJDLEtBQWpCLEVBQXdCO0FBQ3BCRixhQUFLRyxPQUFMLEdBQWVGLE9BQWYsQ0FBdUJDLEtBQXZCLEVBQThCRixLQUFLSSxFQUFMLEdBQVVDLFNBQVYsRUFBOUI7QUFDSDs7QUFFRCxhQUFTQyxHQUFULENBQWFDLElBQWIsRUFBbUI7QUFDZixZQUFJQyxRQUFRLEtBQVo7QUFDQVIsYUFBS1MsTUFBTCxHQUFjQyxPQUFkLENBQXNCLFVBQUNDLElBQUQsRUFBVTtBQUM1QixnQkFBSSxDQUFDSCxLQUFMLEVBQVk7QUFDUkEsd0JBQVFHLEtBQUtDLEVBQUwsS0FBWUwsS0FBS0ssRUFBekI7QUFDSDtBQUNKLFNBSkQ7O0FBTUEsWUFBSSxDQUFDSixLQUFMLEVBQVk7QUFDUlIsaUJBQUtTLE1BQUwsQ0FBWUksSUFBWixDQUFpQk4sSUFBakI7QUFDSDtBQUNKOztBQUVELGFBQVNPLE1BQVQsQ0FBZ0JQLElBQWhCLEVBQXNCO0FBQ2xCUCxhQUFLUyxNQUFMLENBQVlLLE1BQVosQ0FBbUIsVUFBQ0gsSUFBRCxFQUFVO0FBQ3pCLG1CQUFPQSxLQUFLQyxFQUFMLEtBQVlMLEtBQUtLLEVBQXhCO0FBQ0gsU0FGRDtBQUdIOztBQUVELFFBQUlHLFVBQUo7QUFDQWYsU0FBS2dCLFVBQUwsQ0FBZ0JDLFNBQWhCLENBQTBCLFVBQUNDLEtBQUQsRUFBVztBQUNqQ0MscUJBQWFKLENBQWI7QUFDQUEsWUFBSUssV0FBVyxZQUFNO0FBQ2pCLGdCQUFJRixNQUFNRyxNQUFOLEdBQWUsQ0FBbkIsRUFBc0I7QUFDbEJwQix3QkFBUSx1QkFBUjtBQUNILGFBRkQsTUFFTztBQUNIQSx3QkFBUSx1QkFBUjtBQUNIO0FBQ0osU0FORyxFQU1ELEdBTkMsQ0FBSjtBQU9ILEtBVEQ7O0FBV0FELFNBQUtHLE9BQUwsQ0FBYWMsU0FBYixDQUF1QixVQUFDZCxPQUFELEVBQWE7QUFDaENBLGdCQUFRbUIsSUFBUixDQUFhLHVCQUFiLEVBQXNDLFVBQUNmLElBQUQsRUFBVTtBQUM1Q2dCLG9CQUFRQyxHQUFSLENBQVksZ0JBQVosRUFBOEJqQixJQUE5QjtBQUNBRCxnQkFBSUMsSUFBSjtBQUNILFNBSEQ7QUFJQUosZ0JBQVFtQixJQUFSLENBQWEsdUJBQWIsRUFBc0MsVUFBQ2YsSUFBRCxFQUFVO0FBQzVDZ0Isb0JBQVFDLEdBQVIsQ0FBWSxnQkFBWixFQUE4QmpCLElBQTlCO0FBQ0FPLG1CQUFPUCxJQUFQO0FBQ0gsU0FIRDs7QUFLQTtBQUNBSixnQkFBUW1CLElBQVIsQ0FBYSx1QkFBYixFQUFzQyxVQUFDZixJQUFELEVBQVU7QUFDNUNPLG1CQUFPUCxLQUFLa0IsSUFBWjtBQUNILFNBRkQ7QUFHSCxLQWREO0FBZUgiLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcclxuXHJcbi8vZXhwb3J0IGZ1bmN0aW9uIGFwcGx5VXNlclR5cGluZ0hhbmRsZXIob2JzZXJ2YWJsZUlucHV0LCBvYnNlcnZhYmxlVXNlcnNUeXBpbmdDb2xsZWN0aW9uLCBjaGFubmVsLCB1c2VyKSB7XHJcbmV4cG9ydCBmdW5jdGlvbiBhcHBseVVzZXJUeXBpbmdIYW5kbGVyKHZpZXcpIHtcclxuICAgIGZ1bmN0aW9uIHRyaWdnZXIoZXZlbnQpIHtcclxuICAgICAgICB2aWV3LmNoYW5uZWwoKS50cmlnZ2VyKGV2ZW50LCB2aWV3Lm1lKCkucHVibGljaWZ5KCkpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGFkZChkYXRhKSB7XHJcbiAgICAgICAgbGV0IGZvdW5kID0gZmFsc2U7XHJcbiAgICAgICAgdmlldy50eXBpbmcoKS5mb3JFYWNoKChpdGVtKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICghZm91bmQpIHtcclxuICAgICAgICAgICAgICAgIGZvdW5kID0gaXRlbS5pZCA9PT0gZGF0YS5pZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpZiAoIWZvdW5kKSB7XHJcbiAgICAgICAgICAgIHZpZXcudHlwaW5nLnB1c2goZGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHJlbW92ZShkYXRhKSB7XHJcbiAgICAgICAgdmlldy50eXBpbmcucmVtb3ZlKChpdGVtKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBpdGVtLmlkID09PSBkYXRhLmlkO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCB0O1xyXG4gICAgdmlldy5uZXdNZXNzYWdlLnN1YnNjcmliZSgodmFsdWUpID0+IHtcclxuICAgICAgICBjbGVhclRpbWVvdXQodCk7XHJcbiAgICAgICAgdCA9IHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAodmFsdWUubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgdHJpZ2dlcignY2xpZW50LXN0YXJ0ZWQtdHlwaW5nJyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0cmlnZ2VyKCdjbGllbnQtc3RvcHBlZC10eXBpbmcnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIDUwMCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB2aWV3LmNoYW5uZWwuc3Vic2NyaWJlKChjaGFubmVsKSA9PiB7XHJcbiAgICAgICAgY2hhbm5lbC5iaW5kKCdjbGllbnQtc3RhcnRlZC10eXBpbmcnLCAoZGF0YSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnU3RhcnRlZCBUeXBpbmcnLCBkYXRhKTtcclxuICAgICAgICAgICAgYWRkKGRhdGEpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGNoYW5uZWwuYmluZCgnY2xpZW50LXN0b3BwZWQtdHlwaW5nJywgKGRhdGEpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ1N0b3BwZWQgVHlwaW5nJywgZGF0YSk7XHJcbiAgICAgICAgICAgIHJlbW92ZShkYXRhKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gcmVtb3ZlIHVzZXIgZnJvbSBvdXIgbGlzdCBvZiB1c2VycyB0eXBpbmcgd2hlbiB0aGV5IGxlYXZlIHRoZSBjaGF0XHJcbiAgICAgICAgY2hhbm5lbC5iaW5kKCdwdXNoZXI6bWVtYmVyX3JlbW92ZWQnLCAoZGF0YSkgPT4ge1xyXG4gICAgICAgICAgICByZW1vdmUoZGF0YS5pbmZvKTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59Il19","deps":{}},"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\node_modules\\moment\\min\\moment.min.js":{"file":"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\node_modules\\moment\\min\\moment.min.js","source":"\"use strict\";\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\n//! moment.js\n//! version : 2.15.0\n//! authors : Tim Wood, Iskren Chernev, Moment.js contributors\n//! license : MIT\n//! momentjs.com\n!function (a, b) {\n  \"object\" == (typeof exports === \"undefined\" ? \"undefined\" : _typeof(exports)) && \"undefined\" != typeof module ? module.exports = b() : \"function\" == typeof define && define.amd ? define(b) : a.moment = b();\n}(undefined, function () {\n  \"use strict\";\n  function a() {\n    return md.apply(null, arguments);\n  }\n  // This is done to register the method called with moment()\n  // without creating circular dependencies.\n  function b(a) {\n    md = a;\n  }function c(a) {\n    return a instanceof Array || \"[object Array]\" === Object.prototype.toString.call(a);\n  }function d(a) {\n    // IE8 will treat undefined and null as object if it wasn't for\n    // input != null\n    return null != a && \"[object Object]\" === Object.prototype.toString.call(a);\n  }function e(a) {\n    var b;for (b in a) {\n      // even if its not own property I'd still call it non-empty\n      return !1;\n    }return !0;\n  }function f(a) {\n    return a instanceof Date || \"[object Date]\" === Object.prototype.toString.call(a);\n  }function g(a, b) {\n    var c,\n        d = [];for (c = 0; c < a.length; ++c) {\n      d.push(b(a[c], c));\n    }return d;\n  }function h(a, b) {\n    return Object.prototype.hasOwnProperty.call(a, b);\n  }function i(a, b) {\n    for (var c in b) {\n      h(b, c) && (a[c] = b[c]);\n    }return h(b, \"toString\") && (a.toString = b.toString), h(b, \"valueOf\") && (a.valueOf = b.valueOf), a;\n  }function j(a, b, c, d) {\n    return qb(a, b, c, d, !0).utc();\n  }function k() {\n    // We need to deep clone this object.\n    return { empty: !1, unusedTokens: [], unusedInput: [], overflow: -2, charsLeftOver: 0, nullInput: !1, invalidMonth: null, invalidFormat: !1, userInvalidated: !1, iso: !1, parsedDateParts: [], meridiem: null };\n  }function l(a) {\n    return null == a._pf && (a._pf = k()), a._pf;\n  }function m(a) {\n    if (null == a._isValid) {\n      var b = l(a),\n          c = nd.call(b.parsedDateParts, function (a) {\n        return null != a;\n      }),\n          d = !isNaN(a._d.getTime()) && b.overflow < 0 && !b.empty && !b.invalidMonth && !b.invalidWeekday && !b.nullInput && !b.invalidFormat && !b.userInvalidated && (!b.meridiem || b.meridiem && c);if (a._strict && (d = d && 0 === b.charsLeftOver && 0 === b.unusedTokens.length && void 0 === b.bigHour), null != Object.isFrozen && Object.isFrozen(a)) return d;a._isValid = d;\n    }return a._isValid;\n  }function n(a) {\n    var b = j(NaN);return null != a ? i(l(b), a) : l(b).userInvalidated = !0, b;\n  }function o(a) {\n    return void 0 === a;\n  }function p(a, b) {\n    var c, d, e;if (o(b._isAMomentObject) || (a._isAMomentObject = b._isAMomentObject), o(b._i) || (a._i = b._i), o(b._f) || (a._f = b._f), o(b._l) || (a._l = b._l), o(b._strict) || (a._strict = b._strict), o(b._tzm) || (a._tzm = b._tzm), o(b._isUTC) || (a._isUTC = b._isUTC), o(b._offset) || (a._offset = b._offset), o(b._pf) || (a._pf = l(b)), o(b._locale) || (a._locale = b._locale), od.length > 0) for (c in od) {\n      d = od[c], e = b[d], o(e) || (a[d] = e);\n    }return a;\n  }\n  // Moment prototype object\n  function q(b) {\n    p(this, b), this._d = new Date(null != b._d ? b._d.getTime() : NaN), pd === !1 && (pd = !0, a.updateOffset(this), pd = !1);\n  }function r(a) {\n    return a instanceof q || null != a && null != a._isAMomentObject;\n  }function s(a) {\n    return 0 > a ? Math.ceil(a) || 0 : Math.floor(a);\n  }function t(a) {\n    var b = +a,\n        c = 0;return 0 !== b && isFinite(b) && (c = s(b)), c;\n  }\n  // compare two arrays, return the number of differences\n  function u(a, b, c) {\n    var d,\n        e = Math.min(a.length, b.length),\n        f = Math.abs(a.length - b.length),\n        g = 0;for (d = 0; e > d; d++) {\n      (c && a[d] !== b[d] || !c && t(a[d]) !== t(b[d])) && g++;\n    }return g + f;\n  }function v(b) {\n    a.suppressDeprecationWarnings === !1 && \"undefined\" != typeof console && console.warn && console.warn(\"Deprecation warning: \" + b);\n  }function w(b, c) {\n    var d = !0;return i(function () {\n      if (null != a.deprecationHandler && a.deprecationHandler(null, b), d) {\n        for (var e, f = [], g = 0; g < arguments.length; g++) {\n          if (e = \"\", \"object\" == _typeof(arguments[g])) {\n            e += \"\\n[\" + g + \"] \";for (var h in arguments[0]) {\n              e += h + \": \" + arguments[0][h] + \", \";\n            }e = e.slice(0, -2);\n          } else e = arguments[g];f.push(e);\n        }v(b + \"\\nArguments: \" + Array.prototype.slice.call(f).join(\"\") + \"\\n\" + new Error().stack), d = !1;\n      }return c.apply(this, arguments);\n    }, c);\n  }function x(b, c) {\n    null != a.deprecationHandler && a.deprecationHandler(b, c), qd[b] || (v(c), qd[b] = !0);\n  }function y(a) {\n    return a instanceof Function || \"[object Function]\" === Object.prototype.toString.call(a);\n  }function z(a) {\n    var b, c;for (c in a) {\n      b = a[c], y(b) ? this[c] = b : this[\"_\" + c] = b;\n    }this._config = a,\n    // Lenient ordinal parsing accepts just a number in addition to\n    // number + (possibly) stuff coming from _ordinalParseLenient.\n    this._ordinalParseLenient = new RegExp(this._ordinalParse.source + \"|\" + /\\d{1,2}/.source);\n  }function A(a, b) {\n    var c,\n        e = i({}, a);for (c in b) {\n      h(b, c) && (d(a[c]) && d(b[c]) ? (e[c] = {}, i(e[c], a[c]), i(e[c], b[c])) : null != b[c] ? e[c] = b[c] : delete e[c]);\n    }for (c in a) {\n      h(a, c) && !h(b, c) && d(a[c]) && (\n      // make sure changes to properties don't modify parent config\n      e[c] = i({}, e[c]));\n    }return e;\n  }function B(a) {\n    null != a && this.set(a);\n  }function C(a, b, c) {\n    var d = this._calendar[a] || this._calendar.sameElse;return y(d) ? d.call(b, c) : d;\n  }function D(a) {\n    var b = this._longDateFormat[a],\n        c = this._longDateFormat[a.toUpperCase()];return b || !c ? b : (this._longDateFormat[a] = c.replace(/MMMM|MM|DD|dddd/g, function (a) {\n      return a.slice(1);\n    }), this._longDateFormat[a]);\n  }function E() {\n    return this._invalidDate;\n  }function F(a) {\n    return this._ordinal.replace(\"%d\", a);\n  }function G(a, b, c, d) {\n    var e = this._relativeTime[c];return y(e) ? e(a, b, c, d) : e.replace(/%d/i, a);\n  }function H(a, b) {\n    var c = this._relativeTime[a > 0 ? \"future\" : \"past\"];return y(c) ? c(b) : c.replace(/%s/i, b);\n  }function I(a, b) {\n    var c = a.toLowerCase();zd[c] = zd[c + \"s\"] = zd[b] = a;\n  }function J(a) {\n    return \"string\" == typeof a ? zd[a] || zd[a.toLowerCase()] : void 0;\n  }function K(a) {\n    var b,\n        c,\n        d = {};for (c in a) {\n      h(a, c) && (b = J(c), b && (d[b] = a[c]));\n    }return d;\n  }function L(a, b) {\n    Ad[a] = b;\n  }function M(a) {\n    var b = [];for (var c in a) {\n      b.push({ unit: c, priority: Ad[c] });\n    }return b.sort(function (a, b) {\n      return a.priority - b.priority;\n    }), b;\n  }function N(b, c) {\n    return function (d) {\n      return null != d ? (P(this, b, d), a.updateOffset(this, c), this) : O(this, b);\n    };\n  }function O(a, b) {\n    return a.isValid() ? a._d[\"get\" + (a._isUTC ? \"UTC\" : \"\") + b]() : NaN;\n  }function P(a, b, c) {\n    a.isValid() && a._d[\"set\" + (a._isUTC ? \"UTC\" : \"\") + b](c);\n  }\n  // MOMENTS\n  function Q(a) {\n    return a = J(a), y(this[a]) ? this[a]() : this;\n  }function R(a, b) {\n    if (\"object\" == (typeof a === \"undefined\" ? \"undefined\" : _typeof(a))) {\n      a = K(a);for (var c = M(a), d = 0; d < c.length; d++) {\n        this[c[d].unit](a[c[d].unit]);\n      }\n    } else if (a = J(a), y(this[a])) return this[a](b);return this;\n  }function S(a, b, c) {\n    var d = \"\" + Math.abs(a),\n        e = b - d.length,\n        f = a >= 0;return (f ? c ? \"+\" : \"\" : \"-\") + Math.pow(10, Math.max(0, e)).toString().substr(1) + d;\n  }\n  // token:    'M'\n  // padded:   ['MM', 2]\n  // ordinal:  'Mo'\n  // callback: function () { this.month() + 1 }\n  function T(a, b, c, d) {\n    var e = d;\"string\" == typeof d && (e = function e() {\n      return this[d]();\n    }), a && (Ed[a] = e), b && (Ed[b[0]] = function () {\n      return S(e.apply(this, arguments), b[1], b[2]);\n    }), c && (Ed[c] = function () {\n      return this.localeData().ordinal(e.apply(this, arguments), a);\n    });\n  }function U(a) {\n    return a.match(/\\[[\\s\\S]/) ? a.replace(/^\\[|\\]$/g, \"\") : a.replace(/\\\\/g, \"\");\n  }function V(a) {\n    var b,\n        c,\n        d = a.match(Bd);for (b = 0, c = d.length; c > b; b++) {\n      Ed[d[b]] ? d[b] = Ed[d[b]] : d[b] = U(d[b]);\n    }return function (b) {\n      var e,\n          f = \"\";for (e = 0; c > e; e++) {\n        f += d[e] instanceof Function ? d[e].call(b, a) : d[e];\n      }return f;\n    };\n  }\n  // format date using native date object\n  function W(a, b) {\n    return a.isValid() ? (b = X(b, a.localeData()), Dd[b] = Dd[b] || V(b), Dd[b](a)) : a.localeData().invalidDate();\n  }function X(a, b) {\n    function c(a) {\n      return b.longDateFormat(a) || a;\n    }var d = 5;for (Cd.lastIndex = 0; d >= 0 && Cd.test(a);) {\n      a = a.replace(Cd, c), Cd.lastIndex = 0, d -= 1;\n    }return a;\n  }function Y(a, b, c) {\n    Wd[a] = y(b) ? b : function (a, d) {\n      return a && c ? c : b;\n    };\n  }function Z(a, b) {\n    return h(Wd, a) ? Wd[a](b._strict, b._locale) : new RegExp($(a));\n  }\n  // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript\n  function $(a) {\n    return _(a.replace(\"\\\\\", \"\").replace(/\\\\(\\[)|\\\\(\\])|\\[([^\\]\\[]*)\\]|\\\\(.)/g, function (a, b, c, d, e) {\n      return b || c || d || e;\n    }));\n  }function _(a) {\n    return a.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n  }function aa(a, b) {\n    var c,\n        d = b;for (\"string\" == typeof a && (a = [a]), \"number\" == typeof b && (d = function d(a, c) {\n      c[b] = t(a);\n    }), c = 0; c < a.length; c++) {\n      Xd[a[c]] = d;\n    }\n  }function ba(a, b) {\n    aa(a, function (a, c, d, e) {\n      d._w = d._w || {}, b(a, d._w, d, e);\n    });\n  }function ca(a, b, c) {\n    null != b && h(Xd, a) && Xd[a](b, c._a, c, a);\n  }function da(a, b) {\n    return new Date(Date.UTC(a, b + 1, 0)).getUTCDate();\n  }function ea(a, b) {\n    return a ? c(this._months) ? this._months[a.month()] : this._months[(this._months.isFormat || fe).test(b) ? \"format\" : \"standalone\"][a.month()] : this._months;\n  }function fa(a, b) {\n    return a ? c(this._monthsShort) ? this._monthsShort[a.month()] : this._monthsShort[fe.test(b) ? \"format\" : \"standalone\"][a.month()] : this._monthsShort;\n  }function ga(a, b, c) {\n    var d,\n        e,\n        f,\n        g = a.toLocaleLowerCase();if (!this._monthsParse) for (\n    // this is not used\n    this._monthsParse = [], this._longMonthsParse = [], this._shortMonthsParse = [], d = 0; 12 > d; ++d) {\n      f = j([2e3, d]), this._shortMonthsParse[d] = this.monthsShort(f, \"\").toLocaleLowerCase(), this._longMonthsParse[d] = this.months(f, \"\").toLocaleLowerCase();\n    }return c ? \"MMM\" === b ? (e = sd.call(this._shortMonthsParse, g), -1 !== e ? e : null) : (e = sd.call(this._longMonthsParse, g), -1 !== e ? e : null) : \"MMM\" === b ? (e = sd.call(this._shortMonthsParse, g), -1 !== e ? e : (e = sd.call(this._longMonthsParse, g), -1 !== e ? e : null)) : (e = sd.call(this._longMonthsParse, g), -1 !== e ? e : (e = sd.call(this._shortMonthsParse, g), -1 !== e ? e : null));\n  }function ha(a, b, c) {\n    var d, e, f;if (this._monthsParseExact) return ga.call(this, a, b, c);\n    // TODO: add sorting\n    // Sorting makes sure if one month (or abbr) is a prefix of another\n    // see sorting in computeMonthsParse\n    for (this._monthsParse || (this._monthsParse = [], this._longMonthsParse = [], this._shortMonthsParse = []), d = 0; 12 > d; d++) {\n      // test the regex\n      if (e = j([2e3, d]), c && !this._longMonthsParse[d] && (this._longMonthsParse[d] = new RegExp(\"^\" + this.months(e, \"\").replace(\".\", \"\") + \"$\", \"i\"), this._shortMonthsParse[d] = new RegExp(\"^\" + this.monthsShort(e, \"\").replace(\".\", \"\") + \"$\", \"i\")), c || this._monthsParse[d] || (f = \"^\" + this.months(e, \"\") + \"|^\" + this.monthsShort(e, \"\"), this._monthsParse[d] = new RegExp(f.replace(\".\", \"\"), \"i\")), c && \"MMMM\" === b && this._longMonthsParse[d].test(a)) return d;if (c && \"MMM\" === b && this._shortMonthsParse[d].test(a)) return d;if (!c && this._monthsParse[d].test(a)) return d;\n    }\n  }\n  // MOMENTS\n  function ia(a, b) {\n    var c;if (!a.isValid())\n      // No op\n      return a;if (\"string\" == typeof b) if (/^\\d+$/.test(b)) b = t(b);else\n      // TODO: Another silent failure?\n      if (b = a.localeData().monthsParse(b), \"number\" != typeof b) return a;return c = Math.min(a.date(), da(a.year(), b)), a._d[\"set\" + (a._isUTC ? \"UTC\" : \"\") + \"Month\"](b, c), a;\n  }function ja(b) {\n    return null != b ? (ia(this, b), a.updateOffset(this, !0), this) : O(this, \"Month\");\n  }function ka() {\n    return da(this.year(), this.month());\n  }function la(a) {\n    return this._monthsParseExact ? (h(this, \"_monthsRegex\") || na.call(this), a ? this._monthsShortStrictRegex : this._monthsShortRegex) : (h(this, \"_monthsShortRegex\") || (this._monthsShortRegex = ie), this._monthsShortStrictRegex && a ? this._monthsShortStrictRegex : this._monthsShortRegex);\n  }function ma(a) {\n    return this._monthsParseExact ? (h(this, \"_monthsRegex\") || na.call(this), a ? this._monthsStrictRegex : this._monthsRegex) : (h(this, \"_monthsRegex\") || (this._monthsRegex = je), this._monthsStrictRegex && a ? this._monthsStrictRegex : this._monthsRegex);\n  }function na() {\n    function a(a, b) {\n      return b.length - a.length;\n    }var b,\n        c,\n        d = [],\n        e = [],\n        f = [];for (b = 0; 12 > b; b++) {\n      c = j([2e3, b]), d.push(this.monthsShort(c, \"\")), e.push(this.months(c, \"\")), f.push(this.months(c, \"\")), f.push(this.monthsShort(c, \"\"));\n    }for (\n    // Sorting makes sure if one month (or abbr) is a prefix of another it\n    // will match the longer piece.\n    d.sort(a), e.sort(a), f.sort(a), b = 0; 12 > b; b++) {\n      d[b] = _(d[b]), e[b] = _(e[b]);\n    }for (b = 0; 24 > b; b++) {\n      f[b] = _(f[b]);\n    }this._monthsRegex = new RegExp(\"^(\" + f.join(\"|\") + \")\", \"i\"), this._monthsShortRegex = this._monthsRegex, this._monthsStrictRegex = new RegExp(\"^(\" + e.join(\"|\") + \")\", \"i\"), this._monthsShortStrictRegex = new RegExp(\"^(\" + d.join(\"|\") + \")\", \"i\");\n  }\n  // HELPERS\n  function oa(a) {\n    return pa(a) ? 366 : 365;\n  }function pa(a) {\n    return a % 4 === 0 && a % 100 !== 0 || a % 400 === 0;\n  }function qa() {\n    return pa(this.year());\n  }function ra(a, b, c, d, e, f, g) {\n    //can't just apply() to create a date:\n    //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply\n    var h = new Date(a, b, c, d, e, f, g);\n    //the date constructor remaps years 0-99 to 1900-1999\n    return 100 > a && a >= 0 && isFinite(h.getFullYear()) && h.setFullYear(a), h;\n  }function sa(a) {\n    var b = new Date(Date.UTC.apply(null, arguments));\n    //the Date.UTC function remaps years 0-99 to 1900-1999\n    return 100 > a && a >= 0 && isFinite(b.getUTCFullYear()) && b.setUTCFullYear(a), b;\n  }\n  // start-of-first-week - start-of-year\n  function ta(a, b, c) {\n    var // first-week day -- which january is always in the first week (4 for iso, 1 for other)\n    d = 7 + b - c,\n\n    // first-week day local weekday -- which local weekday is fwd\n    e = (7 + sa(a, 0, d).getUTCDay() - b) % 7;return -e + d - 1;\n  }\n  //http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday\n  function ua(a, b, c, d, e) {\n    var f,\n        g,\n        h = (7 + c - d) % 7,\n        i = ta(a, d, e),\n        j = 1 + 7 * (b - 1) + h + i;return 0 >= j ? (f = a - 1, g = oa(f) + j) : j > oa(a) ? (f = a + 1, g = j - oa(a)) : (f = a, g = j), { year: f, dayOfYear: g };\n  }function va(a, b, c) {\n    var d,\n        e,\n        f = ta(a.year(), b, c),\n        g = Math.floor((a.dayOfYear() - f - 1) / 7) + 1;return 1 > g ? (e = a.year() - 1, d = g + wa(e, b, c)) : g > wa(a.year(), b, c) ? (d = g - wa(a.year(), b, c), e = a.year() + 1) : (e = a.year(), d = g), { week: d, year: e };\n  }function wa(a, b, c) {\n    var d = ta(a, b, c),\n        e = ta(a + 1, b, c);return (oa(a) - d + e) / 7;\n  }\n  // HELPERS\n  // LOCALES\n  function xa(a) {\n    return va(a, this._week.dow, this._week.doy).week;\n  }function ya() {\n    return this._week.dow;\n  }function za() {\n    return this._week.doy;\n  }\n  // MOMENTS\n  function Aa(a) {\n    var b = this.localeData().week(this);return null == a ? b : this.add(7 * (a - b), \"d\");\n  }function Ba(a) {\n    var b = va(this, 1, 4).week;return null == a ? b : this.add(7 * (a - b), \"d\");\n  }\n  // HELPERS\n  function Ca(a, b) {\n    return \"string\" != typeof a ? a : isNaN(a) ? (a = b.weekdaysParse(a), \"number\" == typeof a ? a : null) : parseInt(a, 10);\n  }function Da(a, b) {\n    return \"string\" == typeof a ? b.weekdaysParse(a) % 7 || 7 : isNaN(a) ? null : a;\n  }function Ea(a, b) {\n    return a ? c(this._weekdays) ? this._weekdays[a.day()] : this._weekdays[this._weekdays.isFormat.test(b) ? \"format\" : \"standalone\"][a.day()] : this._weekdays;\n  }function Fa(a) {\n    return a ? this._weekdaysShort[a.day()] : this._weekdaysShort;\n  }function Ga(a) {\n    return a ? this._weekdaysMin[a.day()] : this._weekdaysMin;\n  }function Ha(a, b, c) {\n    var d,\n        e,\n        f,\n        g = a.toLocaleLowerCase();if (!this._weekdaysParse) for (this._weekdaysParse = [], this._shortWeekdaysParse = [], this._minWeekdaysParse = [], d = 0; 7 > d; ++d) {\n      f = j([2e3, 1]).day(d), this._minWeekdaysParse[d] = this.weekdaysMin(f, \"\").toLocaleLowerCase(), this._shortWeekdaysParse[d] = this.weekdaysShort(f, \"\").toLocaleLowerCase(), this._weekdaysParse[d] = this.weekdays(f, \"\").toLocaleLowerCase();\n    }return c ? \"dddd\" === b ? (e = sd.call(this._weekdaysParse, g), -1 !== e ? e : null) : \"ddd\" === b ? (e = sd.call(this._shortWeekdaysParse, g), -1 !== e ? e : null) : (e = sd.call(this._minWeekdaysParse, g), -1 !== e ? e : null) : \"dddd\" === b ? (e = sd.call(this._weekdaysParse, g), -1 !== e ? e : (e = sd.call(this._shortWeekdaysParse, g), -1 !== e ? e : (e = sd.call(this._minWeekdaysParse, g), -1 !== e ? e : null))) : \"ddd\" === b ? (e = sd.call(this._shortWeekdaysParse, g), -1 !== e ? e : (e = sd.call(this._weekdaysParse, g), -1 !== e ? e : (e = sd.call(this._minWeekdaysParse, g), -1 !== e ? e : null))) : (e = sd.call(this._minWeekdaysParse, g), -1 !== e ? e : (e = sd.call(this._weekdaysParse, g), -1 !== e ? e : (e = sd.call(this._shortWeekdaysParse, g), -1 !== e ? e : null)));\n  }function Ia(a, b, c) {\n    var d, e, f;if (this._weekdaysParseExact) return Ha.call(this, a, b, c);for (this._weekdaysParse || (this._weekdaysParse = [], this._minWeekdaysParse = [], this._shortWeekdaysParse = [], this._fullWeekdaysParse = []), d = 0; 7 > d; d++) {\n      // test the regex\n      if (e = j([2e3, 1]).day(d), c && !this._fullWeekdaysParse[d] && (this._fullWeekdaysParse[d] = new RegExp(\"^\" + this.weekdays(e, \"\").replace(\".\", \".?\") + \"$\", \"i\"), this._shortWeekdaysParse[d] = new RegExp(\"^\" + this.weekdaysShort(e, \"\").replace(\".\", \".?\") + \"$\", \"i\"), this._minWeekdaysParse[d] = new RegExp(\"^\" + this.weekdaysMin(e, \"\").replace(\".\", \".?\") + \"$\", \"i\")), this._weekdaysParse[d] || (f = \"^\" + this.weekdays(e, \"\") + \"|^\" + this.weekdaysShort(e, \"\") + \"|^\" + this.weekdaysMin(e, \"\"), this._weekdaysParse[d] = new RegExp(f.replace(\".\", \"\"), \"i\")), c && \"dddd\" === b && this._fullWeekdaysParse[d].test(a)) return d;if (c && \"ddd\" === b && this._shortWeekdaysParse[d].test(a)) return d;if (c && \"dd\" === b && this._minWeekdaysParse[d].test(a)) return d;if (!c && this._weekdaysParse[d].test(a)) return d;\n    }\n  }\n  // MOMENTS\n  function Ja(a) {\n    if (!this.isValid()) return null != a ? this : NaN;var b = this._isUTC ? this._d.getUTCDay() : this._d.getDay();return null != a ? (a = Ca(a, this.localeData()), this.add(a - b, \"d\")) : b;\n  }function Ka(a) {\n    if (!this.isValid()) return null != a ? this : NaN;var b = (this.day() + 7 - this.localeData()._week.dow) % 7;return null == a ? b : this.add(a - b, \"d\");\n  }function La(a) {\n    if (!this.isValid()) return null != a ? this : NaN;\n    // behaves the same as moment#day except\n    // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)\n    // as a setter, sunday should belong to the previous week.\n    if (null != a) {\n      var b = Da(a, this.localeData());return this.day(this.day() % 7 ? b : b - 7);\n    }return this.day() || 7;\n  }function Ma(a) {\n    return this._weekdaysParseExact ? (h(this, \"_weekdaysRegex\") || Pa.call(this), a ? this._weekdaysStrictRegex : this._weekdaysRegex) : (h(this, \"_weekdaysRegex\") || (this._weekdaysRegex = pe), this._weekdaysStrictRegex && a ? this._weekdaysStrictRegex : this._weekdaysRegex);\n  }function Na(a) {\n    return this._weekdaysParseExact ? (h(this, \"_weekdaysRegex\") || Pa.call(this), a ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex) : (h(this, \"_weekdaysShortRegex\") || (this._weekdaysShortRegex = qe), this._weekdaysShortStrictRegex && a ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex);\n  }function Oa(a) {\n    return this._weekdaysParseExact ? (h(this, \"_weekdaysRegex\") || Pa.call(this), a ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex) : (h(this, \"_weekdaysMinRegex\") || (this._weekdaysMinRegex = re), this._weekdaysMinStrictRegex && a ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex);\n  }function Pa() {\n    function a(a, b) {\n      return b.length - a.length;\n    }var b,\n        c,\n        d,\n        e,\n        f,\n        g = [],\n        h = [],\n        i = [],\n        k = [];for (b = 0; 7 > b; b++) {\n      c = j([2e3, 1]).day(b), d = this.weekdaysMin(c, \"\"), e = this.weekdaysShort(c, \"\"), f = this.weekdays(c, \"\"), g.push(d), h.push(e), i.push(f), k.push(d), k.push(e), k.push(f);\n    }for (\n    // Sorting makes sure if one weekday (or abbr) is a prefix of another it\n    // will match the longer piece.\n    g.sort(a), h.sort(a), i.sort(a), k.sort(a), b = 0; 7 > b; b++) {\n      h[b] = _(h[b]), i[b] = _(i[b]), k[b] = _(k[b]);\n    }this._weekdaysRegex = new RegExp(\"^(\" + k.join(\"|\") + \")\", \"i\"), this._weekdaysShortRegex = this._weekdaysRegex, this._weekdaysMinRegex = this._weekdaysRegex, this._weekdaysStrictRegex = new RegExp(\"^(\" + i.join(\"|\") + \")\", \"i\"), this._weekdaysShortStrictRegex = new RegExp(\"^(\" + h.join(\"|\") + \")\", \"i\"), this._weekdaysMinStrictRegex = new RegExp(\"^(\" + g.join(\"|\") + \")\", \"i\");\n  }\n  // FORMATTING\n  function Qa() {\n    return this.hours() % 12 || 12;\n  }function Ra() {\n    return this.hours() || 24;\n  }function Sa(a, b) {\n    T(a, 0, 0, function () {\n      return this.localeData().meridiem(this.hours(), this.minutes(), b);\n    });\n  }\n  // PARSING\n  function Ta(a, b) {\n    return b._meridiemParse;\n  }\n  // LOCALES\n  function Ua(a) {\n    // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays\n    // Using charAt should be more compatible.\n    return \"p\" === (a + \"\").toLowerCase().charAt(0);\n  }function Va(a, b, c) {\n    return a > 11 ? c ? \"pm\" : \"PM\" : c ? \"am\" : \"AM\";\n  }function Wa(a) {\n    return a ? a.toLowerCase().replace(\"_\", \"-\") : a;\n  }\n  // pick the locale from the array\n  // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each\n  // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root\n  function Xa(a) {\n    for (var b, c, d, e, f = 0; f < a.length;) {\n      for (e = Wa(a[f]).split(\"-\"), b = e.length, c = Wa(a[f + 1]), c = c ? c.split(\"-\") : null; b > 0;) {\n        if (d = Ya(e.slice(0, b).join(\"-\"))) return d;if (c && c.length >= b && u(e, c, !0) >= b - 1)\n          //the next array item is better than a shallower substring of this one\n          break;b--;\n      }f++;\n    }return null;\n  }function Ya(a) {\n    var b = null;\n    // TODO: Find a better way to register and load all the locales in Node\n    if (!we[a] && \"undefined\" != typeof module && module && module.require) try {\n      b = se._abbr, module.require(\"./locale/\" + a),\n      // because defineLocale currently also sets the global locale, we\n      // want to undo that for lazy loaded locales\n      Za(b);\n    } catch (c) {}return we[a];\n  }\n  // This function will load locale and then set the global locale.  If\n  // no arguments are passed in, it will simply return the current global\n  // locale key.\n  function Za(a, b) {\n    var c;\n    // moment.duration._locale = moment._locale = data;\n    return a && (c = o(b) ? ab(a) : $a(a, b), c && (se = c)), se._abbr;\n  }function $a(a, b) {\n    if (null !== b) {\n      var c = ve;\n      // treat as if there is no base config\n      // backwards compat for now: also set the locale\n      return b.abbr = a, null != we[a] ? (x(\"defineLocaleOverride\", \"use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info.\"), c = we[a]._config) : null != b.parentLocale && (null != we[b.parentLocale] ? c = we[b.parentLocale]._config : x(\"parentLocaleUndefined\", \"specified parentLocale is not defined yet. See http://momentjs.com/guides/#/warnings/parent-locale/\")), we[a] = new B(A(c, b)), Za(a), we[a];\n    }\n    // useful for testing\n    return delete we[a], null;\n  }function _a(a, b) {\n    if (null != b) {\n      var c,\n          d = ve;\n      // MERGE\n      null != we[a] && (d = we[a]._config), b = A(d, b), c = new B(b), c.parentLocale = we[a], we[a] = c,\n      // backwards compat for now: also set the locale\n      Za(a);\n    } else\n      // pass null for config to unupdate, useful for tests\n      null != we[a] && (null != we[a].parentLocale ? we[a] = we[a].parentLocale : null != we[a] && delete we[a]);return we[a];\n  }\n  // returns locale data\n  function ab(a) {\n    var b;if (a && a._locale && a._locale._abbr && (a = a._locale._abbr), !a) return se;if (!c(a)) {\n      if (b = Ya(a)) return b;a = [a];\n    }return Xa(a);\n  }function bb() {\n    return rd(we);\n  }function cb(a) {\n    var b,\n        c = a._a;return c && -2 === l(a).overflow && (b = c[Zd] < 0 || c[Zd] > 11 ? Zd : c[$d] < 1 || c[$d] > da(c[Yd], c[Zd]) ? $d : c[_d] < 0 || c[_d] > 24 || 24 === c[_d] && (0 !== c[ae] || 0 !== c[be] || 0 !== c[ce]) ? _d : c[ae] < 0 || c[ae] > 59 ? ae : c[be] < 0 || c[be] > 59 ? be : c[ce] < 0 || c[ce] > 999 ? ce : -1, l(a)._overflowDayOfYear && (Yd > b || b > $d) && (b = $d), l(a)._overflowWeeks && -1 === b && (b = de), l(a)._overflowWeekday && -1 === b && (b = ee), l(a).overflow = b), a;\n  }\n  // date from iso format\n  function db(a) {\n    var b,\n        c,\n        d,\n        e,\n        f,\n        g,\n        h = a._i,\n        i = xe.exec(h) || ye.exec(h);if (i) {\n      for (l(a).iso = !0, b = 0, c = Ae.length; c > b; b++) {\n        if (Ae[b][1].exec(i[1])) {\n          e = Ae[b][0], d = Ae[b][2] !== !1;break;\n        }\n      }if (null == e) return void (a._isValid = !1);if (i[3]) {\n        for (b = 0, c = Be.length; c > b; b++) {\n          if (Be[b][1].exec(i[3])) {\n            // match[2] should be 'T' or space\n            f = (i[2] || \" \") + Be[b][0];break;\n          }\n        }if (null == f) return void (a._isValid = !1);\n      }if (!d && null != f) return void (a._isValid = !1);if (i[4]) {\n        if (!ze.exec(i[4])) return void (a._isValid = !1);g = \"Z\";\n      }a._f = e + (f || \"\") + (g || \"\"), jb(a);\n    } else a._isValid = !1;\n  }\n  // date from iso format or fallback\n  function eb(b) {\n    var c = Ce.exec(b._i);return null !== c ? void (b._d = new Date(+c[1])) : (db(b), void (b._isValid === !1 && (delete b._isValid, a.createFromInputFallback(b))));\n  }\n  // Pick the first defined of two or three arguments.\n  function fb(a, b, c) {\n    return null != a ? a : null != b ? b : c;\n  }function gb(b) {\n    // hooks is actually the exported moment object\n    var c = new Date(a.now());return b._useUTC ? [c.getUTCFullYear(), c.getUTCMonth(), c.getUTCDate()] : [c.getFullYear(), c.getMonth(), c.getDate()];\n  }\n  // convert an array to a date.\n  // the array should mirror the parameters below\n  // note: all values past the year are optional and will default to the lowest possible value.\n  // [year, month, day , hour, minute, second, millisecond]\n  function hb(a) {\n    var b,\n        c,\n        d,\n        e,\n        f = [];if (!a._d) {\n      // Default to current date.\n      // * if no year, month, day of month are given, default to today\n      // * if day of month is given, default month and year\n      // * if month is given, default only year\n      // * if year is given, don't default anything\n      for (d = gb(a), a._w && null == a._a[$d] && null == a._a[Zd] && ib(a), a._dayOfYear && (e = fb(a._a[Yd], d[Yd]), a._dayOfYear > oa(e) && (l(a)._overflowDayOfYear = !0), c = sa(e, 0, a._dayOfYear), a._a[Zd] = c.getUTCMonth(), a._a[$d] = c.getUTCDate()), b = 0; 3 > b && null == a._a[b]; ++b) {\n        a._a[b] = f[b] = d[b];\n      } // Zero out whatever was not defaulted, including time\n      for (; 7 > b; b++) {\n        a._a[b] = f[b] = null == a._a[b] ? 2 === b ? 1 : 0 : a._a[b];\n      } // Check for 24:00:00.000\n      24 === a._a[_d] && 0 === a._a[ae] && 0 === a._a[be] && 0 === a._a[ce] && (a._nextDay = !0, a._a[_d] = 0), a._d = (a._useUTC ? sa : ra).apply(null, f),\n      // Apply timezone offset from input. The actual utcOffset can be changed\n      // with parseZone.\n      null != a._tzm && a._d.setUTCMinutes(a._d.getUTCMinutes() - a._tzm), a._nextDay && (a._a[_d] = 24);\n    }\n  }function ib(a) {\n    var b, c, d, e, f, g, h, i;b = a._w, null != b.GG || null != b.W || null != b.E ? (f = 1, g = 4, c = fb(b.GG, a._a[Yd], va(rb(), 1, 4).year), d = fb(b.W, 1), e = fb(b.E, 1), (1 > e || e > 7) && (i = !0)) : (f = a._locale._week.dow, g = a._locale._week.doy, c = fb(b.gg, a._a[Yd], va(rb(), f, g).year), d = fb(b.w, 1), null != b.d ? (e = b.d, (0 > e || e > 6) && (i = !0)) : null != b.e ? (e = b.e + f, (b.e < 0 || b.e > 6) && (i = !0)) : e = f), 1 > d || d > wa(c, f, g) ? l(a)._overflowWeeks = !0 : null != i ? l(a)._overflowWeekday = !0 : (h = ua(c, d, e, f, g), a._a[Yd] = h.year, a._dayOfYear = h.dayOfYear);\n  }\n  // date from string and format string\n  function jb(b) {\n    // TODO: Move this to another part of the creation flow to prevent circular deps\n    if (b._f === a.ISO_8601) return void db(b);b._a = [], l(b).empty = !0;\n    // This array is used to make a Date, either with `new Date` or `Date.UTC`\n    var c,\n        d,\n        e,\n        f,\n        g,\n        h = \"\" + b._i,\n        i = h.length,\n        j = 0;for (e = X(b._f, b._locale).match(Bd) || [], c = 0; c < e.length; c++) {\n      f = e[c], d = (h.match(Z(f, b)) || [])[0], d && (g = h.substr(0, h.indexOf(d)), g.length > 0 && l(b).unusedInput.push(g), h = h.slice(h.indexOf(d) + d.length), j += d.length), Ed[f] ? (d ? l(b).empty = !1 : l(b).unusedTokens.push(f), ca(f, d, b)) : b._strict && !d && l(b).unusedTokens.push(f);\n    } // add remaining unparsed input length to the string\n    l(b).charsLeftOver = i - j, h.length > 0 && l(b).unusedInput.push(h),\n    // clear _12h flag if hour is <= 12\n    b._a[_d] <= 12 && l(b).bigHour === !0 && b._a[_d] > 0 && (l(b).bigHour = void 0), l(b).parsedDateParts = b._a.slice(0), l(b).meridiem = b._meridiem,\n    // handle meridiem\n    b._a[_d] = kb(b._locale, b._a[_d], b._meridiem), hb(b), cb(b);\n  }function kb(a, b, c) {\n    var d;\n    // Fallback\n    return null == c ? b : null != a.meridiemHour ? a.meridiemHour(b, c) : null != a.isPM ? (d = a.isPM(c), d && 12 > b && (b += 12), d || 12 !== b || (b = 0), b) : b;\n  }\n  // date from string and array of format strings\n  function lb(a) {\n    var b, c, d, e, f;if (0 === a._f.length) return l(a).invalidFormat = !0, void (a._d = new Date(NaN));for (e = 0; e < a._f.length; e++) {\n      f = 0, b = p({}, a), null != a._useUTC && (b._useUTC = a._useUTC), b._f = a._f[e], jb(b), m(b) && (f += l(b).charsLeftOver, f += 10 * l(b).unusedTokens.length, l(b).score = f, (null == d || d > f) && (d = f, c = b));\n    }i(a, c || b);\n  }function mb(a) {\n    if (!a._d) {\n      var b = K(a._i);a._a = g([b.year, b.month, b.day || b.date, b.hour, b.minute, b.second, b.millisecond], function (a) {\n        return a && parseInt(a, 10);\n      }), hb(a);\n    }\n  }function nb(a) {\n    var b = new q(cb(ob(a)));\n    // Adding is smart enough around DST\n    return b._nextDay && (b.add(1, \"d\"), b._nextDay = void 0), b;\n  }function ob(a) {\n    var b = a._i,\n        d = a._f;return a._locale = a._locale || ab(a._l), null === b || void 0 === d && \"\" === b ? n({ nullInput: !0 }) : (\"string\" == typeof b && (a._i = b = a._locale.preparse(b)), r(b) ? new q(cb(b)) : (c(d) ? lb(a) : f(b) ? a._d = b : d ? jb(a) : pb(a), m(a) || (a._d = null), a));\n  }function pb(b) {\n    var d = b._i;void 0 === d ? b._d = new Date(a.now()) : f(d) ? b._d = new Date(d.valueOf()) : \"string\" == typeof d ? eb(b) : c(d) ? (b._a = g(d.slice(0), function (a) {\n      return parseInt(a, 10);\n    }), hb(b)) : \"object\" == (typeof d === \"undefined\" ? \"undefined\" : _typeof(d)) ? mb(b) : \"number\" == typeof d ?\n    // from milliseconds\n    b._d = new Date(d) : a.createFromInputFallback(b);\n  }function qb(a, b, f, g, h) {\n    var i = {};\n    // object construction must be done this way.\n    // https://github.com/moment/moment/issues/1423\n    return \"boolean\" == typeof f && (g = f, f = void 0), (d(a) && e(a) || c(a) && 0 === a.length) && (a = void 0), i._isAMomentObject = !0, i._useUTC = i._isUTC = h, i._l = f, i._i = a, i._f = b, i._strict = g, nb(i);\n  }function rb(a, b, c, d) {\n    return qb(a, b, c, d, !1);\n  }\n  // Pick a moment m from moments so that m[fn](other) is true for all\n  // other. This relies on the function fn to be transitive.\n  //\n  // moments should either be an array of moment objects or an array, whose\n  // first element is an array of moment objects.\n  function sb(a, b) {\n    var d, e;if (1 === b.length && c(b[0]) && (b = b[0]), !b.length) return rb();for (d = b[0], e = 1; e < b.length; ++e) {\n      b[e].isValid() && !b[e][a](d) || (d = b[e]);\n    }return d;\n  }\n  // TODO: Use [].sort instead?\n  function tb() {\n    var a = [].slice.call(arguments, 0);return sb(\"isBefore\", a);\n  }function ub() {\n    var a = [].slice.call(arguments, 0);return sb(\"isAfter\", a);\n  }function vb(a) {\n    var b = K(a),\n        c = b.year || 0,\n        d = b.quarter || 0,\n        e = b.month || 0,\n        f = b.week || 0,\n        g = b.day || 0,\n        h = b.hour || 0,\n        i = b.minute || 0,\n        j = b.second || 0,\n        k = b.millisecond || 0;\n    // representation for dateAddRemove\n    this._milliseconds = +k + 1e3 * j + // 1000\n    6e4 * i + // 1000 * 60\n    1e3 * h * 60 * 60, //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978\n    // Because of dateAddRemove treats 24 hours as different from a\n    // day when working around DST, we need to store them separately\n    this._days = +g + 7 * f,\n    // It is impossible translate months into days without knowing\n    // which months you are are talking about, so we have to store\n    // it separately.\n    this._months = +e + 3 * d + 12 * c, this._data = {}, this._locale = ab(), this._bubble();\n  }function wb(a) {\n    return a instanceof vb;\n  }function xb(a) {\n    return 0 > a ? -1 * Math.round(-1 * a) : Math.round(a);\n  }\n  // FORMATTING\n  function yb(a, b) {\n    T(a, 0, 0, function () {\n      var a = this.utcOffset(),\n          c = \"+\";return 0 > a && (a = -a, c = \"-\"), c + S(~~(a / 60), 2) + b + S(~~a % 60, 2);\n    });\n  }function zb(a, b) {\n    var c = (b || \"\").match(a) || [],\n        d = c[c.length - 1] || [],\n        e = (d + \"\").match(Ge) || [\"-\", 0, 0],\n        f = +(60 * e[1]) + t(e[2]);return \"+\" === e[0] ? f : -f;\n  }\n  // Return a moment from input, that is local/utc/zone equivalent to model.\n  function Ab(b, c) {\n    var d, e;\n    // Use low-level api, because this fn is low-level api.\n    return c._isUTC ? (d = c.clone(), e = (r(b) || f(b) ? b.valueOf() : rb(b).valueOf()) - d.valueOf(), d._d.setTime(d._d.valueOf() + e), a.updateOffset(d, !1), d) : rb(b).local();\n  }function Bb(a) {\n    // On Firefox.24 Date#getTimezoneOffset returns a floating point.\n    // https://github.com/moment/moment/pull/1871\n    return 15 * -Math.round(a._d.getTimezoneOffset() / 15);\n  }\n  // MOMENTS\n  // keepLocalTime = true means only change the timezone, without\n  // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->\n  // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset\n  // +0200, so we adjust the time as needed, to be valid.\n  //\n  // Keeping the time actually adds/subtracts (one hour)\n  // from the actual represented time. That is why we call updateOffset\n  // a second time. In case it wants us to change the offset again\n  // _changeInProgress == true case, then we have to adjust, because\n  // there is no such time in the given timezone.\n  function Cb(b, c) {\n    var d,\n        e = this._offset || 0;return this.isValid() ? null != b ? (\"string\" == typeof b ? b = zb(Td, b) : Math.abs(b) < 16 && (b = 60 * b), !this._isUTC && c && (d = Bb(this)), this._offset = b, this._isUTC = !0, null != d && this.add(d, \"m\"), e !== b && (!c || this._changeInProgress ? Sb(this, Nb(b - e, \"m\"), 1, !1) : this._changeInProgress || (this._changeInProgress = !0, a.updateOffset(this, !0), this._changeInProgress = null)), this) : this._isUTC ? e : Bb(this) : null != b ? this : NaN;\n  }function Db(a, b) {\n    return null != a ? (\"string\" != typeof a && (a = -a), this.utcOffset(a, b), this) : -this.utcOffset();\n  }function Eb(a) {\n    return this.utcOffset(0, a);\n  }function Fb(a) {\n    return this._isUTC && (this.utcOffset(0, a), this._isUTC = !1, a && this.subtract(Bb(this), \"m\")), this;\n  }function Gb() {\n    if (this._tzm) this.utcOffset(this._tzm);else if (\"string\" == typeof this._i) {\n      var a = zb(Sd, this._i);0 === a ? this.utcOffset(0, !0) : this.utcOffset(zb(Sd, this._i));\n    }return this;\n  }function Hb(a) {\n    return this.isValid() ? (a = a ? rb(a).utcOffset() : 0, (this.utcOffset() - a) % 60 === 0) : !1;\n  }function Ib() {\n    return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();\n  }function Jb() {\n    if (!o(this._isDSTShifted)) return this._isDSTShifted;var a = {};if (p(a, this), a = ob(a), a._a) {\n      var b = a._isUTC ? j(a._a) : rb(a._a);this._isDSTShifted = this.isValid() && u(a._a, b.toArray()) > 0;\n    } else this._isDSTShifted = !1;return this._isDSTShifted;\n  }function Kb() {\n    return this.isValid() ? !this._isUTC : !1;\n  }function Lb() {\n    return this.isValid() ? this._isUTC : !1;\n  }function Mb() {\n    return this.isValid() ? this._isUTC && 0 === this._offset : !1;\n  }function Nb(a, b) {\n    var c,\n        d,\n        e,\n        f = a,\n\n    // matching against regexp is expensive, do it on demand\n    g = null; // checks for null or undefined\n    return wb(a) ? f = { ms: a._milliseconds, d: a._days, M: a._months } : \"number\" == typeof a ? (f = {}, b ? f[b] = a : f.milliseconds = a) : (g = He.exec(a)) ? (c = \"-\" === g[1] ? -1 : 1, f = { y: 0, d: t(g[$d]) * c, h: t(g[_d]) * c, m: t(g[ae]) * c, s: t(g[be]) * c, ms: t(xb(1e3 * g[ce])) * c }) : (g = Ie.exec(a)) ? (c = \"-\" === g[1] ? -1 : 1, f = { y: Ob(g[2], c), M: Ob(g[3], c), w: Ob(g[4], c), d: Ob(g[5], c), h: Ob(g[6], c), m: Ob(g[7], c), s: Ob(g[8], c) }) : null == f ? f = {} : \"object\" == (typeof f === \"undefined\" ? \"undefined\" : _typeof(f)) && (\"from\" in f || \"to\" in f) && (e = Qb(rb(f.from), rb(f.to)), f = {}, f.ms = e.milliseconds, f.M = e.months), d = new vb(f), wb(a) && h(a, \"_locale\") && (d._locale = a._locale), d;\n  }function Ob(a, b) {\n    // We'd normally use ~~inp for this, but unfortunately it also\n    // converts floats to ints.\n    // inp may be undefined, so careful calling replace on it.\n    var c = a && parseFloat(a.replace(\",\", \".\"));\n    // apply sign while we're at it\n    return (isNaN(c) ? 0 : c) * b;\n  }function Pb(a, b) {\n    var c = { milliseconds: 0, months: 0 };return c.months = b.month() - a.month() + 12 * (b.year() - a.year()), a.clone().add(c.months, \"M\").isAfter(b) && --c.months, c.milliseconds = +b - +a.clone().add(c.months, \"M\"), c;\n  }function Qb(a, b) {\n    var c;return a.isValid() && b.isValid() ? (b = Ab(b, a), a.isBefore(b) ? c = Pb(a, b) : (c = Pb(b, a), c.milliseconds = -c.milliseconds, c.months = -c.months), c) : { milliseconds: 0, months: 0 };\n  }\n  // TODO: remove 'name' arg after deprecation is removed\n  function Rb(a, b) {\n    return function (c, d) {\n      var e, f;\n      //invert the arguments, but complain about it\n      return null === d || isNaN(+d) || (x(b, \"moment().\" + b + \"(period, number) is deprecated. Please use moment().\" + b + \"(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.\"), f = c, c = d, d = f), c = \"string\" == typeof c ? +c : c, e = Nb(c, d), Sb(this, e, a), this;\n    };\n  }function Sb(b, c, d, e) {\n    var f = c._milliseconds,\n        g = xb(c._days),\n        h = xb(c._months);b.isValid() && (e = null == e ? !0 : e, f && b._d.setTime(b._d.valueOf() + f * d), g && P(b, \"Date\", O(b, \"Date\") + g * d), h && ia(b, O(b, \"Month\") + h * d), e && a.updateOffset(b, g || h));\n  }function Tb(a, b) {\n    var c = a.diff(b, \"days\", !0);return -6 > c ? \"sameElse\" : -1 > c ? \"lastWeek\" : 0 > c ? \"lastDay\" : 1 > c ? \"sameDay\" : 2 > c ? \"nextDay\" : 7 > c ? \"nextWeek\" : \"sameElse\";\n  }function Ub(b, c) {\n    // We want to compare the start of today, vs this.\n    // Getting start-of-today depends on whether we're local/utc/offset or not.\n    var d = b || rb(),\n        e = Ab(d, this).startOf(\"day\"),\n        f = a.calendarFormat(this, e) || \"sameElse\",\n        g = c && (y(c[f]) ? c[f].call(this, d) : c[f]);return this.format(g || this.localeData().calendar(f, this, rb(d)));\n  }function Vb() {\n    return new q(this);\n  }function Wb(a, b) {\n    var c = r(a) ? a : rb(a);return this.isValid() && c.isValid() ? (b = J(o(b) ? \"millisecond\" : b), \"millisecond\" === b ? this.valueOf() > c.valueOf() : c.valueOf() < this.clone().startOf(b).valueOf()) : !1;\n  }function Xb(a, b) {\n    var c = r(a) ? a : rb(a);return this.isValid() && c.isValid() ? (b = J(o(b) ? \"millisecond\" : b), \"millisecond\" === b ? this.valueOf() < c.valueOf() : this.clone().endOf(b).valueOf() < c.valueOf()) : !1;\n  }function Yb(a, b, c, d) {\n    return d = d || \"()\", (\"(\" === d[0] ? this.isAfter(a, c) : !this.isBefore(a, c)) && (\")\" === d[1] ? this.isBefore(b, c) : !this.isAfter(b, c));\n  }function Zb(a, b) {\n    var c,\n        d = r(a) ? a : rb(a);return this.isValid() && d.isValid() ? (b = J(b || \"millisecond\"), \"millisecond\" === b ? this.valueOf() === d.valueOf() : (c = d.valueOf(), this.clone().startOf(b).valueOf() <= c && c <= this.clone().endOf(b).valueOf())) : !1;\n  }function $b(a, b) {\n    return this.isSame(a, b) || this.isAfter(a, b);\n  }function _b(a, b) {\n    return this.isSame(a, b) || this.isBefore(a, b);\n  }function ac(a, b, c) {\n    var d, e, f, g; // 1000\n    // 1000 * 60\n    // 1000 * 60 * 60\n    // 1000 * 60 * 60 * 24, negate dst\n    // 1000 * 60 * 60 * 24 * 7, negate dst\n    return this.isValid() ? (d = Ab(a, this), d.isValid() ? (e = 6e4 * (d.utcOffset() - this.utcOffset()), b = J(b), \"year\" === b || \"month\" === b || \"quarter\" === b ? (g = bc(this, d), \"quarter\" === b ? g /= 3 : \"year\" === b && (g /= 12)) : (f = this - d, g = \"second\" === b ? f / 1e3 : \"minute\" === b ? f / 6e4 : \"hour\" === b ? f / 36e5 : \"day\" === b ? (f - e) / 864e5 : \"week\" === b ? (f - e) / 6048e5 : f), c ? g : s(g)) : NaN) : NaN;\n  }function bc(a, b) {\n    // difference in months\n    var c,\n        d,\n        e = 12 * (b.year() - a.year()) + (b.month() - a.month()),\n\n    // b is in (anchor - 1 month, anchor + 1 month)\n    f = a.clone().add(e, \"months\");\n    //check for negative zero, return zero if negative zero\n    // linear across the month\n    // linear across the month\n    return 0 > b - f ? (c = a.clone().add(e - 1, \"months\"), d = (b - f) / (f - c)) : (c = a.clone().add(e + 1, \"months\"), d = (b - f) / (c - f)), -(e + d) || 0;\n  }function cc() {\n    return this.clone().locale(\"en\").format(\"ddd MMM DD YYYY HH:mm:ss [GMT]ZZ\");\n  }function dc() {\n    var a = this.clone().utc();return 0 < a.year() && a.year() <= 9999 ? y(Date.prototype.toISOString) ? this.toDate().toISOString() : W(a, \"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]\") : W(a, \"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]\");\n  }function ec(b) {\n    b || (b = this.isUtc() ? a.defaultFormatUtc : a.defaultFormat);var c = W(this, b);return this.localeData().postformat(c);\n  }function fc(a, b) {\n    return this.isValid() && (r(a) && a.isValid() || rb(a).isValid()) ? Nb({ to: this, from: a }).locale(this.locale()).humanize(!b) : this.localeData().invalidDate();\n  }function gc(a) {\n    return this.from(rb(), a);\n  }function hc(a, b) {\n    return this.isValid() && (r(a) && a.isValid() || rb(a).isValid()) ? Nb({ from: this, to: a }).locale(this.locale()).humanize(!b) : this.localeData().invalidDate();\n  }function ic(a) {\n    return this.to(rb(), a);\n  }\n  // If passed a locale key, it will set the locale for this\n  // instance.  Otherwise, it will return the locale configuration\n  // variables for this instance.\n  function jc(a) {\n    var b;return void 0 === a ? this._locale._abbr : (b = ab(a), null != b && (this._locale = b), this);\n  }function kc() {\n    return this._locale;\n  }function lc(a) {\n    // the following switch intentionally omits break keywords\n    // to utilize falling through the cases.\n    switch (a = J(a)) {case \"year\":\n        this.month(0); /* falls through */\n      case \"quarter\":case \"month\":\n        this.date(1); /* falls through */\n      case \"week\":case \"isoWeek\":case \"day\":case \"date\":\n        this.hours(0); /* falls through */\n      case \"hour\":\n        this.minutes(0); /* falls through */\n      case \"minute\":\n        this.seconds(0); /* falls through */\n      case \"second\":\n        this.milliseconds(0);}\n    // weeks are a special case\n    // quarters are also special\n    return \"week\" === a && this.weekday(0), \"isoWeek\" === a && this.isoWeekday(1), \"quarter\" === a && this.month(3 * Math.floor(this.month() / 3)), this;\n  }function mc(a) {\n    // 'date' is an alias for 'day', so it should be considered as such.\n    return a = J(a), void 0 === a || \"millisecond\" === a ? this : (\"date\" === a && (a = \"day\"), this.startOf(a).add(1, \"isoWeek\" === a ? \"week\" : a).subtract(1, \"ms\"));\n  }function nc() {\n    return this._d.valueOf() - 6e4 * (this._offset || 0);\n  }function oc() {\n    return Math.floor(this.valueOf() / 1e3);\n  }function pc() {\n    return new Date(this.valueOf());\n  }function qc() {\n    var a = this;return [a.year(), a.month(), a.date(), a.hour(), a.minute(), a.second(), a.millisecond()];\n  }function rc() {\n    var a = this;return { years: a.year(), months: a.month(), date: a.date(), hours: a.hours(), minutes: a.minutes(), seconds: a.seconds(), milliseconds: a.milliseconds() };\n  }function sc() {\n    // new Date(NaN).toJSON() === null\n    return this.isValid() ? this.toISOString() : null;\n  }function tc() {\n    return m(this);\n  }function uc() {\n    return i({}, l(this));\n  }function vc() {\n    return l(this).overflow;\n  }function wc() {\n    return { input: this._i, format: this._f, locale: this._locale, isUTC: this._isUTC, strict: this._strict };\n  }function xc(a, b) {\n    T(0, [a, a.length], 0, b);\n  }\n  // MOMENTS\n  function yc(a) {\n    return Cc.call(this, a, this.week(), this.weekday(), this.localeData()._week.dow, this.localeData()._week.doy);\n  }function zc(a) {\n    return Cc.call(this, a, this.isoWeek(), this.isoWeekday(), 1, 4);\n  }function Ac() {\n    return wa(this.year(), 1, 4);\n  }function Bc() {\n    var a = this.localeData()._week;return wa(this.year(), a.dow, a.doy);\n  }function Cc(a, b, c, d, e) {\n    var f;return null == a ? va(this, d, e).year : (f = wa(a, d, e), b > f && (b = f), Dc.call(this, a, b, c, d, e));\n  }function Dc(a, b, c, d, e) {\n    var f = ua(a, b, c, d, e),\n        g = sa(f.year, 0, f.dayOfYear);return this.year(g.getUTCFullYear()), this.month(g.getUTCMonth()), this.date(g.getUTCDate()), this;\n  }\n  // MOMENTS\n  function Ec(a) {\n    return null == a ? Math.ceil((this.month() + 1) / 3) : this.month(3 * (a - 1) + this.month() % 3);\n  }\n  // HELPERS\n  // MOMENTS\n  function Fc(a) {\n    var b = Math.round((this.clone().startOf(\"day\") - this.clone().startOf(\"year\")) / 864e5) + 1;return null == a ? b : this.add(a - b, \"d\");\n  }function Gc(a, b) {\n    b[ce] = t(1e3 * (\"0.\" + a));\n  }\n  // MOMENTS\n  function Hc() {\n    return this._isUTC ? \"UTC\" : \"\";\n  }function Ic() {\n    return this._isUTC ? \"Coordinated Universal Time\" : \"\";\n  }function Jc(a) {\n    return rb(1e3 * a);\n  }function Kc() {\n    return rb.apply(null, arguments).parseZone();\n  }function Lc(a) {\n    return a;\n  }function Mc(a, b, c, d) {\n    var e = ab(),\n        f = j().set(d, b);return e[c](f, a);\n  }function Nc(a, b, c) {\n    if (\"number\" == typeof a && (b = a, a = void 0), a = a || \"\", null != b) return Mc(a, b, c, \"month\");var d,\n        e = [];for (d = 0; 12 > d; d++) {\n      e[d] = Mc(a, d, c, \"month\");\n    }return e;\n  }\n  // ()\n  // (5)\n  // (fmt, 5)\n  // (fmt)\n  // (true)\n  // (true, 5)\n  // (true, fmt, 5)\n  // (true, fmt)\n  function Oc(a, b, c, d) {\n    \"boolean\" == typeof a ? (\"number\" == typeof b && (c = b, b = void 0), b = b || \"\") : (b = a, c = b, a = !1, \"number\" == typeof b && (c = b, b = void 0), b = b || \"\");var e = ab(),\n        f = a ? e._week.dow : 0;if (null != c) return Mc(b, (c + f) % 7, d, \"day\");var g,\n        h = [];for (g = 0; 7 > g; g++) {\n      h[g] = Mc(b, (g + f) % 7, d, \"day\");\n    }return h;\n  }function Pc(a, b) {\n    return Nc(a, b, \"months\");\n  }function Qc(a, b) {\n    return Nc(a, b, \"monthsShort\");\n  }function Rc(a, b, c) {\n    return Oc(a, b, c, \"weekdays\");\n  }function Sc(a, b, c) {\n    return Oc(a, b, c, \"weekdaysShort\");\n  }function Tc(a, b, c) {\n    return Oc(a, b, c, \"weekdaysMin\");\n  }function Uc() {\n    var a = this._data;return this._milliseconds = Ue(this._milliseconds), this._days = Ue(this._days), this._months = Ue(this._months), a.milliseconds = Ue(a.milliseconds), a.seconds = Ue(a.seconds), a.minutes = Ue(a.minutes), a.hours = Ue(a.hours), a.months = Ue(a.months), a.years = Ue(a.years), this;\n  }function Vc(a, b, c, d) {\n    var e = Nb(b, c);return a._milliseconds += d * e._milliseconds, a._days += d * e._days, a._months += d * e._months, a._bubble();\n  }\n  // supports only 2.0-style add(1, 's') or add(duration)\n  function Wc(a, b) {\n    return Vc(this, a, b, 1);\n  }\n  // supports only 2.0-style subtract(1, 's') or subtract(duration)\n  function Xc(a, b) {\n    return Vc(this, a, b, -1);\n  }function Yc(a) {\n    return 0 > a ? Math.floor(a) : Math.ceil(a);\n  }function Zc() {\n    var a,\n        b,\n        c,\n        d,\n        e,\n        f = this._milliseconds,\n        g = this._days,\n        h = this._months,\n        i = this._data;\n    // if we have a mix of positive and negative values, bubble down first\n    // check: https://github.com/moment/moment/issues/2166\n    // The following code bubbles up values, see the tests for\n    // examples of what that means.\n    // convert days to months\n    // 12 months -> 1 year\n    return f >= 0 && g >= 0 && h >= 0 || 0 >= f && 0 >= g && 0 >= h || (f += 864e5 * Yc(_c(h) + g), g = 0, h = 0), i.milliseconds = f % 1e3, a = s(f / 1e3), i.seconds = a % 60, b = s(a / 60), i.minutes = b % 60, c = s(b / 60), i.hours = c % 24, g += s(c / 24), e = s($c(g)), h += e, g -= Yc(_c(e)), d = s(h / 12), h %= 12, i.days = g, i.months = h, i.years = d, this;\n  }function $c(a) {\n    // 400 years have 146097 days (taking into account leap year rules)\n    // 400 years have 12 months === 4800\n    return 4800 * a / 146097;\n  }function _c(a) {\n    // the reverse of daysToMonths\n    return 146097 * a / 4800;\n  }function ad(a) {\n    var b,\n        c,\n        d = this._milliseconds;if (a = J(a), \"month\" === a || \"year\" === a) return b = this._days + d / 864e5, c = this._months + $c(b), \"month\" === a ? c : c / 12;switch (b = this._days + Math.round(_c(this._months)), a) {case \"week\":\n        return b / 7 + d / 6048e5;case \"day\":\n        return b + d / 864e5;case \"hour\":\n        return 24 * b + d / 36e5;case \"minute\":\n        return 1440 * b + d / 6e4;case \"second\":\n        return 86400 * b + d / 1e3;\n      // Math.floor prevents floating point math errors here\n      case \"millisecond\":\n        return Math.floor(864e5 * b) + d;default:\n        throw new Error(\"Unknown unit \" + a);}\n  }\n  // TODO: Use this.as('ms')?\n  function bd() {\n    return this._milliseconds + 864e5 * this._days + this._months % 12 * 2592e6 + 31536e6 * t(this._months / 12);\n  }function cd(a) {\n    return function () {\n      return this.as(a);\n    };\n  }function dd(a) {\n    return a = J(a), this[a + \"s\"]();\n  }function ed(a) {\n    return function () {\n      return this._data[a];\n    };\n  }function fd() {\n    return s(this.days() / 7);\n  }\n  // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize\n  function gd(a, b, c, d, e) {\n    return e.relativeTime(b || 1, !!c, a, d);\n  }function hd(a, b, c) {\n    var d = Nb(a).abs(),\n        e = jf(d.as(\"s\")),\n        f = jf(d.as(\"m\")),\n        g = jf(d.as(\"h\")),\n        h = jf(d.as(\"d\")),\n        i = jf(d.as(\"M\")),\n        j = jf(d.as(\"y\")),\n        k = e < kf.s && [\"s\", e] || 1 >= f && [\"m\"] || f < kf.m && [\"mm\", f] || 1 >= g && [\"h\"] || g < kf.h && [\"hh\", g] || 1 >= h && [\"d\"] || h < kf.d && [\"dd\", h] || 1 >= i && [\"M\"] || i < kf.M && [\"MM\", i] || 1 >= j && [\"y\"] || [\"yy\", j];return k[2] = b, k[3] = +a > 0, k[4] = c, gd.apply(null, k);\n  }\n  // This function allows you to set the rounding function for relative time strings\n  function id(a) {\n    return void 0 === a ? jf : \"function\" == typeof a ? (jf = a, !0) : !1;\n  }\n  // This function allows you to set a threshold for relative time strings\n  function jd(a, b) {\n    return void 0 === kf[a] ? !1 : void 0 === b ? kf[a] : (kf[a] = b, !0);\n  }function kd(a) {\n    var b = this.localeData(),\n        c = hd(this, !a, b);return a && (c = b.pastFuture(+this, c)), b.postformat(c);\n  }function ld() {\n    // for ISO strings we do not use the normal bubbling rules:\n    //  * milliseconds bubble up until they become hours\n    //  * days do not bubble at all\n    //  * months bubble up until they become years\n    // This is because there is no context-free conversion between hours and days\n    // (think of clock changes)\n    // and also not between days and months (28-31 days per month)\n    var a,\n        b,\n        c,\n        d = lf(this._milliseconds) / 1e3,\n        e = lf(this._days),\n        f = lf(this._months);a = s(d / 60), b = s(a / 60), d %= 60, a %= 60, c = s(f / 12), f %= 12;\n    // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js\n    var g = c,\n        h = f,\n        i = e,\n        j = b,\n        k = a,\n        l = d,\n        m = this.asSeconds();return m ? (0 > m ? \"-\" : \"\") + \"P\" + (g ? g + \"Y\" : \"\") + (h ? h + \"M\" : \"\") + (i ? i + \"D\" : \"\") + (j || k || l ? \"T\" : \"\") + (j ? j + \"H\" : \"\") + (k ? k + \"M\" : \"\") + (l ? l + \"S\" : \"\") : \"P0D\";\n  }var md, nd;nd = Array.prototype.some ? Array.prototype.some : function (a) {\n    for (var b = Object(this), c = b.length >>> 0, d = 0; c > d; d++) {\n      if (d in b && a.call(this, b[d], d, b)) return !0;\n    }return !1;\n  };\n  // Plugins that add properties should also add the key here (null value),\n  // so we can properly clone ourselves.\n  var od = a.momentProperties = [],\n      pd = !1,\n      qd = {};a.suppressDeprecationWarnings = !1, a.deprecationHandler = null;var rd;rd = Object.keys ? Object.keys : function (a) {\n    var b,\n        c = [];for (b in a) {\n      h(a, b) && c.push(b);\n    }return c;\n  };var sd,\n      td = { sameDay: \"[Today at] LT\", nextDay: \"[Tomorrow at] LT\", nextWeek: \"dddd [at] LT\", lastDay: \"[Yesterday at] LT\", lastWeek: \"[Last] dddd [at] LT\", sameElse: \"L\" },\n      ud = { LTS: \"h:mm:ss A\", LT: \"h:mm A\", L: \"MM/DD/YYYY\", LL: \"MMMM D, YYYY\", LLL: \"MMMM D, YYYY h:mm A\", LLLL: \"dddd, MMMM D, YYYY h:mm A\" },\n      vd = \"Invalid date\",\n      wd = \"%d\",\n      xd = /\\d{1,2}/,\n      yd = { future: \"in %s\", past: \"%s ago\", s: \"a few seconds\", m: \"a minute\", mm: \"%d minutes\", h: \"an hour\", hh: \"%d hours\", d: \"a day\", dd: \"%d days\", M: \"a month\", MM: \"%d months\", y: \"a year\", yy: \"%d years\" },\n      zd = {},\n      Ad = {},\n      Bd = /(\\[[^\\[]*\\])|(\\\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,\n      Cd = /(\\[[^\\[]*\\])|(\\\\)?(LTS|LT|LL?L?L?|l{1,4})/g,\n      Dd = {},\n      Ed = {},\n      Fd = /\\d/,\n      Gd = /\\d\\d/,\n      Hd = /\\d{3}/,\n      Id = /\\d{4}/,\n      Jd = /[+-]?\\d{6}/,\n      Kd = /\\d\\d?/,\n      Ld = /\\d\\d\\d\\d?/,\n      Md = /\\d\\d\\d\\d\\d\\d?/,\n      Nd = /\\d{1,3}/,\n      Od = /\\d{1,4}/,\n      Pd = /[+-]?\\d{1,6}/,\n      Qd = /\\d+/,\n      Rd = /[+-]?\\d+/,\n      Sd = /Z|[+-]\\d\\d:?\\d\\d/gi,\n      Td = /Z|[+-]\\d\\d(?::?\\d\\d)?/gi,\n      Ud = /[+-]?\\d+(\\.\\d{1,3})?/,\n      Vd = /[0-9]*['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+|[\\u0600-\\u06FF\\/]+(\\s*?[\\u0600-\\u06FF]+){1,2}/i,\n      Wd = {},\n      Xd = {},\n      Yd = 0,\n      Zd = 1,\n      $d = 2,\n      _d = 3,\n      ae = 4,\n      be = 5,\n      ce = 6,\n      de = 7,\n      ee = 8;sd = Array.prototype.indexOf ? Array.prototype.indexOf : function (a) {\n    // I know\n    var b;for (b = 0; b < this.length; ++b) {\n      if (this[b] === a) return b;\n    }return -1;\n  }, T(\"M\", [\"MM\", 2], \"Mo\", function () {\n    return this.month() + 1;\n  }), T(\"MMM\", 0, 0, function (a) {\n    return this.localeData().monthsShort(this, a);\n  }), T(\"MMMM\", 0, 0, function (a) {\n    return this.localeData().months(this, a);\n  }), I(\"month\", \"M\"), L(\"month\", 8), Y(\"M\", Kd), Y(\"MM\", Kd, Gd), Y(\"MMM\", function (a, b) {\n    return b.monthsShortRegex(a);\n  }), Y(\"MMMM\", function (a, b) {\n    return b.monthsRegex(a);\n  }), aa([\"M\", \"MM\"], function (a, b) {\n    b[Zd] = t(a) - 1;\n  }), aa([\"MMM\", \"MMMM\"], function (a, b, c, d) {\n    var e = c._locale.monthsParse(a, d, c._strict);null != e ? b[Zd] = e : l(c).invalidMonth = a;\n  });\n  // LOCALES\n  var fe = /D[oD]?(\\[[^\\[\\]]*\\]|\\s+)+MMMM?/,\n      ge = \"January_February_March_April_May_June_July_August_September_October_November_December\".split(\"_\"),\n      he = \"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec\".split(\"_\"),\n      ie = Vd,\n      je = Vd;\n  // FORMATTING\n  T(\"Y\", 0, 0, function () {\n    var a = this.year();return 9999 >= a ? \"\" + a : \"+\" + a;\n  }), T(0, [\"YY\", 2], 0, function () {\n    return this.year() % 100;\n  }), T(0, [\"YYYY\", 4], 0, \"year\"), T(0, [\"YYYYY\", 5], 0, \"year\"), T(0, [\"YYYYYY\", 6, !0], 0, \"year\"),\n  // ALIASES\n  I(\"year\", \"y\"),\n  // PRIORITIES\n  L(\"year\", 1),\n  // PARSING\n  Y(\"Y\", Rd), Y(\"YY\", Kd, Gd), Y(\"YYYY\", Od, Id), Y(\"YYYYY\", Pd, Jd), Y(\"YYYYYY\", Pd, Jd), aa([\"YYYYY\", \"YYYYYY\"], Yd), aa(\"YYYY\", function (b, c) {\n    c[Yd] = 2 === b.length ? a.parseTwoDigitYear(b) : t(b);\n  }), aa(\"YY\", function (b, c) {\n    c[Yd] = a.parseTwoDigitYear(b);\n  }), aa(\"Y\", function (a, b) {\n    b[Yd] = parseInt(a, 10);\n  }),\n  // HOOKS\n  a.parseTwoDigitYear = function (a) {\n    return t(a) + (t(a) > 68 ? 1900 : 2e3);\n  };\n  // MOMENTS\n  var ke = N(\"FullYear\", !0);\n  // FORMATTING\n  T(\"w\", [\"ww\", 2], \"wo\", \"week\"), T(\"W\", [\"WW\", 2], \"Wo\", \"isoWeek\"),\n  // ALIASES\n  I(\"week\", \"w\"), I(\"isoWeek\", \"W\"),\n  // PRIORITIES\n  L(\"week\", 5), L(\"isoWeek\", 5),\n  // PARSING\n  Y(\"w\", Kd), Y(\"ww\", Kd, Gd), Y(\"W\", Kd), Y(\"WW\", Kd, Gd), ba([\"w\", \"ww\", \"W\", \"WW\"], function (a, b, c, d) {\n    b[d.substr(0, 1)] = t(a);\n  });var le = { dow: 0, // Sunday is the first day of the week.\n    doy: 6 };\n  // FORMATTING\n  T(\"d\", 0, \"do\", \"day\"), T(\"dd\", 0, 0, function (a) {\n    return this.localeData().weekdaysMin(this, a);\n  }), T(\"ddd\", 0, 0, function (a) {\n    return this.localeData().weekdaysShort(this, a);\n  }), T(\"dddd\", 0, 0, function (a) {\n    return this.localeData().weekdays(this, a);\n  }), T(\"e\", 0, 0, \"weekday\"), T(\"E\", 0, 0, \"isoWeekday\"),\n  // ALIASES\n  I(\"day\", \"d\"), I(\"weekday\", \"e\"), I(\"isoWeekday\", \"E\"),\n  // PRIORITY\n  L(\"day\", 11), L(\"weekday\", 11), L(\"isoWeekday\", 11),\n  // PARSING\n  Y(\"d\", Kd), Y(\"e\", Kd), Y(\"E\", Kd), Y(\"dd\", function (a, b) {\n    return b.weekdaysMinRegex(a);\n  }), Y(\"ddd\", function (a, b) {\n    return b.weekdaysShortRegex(a);\n  }), Y(\"dddd\", function (a, b) {\n    return b.weekdaysRegex(a);\n  }), ba([\"dd\", \"ddd\", \"dddd\"], function (a, b, c, d) {\n    var e = c._locale.weekdaysParse(a, d, c._strict);\n    // if we didn't get a weekday name, mark the date as invalid\n    null != e ? b.d = e : l(c).invalidWeekday = a;\n  }), ba([\"d\", \"e\", \"E\"], function (a, b, c, d) {\n    b[d] = t(a);\n  });\n  // LOCALES\n  var me = \"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday\".split(\"_\"),\n      ne = \"Sun_Mon_Tue_Wed_Thu_Fri_Sat\".split(\"_\"),\n      oe = \"Su_Mo_Tu_We_Th_Fr_Sa\".split(\"_\"),\n      pe = Vd,\n      qe = Vd,\n      re = Vd;T(\"H\", [\"HH\", 2], 0, \"hour\"), T(\"h\", [\"hh\", 2], 0, Qa), T(\"k\", [\"kk\", 2], 0, Ra), T(\"hmm\", 0, 0, function () {\n    return \"\" + Qa.apply(this) + S(this.minutes(), 2);\n  }), T(\"hmmss\", 0, 0, function () {\n    return \"\" + Qa.apply(this) + S(this.minutes(), 2) + S(this.seconds(), 2);\n  }), T(\"Hmm\", 0, 0, function () {\n    return \"\" + this.hours() + S(this.minutes(), 2);\n  }), T(\"Hmmss\", 0, 0, function () {\n    return \"\" + this.hours() + S(this.minutes(), 2) + S(this.seconds(), 2);\n  }), Sa(\"a\", !0), Sa(\"A\", !1),\n  // ALIASES\n  I(\"hour\", \"h\"),\n  // PRIORITY\n  L(\"hour\", 13), Y(\"a\", Ta), Y(\"A\", Ta), Y(\"H\", Kd), Y(\"h\", Kd), Y(\"HH\", Kd, Gd), Y(\"hh\", Kd, Gd), Y(\"hmm\", Ld), Y(\"hmmss\", Md), Y(\"Hmm\", Ld), Y(\"Hmmss\", Md), aa([\"H\", \"HH\"], _d), aa([\"a\", \"A\"], function (a, b, c) {\n    c._isPm = c._locale.isPM(a), c._meridiem = a;\n  }), aa([\"h\", \"hh\"], function (a, b, c) {\n    b[_d] = t(a), l(c).bigHour = !0;\n  }), aa(\"hmm\", function (a, b, c) {\n    var d = a.length - 2;b[_d] = t(a.substr(0, d)), b[ae] = t(a.substr(d)), l(c).bigHour = !0;\n  }), aa(\"hmmss\", function (a, b, c) {\n    var d = a.length - 4,\n        e = a.length - 2;b[_d] = t(a.substr(0, d)), b[ae] = t(a.substr(d, 2)), b[be] = t(a.substr(e)), l(c).bigHour = !0;\n  }), aa(\"Hmm\", function (a, b, c) {\n    var d = a.length - 2;b[_d] = t(a.substr(0, d)), b[ae] = t(a.substr(d));\n  }), aa(\"Hmmss\", function (a, b, c) {\n    var d = a.length - 4,\n        e = a.length - 2;b[_d] = t(a.substr(0, d)), b[ae] = t(a.substr(d, 2)), b[be] = t(a.substr(e));\n  });var se,\n      te = /[ap]\\.?m?\\.?/i,\n      ue = N(\"Hours\", !0),\n      ve = { calendar: td, longDateFormat: ud, invalidDate: vd, ordinal: wd, ordinalParse: xd, relativeTime: yd, months: ge, monthsShort: he, week: le, weekdays: me, weekdaysMin: oe, weekdaysShort: ne, meridiemParse: te },\n      we = {},\n      xe = /^\\s*((?:[+-]\\d{6}|\\d{4})-(?:\\d\\d-\\d\\d|W\\d\\d-\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?::\\d\\d(?::\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?/,\n      ye = /^\\s*((?:[+-]\\d{6}|\\d{4})(?:\\d\\d\\d\\d|W\\d\\d\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?:\\d\\d(?:\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?/,\n      ze = /Z|[+-]\\d\\d(?::?\\d\\d)?/,\n      Ae = [[\"YYYYYY-MM-DD\", /[+-]\\d{6}-\\d\\d-\\d\\d/], [\"YYYY-MM-DD\", /\\d{4}-\\d\\d-\\d\\d/], [\"GGGG-[W]WW-E\", /\\d{4}-W\\d\\d-\\d/], [\"GGGG-[W]WW\", /\\d{4}-W\\d\\d/, !1], [\"YYYY-DDD\", /\\d{4}-\\d{3}/], [\"YYYY-MM\", /\\d{4}-\\d\\d/, !1], [\"YYYYYYMMDD\", /[+-]\\d{10}/], [\"YYYYMMDD\", /\\d{8}/],\n  // YYYYMM is NOT allowed by the standard\n  [\"GGGG[W]WWE\", /\\d{4}W\\d{3}/], [\"GGGG[W]WW\", /\\d{4}W\\d{2}/, !1], [\"YYYYDDD\", /\\d{7}/]],\n      Be = [[\"HH:mm:ss.SSSS\", /\\d\\d:\\d\\d:\\d\\d\\.\\d+/], [\"HH:mm:ss,SSSS\", /\\d\\d:\\d\\d:\\d\\d,\\d+/], [\"HH:mm:ss\", /\\d\\d:\\d\\d:\\d\\d/], [\"HH:mm\", /\\d\\d:\\d\\d/], [\"HHmmss.SSSS\", /\\d\\d\\d\\d\\d\\d\\.\\d+/], [\"HHmmss,SSSS\", /\\d\\d\\d\\d\\d\\d,\\d+/], [\"HHmmss\", /\\d\\d\\d\\d\\d\\d/], [\"HHmm\", /\\d\\d\\d\\d/], [\"HH\", /\\d\\d/]],\n      Ce = /^\\/?Date\\((\\-?\\d+)/i;a.createFromInputFallback = w(\"value provided is not in a recognized ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non ISO date formats are discouraged and will be removed in an upcoming major release. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.\", function (a) {\n    a._d = new Date(a._i + (a._useUTC ? \" UTC\" : \"\"));\n  }),\n  // constant that refers to the ISO standard\n  a.ISO_8601 = function () {};var De = w(\"moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/\", function () {\n    var a = rb.apply(null, arguments);return this.isValid() && a.isValid() ? this > a ? this : a : n();\n  }),\n      Ee = w(\"moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/\", function () {\n    var a = rb.apply(null, arguments);return this.isValid() && a.isValid() ? a > this ? this : a : n();\n  }),\n      Fe = function Fe() {\n    return Date.now ? Date.now() : +new Date();\n  };yb(\"Z\", \":\"), yb(\"ZZ\", \"\"),\n  // PARSING\n  Y(\"Z\", Td), Y(\"ZZ\", Td), aa([\"Z\", \"ZZ\"], function (a, b, c) {\n    c._useUTC = !0, c._tzm = zb(Td, a);\n  });\n  // HELPERS\n  // timezone chunker\n  // '+10:00' > ['10',  '00']\n  // '-1530'  > ['-15', '30']\n  var Ge = /([\\+\\-]|\\d\\d)/gi;\n  // HOOKS\n  // This function will be called whenever a moment is mutated.\n  // It is intended to keep the offset in sync with the timezone.\n  a.updateOffset = function () {};\n  // ASP.NET json date format regex\n  var He = /^(\\-)?(?:(\\d*)[. ])?(\\d+)\\:(\\d+)(?:\\:(\\d+)(\\.\\d*)?)?$/,\n      Ie = /^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;Nb.fn = vb.prototype;var Je = Rb(1, \"add\"),\n      Ke = Rb(-1, \"subtract\");a.defaultFormat = \"YYYY-MM-DDTHH:mm:ssZ\", a.defaultFormatUtc = \"YYYY-MM-DDTHH:mm:ss[Z]\";var Le = w(\"moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.\", function (a) {\n    return void 0 === a ? this.localeData() : this.locale(a);\n  });\n  // FORMATTING\n  T(0, [\"gg\", 2], 0, function () {\n    return this.weekYear() % 100;\n  }), T(0, [\"GG\", 2], 0, function () {\n    return this.isoWeekYear() % 100;\n  }), xc(\"gggg\", \"weekYear\"), xc(\"ggggg\", \"weekYear\"), xc(\"GGGG\", \"isoWeekYear\"), xc(\"GGGGG\", \"isoWeekYear\"),\n  // ALIASES\n  I(\"weekYear\", \"gg\"), I(\"isoWeekYear\", \"GG\"),\n  // PRIORITY\n  L(\"weekYear\", 1), L(\"isoWeekYear\", 1),\n  // PARSING\n  Y(\"G\", Rd), Y(\"g\", Rd), Y(\"GG\", Kd, Gd), Y(\"gg\", Kd, Gd), Y(\"GGGG\", Od, Id), Y(\"gggg\", Od, Id), Y(\"GGGGG\", Pd, Jd), Y(\"ggggg\", Pd, Jd), ba([\"gggg\", \"ggggg\", \"GGGG\", \"GGGGG\"], function (a, b, c, d) {\n    b[d.substr(0, 2)] = t(a);\n  }), ba([\"gg\", \"GG\"], function (b, c, d, e) {\n    c[e] = a.parseTwoDigitYear(b);\n  }),\n  // FORMATTING\n  T(\"Q\", 0, \"Qo\", \"quarter\"),\n  // ALIASES\n  I(\"quarter\", \"Q\"),\n  // PRIORITY\n  L(\"quarter\", 7),\n  // PARSING\n  Y(\"Q\", Fd), aa(\"Q\", function (a, b) {\n    b[Zd] = 3 * (t(a) - 1);\n  }),\n  // FORMATTING\n  T(\"D\", [\"DD\", 2], \"Do\", \"date\"),\n  // ALIASES\n  I(\"date\", \"D\"),\n  // PRIOROITY\n  L(\"date\", 9),\n  // PARSING\n  Y(\"D\", Kd), Y(\"DD\", Kd, Gd), Y(\"Do\", function (a, b) {\n    return a ? b._ordinalParse : b._ordinalParseLenient;\n  }), aa([\"D\", \"DD\"], $d), aa(\"Do\", function (a, b) {\n    b[$d] = t(a.match(Kd)[0], 10);\n  });\n  // MOMENTS\n  var Me = N(\"Date\", !0);\n  // FORMATTING\n  T(\"DDD\", [\"DDDD\", 3], \"DDDo\", \"dayOfYear\"),\n  // ALIASES\n  I(\"dayOfYear\", \"DDD\"),\n  // PRIORITY\n  L(\"dayOfYear\", 4),\n  // PARSING\n  Y(\"DDD\", Nd), Y(\"DDDD\", Hd), aa([\"DDD\", \"DDDD\"], function (a, b, c) {\n    c._dayOfYear = t(a);\n  }),\n  // FORMATTING\n  T(\"m\", [\"mm\", 2], 0, \"minute\"),\n  // ALIASES\n  I(\"minute\", \"m\"),\n  // PRIORITY\n  L(\"minute\", 14),\n  // PARSING\n  Y(\"m\", Kd), Y(\"mm\", Kd, Gd), aa([\"m\", \"mm\"], ae);\n  // MOMENTS\n  var Ne = N(\"Minutes\", !1);\n  // FORMATTING\n  T(\"s\", [\"ss\", 2], 0, \"second\"),\n  // ALIASES\n  I(\"second\", \"s\"),\n  // PRIORITY\n  L(\"second\", 15),\n  // PARSING\n  Y(\"s\", Kd), Y(\"ss\", Kd, Gd), aa([\"s\", \"ss\"], be);\n  // MOMENTS\n  var Oe = N(\"Seconds\", !1);\n  // FORMATTING\n  T(\"S\", 0, 0, function () {\n    return ~~(this.millisecond() / 100);\n  }), T(0, [\"SS\", 2], 0, function () {\n    return ~~(this.millisecond() / 10);\n  }), T(0, [\"SSS\", 3], 0, \"millisecond\"), T(0, [\"SSSS\", 4], 0, function () {\n    return 10 * this.millisecond();\n  }), T(0, [\"SSSSS\", 5], 0, function () {\n    return 100 * this.millisecond();\n  }), T(0, [\"SSSSSS\", 6], 0, function () {\n    return 1e3 * this.millisecond();\n  }), T(0, [\"SSSSSSS\", 7], 0, function () {\n    return 1e4 * this.millisecond();\n  }), T(0, [\"SSSSSSSS\", 8], 0, function () {\n    return 1e5 * this.millisecond();\n  }), T(0, [\"SSSSSSSSS\", 9], 0, function () {\n    return 1e6 * this.millisecond();\n  }),\n  // ALIASES\n  I(\"millisecond\", \"ms\"),\n  // PRIORITY\n  L(\"millisecond\", 16),\n  // PARSING\n  Y(\"S\", Nd, Fd), Y(\"SS\", Nd, Gd), Y(\"SSS\", Nd, Hd);var Pe;for (Pe = \"SSSS\"; Pe.length <= 9; Pe += \"S\") {\n    Y(Pe, Qd);\n  }for (Pe = \"S\"; Pe.length <= 9; Pe += \"S\") {\n    aa(Pe, Gc);\n  } // MOMENTS\n  var Qe = N(\"Milliseconds\", !1);\n  // FORMATTING\n  T(\"z\", 0, 0, \"zoneAbbr\"), T(\"zz\", 0, 0, \"zoneName\");var Re = q.prototype;Re.add = Je, Re.calendar = Ub, Re.clone = Vb, Re.diff = ac, Re.endOf = mc, Re.format = ec, Re.from = fc, Re.fromNow = gc, Re.to = hc, Re.toNow = ic, Re.get = Q, Re.invalidAt = vc, Re.isAfter = Wb, Re.isBefore = Xb, Re.isBetween = Yb, Re.isSame = Zb, Re.isSameOrAfter = $b, Re.isSameOrBefore = _b, Re.isValid = tc, Re.lang = Le, Re.locale = jc, Re.localeData = kc, Re.max = Ee, Re.min = De, Re.parsingFlags = uc, Re.set = R, Re.startOf = lc, Re.subtract = Ke, Re.toArray = qc, Re.toObject = rc, Re.toDate = pc, Re.toISOString = dc, Re.toJSON = sc, Re.toString = cc, Re.unix = oc, Re.valueOf = nc, Re.creationData = wc,\n  // Year\n  Re.year = ke, Re.isLeapYear = qa,\n  // Week Year\n  Re.weekYear = yc, Re.isoWeekYear = zc,\n  // Quarter\n  Re.quarter = Re.quarters = Ec,\n  // Month\n  Re.month = ja, Re.daysInMonth = ka,\n  // Week\n  Re.week = Re.weeks = Aa, Re.isoWeek = Re.isoWeeks = Ba, Re.weeksInYear = Bc, Re.isoWeeksInYear = Ac,\n  // Day\n  Re.date = Me, Re.day = Re.days = Ja, Re.weekday = Ka, Re.isoWeekday = La, Re.dayOfYear = Fc,\n  // Hour\n  Re.hour = Re.hours = ue,\n  // Minute\n  Re.minute = Re.minutes = Ne,\n  // Second\n  Re.second = Re.seconds = Oe,\n  // Millisecond\n  Re.millisecond = Re.milliseconds = Qe,\n  // Offset\n  Re.utcOffset = Cb, Re.utc = Eb, Re.local = Fb, Re.parseZone = Gb, Re.hasAlignedHourOffset = Hb, Re.isDST = Ib, Re.isLocal = Kb, Re.isUtcOffset = Lb, Re.isUtc = Mb, Re.isUTC = Mb,\n  // Timezone\n  Re.zoneAbbr = Hc, Re.zoneName = Ic,\n  // Deprecations\n  Re.dates = w(\"dates accessor is deprecated. Use date instead.\", Me), Re.months = w(\"months accessor is deprecated. Use month instead\", ja), Re.years = w(\"years accessor is deprecated. Use year instead\", ke), Re.zone = w(\"moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/\", Db), Re.isDSTShifted = w(\"isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information\", Jb);var Se = Re,\n      Te = B.prototype;Te.calendar = C, Te.longDateFormat = D, Te.invalidDate = E, Te.ordinal = F, Te.preparse = Lc, Te.postformat = Lc, Te.relativeTime = G, Te.pastFuture = H, Te.set = z,\n  // Month\n  Te.months = ea, Te.monthsShort = fa, Te.monthsParse = ha, Te.monthsRegex = ma, Te.monthsShortRegex = la,\n  // Week\n  Te.week = xa, Te.firstDayOfYear = za, Te.firstDayOfWeek = ya,\n  // Day of Week\n  Te.weekdays = Ea, Te.weekdaysMin = Ga, Te.weekdaysShort = Fa, Te.weekdaysParse = Ia, Te.weekdaysRegex = Ma, Te.weekdaysShortRegex = Na, Te.weekdaysMinRegex = Oa,\n  // Hours\n  Te.isPM = Ua, Te.meridiem = Va, Za(\"en\", { ordinalParse: /\\d{1,2}(th|st|nd|rd)/, ordinal: function ordinal(a) {\n      var b = a % 10,\n          c = 1 === t(a % 100 / 10) ? \"th\" : 1 === b ? \"st\" : 2 === b ? \"nd\" : 3 === b ? \"rd\" : \"th\";return a + c;\n    } }),\n  // Side effect imports\n  a.lang = w(\"moment.lang is deprecated. Use moment.locale instead.\", Za), a.langData = w(\"moment.langData is deprecated. Use moment.localeData instead.\", ab);var Ue = Math.abs,\n      Ve = cd(\"ms\"),\n      We = cd(\"s\"),\n      Xe = cd(\"m\"),\n      Ye = cd(\"h\"),\n      Ze = cd(\"d\"),\n      $e = cd(\"w\"),\n      _e = cd(\"M\"),\n      af = cd(\"y\"),\n      bf = ed(\"milliseconds\"),\n      cf = ed(\"seconds\"),\n      df = ed(\"minutes\"),\n      ef = ed(\"hours\"),\n      ff = ed(\"days\"),\n      gf = ed(\"months\"),\n      hf = ed(\"years\"),\n      jf = Math.round,\n      kf = { s: 45, // seconds to minute\n    m: 45, // minutes to hour\n    h: 22, // hours to day\n    d: 26, // days to month\n    M: 11 },\n      lf = Math.abs,\n      mf = vb.prototype;mf.abs = Uc, mf.add = Wc, mf.subtract = Xc, mf.as = ad, mf.asMilliseconds = Ve, mf.asSeconds = We, mf.asMinutes = Xe, mf.asHours = Ye, mf.asDays = Ze, mf.asWeeks = $e, mf.asMonths = _e, mf.asYears = af, mf.valueOf = bd, mf._bubble = Zc, mf.get = dd, mf.milliseconds = bf, mf.seconds = cf, mf.minutes = df, mf.hours = ef, mf.days = ff, mf.weeks = fd, mf.months = gf, mf.years = hf, mf.humanize = kd, mf.toISOString = ld, mf.toString = ld, mf.toJSON = ld, mf.locale = jc, mf.localeData = kc,\n  // Deprecations\n  mf.toIsoString = w(\"toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)\", ld), mf.lang = Le,\n  // Side effect imports\n  // FORMATTING\n  T(\"X\", 0, 0, \"unix\"), T(\"x\", 0, 0, \"valueOf\"),\n  // PARSING\n  Y(\"x\", Rd), Y(\"X\", Ud), aa(\"X\", function (a, b, c) {\n    c._d = new Date(1e3 * parseFloat(a, 10));\n  }), aa(\"x\", function (a, b, c) {\n    c._d = new Date(t(a));\n  }),\n  // Side effect imports\n  a.version = \"2.15.0\", b(rb), a.fn = Se, a.min = tb, a.max = ub, a.now = Fe, a.utc = j, a.unix = Jc, a.months = Pc, a.isDate = f, a.locale = Za, a.invalid = n, a.duration = Nb, a.isMoment = r, a.weekdays = Rc, a.parseZone = Kc, a.localeData = ab, a.isDuration = wb, a.monthsShort = Qc, a.weekdaysMin = Tc, a.defineLocale = $a, a.updateLocale = _a, a.locales = bb, a.weekdaysShort = Sc, a.normalizeUnits = J, a.relativeTimeRounding = id, a.relativeTimeThreshold = jd, a.calendarFormat = Tb, a.prototype = Se;var nf = a;return nf;\n});\n//# sourceMappingURL=data:application/json;base64,","deps":{}},"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\resources\\scripts\\components\\chat-pane.js":{"file":"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\resources\\scripts\\components\\chat-pane.js","source":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.ChatPaneComponent = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**\r\nreated by Chad on 2016-09-12.\r\nn\n// jquery plugin\n\nvar _jquery = require('jquery');\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nrequire('jquery.nicescroll');\n\nvar _knockout = require('knockout');\n\nvar _knockout2 = _interopRequireDefault(_knockout);\n\nvar _moment = require('moment');\n\nvar _moment2 = _interopRequireDefault(_moment);\n\nvar _models = require('../models');\n\nvar _util = require('../util');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar ChatPaneViewModel = function () {\n    function ChatPaneViewModel(params) {\n        var _this = this;\n\n        _classCallCheck(this, ChatPaneViewModel);\n\n        this.me = params.me;\n        this.channel = params.channel;\n        this.newMessage = _knockout2.default.observable(\"\");\n        this.messages = _knockout2.default.observableArray();\n        this.typing = _knockout2.default.observableArray();\n        (0, _util.applyUserTypingHandler)(this);\n\n        this.name = _knockout2.default.computed(function () {\n            if (!_this.me()) {\n                return 'Unknown';\n            }\n\n            return _this.me().name;\n        });\n\n        this.channel.subscribe(function (channel) {\n            _this.messages([]);\n\n            channel.getHistory().then(function (messages) {\n                messages.forEach(function (message) {\n                    _this.pushMessage(message.user, message);\n                });\n            });\n\n            channel.onNewMessage(function (user, message) {\n                // our own message, let's confirm it\n                if (_this.me().name === user.name) {\n                    return _this.confirmMessage(message);\n                }\n\n                // someone elses message, let's process it\n                return _this.pushMessage(user, message);\n            });\n        });\n    }\n\n    /**\r\n     * Broadcasts a new message from the server to test functionality\r\n     */\n\n\n    _createClass(ChatPaneViewModel, [{\n        key: 'serverBroadcast',\n        value: function serverBroadcast() {\n            _jquery2.default.get('/broadcast');\n        }\n    }, {\n        key: 'confirmMessage',\n        value: function confirmMessage(confirmedMessage) {\n            var returnMessageVM = null;\n\n            this.messages().some(function (messageVM) {\n                returnMessageVM = messageVM;\n\n                return messageVM.confirmMessage(confirmedMessage);\n            });\n\n            return returnMessageVM;\n        }\n    }, {\n        key: 'previousMessageVM',\n        value: function previousMessageVM() {\n            var vm = null;\n            var messages = this.messages();\n            var length = messages.length;\n\n            if (length > 0) {\n                vm = messages[length - 1];\n            }\n\n            return vm;\n        }\n    }, {\n        key: 'pushMessage',\n        value: function pushMessage(user, message) {\n            var isMessageLocal = this.me().name === user.name;\n            var messageVM = this.previousMessageVM();\n\n            if (messageVM !== null && messageVM.user.name === user.name) {\n                messageVM.attachMessage(message);\n            } else {\n                messageVM = new MessageViewModel(user, message, isMessageLocal);\n                this.messages.push(messageVM);\n            }\n\n            return messageVM;\n        }\n    }, {\n        key: 'send',\n        value: function send() {\n            var text = this.newMessage();\n\n            if (text.length < 1) {\n                return;\n            }\n\n            this.channel().sendMessage(text);\n            this.pushMessage(this.me(), _models.Message.newLocalMessage(this.me(), text));\n\n            this.newMessage(\"\");\n        }\n    }]);\n\n    return ChatPaneViewModel;\n}();\n\nvar MessageBlock = function MessageBlock(message) {\n    var _this2 = this;\n\n    _classCallCheck(this, MessageBlock);\n\n    this.message = _knockout2.default.observable(message);\n\n    this.text = _knockout2.default.computed(function () {\n        return _this2.message().text;\n    });\n\n    this.confirmed = _knockout2.default.computed(function () {\n        return _this2.message().isConfirmed();\n    });\n};\n\nvar MessageViewModel = function () {\n    function MessageViewModel(user, message, isMessageLocal) {\n        _classCallCheck(this, MessageViewModel);\n\n        this.user = user;\n        this.timestamp = _knockout2.default.observable(_moment2.default.utc(this.created_at).local().format('LLL'));\n        this.name = _knockout2.default.observable(user.name);\n        this.messageBlocks = _knockout2.default.observableArray([new MessageBlock(message)]);\n        this.isMessageLocal = _knockout2.default.observable(isMessageLocal);\n    }\n\n    _createClass(MessageViewModel, [{\n        key: 'confirmMessage',\n        value: function confirmMessage(confirmedMessage) {\n            this.messageBlocks().some(function (block) {\n                if (!block.confirmed() && block.text() === confirmedMessage.text) {\n                    block.message(confirmedMessage);\n                    return true;\n                }\n\n                return false;\n            });\n        }\n    }, {\n        key: 'attachMessage',\n        value: function attachMessage(message) {\n            this.messageBlocks.push(new MessageBlock(message));\n        }\n    }]);\n\n    return MessageViewModel;\n}();\n\nvar ChatPaneComponent = exports.ChatPaneComponent = {\n    viewModel: ChatPaneViewModel,\n    template: \"<div class=\\\"chat\\\">\\r\\n    <div class=\\\"top\\\">\\r\\n        <div class=\\\"avatar\\\">\\r\\n            <img width=\\\"50\\\" height=\\\"50\\\" src=\\\"http://cs625730.vk.me/v625730358/1126a/qEjM1AnybRA.jpg\\\">\\r\\n        </div>\\r\\n        <div class=\\\"info\\\">\\r\\n            <div class=\\\"name\\\" data-bind=\\\"text: name()\\\">Your Name</div>\\r\\n            <!--                <div class=\\\"count\\\">already 1 902 messages</div>-->\\r\\n        </div>\\r\\n        <div style=\\\"display: inline-block; float: right;\\\">\\r\\n            <button id=\\\"send-test-general\\\" data-bind=\\\"click: serverBroadcast\\\">Send Server Message\\r\\n            </button>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <ul class=\\\"messages\\\" data-bind=\\\"niceScroll: {autoscroll: true}, foreach: messages()\\\">\\r\\n        <li data-bind=\\\"css: { 'message-local': isMessageLocal(), 'message-friend': !isMessageLocal() }\\\">\\r\\n            <div class=\\\"head\\\">\\r\\n                <span class=\\\"time\\\" data-bind=\\\"text: timestamp()\\\"></span>\\r\\n                <span class=\\\"name\\\" data-bind=\\\"text: name()\\\"></span>\\r\\n            </div>\\r\\n            <div class=\\\"message\\\" data-bind=\\\"foreach: messageBlocks()\\\">\\r\\n                <div data-bind=\\\"css: {'message-unconfirmed': !confirmed()}, text: text()\\\"></div>\\r\\n            </div>\\r\\n        </li>\\r\\n    </ul>\\r\\n\\r\\n    <div class=\\\"is-typing\\\" data-bind=\\\"foreach: typing()\\\">\\r\\n        <span data-bind=\\\"text: name\\\">X</span> is typing...\\r\\n    </div>\\r\\n\\r\\n    <form action=\\\"#\\\" id=\\\"new-message-form\\\" class=\\\"write-form\\\" data-bind=\\\"submit: send\\\">\\r\\n                <textarea class=\\\"new-message-area\\\" placeholder=\\\"Type your message\\\" name=\\\"e\\\" rows=\\\"2\\\"\\r\\n                          maxlength=\\\"256\\\"\\r\\n                          data-bind=\\\"textInput: newMessage, submitOnEnter\\\"></textarea>\\r\\n        <i class=\\\"fa fa-picture-o\\\"></i>\\r\\n        <i class=\\\"fa fa-file-o\\\"></i>\\r\\n        <input class=\\\"btn btn-default send\\\" type=\\\"submit\\\" value=\\\"send\\\"\\r\\n               data-bind=\\\"enabled: newMessage().length > 0\\\"/>\\r\\n    </form>\\r\\n</div>\"\n};\n//# sourceMappingURL=data:application/json;base64,","deps":{"../models":"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\resources\\scripts\\models.js","../util":"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\resources\\scripts\\util.js","jquery.nicescroll":"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\node_modules\\jquery.nicescroll\\jquery.nicescroll.js","jquery":"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\node_modules\\jquery\\dist\\jquery.js","knockout":"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\node_modules\\knockout\\build\\output\\knockout-latest.debug.js","moment":"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\node_modules\\moment\\min\\moment.min.js"}},"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\node_modules\\bootstrap\\dist\\js\\bootstrap.js":{"file":"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\node_modules\\bootstrap\\dist\\js\\bootstrap.js","source":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\n/*!\n * Bootstrap v3.3.7 (http://getbootstrap.com)\n * Copyright 2011-2016 Twitter, Inc.\n * Licensed under the MIT license\n */\n\nif (typeof jQuery === 'undefined') {\n  throw new Error('Bootstrap\\'s JavaScript requires jQuery');\n}\n\n+function ($) {\n  'use strict';\n\n  var version = $.fn.jquery.split(' ')[0].split('.');\n  if (version[0] < 2 && version[1] < 9 || version[0] == 1 && version[1] == 9 && version[2] < 1 || version[0] > 3) {\n    throw new Error('Bootstrap\\'s JavaScript requires jQuery version 1.9.1 or higher, but lower than version 4');\n  }\n}(jQuery);\n\n/* ========================================================================\n * Bootstrap: transition.js v3.3.7\n * http://getbootstrap.com/javascript/#transitions\n * ========================================================================\n * Copyright 2011-2016 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n+function ($) {\n  'use strict';\n\n  // CSS TRANSITION SUPPORT (Shoutout: http://www.modernizr.com/)\n  // ============================================================\n\n  function transitionEnd() {\n    var el = document.createElement('bootstrap');\n\n    var transEndEventNames = {\n      WebkitTransition: 'webkitTransitionEnd',\n      MozTransition: 'transitionend',\n      OTransition: 'oTransitionEnd otransitionend',\n      transition: 'transitionend'\n    };\n\n    for (var name in transEndEventNames) {\n      if (el.style[name] !== undefined) {\n        return { end: transEndEventNames[name] };\n      }\n    }\n\n    return false; // explicit for ie8 (  ._.)\n  }\n\n  // http://blog.alexmaccaw.com/css-transitions\n  $.fn.emulateTransitionEnd = function (duration) {\n    var called = false;\n    var $el = this;\n    $(this).one('bsTransitionEnd', function () {\n      called = true;\n    });\n    var callback = function callback() {\n      if (!called) $($el).trigger($.support.transition.end);\n    };\n    setTimeout(callback, duration);\n    return this;\n  };\n\n  $(function () {\n    $.support.transition = transitionEnd();\n\n    if (!$.support.transition) return;\n\n    $.event.special.bsTransitionEnd = {\n      bindType: $.support.transition.end,\n      delegateType: $.support.transition.end,\n      handle: function handle(e) {\n        if ($(e.target).is(this)) return e.handleObj.handler.apply(this, arguments);\n      }\n    };\n  });\n}(jQuery);\n\n/* ========================================================================\n * Bootstrap: alert.js v3.3.7\n * http://getbootstrap.com/javascript/#alerts\n * ========================================================================\n * Copyright 2011-2016 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n+function ($) {\n  'use strict';\n\n  // ALERT CLASS DEFINITION\n  // ======================\n\n  var dismiss = '[data-dismiss=\"alert\"]';\n  var Alert = function Alert(el) {\n    $(el).on('click', dismiss, this.close);\n  };\n\n  Alert.VERSION = '3.3.7';\n\n  Alert.TRANSITION_DURATION = 150;\n\n  Alert.prototype.close = function (e) {\n    var $this = $(this);\n    var selector = $this.attr('data-target');\n\n    if (!selector) {\n      selector = $this.attr('href');\n      selector = selector && selector.replace(/.*(?=#[^\\s]*$)/, ''); // strip for ie7\n    }\n\n    var $parent = $(selector === '#' ? [] : selector);\n\n    if (e) e.preventDefault();\n\n    if (!$parent.length) {\n      $parent = $this.closest('.alert');\n    }\n\n    $parent.trigger(e = $.Event('close.bs.alert'));\n\n    if (e.isDefaultPrevented()) return;\n\n    $parent.removeClass('in');\n\n    function removeElement() {\n      // detach from parent, fire event then clean up data\n      $parent.detach().trigger('closed.bs.alert').remove();\n    }\n\n    $.support.transition && $parent.hasClass('fade') ? $parent.one('bsTransitionEnd', removeElement).emulateTransitionEnd(Alert.TRANSITION_DURATION) : removeElement();\n  };\n\n  // ALERT PLUGIN DEFINITION\n  // =======================\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this = $(this);\n      var data = $this.data('bs.alert');\n\n      if (!data) $this.data('bs.alert', data = new Alert(this));\n      if (typeof option == 'string') data[option].call($this);\n    });\n  }\n\n  var old = $.fn.alert;\n\n  $.fn.alert = Plugin;\n  $.fn.alert.Constructor = Alert;\n\n  // ALERT NO CONFLICT\n  // =================\n\n  $.fn.alert.noConflict = function () {\n    $.fn.alert = old;\n    return this;\n  };\n\n  // ALERT DATA-API\n  // ==============\n\n  $(document).on('click.bs.alert.data-api', dismiss, Alert.prototype.close);\n}(jQuery);\n\n/* ========================================================================\n * Bootstrap: button.js v3.3.7\n * http://getbootstrap.com/javascript/#buttons\n * ========================================================================\n * Copyright 2011-2016 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n+function ($) {\n  'use strict';\n\n  // BUTTON PUBLIC CLASS DEFINITION\n  // ==============================\n\n  var Button = function Button(element, options) {\n    this.$element = $(element);\n    this.options = $.extend({}, Button.DEFAULTS, options);\n    this.isLoading = false;\n  };\n\n  Button.VERSION = '3.3.7';\n\n  Button.DEFAULTS = {\n    loadingText: 'loading...'\n  };\n\n  Button.prototype.setState = function (state) {\n    var d = 'disabled';\n    var $el = this.$element;\n    var val = $el.is('input') ? 'val' : 'html';\n    var data = $el.data();\n\n    state += 'Text';\n\n    if (data.resetText == null) $el.data('resetText', $el[val]());\n\n    // push to event loop to allow forms to submit\n    setTimeout($.proxy(function () {\n      $el[val](data[state] == null ? this.options[state] : data[state]);\n\n      if (state == 'loadingText') {\n        this.isLoading = true;\n        $el.addClass(d).attr(d, d).prop(d, true);\n      } else if (this.isLoading) {\n        this.isLoading = false;\n        $el.removeClass(d).removeAttr(d).prop(d, false);\n      }\n    }, this), 0);\n  };\n\n  Button.prototype.toggle = function () {\n    var changed = true;\n    var $parent = this.$element.closest('[data-toggle=\"buttons\"]');\n\n    if ($parent.length) {\n      var $input = this.$element.find('input');\n      if ($input.prop('type') == 'radio') {\n        if ($input.prop('checked')) changed = false;\n        $parent.find('.active').removeClass('active');\n        this.$element.addClass('active');\n      } else if ($input.prop('type') == 'checkbox') {\n        if ($input.prop('checked') !== this.$element.hasClass('active')) changed = false;\n        this.$element.toggleClass('active');\n      }\n      $input.prop('checked', this.$element.hasClass('active'));\n      if (changed) $input.trigger('change');\n    } else {\n      this.$element.attr('aria-pressed', !this.$element.hasClass('active'));\n      this.$element.toggleClass('active');\n    }\n  };\n\n  // BUTTON PLUGIN DEFINITION\n  // ========================\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this = $(this);\n      var data = $this.data('bs.button');\n      var options = (typeof option === 'undefined' ? 'undefined' : _typeof(option)) == 'object' && option;\n\n      if (!data) $this.data('bs.button', data = new Button(this, options));\n\n      if (option == 'toggle') data.toggle();else if (option) data.setState(option);\n    });\n  }\n\n  var old = $.fn.button;\n\n  $.fn.button = Plugin;\n  $.fn.button.Constructor = Button;\n\n  // BUTTON NO CONFLICT\n  // ==================\n\n  $.fn.button.noConflict = function () {\n    $.fn.button = old;\n    return this;\n  };\n\n  // BUTTON DATA-API\n  // ===============\n\n  $(document).on('click.bs.button.data-api', '[data-toggle^=\"button\"]', function (e) {\n    var $btn = $(e.target).closest('.btn');\n    Plugin.call($btn, 'toggle');\n    if (!$(e.target).is('input[type=\"radio\"], input[type=\"checkbox\"]')) {\n      // Prevent double click on radios, and the double selections (so cancellation) on checkboxes\n      e.preventDefault();\n      // The target component still receive the focus\n      if ($btn.is('input,button')) $btn.trigger('focus');else $btn.find('input:visible,button:visible').first().trigger('focus');\n    }\n  }).on('focus.bs.button.data-api blur.bs.button.data-api', '[data-toggle^=\"button\"]', function (e) {\n    $(e.target).closest('.btn').toggleClass('focus', /^focus(in)?$/.test(e.type));\n  });\n}(jQuery);\n\n/* ========================================================================\n * Bootstrap: carousel.js v3.3.7\n * http://getbootstrap.com/javascript/#carousel\n * ========================================================================\n * Copyright 2011-2016 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n+function ($) {\n  'use strict';\n\n  // CAROUSEL CLASS DEFINITION\n  // =========================\n\n  var Carousel = function Carousel(element, options) {\n    this.$element = $(element);\n    this.$indicators = this.$element.find('.carousel-indicators');\n    this.options = options;\n    this.paused = null;\n    this.sliding = null;\n    this.interval = null;\n    this.$active = null;\n    this.$items = null;\n\n    this.options.keyboard && this.$element.on('keydown.bs.carousel', $.proxy(this.keydown, this));\n\n    this.options.pause == 'hover' && !('ontouchstart' in document.documentElement) && this.$element.on('mouseenter.bs.carousel', $.proxy(this.pause, this)).on('mouseleave.bs.carousel', $.proxy(this.cycle, this));\n  };\n\n  Carousel.VERSION = '3.3.7';\n\n  Carousel.TRANSITION_DURATION = 600;\n\n  Carousel.DEFAULTS = {\n    interval: 5000,\n    pause: 'hover',\n    wrap: true,\n    keyboard: true\n  };\n\n  Carousel.prototype.keydown = function (e) {\n    if (/input|textarea/i.test(e.target.tagName)) return;\n    switch (e.which) {\n      case 37:\n        this.prev();break;\n      case 39:\n        this.next();break;\n      default:\n        return;\n    }\n\n    e.preventDefault();\n  };\n\n  Carousel.prototype.cycle = function (e) {\n    e || (this.paused = false);\n\n    this.interval && clearInterval(this.interval);\n\n    this.options.interval && !this.paused && (this.interval = setInterval($.proxy(this.next, this), this.options.interval));\n\n    return this;\n  };\n\n  Carousel.prototype.getItemIndex = function (item) {\n    this.$items = item.parent().children('.item');\n    return this.$items.index(item || this.$active);\n  };\n\n  Carousel.prototype.getItemForDirection = function (direction, active) {\n    var activeIndex = this.getItemIndex(active);\n    var willWrap = direction == 'prev' && activeIndex === 0 || direction == 'next' && activeIndex == this.$items.length - 1;\n    if (willWrap && !this.options.wrap) return active;\n    var delta = direction == 'prev' ? -1 : 1;\n    var itemIndex = (activeIndex + delta) % this.$items.length;\n    return this.$items.eq(itemIndex);\n  };\n\n  Carousel.prototype.to = function (pos) {\n    var that = this;\n    var activeIndex = this.getItemIndex(this.$active = this.$element.find('.item.active'));\n\n    if (pos > this.$items.length - 1 || pos < 0) return;\n\n    if (this.sliding) return this.$element.one('slid.bs.carousel', function () {\n      that.to(pos);\n    }); // yes, \"slid\"\n    if (activeIndex == pos) return this.pause().cycle();\n\n    return this.slide(pos > activeIndex ? 'next' : 'prev', this.$items.eq(pos));\n  };\n\n  Carousel.prototype.pause = function (e) {\n    e || (this.paused = true);\n\n    if (this.$element.find('.next, .prev').length && $.support.transition) {\n      this.$element.trigger($.support.transition.end);\n      this.cycle(true);\n    }\n\n    this.interval = clearInterval(this.interval);\n\n    return this;\n  };\n\n  Carousel.prototype.next = function () {\n    if (this.sliding) return;\n    return this.slide('next');\n  };\n\n  Carousel.prototype.prev = function () {\n    if (this.sliding) return;\n    return this.slide('prev');\n  };\n\n  Carousel.prototype.slide = function (type, next) {\n    var $active = this.$element.find('.item.active');\n    var $next = next || this.getItemForDirection(type, $active);\n    var isCycling = this.interval;\n    var direction = type == 'next' ? 'left' : 'right';\n    var that = this;\n\n    if ($next.hasClass('active')) return this.sliding = false;\n\n    var relatedTarget = $next[0];\n    var slideEvent = $.Event('slide.bs.carousel', {\n      relatedTarget: relatedTarget,\n      direction: direction\n    });\n    this.$element.trigger(slideEvent);\n    if (slideEvent.isDefaultPrevented()) return;\n\n    this.sliding = true;\n\n    isCycling && this.pause();\n\n    if (this.$indicators.length) {\n      this.$indicators.find('.active').removeClass('active');\n      var $nextIndicator = $(this.$indicators.children()[this.getItemIndex($next)]);\n      $nextIndicator && $nextIndicator.addClass('active');\n    }\n\n    var slidEvent = $.Event('slid.bs.carousel', { relatedTarget: relatedTarget, direction: direction }); // yes, \"slid\"\n    if ($.support.transition && this.$element.hasClass('slide')) {\n      $next.addClass(type);\n      $next[0].offsetWidth; // force reflow\n      $active.addClass(direction);\n      $next.addClass(direction);\n      $active.one('bsTransitionEnd', function () {\n        $next.removeClass([type, direction].join(' ')).addClass('active');\n        $active.removeClass(['active', direction].join(' '));\n        that.sliding = false;\n        setTimeout(function () {\n          that.$element.trigger(slidEvent);\n        }, 0);\n      }).emulateTransitionEnd(Carousel.TRANSITION_DURATION);\n    } else {\n      $active.removeClass('active');\n      $next.addClass('active');\n      this.sliding = false;\n      this.$element.trigger(slidEvent);\n    }\n\n    isCycling && this.cycle();\n\n    return this;\n  };\n\n  // CAROUSEL PLUGIN DEFINITION\n  // ==========================\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this = $(this);\n      var data = $this.data('bs.carousel');\n      var options = $.extend({}, Carousel.DEFAULTS, $this.data(), (typeof option === 'undefined' ? 'undefined' : _typeof(option)) == 'object' && option);\n      var action = typeof option == 'string' ? option : options.slide;\n\n      if (!data) $this.data('bs.carousel', data = new Carousel(this, options));\n      if (typeof option == 'number') data.to(option);else if (action) data[action]();else if (options.interval) data.pause().cycle();\n    });\n  }\n\n  var old = $.fn.carousel;\n\n  $.fn.carousel = Plugin;\n  $.fn.carousel.Constructor = Carousel;\n\n  // CAROUSEL NO CONFLICT\n  // ====================\n\n  $.fn.carousel.noConflict = function () {\n    $.fn.carousel = old;\n    return this;\n  };\n\n  // CAROUSEL DATA-API\n  // =================\n\n  var clickHandler = function clickHandler(e) {\n    var href;\n    var $this = $(this);\n    var $target = $($this.attr('data-target') || (href = $this.attr('href')) && href.replace(/.*(?=#[^\\s]+$)/, '')); // strip for ie7\n    if (!$target.hasClass('carousel')) return;\n    var options = $.extend({}, $target.data(), $this.data());\n    var slideIndex = $this.attr('data-slide-to');\n    if (slideIndex) options.interval = false;\n\n    Plugin.call($target, options);\n\n    if (slideIndex) {\n      $target.data('bs.carousel').to(slideIndex);\n    }\n\n    e.preventDefault();\n  };\n\n  $(document).on('click.bs.carousel.data-api', '[data-slide]', clickHandler).on('click.bs.carousel.data-api', '[data-slide-to]', clickHandler);\n\n  $(window).on('load', function () {\n    $('[data-ride=\"carousel\"]').each(function () {\n      var $carousel = $(this);\n      Plugin.call($carousel, $carousel.data());\n    });\n  });\n}(jQuery);\n\n/* ========================================================================\n * Bootstrap: collapse.js v3.3.7\n * http://getbootstrap.com/javascript/#collapse\n * ========================================================================\n * Copyright 2011-2016 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n/* jshint latedef: false */\n\n+function ($) {\n  'use strict';\n\n  // COLLAPSE PUBLIC CLASS DEFINITION\n  // ================================\n\n  var Collapse = function Collapse(element, options) {\n    this.$element = $(element);\n    this.options = $.extend({}, Collapse.DEFAULTS, options);\n    this.$trigger = $('[data-toggle=\"collapse\"][href=\"#' + element.id + '\"],' + '[data-toggle=\"collapse\"][data-target=\"#' + element.id + '\"]');\n    this.transitioning = null;\n\n    if (this.options.parent) {\n      this.$parent = this.getParent();\n    } else {\n      this.addAriaAndCollapsedClass(this.$element, this.$trigger);\n    }\n\n    if (this.options.toggle) this.toggle();\n  };\n\n  Collapse.VERSION = '3.3.7';\n\n  Collapse.TRANSITION_DURATION = 350;\n\n  Collapse.DEFAULTS = {\n    toggle: true\n  };\n\n  Collapse.prototype.dimension = function () {\n    var hasWidth = this.$element.hasClass('width');\n    return hasWidth ? 'width' : 'height';\n  };\n\n  Collapse.prototype.show = function () {\n    if (this.transitioning || this.$element.hasClass('in')) return;\n\n    var activesData;\n    var actives = this.$parent && this.$parent.children('.panel').children('.in, .collapsing');\n\n    if (actives && actives.length) {\n      activesData = actives.data('bs.collapse');\n      if (activesData && activesData.transitioning) return;\n    }\n\n    var startEvent = $.Event('show.bs.collapse');\n    this.$element.trigger(startEvent);\n    if (startEvent.isDefaultPrevented()) return;\n\n    if (actives && actives.length) {\n      Plugin.call(actives, 'hide');\n      activesData || actives.data('bs.collapse', null);\n    }\n\n    var dimension = this.dimension();\n\n    this.$element.removeClass('collapse').addClass('collapsing')[dimension](0).attr('aria-expanded', true);\n\n    this.$trigger.removeClass('collapsed').attr('aria-expanded', true);\n\n    this.transitioning = 1;\n\n    var complete = function complete() {\n      this.$element.removeClass('collapsing').addClass('collapse in')[dimension]('');\n      this.transitioning = 0;\n      this.$element.trigger('shown.bs.collapse');\n    };\n\n    if (!$.support.transition) return complete.call(this);\n\n    var scrollSize = $.camelCase(['scroll', dimension].join('-'));\n\n    this.$element.one('bsTransitionEnd', $.proxy(complete, this)).emulateTransitionEnd(Collapse.TRANSITION_DURATION)[dimension](this.$element[0][scrollSize]);\n  };\n\n  Collapse.prototype.hide = function () {\n    if (this.transitioning || !this.$element.hasClass('in')) return;\n\n    var startEvent = $.Event('hide.bs.collapse');\n    this.$element.trigger(startEvent);\n    if (startEvent.isDefaultPrevented()) return;\n\n    var dimension = this.dimension();\n\n    this.$element[dimension](this.$element[dimension]())[0].offsetHeight;\n\n    this.$element.addClass('collapsing').removeClass('collapse in').attr('aria-expanded', false);\n\n    this.$trigger.addClass('collapsed').attr('aria-expanded', false);\n\n    this.transitioning = 1;\n\n    var complete = function complete() {\n      this.transitioning = 0;\n      this.$element.removeClass('collapsing').addClass('collapse').trigger('hidden.bs.collapse');\n    };\n\n    if (!$.support.transition) return complete.call(this);\n\n    this.$element[dimension](0).one('bsTransitionEnd', $.proxy(complete, this)).emulateTransitionEnd(Collapse.TRANSITION_DURATION);\n  };\n\n  Collapse.prototype.toggle = function () {\n    this[this.$element.hasClass('in') ? 'hide' : 'show']();\n  };\n\n  Collapse.prototype.getParent = function () {\n    return $(this.options.parent).find('[data-toggle=\"collapse\"][data-parent=\"' + this.options.parent + '\"]').each($.proxy(function (i, element) {\n      var $element = $(element);\n      this.addAriaAndCollapsedClass(getTargetFromTrigger($element), $element);\n    }, this)).end();\n  };\n\n  Collapse.prototype.addAriaAndCollapsedClass = function ($element, $trigger) {\n    var isOpen = $element.hasClass('in');\n\n    $element.attr('aria-expanded', isOpen);\n    $trigger.toggleClass('collapsed', !isOpen).attr('aria-expanded', isOpen);\n  };\n\n  function getTargetFromTrigger($trigger) {\n    var href;\n    var target = $trigger.attr('data-target') || (href = $trigger.attr('href')) && href.replace(/.*(?=#[^\\s]+$)/, ''); // strip for ie7\n\n    return $(target);\n  }\n\n  // COLLAPSE PLUGIN DEFINITION\n  // ==========================\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this = $(this);\n      var data = $this.data('bs.collapse');\n      var options = $.extend({}, Collapse.DEFAULTS, $this.data(), (typeof option === 'undefined' ? 'undefined' : _typeof(option)) == 'object' && option);\n\n      if (!data && options.toggle && /show|hide/.test(option)) options.toggle = false;\n      if (!data) $this.data('bs.collapse', data = new Collapse(this, options));\n      if (typeof option == 'string') data[option]();\n    });\n  }\n\n  var old = $.fn.collapse;\n\n  $.fn.collapse = Plugin;\n  $.fn.collapse.Constructor = Collapse;\n\n  // COLLAPSE NO CONFLICT\n  // ====================\n\n  $.fn.collapse.noConflict = function () {\n    $.fn.collapse = old;\n    return this;\n  };\n\n  // COLLAPSE DATA-API\n  // =================\n\n  $(document).on('click.bs.collapse.data-api', '[data-toggle=\"collapse\"]', function (e) {\n    var $this = $(this);\n\n    if (!$this.attr('data-target')) e.preventDefault();\n\n    var $target = getTargetFromTrigger($this);\n    var data = $target.data('bs.collapse');\n    var option = data ? 'toggle' : $this.data();\n\n    Plugin.call($target, option);\n  });\n}(jQuery);\n\n/* ========================================================================\n * Bootstrap: dropdown.js v3.3.7\n * http://getbootstrap.com/javascript/#dropdowns\n * ========================================================================\n * Copyright 2011-2016 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n+function ($) {\n  'use strict';\n\n  // DROPDOWN CLASS DEFINITION\n  // =========================\n\n  var backdrop = '.dropdown-backdrop';\n  var toggle = '[data-toggle=\"dropdown\"]';\n  var Dropdown = function Dropdown(element) {\n    $(element).on('click.bs.dropdown', this.toggle);\n  };\n\n  Dropdown.VERSION = '3.3.7';\n\n  function getParent($this) {\n    var selector = $this.attr('data-target');\n\n    if (!selector) {\n      selector = $this.attr('href');\n      selector = selector && /#[A-Za-z]/.test(selector) && selector.replace(/.*(?=#[^\\s]*$)/, ''); // strip for ie7\n    }\n\n    var $parent = selector && $(selector);\n\n    return $parent && $parent.length ? $parent : $this.parent();\n  }\n\n  function clearMenus(e) {\n    if (e && e.which === 3) return;\n    $(backdrop).remove();\n    $(toggle).each(function () {\n      var $this = $(this);\n      var $parent = getParent($this);\n      var relatedTarget = { relatedTarget: this };\n\n      if (!$parent.hasClass('open')) return;\n\n      if (e && e.type == 'click' && /input|textarea/i.test(e.target.tagName) && $.contains($parent[0], e.target)) return;\n\n      $parent.trigger(e = $.Event('hide.bs.dropdown', relatedTarget));\n\n      if (e.isDefaultPrevented()) return;\n\n      $this.attr('aria-expanded', 'false');\n      $parent.removeClass('open').trigger($.Event('hidden.bs.dropdown', relatedTarget));\n    });\n  }\n\n  Dropdown.prototype.toggle = function (e) {\n    var $this = $(this);\n\n    if ($this.is('.disabled, :disabled')) return;\n\n    var $parent = getParent($this);\n    var isActive = $parent.hasClass('open');\n\n    clearMenus();\n\n    if (!isActive) {\n      if ('ontouchstart' in document.documentElement && !$parent.closest('.navbar-nav').length) {\n        // if mobile we use a backdrop because click events don't delegate\n        $(document.createElement('div')).addClass('dropdown-backdrop').insertAfter($(this)).on('click', clearMenus);\n      }\n\n      var relatedTarget = { relatedTarget: this };\n      $parent.trigger(e = $.Event('show.bs.dropdown', relatedTarget));\n\n      if (e.isDefaultPrevented()) return;\n\n      $this.trigger('focus').attr('aria-expanded', 'true');\n\n      $parent.toggleClass('open').trigger($.Event('shown.bs.dropdown', relatedTarget));\n    }\n\n    return false;\n  };\n\n  Dropdown.prototype.keydown = function (e) {\n    if (!/(38|40|27|32)/.test(e.which) || /input|textarea/i.test(e.target.tagName)) return;\n\n    var $this = $(this);\n\n    e.preventDefault();\n    e.stopPropagation();\n\n    if ($this.is('.disabled, :disabled')) return;\n\n    var $parent = getParent($this);\n    var isActive = $parent.hasClass('open');\n\n    if (!isActive && e.which != 27 || isActive && e.which == 27) {\n      if (e.which == 27) $parent.find(toggle).trigger('focus');\n      return $this.trigger('click');\n    }\n\n    var desc = ' li:not(.disabled):visible a';\n    var $items = $parent.find('.dropdown-menu' + desc);\n\n    if (!$items.length) return;\n\n    var index = $items.index(e.target);\n\n    if (e.which == 38 && index > 0) index--; // up\n    if (e.which == 40 && index < $items.length - 1) index++; // down\n    if (!~index) index = 0;\n\n    $items.eq(index).trigger('focus');\n  };\n\n  // DROPDOWN PLUGIN DEFINITION\n  // ==========================\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this = $(this);\n      var data = $this.data('bs.dropdown');\n\n      if (!data) $this.data('bs.dropdown', data = new Dropdown(this));\n      if (typeof option == 'string') data[option].call($this);\n    });\n  }\n\n  var old = $.fn.dropdown;\n\n  $.fn.dropdown = Plugin;\n  $.fn.dropdown.Constructor = Dropdown;\n\n  // DROPDOWN NO CONFLICT\n  // ====================\n\n  $.fn.dropdown.noConflict = function () {\n    $.fn.dropdown = old;\n    return this;\n  };\n\n  // APPLY TO STANDARD DROPDOWN ELEMENTS\n  // ===================================\n\n  $(document).on('click.bs.dropdown.data-api', clearMenus).on('click.bs.dropdown.data-api', '.dropdown form', function (e) {\n    e.stopPropagation();\n  }).on('click.bs.dropdown.data-api', toggle, Dropdown.prototype.toggle).on('keydown.bs.dropdown.data-api', toggle, Dropdown.prototype.keydown).on('keydown.bs.dropdown.data-api', '.dropdown-menu', Dropdown.prototype.keydown);\n}(jQuery);\n\n/* ========================================================================\n * Bootstrap: modal.js v3.3.7\n * http://getbootstrap.com/javascript/#modals\n * ========================================================================\n * Copyright 2011-2016 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n+function ($) {\n  'use strict';\n\n  // MODAL CLASS DEFINITION\n  // ======================\n\n  var Modal = function Modal(element, options) {\n    this.options = options;\n    this.$body = $(document.body);\n    this.$element = $(element);\n    this.$dialog = this.$element.find('.modal-dialog');\n    this.$backdrop = null;\n    this.isShown = null;\n    this.originalBodyPad = null;\n    this.scrollbarWidth = 0;\n    this.ignoreBackdropClick = false;\n\n    if (this.options.remote) {\n      this.$element.find('.modal-content').load(this.options.remote, $.proxy(function () {\n        this.$element.trigger('loaded.bs.modal');\n      }, this));\n    }\n  };\n\n  Modal.VERSION = '3.3.7';\n\n  Modal.TRANSITION_DURATION = 300;\n  Modal.BACKDROP_TRANSITION_DURATION = 150;\n\n  Modal.DEFAULTS = {\n    backdrop: true,\n    keyboard: true,\n    show: true\n  };\n\n  Modal.prototype.toggle = function (_relatedTarget) {\n    return this.isShown ? this.hide() : this.show(_relatedTarget);\n  };\n\n  Modal.prototype.show = function (_relatedTarget) {\n    var that = this;\n    var e = $.Event('show.bs.modal', { relatedTarget: _relatedTarget });\n\n    this.$element.trigger(e);\n\n    if (this.isShown || e.isDefaultPrevented()) return;\n\n    this.isShown = true;\n\n    this.checkScrollbar();\n    this.setScrollbar();\n    this.$body.addClass('modal-open');\n\n    this.escape();\n    this.resize();\n\n    this.$element.on('click.dismiss.bs.modal', '[data-dismiss=\"modal\"]', $.proxy(this.hide, this));\n\n    this.$dialog.on('mousedown.dismiss.bs.modal', function () {\n      that.$element.one('mouseup.dismiss.bs.modal', function (e) {\n        if ($(e.target).is(that.$element)) that.ignoreBackdropClick = true;\n      });\n    });\n\n    this.backdrop(function () {\n      var transition = $.support.transition && that.$element.hasClass('fade');\n\n      if (!that.$element.parent().length) {\n        that.$element.appendTo(that.$body); // don't move modals dom position\n      }\n\n      that.$element.show().scrollTop(0);\n\n      that.adjustDialog();\n\n      if (transition) {\n        that.$element[0].offsetWidth; // force reflow\n      }\n\n      that.$element.addClass('in');\n\n      that.enforceFocus();\n\n      var e = $.Event('shown.bs.modal', { relatedTarget: _relatedTarget });\n\n      transition ? that.$dialog // wait for modal to slide in\n      .one('bsTransitionEnd', function () {\n        that.$element.trigger('focus').trigger(e);\n      }).emulateTransitionEnd(Modal.TRANSITION_DURATION) : that.$element.trigger('focus').trigger(e);\n    });\n  };\n\n  Modal.prototype.hide = function (e) {\n    if (e) e.preventDefault();\n\n    e = $.Event('hide.bs.modal');\n\n    this.$element.trigger(e);\n\n    if (!this.isShown || e.isDefaultPrevented()) return;\n\n    this.isShown = false;\n\n    this.escape();\n    this.resize();\n\n    $(document).off('focusin.bs.modal');\n\n    this.$element.removeClass('in').off('click.dismiss.bs.modal').off('mouseup.dismiss.bs.modal');\n\n    this.$dialog.off('mousedown.dismiss.bs.modal');\n\n    $.support.transition && this.$element.hasClass('fade') ? this.$element.one('bsTransitionEnd', $.proxy(this.hideModal, this)).emulateTransitionEnd(Modal.TRANSITION_DURATION) : this.hideModal();\n  };\n\n  Modal.prototype.enforceFocus = function () {\n    $(document).off('focusin.bs.modal') // guard against infinite focus loop\n    .on('focusin.bs.modal', $.proxy(function (e) {\n      if (document !== e.target && this.$element[0] !== e.target && !this.$element.has(e.target).length) {\n        this.$element.trigger('focus');\n      }\n    }, this));\n  };\n\n  Modal.prototype.escape = function () {\n    if (this.isShown && this.options.keyboard) {\n      this.$element.on('keydown.dismiss.bs.modal', $.proxy(function (e) {\n        e.which == 27 && this.hide();\n      }, this));\n    } else if (!this.isShown) {\n      this.$element.off('keydown.dismiss.bs.modal');\n    }\n  };\n\n  Modal.prototype.resize = function () {\n    if (this.isShown) {\n      $(window).on('resize.bs.modal', $.proxy(this.handleUpdate, this));\n    } else {\n      $(window).off('resize.bs.modal');\n    }\n  };\n\n  Modal.prototype.hideModal = function () {\n    var that = this;\n    this.$element.hide();\n    this.backdrop(function () {\n      that.$body.removeClass('modal-open');\n      that.resetAdjustments();\n      that.resetScrollbar();\n      that.$element.trigger('hidden.bs.modal');\n    });\n  };\n\n  Modal.prototype.removeBackdrop = function () {\n    this.$backdrop && this.$backdrop.remove();\n    this.$backdrop = null;\n  };\n\n  Modal.prototype.backdrop = function (callback) {\n    var that = this;\n    var animate = this.$element.hasClass('fade') ? 'fade' : '';\n\n    if (this.isShown && this.options.backdrop) {\n      var doAnimate = $.support.transition && animate;\n\n      this.$backdrop = $(document.createElement('div')).addClass('modal-backdrop ' + animate).appendTo(this.$body);\n\n      this.$element.on('click.dismiss.bs.modal', $.proxy(function (e) {\n        if (this.ignoreBackdropClick) {\n          this.ignoreBackdropClick = false;\n          return;\n        }\n        if (e.target !== e.currentTarget) return;\n        this.options.backdrop == 'static' ? this.$element[0].focus() : this.hide();\n      }, this));\n\n      if (doAnimate) this.$backdrop[0].offsetWidth; // force reflow\n\n      this.$backdrop.addClass('in');\n\n      if (!callback) return;\n\n      doAnimate ? this.$backdrop.one('bsTransitionEnd', callback).emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) : callback();\n    } else if (!this.isShown && this.$backdrop) {\n      this.$backdrop.removeClass('in');\n\n      var callbackRemove = function callbackRemove() {\n        that.removeBackdrop();\n        callback && callback();\n      };\n      $.support.transition && this.$element.hasClass('fade') ? this.$backdrop.one('bsTransitionEnd', callbackRemove).emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) : callbackRemove();\n    } else if (callback) {\n      callback();\n    }\n  };\n\n  // these following methods are used to handle overflowing modals\n\n  Modal.prototype.handleUpdate = function () {\n    this.adjustDialog();\n  };\n\n  Modal.prototype.adjustDialog = function () {\n    var modalIsOverflowing = this.$element[0].scrollHeight > document.documentElement.clientHeight;\n\n    this.$element.css({\n      paddingLeft: !this.bodyIsOverflowing && modalIsOverflowing ? this.scrollbarWidth : '',\n      paddingRight: this.bodyIsOverflowing && !modalIsOverflowing ? this.scrollbarWidth : ''\n    });\n  };\n\n  Modal.prototype.resetAdjustments = function () {\n    this.$element.css({\n      paddingLeft: '',\n      paddingRight: ''\n    });\n  };\n\n  Modal.prototype.checkScrollbar = function () {\n    var fullWindowWidth = window.innerWidth;\n    if (!fullWindowWidth) {\n      // workaround for missing window.innerWidth in IE8\n      var documentElementRect = document.documentElement.getBoundingClientRect();\n      fullWindowWidth = documentElementRect.right - Math.abs(documentElementRect.left);\n    }\n    this.bodyIsOverflowing = document.body.clientWidth < fullWindowWidth;\n    this.scrollbarWidth = this.measureScrollbar();\n  };\n\n  Modal.prototype.setScrollbar = function () {\n    var bodyPad = parseInt(this.$body.css('padding-right') || 0, 10);\n    this.originalBodyPad = document.body.style.paddingRight || '';\n    if (this.bodyIsOverflowing) this.$body.css('padding-right', bodyPad + this.scrollbarWidth);\n  };\n\n  Modal.prototype.resetScrollbar = function () {\n    this.$body.css('padding-right', this.originalBodyPad);\n  };\n\n  Modal.prototype.measureScrollbar = function () {\n    // thx walsh\n    var scrollDiv = document.createElement('div');\n    scrollDiv.className = 'modal-scrollbar-measure';\n    this.$body.append(scrollDiv);\n    var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n    this.$body[0].removeChild(scrollDiv);\n    return scrollbarWidth;\n  };\n\n  // MODAL PLUGIN DEFINITION\n  // =======================\n\n  function Plugin(option, _relatedTarget) {\n    return this.each(function () {\n      var $this = $(this);\n      var data = $this.data('bs.modal');\n      var options = $.extend({}, Modal.DEFAULTS, $this.data(), (typeof option === 'undefined' ? 'undefined' : _typeof(option)) == 'object' && option);\n\n      if (!data) $this.data('bs.modal', data = new Modal(this, options));\n      if (typeof option == 'string') data[option](_relatedTarget);else if (options.show) data.show(_relatedTarget);\n    });\n  }\n\n  var old = $.fn.modal;\n\n  $.fn.modal = Plugin;\n  $.fn.modal.Constructor = Modal;\n\n  // MODAL NO CONFLICT\n  // =================\n\n  $.fn.modal.noConflict = function () {\n    $.fn.modal = old;\n    return this;\n  };\n\n  // MODAL DATA-API\n  // ==============\n\n  $(document).on('click.bs.modal.data-api', '[data-toggle=\"modal\"]', function (e) {\n    var $this = $(this);\n    var href = $this.attr('href');\n    var $target = $($this.attr('data-target') || href && href.replace(/.*(?=#[^\\s]+$)/, '')); // strip for ie7\n    var option = $target.data('bs.modal') ? 'toggle' : $.extend({ remote: !/#/.test(href) && href }, $target.data(), $this.data());\n\n    if ($this.is('a')) e.preventDefault();\n\n    $target.one('show.bs.modal', function (showEvent) {\n      if (showEvent.isDefaultPrevented()) return; // only register focus restorer if modal will actually get shown\n      $target.one('hidden.bs.modal', function () {\n        $this.is(':visible') && $this.trigger('focus');\n      });\n    });\n    Plugin.call($target, option, this);\n  });\n}(jQuery);\n\n/* ========================================================================\n * Bootstrap: tooltip.js v3.3.7\n * http://getbootstrap.com/javascript/#tooltip\n * Inspired by the original jQuery.tipsy by Jason Frame\n * ========================================================================\n * Copyright 2011-2016 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n+function ($) {\n  'use strict';\n\n  // TOOLTIP PUBLIC CLASS DEFINITION\n  // ===============================\n\n  var Tooltip = function Tooltip(element, options) {\n    this.type = null;\n    this.options = null;\n    this.enabled = null;\n    this.timeout = null;\n    this.hoverState = null;\n    this.$element = null;\n    this.inState = null;\n\n    this.init('tooltip', element, options);\n  };\n\n  Tooltip.VERSION = '3.3.7';\n\n  Tooltip.TRANSITION_DURATION = 150;\n\n  Tooltip.DEFAULTS = {\n    animation: true,\n    placement: 'top',\n    selector: false,\n    template: '<div class=\"tooltip\" role=\"tooltip\"><div class=\"tooltip-arrow\"></div><div class=\"tooltip-inner\"></div></div>',\n    trigger: 'hover focus',\n    title: '',\n    delay: 0,\n    html: false,\n    container: false,\n    viewport: {\n      selector: 'body',\n      padding: 0\n    }\n  };\n\n  Tooltip.prototype.init = function (type, element, options) {\n    this.enabled = true;\n    this.type = type;\n    this.$element = $(element);\n    this.options = this.getOptions(options);\n    this.$viewport = this.options.viewport && $($.isFunction(this.options.viewport) ? this.options.viewport.call(this, this.$element) : this.options.viewport.selector || this.options.viewport);\n    this.inState = { click: false, hover: false, focus: false };\n\n    if (this.$element[0] instanceof document.constructor && !this.options.selector) {\n      throw new Error('`selector` option must be specified when initializing ' + this.type + ' on the window.document object!');\n    }\n\n    var triggers = this.options.trigger.split(' ');\n\n    for (var i = triggers.length; i--;) {\n      var trigger = triggers[i];\n\n      if (trigger == 'click') {\n        this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this));\n      } else if (trigger != 'manual') {\n        var eventIn = trigger == 'hover' ? 'mouseenter' : 'focusin';\n        var eventOut = trigger == 'hover' ? 'mouseleave' : 'focusout';\n\n        this.$element.on(eventIn + '.' + this.type, this.options.selector, $.proxy(this.enter, this));\n        this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this));\n      }\n    }\n\n    this.options.selector ? this._options = $.extend({}, this.options, { trigger: 'manual', selector: '' }) : this.fixTitle();\n  };\n\n  Tooltip.prototype.getDefaults = function () {\n    return Tooltip.DEFAULTS;\n  };\n\n  Tooltip.prototype.getOptions = function (options) {\n    options = $.extend({}, this.getDefaults(), this.$element.data(), options);\n\n    if (options.delay && typeof options.delay == 'number') {\n      options.delay = {\n        show: options.delay,\n        hide: options.delay\n      };\n    }\n\n    return options;\n  };\n\n  Tooltip.prototype.getDelegateOptions = function () {\n    var options = {};\n    var defaults = this.getDefaults();\n\n    this._options && $.each(this._options, function (key, value) {\n      if (defaults[key] != value) options[key] = value;\n    });\n\n    return options;\n  };\n\n  Tooltip.prototype.enter = function (obj) {\n    var self = obj instanceof this.constructor ? obj : $(obj.currentTarget).data('bs.' + this.type);\n\n    if (!self) {\n      self = new this.constructor(obj.currentTarget, this.getDelegateOptions());\n      $(obj.currentTarget).data('bs.' + this.type, self);\n    }\n\n    if (obj instanceof $.Event) {\n      self.inState[obj.type == 'focusin' ? 'focus' : 'hover'] = true;\n    }\n\n    if (self.tip().hasClass('in') || self.hoverState == 'in') {\n      self.hoverState = 'in';\n      return;\n    }\n\n    clearTimeout(self.timeout);\n\n    self.hoverState = 'in';\n\n    if (!self.options.delay || !self.options.delay.show) return self.show();\n\n    self.timeout = setTimeout(function () {\n      if (self.hoverState == 'in') self.show();\n    }, self.options.delay.show);\n  };\n\n  Tooltip.prototype.isInStateTrue = function () {\n    for (var key in this.inState) {\n      if (this.inState[key]) return true;\n    }\n\n    return false;\n  };\n\n  Tooltip.prototype.leave = function (obj) {\n    var self = obj instanceof this.constructor ? obj : $(obj.currentTarget).data('bs.' + this.type);\n\n    if (!self) {\n      self = new this.constructor(obj.currentTarget, this.getDelegateOptions());\n      $(obj.currentTarget).data('bs.' + this.type, self);\n    }\n\n    if (obj instanceof $.Event) {\n      self.inState[obj.type == 'focusout' ? 'focus' : 'hover'] = false;\n    }\n\n    if (self.isInStateTrue()) return;\n\n    clearTimeout(self.timeout);\n\n    self.hoverState = 'out';\n\n    if (!self.options.delay || !self.options.delay.hide) return self.hide();\n\n    self.timeout = setTimeout(function () {\n      if (self.hoverState == 'out') self.hide();\n    }, self.options.delay.hide);\n  };\n\n  Tooltip.prototype.show = function () {\n    var e = $.Event('show.bs.' + this.type);\n\n    if (this.hasContent() && this.enabled) {\n      this.$element.trigger(e);\n\n      var inDom = $.contains(this.$element[0].ownerDocument.documentElement, this.$element[0]);\n      if (e.isDefaultPrevented() || !inDom) return;\n      var that = this;\n\n      var $tip = this.tip();\n\n      var tipId = this.getUID(this.type);\n\n      this.setContent();\n      $tip.attr('id', tipId);\n      this.$element.attr('aria-describedby', tipId);\n\n      if (this.options.animation) $tip.addClass('fade');\n\n      var placement = typeof this.options.placement == 'function' ? this.options.placement.call(this, $tip[0], this.$element[0]) : this.options.placement;\n\n      var autoToken = /\\s?auto?\\s?/i;\n      var autoPlace = autoToken.test(placement);\n      if (autoPlace) placement = placement.replace(autoToken, '') || 'top';\n\n      $tip.detach().css({ top: 0, left: 0, display: 'block' }).addClass(placement).data('bs.' + this.type, this);\n\n      this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element);\n      this.$element.trigger('inserted.bs.' + this.type);\n\n      var pos = this.getPosition();\n      var actualWidth = $tip[0].offsetWidth;\n      var actualHeight = $tip[0].offsetHeight;\n\n      if (autoPlace) {\n        var orgPlacement = placement;\n        var viewportDim = this.getPosition(this.$viewport);\n\n        placement = placement == 'bottom' && pos.bottom + actualHeight > viewportDim.bottom ? 'top' : placement == 'top' && pos.top - actualHeight < viewportDim.top ? 'bottom' : placement == 'right' && pos.right + actualWidth > viewportDim.width ? 'left' : placement == 'left' && pos.left - actualWidth < viewportDim.left ? 'right' : placement;\n\n        $tip.removeClass(orgPlacement).addClass(placement);\n      }\n\n      var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight);\n\n      this.applyPlacement(calculatedOffset, placement);\n\n      var complete = function complete() {\n        var prevHoverState = that.hoverState;\n        that.$element.trigger('shown.bs.' + that.type);\n        that.hoverState = null;\n\n        if (prevHoverState == 'out') that.leave(that);\n      };\n\n      $.support.transition && this.$tip.hasClass('fade') ? $tip.one('bsTransitionEnd', complete).emulateTransitionEnd(Tooltip.TRANSITION_DURATION) : complete();\n    }\n  };\n\n  Tooltip.prototype.applyPlacement = function (offset, placement) {\n    var $tip = this.tip();\n    var width = $tip[0].offsetWidth;\n    var height = $tip[0].offsetHeight;\n\n    // manually read margins because getBoundingClientRect includes difference\n    var marginTop = parseInt($tip.css('margin-top'), 10);\n    var marginLeft = parseInt($tip.css('margin-left'), 10);\n\n    // we must check for NaN for ie 8/9\n    if (isNaN(marginTop)) marginTop = 0;\n    if (isNaN(marginLeft)) marginLeft = 0;\n\n    offset.top += marginTop;\n    offset.left += marginLeft;\n\n    // $.fn.offset doesn't round pixel values\n    // so we use setOffset directly with our own function B-0\n    $.offset.setOffset($tip[0], $.extend({\n      using: function using(props) {\n        $tip.css({\n          top: Math.round(props.top),\n          left: Math.round(props.left)\n        });\n      }\n    }, offset), 0);\n\n    $tip.addClass('in');\n\n    // check to see if placing tip in new offset caused the tip to resize itself\n    var actualWidth = $tip[0].offsetWidth;\n    var actualHeight = $tip[0].offsetHeight;\n\n    if (placement == 'top' && actualHeight != height) {\n      offset.top = offset.top + height - actualHeight;\n    }\n\n    var delta = this.getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\n\n    if (delta.left) offset.left += delta.left;else offset.top += delta.top;\n\n    var isVertical = /top|bottom/.test(placement);\n    var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\n    var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\n\n    $tip.offset(offset);\n    this.replaceArrow(arrowDelta, $tip[0][arrowOffsetPosition], isVertical);\n  };\n\n  Tooltip.prototype.replaceArrow = function (delta, dimension, isVertical) {\n    this.arrow().css(isVertical ? 'left' : 'top', 50 * (1 - delta / dimension) + '%').css(isVertical ? 'top' : 'left', '');\n  };\n\n  Tooltip.prototype.setContent = function () {\n    var $tip = this.tip();\n    var title = this.getTitle();\n\n    $tip.find('.tooltip-inner')[this.options.html ? 'html' : 'text'](title);\n    $tip.removeClass('fade in top bottom left right');\n  };\n\n  Tooltip.prototype.hide = function (callback) {\n    var that = this;\n    var $tip = $(this.$tip);\n    var e = $.Event('hide.bs.' + this.type);\n\n    function complete() {\n      if (that.hoverState != 'in') $tip.detach();\n      if (that.$element) {\n        // TODO: Check whether guarding this code with this `if` is really necessary.\n        that.$element.removeAttr('aria-describedby').trigger('hidden.bs.' + that.type);\n      }\n      callback && callback();\n    }\n\n    this.$element.trigger(e);\n\n    if (e.isDefaultPrevented()) return;\n\n    $tip.removeClass('in');\n\n    $.support.transition && $tip.hasClass('fade') ? $tip.one('bsTransitionEnd', complete).emulateTransitionEnd(Tooltip.TRANSITION_DURATION) : complete();\n\n    this.hoverState = null;\n\n    return this;\n  };\n\n  Tooltip.prototype.fixTitle = function () {\n    var $e = this.$element;\n    if ($e.attr('title') || typeof $e.attr('data-original-title') != 'string') {\n      $e.attr('data-original-title', $e.attr('title') || '').attr('title', '');\n    }\n  };\n\n  Tooltip.prototype.hasContent = function () {\n    return this.getTitle();\n  };\n\n  Tooltip.prototype.getPosition = function ($element) {\n    $element = $element || this.$element;\n\n    var el = $element[0];\n    var isBody = el.tagName == 'BODY';\n\n    var elRect = el.getBoundingClientRect();\n    if (elRect.width == null) {\n      // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n      elRect = $.extend({}, elRect, { width: elRect.right - elRect.left, height: elRect.bottom - elRect.top });\n    }\n    var isSvg = window.SVGElement && el instanceof window.SVGElement;\n    // Avoid using $.offset() on SVGs since it gives incorrect results in jQuery 3.\n    // See https://github.com/twbs/bootstrap/issues/20280\n    var elOffset = isBody ? { top: 0, left: 0 } : isSvg ? null : $element.offset();\n    var scroll = { scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.scrollTop() };\n    var outerDims = isBody ? { width: $(window).width(), height: $(window).height() } : null;\n\n    return $.extend({}, elRect, scroll, outerDims, elOffset);\n  };\n\n  Tooltip.prototype.getCalculatedOffset = function (placement, pos, actualWidth, actualHeight) {\n    return placement == 'bottom' ? { top: pos.top + pos.height, left: pos.left + pos.width / 2 - actualWidth / 2 } : placement == 'top' ? { top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2 } : placement == 'left' ? { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth } :\n    /* placement == 'right' */{ top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width };\n  };\n\n  Tooltip.prototype.getViewportAdjustedDelta = function (placement, pos, actualWidth, actualHeight) {\n    var delta = { top: 0, left: 0 };\n    if (!this.$viewport) return delta;\n\n    var viewportPadding = this.options.viewport && this.options.viewport.padding || 0;\n    var viewportDimensions = this.getPosition(this.$viewport);\n\n    if (/right|left/.test(placement)) {\n      var topEdgeOffset = pos.top - viewportPadding - viewportDimensions.scroll;\n      var bottomEdgeOffset = pos.top + viewportPadding - viewportDimensions.scroll + actualHeight;\n      if (topEdgeOffset < viewportDimensions.top) {\n        // top overflow\n        delta.top = viewportDimensions.top - topEdgeOffset;\n      } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) {\n        // bottom overflow\n        delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\n      }\n    } else {\n      var leftEdgeOffset = pos.left - viewportPadding;\n      var rightEdgeOffset = pos.left + viewportPadding + actualWidth;\n      if (leftEdgeOffset < viewportDimensions.left) {\n        // left overflow\n        delta.left = viewportDimensions.left - leftEdgeOffset;\n      } else if (rightEdgeOffset > viewportDimensions.right) {\n        // right overflow\n        delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\n      }\n    }\n\n    return delta;\n  };\n\n  Tooltip.prototype.getTitle = function () {\n    var title;\n    var $e = this.$element;\n    var o = this.options;\n\n    title = $e.attr('data-original-title') || (typeof o.title == 'function' ? o.title.call($e[0]) : o.title);\n\n    return title;\n  };\n\n  Tooltip.prototype.getUID = function (prefix) {\n    do {\n      prefix += ~~(Math.random() * 1000000);\n    } while (document.getElementById(prefix));\n    return prefix;\n  };\n\n  Tooltip.prototype.tip = function () {\n    if (!this.$tip) {\n      this.$tip = $(this.options.template);\n      if (this.$tip.length != 1) {\n        throw new Error(this.type + ' `template` option must consist of exactly 1 top-level element!');\n      }\n    }\n    return this.$tip;\n  };\n\n  Tooltip.prototype.arrow = function () {\n    return this.$arrow = this.$arrow || this.tip().find('.tooltip-arrow');\n  };\n\n  Tooltip.prototype.enable = function () {\n    this.enabled = true;\n  };\n\n  Tooltip.prototype.disable = function () {\n    this.enabled = false;\n  };\n\n  Tooltip.prototype.toggleEnabled = function () {\n    this.enabled = !this.enabled;\n  };\n\n  Tooltip.prototype.toggle = function (e) {\n    var self = this;\n    if (e) {\n      self = $(e.currentTarget).data('bs.' + this.type);\n      if (!self) {\n        self = new this.constructor(e.currentTarget, this.getDelegateOptions());\n        $(e.currentTarget).data('bs.' + this.type, self);\n      }\n    }\n\n    if (e) {\n      self.inState.click = !self.inState.click;\n      if (self.isInStateTrue()) self.enter(self);else self.leave(self);\n    } else {\n      self.tip().hasClass('in') ? self.leave(self) : self.enter(self);\n    }\n  };\n\n  Tooltip.prototype.destroy = function () {\n    var that = this;\n    clearTimeout(this.timeout);\n    this.hide(function () {\n      that.$element.off('.' + that.type).removeData('bs.' + that.type);\n      if (that.$tip) {\n        that.$tip.detach();\n      }\n      that.$tip = null;\n      that.$arrow = null;\n      that.$viewport = null;\n      that.$element = null;\n    });\n  };\n\n  // TOOLTIP PLUGIN DEFINITION\n  // =========================\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this = $(this);\n      var data = $this.data('bs.tooltip');\n      var options = (typeof option === 'undefined' ? 'undefined' : _typeof(option)) == 'object' && option;\n\n      if (!data && /destroy|hide/.test(option)) return;\n      if (!data) $this.data('bs.tooltip', data = new Tooltip(this, options));\n      if (typeof option == 'string') data[option]();\n    });\n  }\n\n  var old = $.fn.tooltip;\n\n  $.fn.tooltip = Plugin;\n  $.fn.tooltip.Constructor = Tooltip;\n\n  // TOOLTIP NO CONFLICT\n  // ===================\n\n  $.fn.tooltip.noConflict = function () {\n    $.fn.tooltip = old;\n    return this;\n  };\n}(jQuery);\n\n/* ========================================================================\n * Bootstrap: popover.js v3.3.7\n * http://getbootstrap.com/javascript/#popovers\n * ========================================================================\n * Copyright 2011-2016 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n+function ($) {\n  'use strict';\n\n  // POPOVER PUBLIC CLASS DEFINITION\n  // ===============================\n\n  var Popover = function Popover(element, options) {\n    this.init('popover', element, options);\n  };\n\n  if (!$.fn.tooltip) throw new Error('Popover requires tooltip.js');\n\n  Popover.VERSION = '3.3.7';\n\n  Popover.DEFAULTS = $.extend({}, $.fn.tooltip.Constructor.DEFAULTS, {\n    placement: 'right',\n    trigger: 'click',\n    content: '',\n    template: '<div class=\"popover\" role=\"tooltip\"><div class=\"arrow\"></div><h3 class=\"popover-title\"></h3><div class=\"popover-content\"></div></div>'\n  });\n\n  // NOTE: POPOVER EXTENDS tooltip.js\n  // ================================\n\n  Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype);\n\n  Popover.prototype.constructor = Popover;\n\n  Popover.prototype.getDefaults = function () {\n    return Popover.DEFAULTS;\n  };\n\n  Popover.prototype.setContent = function () {\n    var $tip = this.tip();\n    var title = this.getTitle();\n    var content = this.getContent();\n\n    $tip.find('.popover-title')[this.options.html ? 'html' : 'text'](title);\n    $tip.find('.popover-content').children().detach().end()[// we use append for html objects to maintain js events\n    this.options.html ? typeof content == 'string' ? 'html' : 'append' : 'text'](content);\n\n    $tip.removeClass('fade top bottom left right in');\n\n    // IE8 doesn't accept hiding via the `:empty` pseudo selector, we have to do\n    // this manually by checking the contents.\n    if (!$tip.find('.popover-title').html()) $tip.find('.popover-title').hide();\n  };\n\n  Popover.prototype.hasContent = function () {\n    return this.getTitle() || this.getContent();\n  };\n\n  Popover.prototype.getContent = function () {\n    var $e = this.$element;\n    var o = this.options;\n\n    return $e.attr('data-content') || (typeof o.content == 'function' ? o.content.call($e[0]) : o.content);\n  };\n\n  Popover.prototype.arrow = function () {\n    return this.$arrow = this.$arrow || this.tip().find('.arrow');\n  };\n\n  // POPOVER PLUGIN DEFINITION\n  // =========================\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this = $(this);\n      var data = $this.data('bs.popover');\n      var options = (typeof option === 'undefined' ? 'undefined' : _typeof(option)) == 'object' && option;\n\n      if (!data && /destroy|hide/.test(option)) return;\n      if (!data) $this.data('bs.popover', data = new Popover(this, options));\n      if (typeof option == 'string') data[option]();\n    });\n  }\n\n  var old = $.fn.popover;\n\n  $.fn.popover = Plugin;\n  $.fn.popover.Constructor = Popover;\n\n  // POPOVER NO CONFLICT\n  // ===================\n\n  $.fn.popover.noConflict = function () {\n    $.fn.popover = old;\n    return this;\n  };\n}(jQuery);\n\n/* ========================================================================\n * Bootstrap: scrollspy.js v3.3.7\n * http://getbootstrap.com/javascript/#scrollspy\n * ========================================================================\n * Copyright 2011-2016 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n+function ($) {\n  'use strict';\n\n  // SCROLLSPY CLASS DEFINITION\n  // ==========================\n\n  function ScrollSpy(element, options) {\n    this.$body = $(document.body);\n    this.$scrollElement = $(element).is(document.body) ? $(window) : $(element);\n    this.options = $.extend({}, ScrollSpy.DEFAULTS, options);\n    this.selector = (this.options.target || '') + ' .nav li > a';\n    this.offsets = [];\n    this.targets = [];\n    this.activeTarget = null;\n    this.scrollHeight = 0;\n\n    this.$scrollElement.on('scroll.bs.scrollspy', $.proxy(this.process, this));\n    this.refresh();\n    this.process();\n  }\n\n  ScrollSpy.VERSION = '3.3.7';\n\n  ScrollSpy.DEFAULTS = {\n    offset: 10\n  };\n\n  ScrollSpy.prototype.getScrollHeight = function () {\n    return this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight);\n  };\n\n  ScrollSpy.prototype.refresh = function () {\n    var that = this;\n    var offsetMethod = 'offset';\n    var offsetBase = 0;\n\n    this.offsets = [];\n    this.targets = [];\n    this.scrollHeight = this.getScrollHeight();\n\n    if (!$.isWindow(this.$scrollElement[0])) {\n      offsetMethod = 'position';\n      offsetBase = this.$scrollElement.scrollTop();\n    }\n\n    this.$body.find(this.selector).map(function () {\n      var $el = $(this);\n      var href = $el.data('target') || $el.attr('href');\n      var $href = /^#./.test(href) && $(href);\n\n      return $href && $href.length && $href.is(':visible') && [[$href[offsetMethod]().top + offsetBase, href]] || null;\n    }).sort(function (a, b) {\n      return a[0] - b[0];\n    }).each(function () {\n      that.offsets.push(this[0]);\n      that.targets.push(this[1]);\n    });\n  };\n\n  ScrollSpy.prototype.process = function () {\n    var scrollTop = this.$scrollElement.scrollTop() + this.options.offset;\n    var scrollHeight = this.getScrollHeight();\n    var maxScroll = this.options.offset + scrollHeight - this.$scrollElement.height();\n    var offsets = this.offsets;\n    var targets = this.targets;\n    var activeTarget = this.activeTarget;\n    var i;\n\n    if (this.scrollHeight != scrollHeight) {\n      this.refresh();\n    }\n\n    if (scrollTop >= maxScroll) {\n      return activeTarget != (i = targets[targets.length - 1]) && this.activate(i);\n    }\n\n    if (activeTarget && scrollTop < offsets[0]) {\n      this.activeTarget = null;\n      return this.clear();\n    }\n\n    for (i = offsets.length; i--;) {\n      activeTarget != targets[i] && scrollTop >= offsets[i] && (offsets[i + 1] === undefined || scrollTop < offsets[i + 1]) && this.activate(targets[i]);\n    }\n  };\n\n  ScrollSpy.prototype.activate = function (target) {\n    this.activeTarget = target;\n\n    this.clear();\n\n    var selector = this.selector + '[data-target=\"' + target + '\"],' + this.selector + '[href=\"' + target + '\"]';\n\n    var active = $(selector).parents('li').addClass('active');\n\n    if (active.parent('.dropdown-menu').length) {\n      active = active.closest('li.dropdown').addClass('active');\n    }\n\n    active.trigger('activate.bs.scrollspy');\n  };\n\n  ScrollSpy.prototype.clear = function () {\n    $(this.selector).parentsUntil(this.options.target, '.active').removeClass('active');\n  };\n\n  // SCROLLSPY PLUGIN DEFINITION\n  // ===========================\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this = $(this);\n      var data = $this.data('bs.scrollspy');\n      var options = (typeof option === 'undefined' ? 'undefined' : _typeof(option)) == 'object' && option;\n\n      if (!data) $this.data('bs.scrollspy', data = new ScrollSpy(this, options));\n      if (typeof option == 'string') data[option]();\n    });\n  }\n\n  var old = $.fn.scrollspy;\n\n  $.fn.scrollspy = Plugin;\n  $.fn.scrollspy.Constructor = ScrollSpy;\n\n  // SCROLLSPY NO CONFLICT\n  // =====================\n\n  $.fn.scrollspy.noConflict = function () {\n    $.fn.scrollspy = old;\n    return this;\n  };\n\n  // SCROLLSPY DATA-API\n  // ==================\n\n  $(window).on('load.bs.scrollspy.data-api', function () {\n    $('[data-spy=\"scroll\"]').each(function () {\n      var $spy = $(this);\n      Plugin.call($spy, $spy.data());\n    });\n  });\n}(jQuery);\n\n/* ========================================================================\n * Bootstrap: tab.js v3.3.7\n * http://getbootstrap.com/javascript/#tabs\n * ========================================================================\n * Copyright 2011-2016 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n+function ($) {\n  'use strict';\n\n  // TAB CLASS DEFINITION\n  // ====================\n\n  var Tab = function Tab(element) {\n    // jscs:disable requireDollarBeforejQueryAssignment\n    this.element = $(element);\n    // jscs:enable requireDollarBeforejQueryAssignment\n  };\n\n  Tab.VERSION = '3.3.7';\n\n  Tab.TRANSITION_DURATION = 150;\n\n  Tab.prototype.show = function () {\n    var $this = this.element;\n    var $ul = $this.closest('ul:not(.dropdown-menu)');\n    var selector = $this.data('target');\n\n    if (!selector) {\n      selector = $this.attr('href');\n      selector = selector && selector.replace(/.*(?=#[^\\s]*$)/, ''); // strip for ie7\n    }\n\n    if ($this.parent('li').hasClass('active')) return;\n\n    var $previous = $ul.find('.active:last a');\n    var hideEvent = $.Event('hide.bs.tab', {\n      relatedTarget: $this[0]\n    });\n    var showEvent = $.Event('show.bs.tab', {\n      relatedTarget: $previous[0]\n    });\n\n    $previous.trigger(hideEvent);\n    $this.trigger(showEvent);\n\n    if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) return;\n\n    var $target = $(selector);\n\n    this.activate($this.closest('li'), $ul);\n    this.activate($target, $target.parent(), function () {\n      $previous.trigger({\n        type: 'hidden.bs.tab',\n        relatedTarget: $this[0]\n      });\n      $this.trigger({\n        type: 'shown.bs.tab',\n        relatedTarget: $previous[0]\n      });\n    });\n  };\n\n  Tab.prototype.activate = function (element, container, callback) {\n    var $active = container.find('> .active');\n    var transition = callback && $.support.transition && ($active.length && $active.hasClass('fade') || !!container.find('> .fade').length);\n\n    function next() {\n      $active.removeClass('active').find('> .dropdown-menu > .active').removeClass('active').end().find('[data-toggle=\"tab\"]').attr('aria-expanded', false);\n\n      element.addClass('active').find('[data-toggle=\"tab\"]').attr('aria-expanded', true);\n\n      if (transition) {\n        element[0].offsetWidth; // reflow for transition\n        element.addClass('in');\n      } else {\n        element.removeClass('fade');\n      }\n\n      if (element.parent('.dropdown-menu').length) {\n        element.closest('li.dropdown').addClass('active').end().find('[data-toggle=\"tab\"]').attr('aria-expanded', true);\n      }\n\n      callback && callback();\n    }\n\n    $active.length && transition ? $active.one('bsTransitionEnd', next).emulateTransitionEnd(Tab.TRANSITION_DURATION) : next();\n\n    $active.removeClass('in');\n  };\n\n  // TAB PLUGIN DEFINITION\n  // =====================\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this = $(this);\n      var data = $this.data('bs.tab');\n\n      if (!data) $this.data('bs.tab', data = new Tab(this));\n      if (typeof option == 'string') data[option]();\n    });\n  }\n\n  var old = $.fn.tab;\n\n  $.fn.tab = Plugin;\n  $.fn.tab.Constructor = Tab;\n\n  // TAB NO CONFLICT\n  // ===============\n\n  $.fn.tab.noConflict = function () {\n    $.fn.tab = old;\n    return this;\n  };\n\n  // TAB DATA-API\n  // ============\n\n  var clickHandler = function clickHandler(e) {\n    e.preventDefault();\n    Plugin.call($(this), 'show');\n  };\n\n  $(document).on('click.bs.tab.data-api', '[data-toggle=\"tab\"]', clickHandler).on('click.bs.tab.data-api', '[data-toggle=\"pill\"]', clickHandler);\n}(jQuery);\n\n/* ========================================================================\n * Bootstrap: affix.js v3.3.7\n * http://getbootstrap.com/javascript/#affix\n * ========================================================================\n * Copyright 2011-2016 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n+function ($) {\n  'use strict';\n\n  // AFFIX CLASS DEFINITION\n  // ======================\n\n  var Affix = function Affix(element, options) {\n    this.options = $.extend({}, Affix.DEFAULTS, options);\n\n    this.$target = $(this.options.target).on('scroll.bs.affix.data-api', $.proxy(this.checkPosition, this)).on('click.bs.affix.data-api', $.proxy(this.checkPositionWithEventLoop, this));\n\n    this.$element = $(element);\n    this.affixed = null;\n    this.unpin = null;\n    this.pinnedOffset = null;\n\n    this.checkPosition();\n  };\n\n  Affix.VERSION = '3.3.7';\n\n  Affix.RESET = 'affix affix-top affix-bottom';\n\n  Affix.DEFAULTS = {\n    offset: 0,\n    target: window\n  };\n\n  Affix.prototype.getState = function (scrollHeight, height, offsetTop, offsetBottom) {\n    var scrollTop = this.$target.scrollTop();\n    var position = this.$element.offset();\n    var targetHeight = this.$target.height();\n\n    if (offsetTop != null && this.affixed == 'top') return scrollTop < offsetTop ? 'top' : false;\n\n    if (this.affixed == 'bottom') {\n      if (offsetTop != null) return scrollTop + this.unpin <= position.top ? false : 'bottom';\n      return scrollTop + targetHeight <= scrollHeight - offsetBottom ? false : 'bottom';\n    }\n\n    var initializing = this.affixed == null;\n    var colliderTop = initializing ? scrollTop : position.top;\n    var colliderHeight = initializing ? targetHeight : height;\n\n    if (offsetTop != null && scrollTop <= offsetTop) return 'top';\n    if (offsetBottom != null && colliderTop + colliderHeight >= scrollHeight - offsetBottom) return 'bottom';\n\n    return false;\n  };\n\n  Affix.prototype.getPinnedOffset = function () {\n    if (this.pinnedOffset) return this.pinnedOffset;\n    this.$element.removeClass(Affix.RESET).addClass('affix');\n    var scrollTop = this.$target.scrollTop();\n    var position = this.$element.offset();\n    return this.pinnedOffset = position.top - scrollTop;\n  };\n\n  Affix.prototype.checkPositionWithEventLoop = function () {\n    setTimeout($.proxy(this.checkPosition, this), 1);\n  };\n\n  Affix.prototype.checkPosition = function () {\n    if (!this.$element.is(':visible')) return;\n\n    var height = this.$element.height();\n    var offset = this.options.offset;\n    var offsetTop = offset.top;\n    var offsetBottom = offset.bottom;\n    var scrollHeight = Math.max($(document).height(), $(document.body).height());\n\n    if ((typeof offset === 'undefined' ? 'undefined' : _typeof(offset)) != 'object') offsetBottom = offsetTop = offset;\n    if (typeof offsetTop == 'function') offsetTop = offset.top(this.$element);\n    if (typeof offsetBottom == 'function') offsetBottom = offset.bottom(this.$element);\n\n    var affix = this.getState(scrollHeight, height, offsetTop, offsetBottom);\n\n    if (this.affixed != affix) {\n      if (this.unpin != null) this.$element.css('top', '');\n\n      var affixType = 'affix' + (affix ? '-' + affix : '');\n      var e = $.Event(affixType + '.bs.affix');\n\n      this.$element.trigger(e);\n\n      if (e.isDefaultPrevented()) return;\n\n      this.affixed = affix;\n      this.unpin = affix == 'bottom' ? this.getPinnedOffset() : null;\n\n      this.$element.removeClass(Affix.RESET).addClass(affixType).trigger(affixType.replace('affix', 'affixed') + '.bs.affix');\n    }\n\n    if (affix == 'bottom') {\n      this.$element.offset({\n        top: scrollHeight - height - offsetBottom\n      });\n    }\n  };\n\n  // AFFIX PLUGIN DEFINITION\n  // =======================\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this = $(this);\n      var data = $this.data('bs.affix');\n      var options = (typeof option === 'undefined' ? 'undefined' : _typeof(option)) == 'object' && option;\n\n      if (!data) $this.data('bs.affix', data = new Affix(this, options));\n      if (typeof option == 'string') data[option]();\n    });\n  }\n\n  var old = $.fn.affix;\n\n  $.fn.affix = Plugin;\n  $.fn.affix.Constructor = Affix;\n\n  // AFFIX NO CONFLICT\n  // =================\n\n  $.fn.affix.noConflict = function () {\n    $.fn.affix = old;\n    return this;\n  };\n\n  // AFFIX DATA-API\n  // ==============\n\n  $(window).on('load', function () {\n    $('[data-spy=\"affix\"]').each(function () {\n      var $spy = $(this);\n      var data = $spy.data();\n\n      data.offset = data.offset || {};\n\n      if (data.offsetBottom != null) data.offset.bottom = data.offsetBottom;\n      if (data.offsetTop != null) data.offset.top = data.offsetTop;\n\n      Plugin.call($spy, data);\n    });\n  });\n}(jQuery);\n//# sourceMappingURL=data:application/json;base64,","deps":{}},"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\resources\\scripts\\components\\login.js":{"file":"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\resources\\scripts\\components\\login.js","source":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.LoginComponent = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**\r\nreated by Chad on 2016-09-13.\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      */\n\n\nvar _jquery = require('jquery');\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nvar _knockout = require('knockout');\n\nvar _knockout2 = _interopRequireDefault(_knockout);\n\nvar _models = require('../models');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nrequire('bootstrap');\n\nvar LoginViewModel = function () {\n    function LoginViewModel(params) {\n        var _this = this;\n\n        _classCallCheck(this, LoginViewModel);\n\n        this.$login = (0, _jquery2.default)('#login');\n        this.$modal = (0, _jquery2.default)('#login-modal');\n\n        this.name = _knockout2.default.observable(\"\");\n        this.password = _knockout2.default.observable(\"\");\n        this.error = _knockout2.default.observable(\"\");\n        this.authenticating = _knockout2.default.observable(false);\n        this.onAuthSuccess = params.onAuthSuccess;\n\n        this.isAuthenticating = _knockout2.default.computed(function () {\n            return _this.authenticating();\n        });\n\n        if (!params.skipAuth) {\n            this.showModal();\n        }\n    }\n\n    _createClass(LoginViewModel, [{\n        key: 'setAuthenticating',\n        value: function setAuthenticating(bool) {\n            console.log('Authenticating', bool);\n            this.authenticating(bool);\n        }\n    }, {\n        key: 'attemptAuth',\n        value: function attemptAuth() {\n            var _this2 = this;\n\n            this.setAuthenticating(true);\n\n            _jquery2.default.ajax({\n                type: \"POST\",\n                url: '/api/v1/user/auth',\n                data: {\n                    name: this.name(),\n                    password: this.password()\n                },\n                dataType: 'json'\n            }).done(function (userData) {\n                console.log('Login Success', userData);\n                _this2.hideModal();\n\n                _this2.onAuthSuccess(new _models.User(userData));\n            }).fail(function (data) {\n                console.log('Login Error', data);\n\n                _this2.error(data.responseJSON.error.message);\n            }).always(function (data) {\n                _this2.setAuthenticating(false);\n            });\n        }\n    }, {\n        key: 'showModal',\n        value: function showModal() {\n            this.$modal.modal({\n                backdrop: 'static',\n                keyboard: false\n            });\n        }\n    }, {\n        key: 'hideModal',\n        value: function hideModal() {\n            var _this3 = this;\n\n            this.$modal.modal('hide');\n            this.$modal.on('hidden.bs.modal', function () {\n                _this3.$login.remove();\n            });\n        }\n    }]);\n\n    return LoginViewModel;\n}();\n\nvar LoginComponent = exports.LoginComponent = {\n    viewModel: LoginViewModel,\n    template: \"<div id=\\\"login\\\" data-bind=\\\"\\\">\\r\\n    <div class=\\\"modal fade\\\" id=\\\"login-modal\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" aria-labelledby=\\\"myModalLabel\\\"\\r\\n         aria-hidden=\\\"true\\\">\\r\\n        <div class=\\\"modal-dialog\\\">\\r\\n            <div class=\\\"loginmodal-container\\\">\\r\\n                <h1>Login to Your Account</h1><br>\\r\\n                <form action=\\\"#\\\" data-bind=\\\"submit: attemptAuth\\\">\\r\\n                    <input type=\\\"text\\\" placeholder=\\\"Name\\\" data-bind=\\\"textInput: name\\\">\\r\\n                    <input type=\\\"password\\\" placeholder=\\\"Password\\\" data-bind=\\\"textInput: password\\\">\\r\\n                    <input type=\\\"submit\\\" class=\\\"login loginmodal-submit\\\" value=\\\"Login\\\"\\r\\n                           data-bind=\\\"disable: isAuthenticating()\\\">\\r\\n                </form>\\r\\n\\r\\n                <div style=\\\"text-align: center; color: orangered\\\" data-bind=\\\"text: error()\\\">\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\"\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxvZ2luLmpzIl0sIm5hbWVzIjpbInJlcXVpcmUiLCJMb2dpblZpZXdNb2RlbCIsInBhcmFtcyIsIiRsb2dpbiIsIiRtb2RhbCIsIm5hbWUiLCJvYnNlcnZhYmxlIiwicGFzc3dvcmQiLCJlcnJvciIsImF1dGhlbnRpY2F0aW5nIiwib25BdXRoU3VjY2VzcyIsImlzQXV0aGVudGljYXRpbmciLCJjb21wdXRlZCIsInNraXBBdXRoIiwic2hvd01vZGFsIiwiYm9vbCIsImNvbnNvbGUiLCJsb2ciLCJzZXRBdXRoZW50aWNhdGluZyIsImFqYXgiLCJ0eXBlIiwidXJsIiwiZGF0YSIsImRhdGFUeXBlIiwiZG9uZSIsInVzZXJEYXRhIiwiaGlkZU1vZGFsIiwiZmFpbCIsInJlc3BvbnNlSlNPTiIsIm1lc3NhZ2UiLCJhbHdheXMiLCJtb2RhbCIsImJhY2tkcm9wIiwia2V5Ym9hcmQiLCJvbiIsInJlbW92ZSIsIkxvZ2luQ29tcG9uZW50Iiwidmlld01vZGVsIiwidGVtcGxhdGUiLCJyZWFkRmlsZVN5bmMiLCJfX2Rpcm5hbWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7cWpCQUFBOzs7OztBQUdBOzs7O0FBR0E7Ozs7QUFDQTs7Ozs7O0FBSEFBLFFBQVEsV0FBUjs7SUFLTUMsYztBQUNGLDRCQUFZQyxNQUFaLEVBQW9CO0FBQUE7O0FBQUE7O0FBQ2hCLGFBQUtDLE1BQUwsR0FBYyxzQkFBRSxRQUFGLENBQWQ7QUFDQSxhQUFLQyxNQUFMLEdBQWMsc0JBQUUsY0FBRixDQUFkOztBQUVBLGFBQUtDLElBQUwsR0FBWSxtQkFBR0MsVUFBSCxDQUFjLEVBQWQsQ0FBWjtBQUNBLGFBQUtDLFFBQUwsR0FBZ0IsbUJBQUdELFVBQUgsQ0FBYyxFQUFkLENBQWhCO0FBQ0EsYUFBS0UsS0FBTCxHQUFhLG1CQUFHRixVQUFILENBQWMsRUFBZCxDQUFiO0FBQ0EsYUFBS0csY0FBTCxHQUFzQixtQkFBR0gsVUFBSCxDQUFjLEtBQWQsQ0FBdEI7QUFDQSxhQUFLSSxhQUFMLEdBQXFCUixPQUFPUSxhQUE1Qjs7QUFFQSxhQUFLQyxnQkFBTCxHQUF3QixtQkFBR0MsUUFBSCxDQUFZLFlBQU07QUFDdEMsbUJBQU8sTUFBS0gsY0FBTCxFQUFQO0FBQ0gsU0FGdUIsQ0FBeEI7O0FBSUEsWUFBSSxDQUFDUCxPQUFPVyxRQUFaLEVBQXNCO0FBQ2xCLGlCQUFLQyxTQUFMO0FBQ0g7QUFDSjs7OzswQ0FFaUJDLEksRUFBTTtBQUNwQkMsb0JBQVFDLEdBQVIsQ0FBWSxnQkFBWixFQUE4QkYsSUFBOUI7QUFDQSxpQkFBS04sY0FBTCxDQUFvQk0sSUFBcEI7QUFDSDs7O3NDQUVhO0FBQUE7O0FBQ1YsaUJBQUtHLGlCQUFMLENBQXVCLElBQXZCOztBQUVBLDZCQUFFQyxJQUFGLENBQU87QUFDQ0Msc0JBQVUsTUFEWDtBQUVDQyxxQkFBVSxtQkFGWDtBQUdDQyxzQkFBVTtBQUNOakIsMEJBQVUsS0FBS0EsSUFBTCxFQURKO0FBRU5FLDhCQUFVLEtBQUtBLFFBQUw7QUFGSixpQkFIWDtBQU9DZ0IsMEJBQVU7QUFQWCxhQUFQLEVBU0tDLElBVEwsQ0FTVSxVQUFDQyxRQUFELEVBQWM7QUFDaEJULHdCQUFRQyxHQUFSLENBQVksZUFBWixFQUE2QlEsUUFBN0I7QUFDQSx1QkFBS0MsU0FBTDs7QUFFQSx1QkFBS2hCLGFBQUwsQ0FBbUIsaUJBQVNlLFFBQVQsQ0FBbkI7QUFDSCxhQWRMLEVBZUtFLElBZkwsQ0FlVSxVQUFDTCxJQUFELEVBQVU7QUFDWk4sd0JBQVFDLEdBQVIsQ0FBWSxhQUFaLEVBQTJCSyxJQUEzQjs7QUFFQSx1QkFBS2QsS0FBTCxDQUFXYyxLQUFLTSxZQUFMLENBQWtCcEIsS0FBbEIsQ0FBd0JxQixPQUFuQztBQUNILGFBbkJMLEVBb0JLQyxNQXBCTCxDQW9CWSxVQUFDUixJQUFELEVBQVU7QUFDZCx1QkFBS0osaUJBQUwsQ0FBdUIsS0FBdkI7QUFDSCxhQXRCTDtBQXVCSDs7O29DQUVXO0FBQ1IsaUJBQUtkLE1BQUwsQ0FBWTJCLEtBQVosQ0FBa0I7QUFDZEMsMEJBQVUsUUFESTtBQUVkQywwQkFBVTtBQUZJLGFBQWxCO0FBSUg7OztvQ0FFVztBQUFBOztBQUNSLGlCQUFLN0IsTUFBTCxDQUFZMkIsS0FBWixDQUFrQixNQUFsQjtBQUNBLGlCQUFLM0IsTUFBTCxDQUFZOEIsRUFBWixDQUFlLGlCQUFmLEVBQWtDLFlBQU07QUFDcEMsdUJBQUsvQixNQUFMLENBQVlnQyxNQUFaO0FBQ0gsYUFGRDtBQUdIOzs7Ozs7QUFHRSxJQUFJQywwQ0FBaUI7QUFDeEJDLGVBQVdwQyxjQURhO0FBRXhCcUMsY0FBVXRDLFFBQVEsSUFBUixFQUFjdUMsWUFBZCxDQUEyQkMsWUFBWSxhQUF2QyxFQUFzRCxNQUF0RDtBQUZjLENBQXJCIiwiZmlsZSI6ImxvZ2luLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENyZWF0ZWQgYnkgQ2hhZCBvbiAyMDE2LTA5LTEzLlxyXG4gKi9cclxuaW1wb3J0ICQgZnJvbSAnanF1ZXJ5JztcclxucmVxdWlyZSgnYm9vdHN0cmFwJyk7XHJcblxyXG5pbXBvcnQga28gZnJvbSAna25vY2tvdXQnO1xyXG5pbXBvcnQgeyBVc2VyfSBmcm9tICcuLi9tb2RlbHMnO1xyXG5cclxuY2xhc3MgTG9naW5WaWV3TW9kZWwge1xyXG4gICAgY29uc3RydWN0b3IocGFyYW1zKSB7XHJcbiAgICAgICAgdGhpcy4kbG9naW4gPSAkKCcjbG9naW4nKTtcclxuICAgICAgICB0aGlzLiRtb2RhbCA9ICQoJyNsb2dpbi1tb2RhbCcpO1xyXG5cclxuICAgICAgICB0aGlzLm5hbWUgPSBrby5vYnNlcnZhYmxlKFwiXCIpO1xyXG4gICAgICAgIHRoaXMucGFzc3dvcmQgPSBrby5vYnNlcnZhYmxlKFwiXCIpO1xyXG4gICAgICAgIHRoaXMuZXJyb3IgPSBrby5vYnNlcnZhYmxlKFwiXCIpO1xyXG4gICAgICAgIHRoaXMuYXV0aGVudGljYXRpbmcgPSBrby5vYnNlcnZhYmxlKGZhbHNlKTtcclxuICAgICAgICB0aGlzLm9uQXV0aFN1Y2Nlc3MgPSBwYXJhbXMub25BdXRoU3VjY2VzcztcclxuXHJcbiAgICAgICAgdGhpcy5pc0F1dGhlbnRpY2F0aW5nID0ga28uY29tcHV0ZWQoKCkgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hdXRoZW50aWNhdGluZygpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpZiAoIXBhcmFtcy5za2lwQXV0aCkge1xyXG4gICAgICAgICAgICB0aGlzLnNob3dNb2RhbCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzZXRBdXRoZW50aWNhdGluZyhib29sKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ0F1dGhlbnRpY2F0aW5nJywgYm9vbCk7XHJcbiAgICAgICAgdGhpcy5hdXRoZW50aWNhdGluZyhib29sKTtcclxuICAgIH1cclxuXHJcbiAgICBhdHRlbXB0QXV0aCgpIHtcclxuICAgICAgICB0aGlzLnNldEF1dGhlbnRpY2F0aW5nKHRydWUpO1xyXG5cclxuICAgICAgICAkLmFqYXgoe1xyXG4gICAgICAgICAgICAgICAgdHlwZTogICAgIFwiUE9TVFwiLFxyXG4gICAgICAgICAgICAgICAgdXJsOiAgICAgICcvYXBpL3YxL3VzZXIvYXV0aCcsXHJcbiAgICAgICAgICAgICAgICBkYXRhOiAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICAgICB0aGlzLm5hbWUoKSxcclxuICAgICAgICAgICAgICAgICAgICBwYXNzd29yZDogdGhpcy5wYXNzd29yZCgpXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZGF0YVR5cGU6ICdqc29uJ1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuZG9uZSgodXNlckRhdGEpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdMb2dpbiBTdWNjZXNzJywgdXNlckRhdGEpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5oaWRlTW9kYWwoKTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uQXV0aFN1Y2Nlc3MobmV3IFVzZXIodXNlckRhdGEpKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmZhaWwoKGRhdGEpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdMb2dpbiBFcnJvcicsIGRhdGEpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IoZGF0YS5yZXNwb25zZUpTT04uZXJyb3IubWVzc2FnZSk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5hbHdheXMoKGRhdGEpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0QXV0aGVudGljYXRpbmcoZmFsc2UpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBzaG93TW9kYWwoKSB7XHJcbiAgICAgICAgdGhpcy4kbW9kYWwubW9kYWwoe1xyXG4gICAgICAgICAgICBiYWNrZHJvcDogJ3N0YXRpYycsXHJcbiAgICAgICAgICAgIGtleWJvYXJkOiBmYWxzZVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGhpZGVNb2RhbCgpIHtcclxuICAgICAgICB0aGlzLiRtb2RhbC5tb2RhbCgnaGlkZScpO1xyXG4gICAgICAgIHRoaXMuJG1vZGFsLm9uKCdoaWRkZW4uYnMubW9kYWwnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuJGxvZ2luLnJlbW92ZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgbGV0IExvZ2luQ29tcG9uZW50ID0ge1xyXG4gICAgdmlld01vZGVsOiBMb2dpblZpZXdNb2RlbCxcclxuICAgIHRlbXBsYXRlOiByZXF1aXJlKCdmcycpLnJlYWRGaWxlU3luYyhfX2Rpcm5hbWUgKyAnL2xvZ2luLmh0bWwnLCAndXRmOCcpXHJcbn07Il19","deps":{"../models":"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\resources\\scripts\\models.js","jquery":"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\node_modules\\jquery\\dist\\jquery.js","knockout":"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\node_modules\\knockout\\build\\output\\knockout-latest.debug.js","bootstrap":"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\node_modules\\bootstrap\\dist\\js\\bootstrap.js"}},"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\resources\\scripts\\knockout-bootstrapped.js":{"file":"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\resources\\scripts\\knockout-bootstrapped.js","source":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _jquery = require('jquery');\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nrequire('jquery.nicescroll');\n\nvar _knockout = require('knockout');\n\nvar _knockout2 = _interopRequireDefault(_knockout);\n\nvar _channelList = require('./components/channel-list');\n\nvar _userList = require('./components/user-list');\n\nvar _chatPane = require('./components/chat-pane');\n\nvar _login = require('./components/login');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_knockout2.default.bindingHandlers.niceScroll = {\n    init: function init(element, valueAccessor, allBindings, viewModel, bindingContext) {\n        var $elm = (0, _jquery2.default)(element);\n        var settings = _jquery2.default.extend({\n            autohidemode: false,\n            smoothscroll: false,\n            cursorcolor: \"#cdd2d6\",\n            cursorwidth: \"8px\",\n            cursorborder: \"none\",\n            autoscroll: false\n        }, valueAccessor());\n\n        $elm.niceScroll(settings);\n\n        if (settings.autoscroll) {\n            (function () {\n                var $scroll = $elm.getNiceScroll(0);\n                var observer = new MutationObserver(function (mutations) {\n                    $scroll.resize();\n                    $scroll.doScrollTop(999999, 999);\n                });\n                var config = {\n                    childList: true,\n                    subtree: true\n                };\n\n                observer.observe(element, config);\n            })();\n        }\n    }\n}; // jquery plugin\n\n\n_knockout2.default.bindingHandlers.submitOnEnter = {\n    init: function init(element, valueAccessor, allBindings, viewModel, bindingContext) {\n        var $elm = (0, _jquery2.default)(element);\n\n        $elm.keypress(function (e) {\n            if (e.keyCode === 13 && !e.shiftKey) {\n                $elm.closest('form').submit();\n                e.preventDefault();\n            }\n        });\n    }\n};\n\n_knockout2.default.components.register('channel-list', _channelList.ChannelListComponent);\n_knockout2.default.components.register('user-list', _userList.UserListComponent);\n_knockout2.default.components.register('chat-pane', _chatPane.ChatPaneComponent);\n_knockout2.default.components.register('login', _login.LoginComponent);\n\nexports.default = _knockout2.default;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImtub2Nrb3V0LWJvb3RzdHJhcHBlZC5qcyJdLCJuYW1lcyI6WyJiaW5kaW5nSGFuZGxlcnMiLCJuaWNlU2Nyb2xsIiwiaW5pdCIsImVsZW1lbnQiLCJ2YWx1ZUFjY2Vzc29yIiwiYWxsQmluZGluZ3MiLCJ2aWV3TW9kZWwiLCJiaW5kaW5nQ29udGV4dCIsIiRlbG0iLCJzZXR0aW5ncyIsImV4dGVuZCIsImF1dG9oaWRlbW9kZSIsInNtb290aHNjcm9sbCIsImN1cnNvcmNvbG9yIiwiY3Vyc29yd2lkdGgiLCJjdXJzb3Jib3JkZXIiLCJhdXRvc2Nyb2xsIiwiJHNjcm9sbCIsImdldE5pY2VTY3JvbGwiLCJvYnNlcnZlciIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJtdXRhdGlvbnMiLCJyZXNpemUiLCJkb1Njcm9sbFRvcCIsImNvbmZpZyIsImNoaWxkTGlzdCIsInN1YnRyZWUiLCJvYnNlcnZlIiwic3VibWl0T25FbnRlciIsImtleXByZXNzIiwiZSIsImtleUNvZGUiLCJzaGlmdEtleSIsImNsb3Nlc3QiLCJzdWJtaXQiLCJwcmV2ZW50RGVmYXVsdCIsImNvbXBvbmVudHMiLCJyZWdpc3RlciJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQUVBOzs7O0FBQ0E7O0FBQ0E7Ozs7QUFFQTs7QUFDQTs7QUFDQTs7QUFDQTs7OztBQUVBLG1CQUFHQSxlQUFILENBQW1CQyxVQUFuQixHQUFnQztBQUM1QkMsVUFBTSxjQUFVQyxPQUFWLEVBQW1CQyxhQUFuQixFQUFrQ0MsV0FBbEMsRUFBK0NDLFNBQS9DLEVBQTBEQyxjQUExRCxFQUEwRTtBQUM1RSxZQUFJQyxPQUFPLHNCQUFFTCxPQUFGLENBQVg7QUFDQSxZQUFJTSxXQUFXLGlCQUFFQyxNQUFGLENBQVM7QUFDcEJDLDBCQUFjLEtBRE07QUFFcEJDLDBCQUFjLEtBRk07QUFHcEJDLHlCQUFjLFNBSE07QUFJcEJDLHlCQUFjLEtBSk07QUFLcEJDLDBCQUFjLE1BTE07QUFNcEJDLHdCQUFjO0FBTk0sU0FBVCxFQU9aWixlQVBZLENBQWY7O0FBU0FJLGFBQUtQLFVBQUwsQ0FBZ0JRLFFBQWhCOztBQUVBLFlBQUlBLFNBQVNPLFVBQWIsRUFBeUI7QUFBQTtBQUNyQixvQkFBSUMsVUFBVVQsS0FBS1UsYUFBTCxDQUFtQixDQUFuQixDQUFkO0FBQ0Esb0JBQUlDLFdBQVcsSUFBSUMsZ0JBQUosQ0FBcUIsVUFBQ0MsU0FBRCxFQUFlO0FBQy9DSiw0QkFBUUssTUFBUjtBQUNBTCw0QkFBUU0sV0FBUixDQUFvQixNQUFwQixFQUE0QixHQUE1QjtBQUNILGlCQUhjLENBQWY7QUFJQSxvQkFBSUMsU0FBUztBQUNUQywrQkFBVyxJQURGO0FBRVRDLDZCQUFXO0FBRkYsaUJBQWI7O0FBS0FQLHlCQUFTUSxPQUFULENBQWlCeEIsT0FBakIsRUFBMEJxQixNQUExQjtBQVhxQjtBQVl4QjtBQUNKO0FBM0IyQixDQUFoQyxDLENBUjRCOzs7QUFzQzVCLG1CQUFHeEIsZUFBSCxDQUFtQjRCLGFBQW5CLEdBQW1DO0FBQy9CMUIsVUFBTSxjQUFVQyxPQUFWLEVBQW1CQyxhQUFuQixFQUFrQ0MsV0FBbEMsRUFBK0NDLFNBQS9DLEVBQTBEQyxjQUExRCxFQUEwRTtBQUM1RSxZQUFJQyxPQUFPLHNCQUFFTCxPQUFGLENBQVg7O0FBRUFLLGFBQUtxQixRQUFMLENBQWMsVUFBVUMsQ0FBVixFQUFhO0FBQ3ZCLGdCQUFJQSxFQUFFQyxPQUFGLEtBQWMsRUFBZCxJQUFvQixDQUFDRCxFQUFFRSxRQUEzQixFQUFxQztBQUNqQ3hCLHFCQUFLeUIsT0FBTCxDQUFhLE1BQWIsRUFBcUJDLE1BQXJCO0FBQ0FKLGtCQUFFSyxjQUFGO0FBQ0g7QUFDSixTQUxEO0FBTUg7QUFWOEIsQ0FBbkM7O0FBYUEsbUJBQUdDLFVBQUgsQ0FBY0MsUUFBZCxDQUF1QixjQUF2QjtBQUNBLG1CQUFHRCxVQUFILENBQWNDLFFBQWQsQ0FBdUIsV0FBdkI7QUFDQSxtQkFBR0QsVUFBSCxDQUFjQyxRQUFkLENBQXVCLFdBQXZCO0FBQ0EsbUJBQUdELFVBQUgsQ0FBY0MsUUFBZCxDQUF1QixPQUF2QiIsImZpbGUiOiJrbm9ja291dC1ib290c3RyYXBwZWQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XHJcblxyXG5pbXBvcnQgJCBmcm9tICdqcXVlcnknO1xyXG5pbXBvcnQgJ2pxdWVyeS5uaWNlc2Nyb2xsJzsgLy8ganF1ZXJ5IHBsdWdpblxyXG5pbXBvcnQga28gZnJvbSAna25vY2tvdXQnO1xyXG5cclxuaW1wb3J0IHtDaGFubmVsTGlzdENvbXBvbmVudH0gZnJvbSAnLi9jb21wb25lbnRzL2NoYW5uZWwtbGlzdCc7XHJcbmltcG9ydCB7VXNlckxpc3RDb21wb25lbnR9IGZyb20gJy4vY29tcG9uZW50cy91c2VyLWxpc3QnO1xyXG5pbXBvcnQge0NoYXRQYW5lQ29tcG9uZW50fSBmcm9tICcuL2NvbXBvbmVudHMvY2hhdC1wYW5lJztcclxuaW1wb3J0IHtMb2dpbkNvbXBvbmVudH0gZnJvbSAnLi9jb21wb25lbnRzL2xvZ2luJztcclxuXHJcbmtvLmJpbmRpbmdIYW5kbGVycy5uaWNlU2Nyb2xsID0ge1xyXG4gICAgaW5pdDogZnVuY3Rpb24gKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IsIGFsbEJpbmRpbmdzLCB2aWV3TW9kZWwsIGJpbmRpbmdDb250ZXh0KSB7XHJcbiAgICAgICAgbGV0ICRlbG0gPSAkKGVsZW1lbnQpO1xyXG4gICAgICAgIGxldCBzZXR0aW5ncyA9ICQuZXh0ZW5kKHtcclxuICAgICAgICAgICAgYXV0b2hpZGVtb2RlOiBmYWxzZSxcclxuICAgICAgICAgICAgc21vb3Roc2Nyb2xsOiBmYWxzZSxcclxuICAgICAgICAgICAgY3Vyc29yY29sb3I6ICBcIiNjZGQyZDZcIixcclxuICAgICAgICAgICAgY3Vyc29yd2lkdGg6ICBcIjhweFwiLFxyXG4gICAgICAgICAgICBjdXJzb3Jib3JkZXI6IFwibm9uZVwiLFxyXG4gICAgICAgICAgICBhdXRvc2Nyb2xsOiAgIGZhbHNlXHJcbiAgICAgICAgfSwgdmFsdWVBY2Nlc3NvcigpKTtcclxuXHJcbiAgICAgICAgJGVsbS5uaWNlU2Nyb2xsKHNldHRpbmdzKTtcclxuXHJcbiAgICAgICAgaWYgKHNldHRpbmdzLmF1dG9zY3JvbGwpIHtcclxuICAgICAgICAgICAgbGV0ICRzY3JvbGwgPSAkZWxtLmdldE5pY2VTY3JvbGwoMCk7XHJcbiAgICAgICAgICAgIGxldCBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKChtdXRhdGlvbnMpID0+IHtcclxuICAgICAgICAgICAgICAgICRzY3JvbGwucmVzaXplKCk7XHJcbiAgICAgICAgICAgICAgICAkc2Nyb2xsLmRvU2Nyb2xsVG9wKDk5OTk5OSwgOTk5KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGxldCBjb25maWcgPSB7XHJcbiAgICAgICAgICAgICAgICBjaGlsZExpc3Q6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBzdWJ0cmVlOiAgIHRydWVcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIG9ic2VydmVyLm9ic2VydmUoZWxlbWVudCwgY29uZmlnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn07XHJcblxyXG5rby5iaW5kaW5nSGFuZGxlcnMuc3VibWl0T25FbnRlciA9IHtcclxuICAgIGluaXQ6IGZ1bmN0aW9uIChlbGVtZW50LCB2YWx1ZUFjY2Vzc29yLCBhbGxCaW5kaW5ncywgdmlld01vZGVsLCBiaW5kaW5nQ29udGV4dCkge1xyXG4gICAgICAgIGxldCAkZWxtID0gJChlbGVtZW50KTtcclxuXHJcbiAgICAgICAgJGVsbS5rZXlwcmVzcyhmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBpZiAoZS5rZXlDb2RlID09PSAxMyAmJiAhZS5zaGlmdEtleSkge1xyXG4gICAgICAgICAgICAgICAgJGVsbS5jbG9zZXN0KCdmb3JtJykuc3VibWl0KCk7XHJcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxufTtcclxuXHJcbmtvLmNvbXBvbmVudHMucmVnaXN0ZXIoJ2NoYW5uZWwtbGlzdCcsIENoYW5uZWxMaXN0Q29tcG9uZW50KTtcclxua28uY29tcG9uZW50cy5yZWdpc3RlcigndXNlci1saXN0JywgVXNlckxpc3RDb21wb25lbnQpO1xyXG5rby5jb21wb25lbnRzLnJlZ2lzdGVyKCdjaGF0LXBhbmUnLCBDaGF0UGFuZUNvbXBvbmVudCk7XHJcbmtvLmNvbXBvbmVudHMucmVnaXN0ZXIoJ2xvZ2luJywgTG9naW5Db21wb25lbnQpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQga287Il19","deps":{"jquery":"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\node_modules\\jquery\\dist\\jquery.js","jquery.nicescroll":"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\node_modules\\jquery.nicescroll\\jquery.nicescroll.js","./components/channel-list":"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\resources\\scripts\\components\\channel-list.js","./components/user-list":"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\resources\\scripts\\components\\user-list.js","knockout":"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\node_modules\\knockout\\build\\output\\knockout-latest.debug.js","./components/chat-pane":"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\resources\\scripts\\components\\chat-pane.js","./components/login":"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\resources\\scripts\\components\\login.js"}},"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\resources\\scripts\\main.js":{"file":"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\resources\\scripts\\main.js","source":"'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _jquery = require('jquery');\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nvar _urijs = require('urijs');\n\nvar _urijs2 = _interopRequireDefault(_urijs);\n\nvar _knockoutBootstrapped = require('./knockout-bootstrapped');\n\nvar _knockoutBootstrapped2 = _interopRequireDefault(_knockoutBootstrapped);\n\nvar _models = require('./models');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar App = function () {\n    function App() {\n        _classCallCheck(this, App);\n\n        this.skipAuth = (0, _urijs2.default)().hasQuery('skipAuth');\n        this.channel = _knockoutBootstrapped2.default.observable();\n        this.channels = _knockoutBootstrapped2.default.observableArray();\n        this.me = _knockoutBootstrapped2.default.observable();\n        this.app = this;\n\n        if (this.skipAuth) {\n            this.init(new _models.User({\n                id: 3,\n                name: 'Chad',\n                api_token: 'yXwSG6DbNCzPhQ=='\n            }));\n        }\n    }\n\n    _createClass(App, [{\n        key: 'init',\n        value: function init(me) {\n            var _this = this;\n\n            this.me(me);\n\n            _models.Channel.getAll(me).then(function (channels) {\n                channels.forEach(function (channel) {\n                    _this.channels.push(channel);\n                });\n            });\n        }\n    }, {\n        key: 'switchChannel',\n        value: function switchChannel(newChannel) {\n            if (this.channel()) {\n                this.channel().leave();\n            }\n\n            this.channel(newChannel.join());\n        }\n    }]);\n\n    return App;\n}();\n\n_knockoutBootstrapped2.default.applyBindings(new App());\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsiQXBwIiwic2tpcEF1dGgiLCJoYXNRdWVyeSIsImNoYW5uZWwiLCJvYnNlcnZhYmxlIiwiY2hhbm5lbHMiLCJvYnNlcnZhYmxlQXJyYXkiLCJtZSIsImFwcCIsImluaXQiLCJpZCIsIm5hbWUiLCJhcGlfdG9rZW4iLCJnZXRBbGwiLCJ0aGVuIiwiZm9yRWFjaCIsInB1c2giLCJuZXdDaGFubmVsIiwibGVhdmUiLCJqb2luIiwiYXBwbHlCaW5kaW5ncyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQTs7OztBQUVBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7O0lBRU1BLEc7QUFDRixtQkFBYztBQUFBOztBQUNWLGFBQUtDLFFBQUwsR0FBZ0IsdUJBQU1DLFFBQU4sQ0FBZSxVQUFmLENBQWhCO0FBQ0EsYUFBS0MsT0FBTCxHQUFlLCtCQUFHQyxVQUFILEVBQWY7QUFDQSxhQUFLQyxRQUFMLEdBQWdCLCtCQUFHQyxlQUFILEVBQWhCO0FBQ0EsYUFBS0MsRUFBTCxHQUFVLCtCQUFHSCxVQUFILEVBQVY7QUFDQSxhQUFLSSxHQUFMLEdBQVcsSUFBWDs7QUFFQSxZQUFJLEtBQUtQLFFBQVQsRUFBbUI7QUFDZixpQkFBS1EsSUFBTCxDQUFVLGlCQUFTO0FBQ2ZDLG9CQUFXLENBREk7QUFFZkMsc0JBQVcsTUFGSTtBQUdmQywyQkFBVztBQUhJLGFBQVQsQ0FBVjtBQUtIO0FBQ0o7Ozs7NkJBRUlMLEUsRUFBSTtBQUFBOztBQUNMLGlCQUFLQSxFQUFMLENBQVFBLEVBQVI7O0FBRUEsNEJBQVFNLE1BQVIsQ0FBZU4sRUFBZixFQUFtQk8sSUFBbkIsQ0FBd0IsVUFBQ1QsUUFBRCxFQUFjO0FBQ2xDQSx5QkFBU1UsT0FBVCxDQUFpQixVQUFDWixPQUFELEVBQWE7QUFDMUIsMEJBQUtFLFFBQUwsQ0FBY1csSUFBZCxDQUFtQmIsT0FBbkI7QUFDSCxpQkFGRDtBQUdILGFBSkQ7QUFLSDs7O3NDQUVhYyxVLEVBQVk7QUFDdEIsZ0JBQUksS0FBS2QsT0FBTCxFQUFKLEVBQW9CO0FBQ2hCLHFCQUFLQSxPQUFMLEdBQWVlLEtBQWY7QUFDSDs7QUFFRCxpQkFBS2YsT0FBTCxDQUFhYyxXQUFXRSxJQUFYLEVBQWI7QUFDSDs7Ozs7O0FBR0wsK0JBQUdDLGFBQUgsQ0FBaUIsSUFBSXBCLEdBQUosRUFBakIiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcclxuXHJcbmltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XHJcblxyXG5pbXBvcnQgVVJJIGZyb20gJ3VyaWpzJztcclxuaW1wb3J0IGtvIGZyb20gJy4va25vY2tvdXQtYm9vdHN0cmFwcGVkJztcclxuaW1wb3J0IHtDaGFubmVsLCBVc2VyfSBmcm9tICcuL21vZGVscyc7XHJcblxyXG5jbGFzcyBBcHAge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5za2lwQXV0aCA9IFVSSSgpLmhhc1F1ZXJ5KCdza2lwQXV0aCcpO1xyXG4gICAgICAgIHRoaXMuY2hhbm5lbCA9IGtvLm9ic2VydmFibGUoKTtcclxuICAgICAgICB0aGlzLmNoYW5uZWxzID0ga28ub2JzZXJ2YWJsZUFycmF5KCk7XHJcbiAgICAgICAgdGhpcy5tZSA9IGtvLm9ic2VydmFibGUoKTtcclxuICAgICAgICB0aGlzLmFwcCA9IHRoaXM7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnNraXBBdXRoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaW5pdChuZXcgVXNlcih7XHJcbiAgICAgICAgICAgICAgICBpZDogICAgICAgIDMsXHJcbiAgICAgICAgICAgICAgICBuYW1lOiAgICAgICdDaGFkJyxcclxuICAgICAgICAgICAgICAgIGFwaV90b2tlbjogJ3lYd1NHNkRiTkN6UGhRPT0nXHJcbiAgICAgICAgICAgIH0pKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaW5pdChtZSkge1xyXG4gICAgICAgIHRoaXMubWUobWUpO1xyXG5cclxuICAgICAgICBDaGFubmVsLmdldEFsbChtZSkudGhlbigoY2hhbm5lbHMpID0+IHtcclxuICAgICAgICAgICAgY2hhbm5lbHMuZm9yRWFjaCgoY2hhbm5lbCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jaGFubmVscy5wdXNoKGNoYW5uZWwpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBzd2l0Y2hDaGFubmVsKG5ld0NoYW5uZWwpIHtcclxuICAgICAgICBpZiAodGhpcy5jaGFubmVsKCkpIHtcclxuICAgICAgICAgICAgdGhpcy5jaGFubmVsKCkubGVhdmUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuY2hhbm5lbChuZXdDaGFubmVsLmpvaW4oKSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmtvLmFwcGx5QmluZGluZ3MobmV3IEFwcCgpKTsiXX0=","deps":{"urijs":"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\node_modules\\urijs\\src\\URI.min.js","jquery":"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\node_modules\\jquery\\dist\\jquery.js","./models":"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\resources\\scripts\\models.js","./knockout-bootstrapped":"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\resources\\scripts\\knockout-bootstrapped.js"}}},"mtimes":{"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\node_modules\\jquery\\dist\\jquery.js":1474175902092,"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\node_modules\\urijs\\src\\IPv6.js":1474175898012,"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\node_modules\\urijs\\src\\punycode.js":1474175903534,"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\node_modules\\urijs\\src\\SecondLevelDomains.js":1474175899643,"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\node_modules\\urijs\\src\\URI.min.js":1474175902342,"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\resources\\scripts\\components/channel-list.html":1473779797924,"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\resources\\scripts\\components/chat-pane.html":1473778816828,"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\resources\\scripts\\components/login.html":1473778836696,"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\resources\\scripts\\components/user-list.html":1473778936567,"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\node_modules\\knockout\\build\\output\\knockout-latest.debug.js":1474175900421,"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\node_modules\\jquery.nicescroll\\jquery.nicescroll.js":1474175897947,"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\resources\\scripts\\components\\channel-list.js":1473779702422,"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\resources\\scripts\\components\\user-list.js":1473780512520,"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\node_modules\\pusher-js\\dist\\web\\pusher.js":1474175905533,"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\resources\\scripts\\models.js":1473780574709,"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\resources\\scripts\\util.js":1473779280729,"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\node_modules\\moment\\min\\moment.min.js":1474175905832,"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\resources\\scripts\\components\\chat-pane.js":1473821329525,"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\node_modules\\bootstrap\\dist\\js\\bootstrap.js":1474175906589,"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\resources\\scripts\\components\\login.js":1473780077651,"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\resources\\scripts\\knockout-bootstrapped.js":1473777556022,"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\resources\\scripts\\main.js":1474176227614},"dependentFiles":{"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\resources\\scripts\\components/channel-list.html":{"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\resources\\scripts\\components\\channel-list.js":true},"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\resources\\scripts\\components/chat-pane.html":{"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\resources\\scripts\\components\\chat-pane.js":true},"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\resources\\scripts\\components/login.html":{"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\resources\\scripts\\components\\login.js":true},"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\resources\\scripts\\components/user-list.html":{"C:\\Users\\koise\\Desktop\\git\\Chat-Backend\\resources\\scripts\\components\\user-list.js":true}}}